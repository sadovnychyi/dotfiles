{"index":"<h1>Node.js</h1>  <ul> <li><a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html\">About these Docs</a></li> <li><a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/synopsis.html\">Usage &amp; Example</a></li> </ul>  <ul> <li><a href=\"assert\">Assertion Testing</a></li> <li><a href=\"buffer\">Buffer</a></li> <li><a href=\"addons\">C/C++ Addons</a></li> <li><a href=\"n-api\">C/C++ Addons - N-API</a></li> <li><a href=\"child_process\">Child Processes</a></li> <li><a href=\"cluster\">Cluster</a></li> <li><a href=\"cli\">Command Line Options</a></li> <li><a href=\"console\">Console</a></li> <li><a href=\"crypto\">Crypto</a></li> <li><a href=\"debugger\">Debugger</a></li> <li><a href=\"deprecations\">Deprecated APIs</a></li> <li><a href=\"dns\">DNS</a></li> <li><a href=\"domain\">Domain</a></li> <li><a href=\"errors\">Errors</a></li> <li><a href=\"events\">Events</a></li> <li><a href=\"fs\">File System</a></li> <li><a href=\"globals\">Globals</a></li> <li><a href=\"http\">HTTP</a></li> <li><a href=\"https\">HTTPS</a></li> <li><a href=\"modules\">Modules</a></li> <li><a href=\"net\">Net</a></li> <li><a href=\"os\">OS</a></li> <li><a href=\"path\">Path</a></li> <li><a href=\"process\">Process</a></li> <li><a href=\"punycode\">Punycode</a></li> <li><a href=\"querystring\">Query Strings</a></li> <li><a href=\"readline\">Readline</a></li> <li><a href=\"repl\">REPL</a></li> <li><a href=\"stream\">Stream</a></li> <li><a href=\"string_decoder\">String Decoder</a></li> <li><a href=\"timers\">Timers</a></li> <li><a href=\"tls\">TLS/SSL</a></li> <li><a href=\"tracing\">Tracing</a></li> <li><a href=\"tty\">TTY</a></li> <li><a href=\"dgram\">UDP/Datagram</a></li> <li><a href=\"url\">URL</a></li> <li><a href=\"util\">Utilities</a></li> <li><a href=\"v8\">V8</a></li> <li><a href=\"vm\">VM</a></li> <li><a href=\"zlib\">ZLIB</a></li> </ul>  <ul> <li><a href=\"https://github.com/nodejs/node\">GitHub Repo &amp; Issue Tracker</a></li> <li><a href=\"http://groups.google.com/group/nodejs\">Mailing List</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/</a>\n  </p>\n</div>\n","console":"<h1 id=\"console_console\">Console</h1> <div class=\"api_stability api_stability_2\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</div>\n<p>The <code>console</code> module provides a simple debugging console that is similar to the JavaScript console mechanism provided by web browsers.</p> <p>The module exports two specific components:</p> <ul> <li>A <code>Console</code> class with methods such as <code>console.log()</code>, <code>console.error()</code> and <code>console.warn()</code> that can be used to write to any Node.js stream.</li> <li>A global <code>console</code> instance configured to write to <a href=\"process#process_process_stdout\"><code>process.stdout</code></a> and <a href=\"process#process_process_stderr\"><code>process.stderr</code></a>. The global <code>console</code> can be used without calling <code>require('console')</code>.</li> </ul> <p><strong><em>Warning</em></strong>: The global console object's methods are neither consistently synchronous like the browser APIs they resemble, nor are they consistently asynchronous like all other Node.js streams. See the <a href=\"process#process_a_note_on_process_i_o\">note on process I/O</a> for more information.</p> <p>Example using the global <code>console</code>:</p> <pre data-language=\"js\">console.log('hello world');\n// Prints: hello world, to stdout\nconsole.log('hello %s', 'world');\n// Prints: hello world, to stdout\nconsole.error(new Error('Whoops, something bad happened'));\n// Prints: [Error: Whoops, something bad happened], to stderr\n\nconst name = 'Will Robinson';\nconsole.warn(`Danger ${name}! Danger!`);\n// Prints: Danger Will Robinson! Danger!, to stderr\n</pre> <p>Example using the <code>Console</code> class:</p> <pre data-language=\"js\">const out = getStreamSomehow();\nconst err = getStreamSomehow();\nconst myConsole = new console.Console(out, err);\n\nmyConsole.log('hello world');\n// Prints: hello world, to out\nmyConsole.log('hello %s', 'world');\n// Prints: hello world, to out\nmyConsole.error(new Error('Whoops, something bad happened'));\n// Prints: [Error: Whoops, something bad happened], to err\n\nconst name = 'Will Robinson';\nmyConsole.warn(`Danger ${name}! Danger!`);\n// Prints: Danger Will Robinson! Danger!, to err\n</pre> <h2 id=\"console_class_console\">Class: Console</h2>  <p>The <code>Console</code> class can be used to create a simple logger with configurable output streams and can be accessed using either <code>require('console').Console</code> or <code>console.Console</code>:</p> <pre data-language=\"js\">const Console = require('console').Console;\n</pre> <pre data-language=\"js\">const Console = console.Console;\n</pre> <h3 id=\"console_new_console_stdout_stderr\">new Console(stdout[, stderr])</h3> <div class=\"signature\">\n<ul> <li>\n<code>stdout</code> <span class=\"type\">&lt;Writable&gt;</span>\n</li> <li>\n<code>stderr</code> <span class=\"type\">&lt;Writable&gt;</span>\n</li> </ul> </div>\n<p>Creates a new <code>Console</code> by passing one or two writable stream instances. <code>stdout</code> is a writable stream to print log or info output. <code>stderr</code> is used for warning or error output. If <code>stderr</code> is not passed, warning and error output will be sent to <code>stdout</code>.</p> <pre data-language=\"js\">const output = fs.createWriteStream('./stdout.log');\nconst errorOutput = fs.createWriteStream('./stderr.log');\n// custom simple logger\nconst logger = new Console(output, errorOutput);\n// use it like console\nconst count = 5;\nlogger.log('count: %d', count);\n// in stdout.log: count 5\n</pre> <p>The global <code>console</code> is a special <code>Console</code> whose output is sent to <a href=\"process#process_process_stdout\"><code>process.stdout</code></a> and <a href=\"process#process_process_stderr\"><code>process.stderr</code></a>. It is equivalent to calling:</p> <pre data-language=\"js\">new Console(process.stdout, process.stderr);\n</pre> <h3 id=\"console_console_assert_value_message_args\">console.assert(value[, message][, ...args])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.101</span> </div>\n<ul> <li>\n<code>value</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>message</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>...args</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>A simple assertion test that verifies whether <code>value</code> is truthy. If it is not, an <code>AssertionError</code> is thrown. If provided, the error <code>message</code> is formatted using <a href=\"util#util_util_format_format_args\"><code>util.format()</code></a> and used as the error message.</p> <pre data-language=\"js\">console.assert(true, 'does nothing');\n// OK\nconsole.assert(false, 'Whoops %s', 'didn\\'t work');\n// AssertionError: Whoops didn't work\n</pre> <p><em>Note: the <code>console.assert()</code> method is implemented differently in Node.js than the <code>console.assert()</code> method <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/console/assert\">available in browsers</a>.</em></p> <p>Specifically, in browsers, calling <code>console.assert()</code> with a falsy assertion will cause the <code>message</code> to be printed to the console without interrupting execution of subsequent code. In Node.js, however, a falsy assertion will cause an <code>AssertionError</code> to be thrown.</p> <p>Functionality approximating that implemented by browsers can be implemented by extending Node.js' <code>console</code> and overriding the <code>console.assert()</code> method.</p> <p>In the following example, a simple module is created that extends and overrides the default behavior of <code>console</code> in Node.js.</p> <pre data-language=\"js\">'use strict';\n\n// Creates a simple extension of console with a\n// new impl for assert without monkey-patching.\nconst myConsole = Object.create(console, {\n  assert: {\n    value: function assert(assertion, message, ...args) {\n      try {\n        console.assert(assertion, message, ...args);\n      } catch (err) {\n        console.error(err.stack);\n      }\n    },\n    configurable: true,\n    enumerable: true,\n    writable: true,\n  },\n});\n\nmodule.exports = myConsole;\n</pre> <p>This can then be used as a direct replacement for the built in console:</p> <pre data-language=\"js\">const console = require('./myConsole');\nconsole.assert(false, 'this message will print, but no error thrown');\nconsole.log('this will also print');\n</pre> <h3 id=\"console_console_dir_obj_options\">console.dir(obj[, options])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.101</span> </div>\n<ul> <li>\n<code>obj</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>showHidden</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a>\n</li> <li>\n<code>depth</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> <li>\n<code>colors</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a>\n</li> </ul> </li> </ul> <p>Uses <a href=\"util#util_util_inspect_object_options\"><code>util.inspect()</code></a> on <code>obj</code> and prints the resulting string to <code>stdout</code>. This function bypasses any custom <code>inspect()</code> function defined on <code>obj</code>. An optional <code>options</code> object may be passed to alter certain aspects of the formatted string:</p> <ul> <li>\n<p><code>showHidden</code> - if <code>true</code> then the object's non-enumerable and symbol properties will be shown too. Defaults to <code>false</code>.</p> </li> <li>\n<p><code>depth</code> - tells <a href=\"util#util_util_inspect_object_options\"><code>util.inspect()</code></a> how many times to recurse while formatting the object. This is useful for inspecting large complicated objects. Defaults to <code>2</code>. To make it recurse indefinitely, pass <code>null</code>.</p> </li> <li>\n<p><code>colors</code> - if <code>true</code>, then the output will be styled with ANSI color codes. Defaults to <code>false</code>. Colors are customizable; see <a href=\"util#util_customizing_util_inspect_colors\">customizing <code>util.inspect()</code> colors</a>.</p> </li> </ul> <h3 id=\"console_console_error_data_args\">console.error([data][, ...args])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.100</span> </div>\n<ul> <li>\n<code>data</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>...args</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Prints to <code>stderr</code> with newline. Multiple arguments can be passed, with the first used as the primary message and all additional used as substitution values similar to <a href=\"http://man7.org/linux/man-pages/man3/printf.3.html\">printf(3)</a> (the arguments are all passed to <a href=\"util#util_util_format_format_args\"><code>util.format()</code></a>).</p> <pre data-language=\"js\">const code = 5;\nconsole.error('error #%d', code);\n// Prints: error #5, to stderr\nconsole.error('error', code);\n// Prints: error 5, to stderr\n</pre> <p>If formatting elements (e.g. <code>%d</code>) are not found in the first string then <a href=\"util#util_util_inspect_object_options\"><code>util.inspect()</code></a> is called on each argument and the resulting string values are concatenated. See <a href=\"util#util_util_format_format_args\"><code>util.format()</code></a> for more information.</p> <h3 id=\"console_console_info_data_args\">console.info([data][, ...args])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.100</span> </div>\n<ul> <li>\n<code>data</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>...args</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>The <code>console.info()</code> function is an alias for <a href=\"#console_console_log_data_args\"><code>console.log()</code></a>.</p> <h3 id=\"console_console_log_data_args\">console.log([data][, ...args])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.100</span> </div>\n<ul> <li>\n<code>data</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>...args</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Prints to <code>stdout</code> with newline. Multiple arguments can be passed, with the first used as the primary message and all additional used as substitution values similar to <a href=\"http://man7.org/linux/man-pages/man3/printf.3.html\">printf(3)</a> (the arguments are all passed to <a href=\"util#util_util_format_format_args\"><code>util.format()</code></a>).</p> <pre data-language=\"js\">const count = 5;\nconsole.log('count: %d', count);\n// Prints: count: 5, to stdout\nconsole.log('count:', count);\n// Prints: count: 5, to stdout\n</pre> <p>If formatting elements (e.g. <code>%d</code>) are not found in the first string then <a href=\"util#util_util_inspect_object_options\"><code>util.inspect()</code></a> is called on each argument and the resulting string values are concatenated. See <a href=\"util#util_util_format_format_args\"><code>util.format()</code></a> for more information.</p> <h3 id=\"console_console_time_label\">console.time(label)</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.104</span> </div>\n<ul> <li>\n<code>label</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>Starts a timer that can be used to compute the duration of an operation. Timers are identified by a unique <code>label</code>. Use the same <code>label</code> when you call <a href=\"#console_console_timeend_label\"><code>console.timeEnd()</code></a> to stop the timer and output the elapsed time in milliseconds to <code>stdout</code>. Timer durations are accurate to the sub-millisecond.</p> <h3 id=\"console_console_timeend_label\">console.timeEnd(label)</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>This method no longer supports multiple calls that don’t map to individual <code>console.time()</code> calls; see below for details.</p> </td>\n</tr> <tr>\n<td>v0.1.104</td> <td>\n<p><span>Added in: v0.1.104</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>label</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>Stops a timer that was previously started by calling <a href=\"#console_console_time_label\"><code>console.time()</code></a> and prints the result to <code>stdout</code>:</p> <pre data-language=\"js\">console.time('100-elements');\nfor (let i = 0; i &lt; 100; i++) {\n  ;\n}\nconsole.timeEnd('100-elements');\n// prints 100-elements: 225.438ms\n</pre> <p><em>Note: As of Node.js v6.0.0, <code>console.timeEnd()</code> deletes the timer to avoid leaking it. On older versions, the timer persisted. This allowed <code>console.timeEnd()</code> to be called multiple times for the same label. This functionality was unintended and is no longer supported.</em></p> <h3 id=\"console_console_trace_message_args\">console.trace([message][, ...args])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.104</span> </div>\n<ul> <li>\n<code>message</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>...args</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Prints to <code>stderr</code> the string <code>'Trace :'</code>, followed by the <a href=\"util#util_util_format_format_args\"><code>util.format()</code></a> formatted message and stack trace to the current position in the code.</p> <pre data-language=\"js\">console.trace('Show me');\n// Prints: (stack trace will vary based on where trace is called)\n//  Trace: Show me\n//    at repl:2:9\n//    at REPLServer.defaultEval (repl.js:248:27)\n//    at bound (domain.js:287:14)\n//    at REPLServer.runBound [as eval] (domain.js:300:12)\n//    at REPLServer.&lt;anonymous&gt; (repl.js:412:12)\n//    at emitOne (events.js:82:20)\n//    at REPLServer.emit (events.js:169:7)\n//    at REPLServer.Interface._onLine (readline.js:210:10)\n//    at REPLServer.Interface._line (readline.js:549:8)\n//    at REPLServer.Interface._ttyWrite (readline.js:826:14)\n</pre> <h3 id=\"console_console_warn_data_args\">console.warn([data][, ...args])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.100</span> </div>\n<ul> <li>\n<code>data</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>...args</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>The <code>console.warn()</code> function is an alias for <a href=\"#console_console_error_data_args\"><code>console.error()</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/console.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/console.html</a>\n  </p>\n</div>\n","dns":"<h1 id=\"dns_dns\">DNS</h1> <div class=\"api_stability api_stability_2\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</div>\n<p>The <code>dns</code> module contains functions belonging to two different categories:</p> <p>1) Functions that use the underlying operating system facilities to perform name resolution, and that do not necessarily perform any network communication. This category contains only one function: <a href=\"#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a>. <strong>Developers looking to perform name resolution in the same way that other applications on the same operating system behave should use <a href=\"#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a>.</strong></p> <p>For example, looking up <code>iana.org</code>.</p> <pre data-language=\"js\">const dns = require('dns');\n\ndns.lookup('iana.org', (err, address, family) =&gt; {\n  console.log('address: %j family: IPv%s', address, family);\n});\n// address: \"192.0.43.8\" family: IPv4\n</pre> <p>2) Functions that connect to an actual DNS server to perform name resolution, and that <em>always</em> use the network to perform DNS queries. This category contains all functions in the <code>dns</code> module <em>except</em> <a href=\"#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a>. These functions do not use the same set of configuration files used by <a href=\"#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a> (e.g. <code>/etc/hosts</code>). These functions should be used by developers who do not want to use the underlying operating system's facilities for name resolution, and instead want to <em>always</em> perform DNS queries.</p> <p>Below is an example that resolves <code>'archive.org'</code> then reverse resolves the IP addresses that are returned.</p> <pre data-language=\"js\">const dns = require('dns');\n\ndns.resolve4('archive.org', (err, addresses) =&gt; {\n  if (err) throw err;\n\n  console.log(`addresses: ${JSON.stringify(addresses)}`);\n\n  addresses.forEach((a) =&gt; {\n    dns.reverse(a, (err, hostnames) =&gt; {\n      if (err) {\n        throw err;\n      }\n      console.log(`reverse for ${a}: ${JSON.stringify(hostnames)}`);\n    });\n  });\n});\n</pre> <p>There are subtle consequences in choosing one over the other, please consult the <a href=\"#dns_implementation_considerations\">Implementation considerations section</a> for more information.</p> <h2 id=\"dns_dns_getservers\">dns.getServers()</h2> <div class=\"api_metadata\"> <span>Added in: v0.11.3</span> </div>\n<p>Returns an array of IP address strings that are being used for name resolution.</p> <h2 id=\"dns_dns_lookup_hostname_options_callback\">dns.lookup(hostname[, options], callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v1.2.0</td> <td>\n<p>The <code>all</code> option is supported now.</p> </td>\n</tr> <tr>\n<td>v0.1.90</td> <td>\n<p><span>Added in: v0.1.90</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>hostname</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>family</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The record family. Must be <code>4</code> or <code>6</code>. IPv4 and IPv6 addresses are both returned by default.</li> <li>\n<code>hints</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> One or more <a href=\"#dns_supported_getaddrinfo_flags\">supported <code>getaddrinfo</code> flags</a>. Multiple flags may be passed by bitwise <code>OR</code>ing their values.</li> <li>\n<code>all</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> When <code>true</code>, the callback returns all resolved addresses in an array. Otherwise, returns a single address. Defaults to <code>false</code>.</li> </ul> </li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a><ul> <li>\n<code>err</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a>\n</li> <li>\n<code>address</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> A string representation of an IPv4 or IPv6 address.</li> <li>\n<code>family</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> <code>4</code> or <code>6</code>, denoting the family of <code>address</code>.</li> </ul> </li> </ul> <p>Resolves a hostname (e.g. <code>'nodejs.org'</code>) into the first found A (IPv4) or AAAA (IPv6) record. All <code>option</code> properties are optional. If <code>options</code> is an integer, then it must be <code>4</code> or <code>6</code> – if <code>options</code> is not provided, then IPv4 and IPv6 addresses are both returned if found.</p> <p>With the <code>all</code> option set to <code>true</code>, the arguments for <code>callback</code> change to <code>(err, addresses)</code>, with <code>addresses</code> being an array of objects with the properties <code>address</code> and <code>family</code>.</p> <p>On error, <code>err</code> is an <a href=\"errors#errors_class_error\"><code>Error</code></a> object, where <code>err.code</code> is the error code. Keep in mind that <code>err.code</code> will be set to <code>'ENOENT'</code> not only when the hostname does not exist but also when the lookup fails in other ways such as no available file descriptors.</p> <p><code>dns.lookup()</code> does not necessarily have anything to do with the DNS protocol. The implementation uses an operating system facility that can associate names with addresses, and vice versa. This implementation can have subtle but important consequences on the behavior of any Node.js program. Please take some time to consult the <a href=\"#dns_implementation_considerations\">Implementation considerations section</a> before using <code>dns.lookup()</code>.</p> <p>Example usage:</p> <pre data-language=\"js\">const dns = require('dns');\nconst options = {\n  family: 6,\n  hints: dns.ADDRCONFIG | dns.V4MAPPED,\n};\ndns.lookup('example.com', options, (err, address, family) =&gt;\n  console.log('address: %j family: IPv%s', address, family));\n// address: \"2606:2800:220:1:248:1893:25c8:1946\" family: IPv6\n\n// When options.all is true, the result will be an Array.\noptions.all = true;\ndns.lookup('example.com', options, (err, addresses) =&gt;\n  console.log('addresses: %j', addresses));\n// addresses: [{\"address\":\"2606:2800:220:1:248:1893:25c8:1946\",\"family\":6}]\n</pre> <h3 id=\"dns_supported_getaddrinfo_flags\">Supported getaddrinfo flags</h3> <p>The following flags can be passed as hints to <a href=\"#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a>.</p> <ul> <li>\n<code>dns.ADDRCONFIG</code>: Returned address types are determined by the types of addresses supported by the current system. For example, IPv4 addresses are only returned if the current system has at least one IPv4 address configured. Loopback addresses are not considered.</li> <li>\n<code>dns.V4MAPPED</code>: If the IPv6 family was specified, but no IPv6 addresses were found, then return IPv4 mapped IPv6 addresses. Note that it is not supported on some operating systems (e.g FreeBSD 10.1).</li> </ul> <h2 id=\"dns_dns_lookupservice_address_port_callback\">dns.lookupService(address, port, callback)</h2> <div class=\"api_metadata\"> <span>Added in: v0.11.14</span> </div>\n<ul> <li>\n<code>address</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>port</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a><ul> <li>\n<code>err</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a>\n</li> <li>\n<code>hostname</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> e.g. <code>example.com</code>\n</li> <li>\n<code>service</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> e.g. <code>http</code>\n</li> </ul> </li> </ul> <p>Resolves the given <code>address</code> and <code>port</code> into a hostname and service using the operating system's underlying <code>getnameinfo</code> implementation.</p> <p>If <code>address</code> is not a valid IP address, a <code>TypeError</code> will be thrown. The <code>port</code> will be coerced to a number. If it is not a legal port, a <code>TypeError</code> will be thrown.</p> <p>On an error, <code>err</code> is an <a href=\"errors#errors_class_error\"><code>Error</code></a> object, where <code>err.code</code> is the error code.</p> <pre data-language=\"js\">const dns = require('dns');\ndns.lookupService('127.0.0.1', 22, (err, hostname, service) =&gt; {\n  console.log(hostname, service);\n  // Prints: localhost ssh\n});\n</pre> <h2 id=\"dns_dns_resolve_hostname_rrtype_callback\">dns.resolve(hostname[, rrtype], callback)</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.27</span> </div>\n<ul> <li>\n<code>hostname</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Hostname to resolve.</li> <li>\n<code>rrtype</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Resource record type. Default: <code>'A'</code>.</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a><ul> <li>\n<code>err</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a>\n</li> <li>\n<code>records</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object[]&gt;</a> | <span class=\"type\">&lt;string[][]&gt;</span> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> </ul> </li> </ul> <p>Uses the DNS protocol to resolve a hostname (e.g. <code>'nodejs.org'</code>) into an array of the resource records. The <code>callback</code> function has arguments <code>(err, records)</code>. When successful, <code>records</code> will be an array of resource records. The type and structure of individual results varies based on <code>rrtype</code>:</p> <table> <thead> <tr> <th><code>rrtype</code></th> <th>\n<code>records</code> contains</th> <th>Result type</th> <th>Shorthand method</th> </tr> </thead> <tbody> <tr> <td><code>'A'</code></td> <td>IPv4 addresses (default)</td> <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></td> <td><a href=\"#dns_dns_resolve4_hostname_options_callback\"><code>dns.resolve4()</code></a></td> </tr> <tr> <td><code>'AAAA'</code></td> <td>IPv6 addresses</td> <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></td> <td><a href=\"#dns_dns_resolve6_hostname_options_callback\"><code>dns.resolve6()</code></a></td> </tr> <tr> <td><code>'CNAME'</code></td> <td>canonical name records</td> <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></td> <td><a href=\"#dns_dns_resolvecname_hostname_callback\"><code>dns.resolveCname()</code></a></td> </tr> <tr> <td><code>'MX'</code></td> <td>mail exchange records</td> <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></td> <td><a href=\"#dns_dns_resolvemx_hostname_callback\"><code>dns.resolveMx()</code></a></td> </tr> <tr> <td><code>'NAPTR'</code></td> <td>name authority pointer records</td> <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></td> <td><a href=\"#dns_dns_resolvenaptr_hostname_callback\"><code>dns.resolveNaptr()</code></a></td> </tr> <tr> <td><code>'NS'</code></td> <td>name server records</td> <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></td> <td><a href=\"#dns_dns_resolvens_hostname_callback\"><code>dns.resolveNs()</code></a></td> </tr> <tr> <td><code>'PTR'</code></td> <td>pointer records</td> <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></td> <td><a href=\"#dns_dns_resolveptr_hostname_callback\"><code>dns.resolvePtr()</code></a></td> </tr> <tr> <td><code>'SOA'</code></td> <td>start of authority records</td> <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></td> <td><a href=\"#dns_dns_resolvesoa_hostname_callback\"><code>dns.resolveSoa()</code></a></td> </tr> <tr> <td><code>'SRV'</code></td> <td>service records</td> <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></td> <td><a href=\"#dns_dns_resolvesrv_hostname_callback\"><code>dns.resolveSrv()</code></a></td> </tr> <tr> <td><code>'TXT'</code></td> <td>text records</td> <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></td> <td><a href=\"#dns_dns_resolvetxt_hostname_callback\"><code>dns.resolveTxt()</code></a></td> </tr> </tbody> </table> <p>On error, <code>err</code> is an <a href=\"errors#errors_class_error\"><code>Error</code></a> object, where <code>err.code</code> is one of the <a href=\"#dns_error_codes\">DNS error codes</a>.</p> <h2 id=\"dns_dns_resolve4_hostname_options_callback\">dns.resolve4(hostname[, options], callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.2.0</td> <td>\n<p>This method now supports passing <code>options</code>, specifically <code>options.ttl</code>.</p> </td>\n</tr> <tr>\n<td>v0.1.16</td> <td>\n<p><span>Added in: v0.1.16</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>hostname</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Hostname to resolve.</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>ttl</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Retrieve the Time-To-Live value (TTL) of each record. When <code>true</code>, the callback receives an array of <code>{ address: '1.2.3.4', ttl: 60 }</code> objects rather than an array of strings, with the TTL expressed in seconds.</li> </ul> </li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a><ul> <li>\n<code>err</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a>\n</li> <li>\n<code>addresses</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object[]&gt;</a>\n</li> </ul> </li> </ul> <p>Uses the DNS protocol to resolve a IPv4 addresses (<code>A</code> records) for the <code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will contain an array of IPv4 addresses (e.g. <code>['74.125.79.104', '74.125.79.105', '74.125.79.106']</code>).</p> <h2 id=\"dns_dns_resolve6_hostname_options_callback\">dns.resolve6(hostname[, options], callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.2.0</td> <td>\n<p>This method now supports passing <code>options</code>, specifically <code>options.ttl</code>.</p> </td>\n</tr> <tr>\n<td>v0.1.16</td> <td>\n<p><span>Added in: v0.1.16</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>hostname</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Hostname to resolve.</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>ttl</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Retrieve the Time-To-Live value (TTL) of each record. When <code>true</code>, the callback receives an array of <code>{ address: '0:1:2:3:4:5:6:7', ttl: 60 }</code> objects rather than an array of strings, with the TTL expressed in seconds.</li> </ul> </li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a><ul> <li>\n<code>err</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a>\n</li> <li>\n<code>addresses</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object[]&gt;</a>\n</li> </ul> </li> </ul> <p>Uses the DNS protocol to resolve a IPv6 addresses (<code>AAAA</code> records) for the <code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will contain an array of IPv6 addresses.</p> <h2 id=\"dns_dns_resolvecname_hostname_callback\">dns.resolveCname(hostname, callback)</h2> <div class=\"api_metadata\"> <span>Added in: v0.3.2</span> </div>\n<ul> <li>\n<code>hostname</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a><ul> <li>\n<code>err</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a>\n</li> <li>\n<code>addresses</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a>\n</li> </ul> </li> </ul> <p>Uses the DNS protocol to resolve <code>CNAME</code> records for the <code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will contain an array of canonical name records available for the <code>hostname</code> (e.g. <code>['bar.example.com']</code>).</p> <h2 id=\"dns_dns_resolvemx_hostname_callback\">dns.resolveMx(hostname, callback)</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.27</span> </div>\n<ul> <li>\n<code>hostname</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a><ul> <li>\n<code>err</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a>\n</li> <li>\n<code>addresses</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object[]&gt;</a>\n</li> </ul> </li> </ul> <p>Uses the DNS protocol to resolve mail exchange records (<code>MX</code> records) for the <code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will contain an array of objects containing both a <code>priority</code> and <code>exchange</code> property (e.g. <code>[{priority: 10, exchange: 'mx.example.com'}, ...]</code>).</p> <h2 id=\"dns_dns_resolvenaptr_hostname_callback\">dns.resolveNaptr(hostname, callback)</h2> <div class=\"api_metadata\"> <span>Added in: v0.9.12</span> </div>\n<ul> <li>\n<code>hostname</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a><ul> <li>\n<code>err</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a>\n</li> <li>\n<code>addresses</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object[]&gt;</a>\n</li> </ul> </li> </ul> <p>Uses the DNS protocol to resolve regular expression based records (<code>NAPTR</code> records) for the <code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will contain an array of objects with the following properties:</p> <ul> <li><code>flags</code></li> <li><code>service</code></li> <li><code>regexp</code></li> <li><code>replacement</code></li> <li><code>order</code></li> <li><code>preference</code></li> </ul> <p>For example:</p> <pre data-language=\"js\">{\n  flags: 's',\n  service: 'SIP+D2U',\n  regexp: '',\n  replacement: '_sip._udp.example.com',\n  order: 30,\n  preference: 100\n}\n</pre> <h2 id=\"dns_dns_resolvens_hostname_callback\">dns.resolveNs(hostname, callback)</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<ul> <li>\n<code>hostname</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a><ul> <li>\n<code>err</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a>\n</li> <li>\n<code>addresses</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a>\n</li> </ul> </li> </ul> <p>Uses the DNS protocol to resolve name server records (<code>NS</code> records) for the <code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will contain an array of name server records available for <code>hostname</code> (e.g. <code>['ns1.example.com', 'ns2.example.com']</code>).</p> <h2 id=\"dns_dns_resolveptr_hostname_callback\">dns.resolvePtr(hostname, callback)</h2> <div class=\"api_metadata\"> <span>Added in: v6.0.0</span> </div>\n<ul> <li>\n<code>hostname</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a><ul> <li>\n<code>err</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a>\n</li> <li>\n<code>addresses</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a>\n</li> </ul> </li> </ul> <p>Uses the DNS protocol to resolve pointer records (<code>PTR</code> records) for the <code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will be an array of strings containing the reply records.</p> <h2 id=\"dns_dns_resolvesoa_hostname_callback\">dns.resolveSoa(hostname, callback)</h2> <div class=\"api_metadata\"> <span>Added in: v0.11.10</span> </div>\n<ul> <li>\n<code>hostname</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a><ul> <li>\n<code>err</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a>\n</li> <li>\n<code>address</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> </ul> </li> </ul> <p>Uses the DNS protocol to resolve a start of authority record (<code>SOA</code> record) for the <code>hostname</code>. The <code>address</code> argument passed to the <code>callback</code> function will be an object with the following properties:</p> <ul> <li><code>nsname</code></li> <li><code>hostmaster</code></li> <li><code>serial</code></li> <li><code>refresh</code></li> <li><code>retry</code></li> <li><code>expire</code></li> <li><code>minttl</code></li> </ul> <pre data-language=\"js\">{\n  nsname: 'ns.example.com',\n  hostmaster: 'root.example.com',\n  serial: 2013101809,\n  refresh: 10000,\n  retry: 2400,\n  expire: 604800,\n  minttl: 3600\n}\n</pre> <h2 id=\"dns_dns_resolvesrv_hostname_callback\">dns.resolveSrv(hostname, callback)</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.27</span> </div>\n<ul> <li>\n<code>hostname</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a><ul> <li>\n<code>err</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a>\n</li> <li>\n<code>addresses</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object[]&gt;</a>\n</li> </ul> </li> </ul> <p>Uses the DNS protocol to resolve service records (<code>SRV</code> records) for the <code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will be an array of objects with the following properties:</p> <ul> <li><code>priority</code></li> <li><code>weight</code></li> <li><code>port</code></li> <li><code>name</code></li> </ul> <pre data-language=\"js\">{\n  priority: 10,\n  weight: 5,\n  port: 21223,\n  name: 'service.example.com'\n}\n</pre> <h2 id=\"dns_dns_resolvetxt_hostname_callback\">dns.resolveTxt(hostname, callback)</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.27</span> </div>\n<ul> <li>\n<code>hostname</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a><ul> <li>\n<code>err</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a>\n</li> <li>\n<code>addresses</code> <span class=\"type\">&lt;string[][]&gt;</span>\n</li> </ul> </li> </ul> <p>Uses the DNS protocol to resolve text queries (<code>TXT</code> records) for the <code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function is is a two-dimensional array of the text records available for <code>hostname</code> (e.g., <code>[ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]</code>). Each sub-array contains TXT chunks of one record. Depending on the use case, these could be either joined together or treated separately.</p> <h2 id=\"dns_dns_reverse_ip_callback\">dns.reverse(ip, callback)</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.16</span> </div>\n<ul> <li>\n<code>ip</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a><ul> <li>\n<code>err</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a>\n</li> <li>\n<code>hostnames</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a>\n</li> </ul> </li> </ul> <p>Performs a reverse DNS query that resolves an IPv4 or IPv6 address to an array of hostnames.</p> <p>On error, <code>err</code> is an <a href=\"errors#errors_class_error\"><code>Error</code></a> object, where <code>err.code</code> is one of the <a href=\"#dns_error_codes\">DNS error codes</a>.</p> <h2 id=\"dns_dns_setservers_servers\">dns.setServers(servers)</h2> <div class=\"api_metadata\"> <span>Added in: v0.11.3</span> </div>\n<ul> <li>\n<code>servers</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a>\n</li> </ul> <p>Sets the IP addresses of the servers to be used when resolving. The <code>servers</code> argument is an array of IPv4 or IPv6 addresses.</p> <p>If a port is specified on the address, it will be removed.</p> <p>An error will be thrown if an invalid address is provided.</p> <p>The <code>dns.setServers()</code> method must not be called while a DNS query is in progress.</p> <h2 id=\"dns_error_codes\">Error codes</h2> <p>Each DNS query can return one of the following error codes:</p> <ul> <li>\n<code>dns.NODATA</code>: DNS server returned answer with no data.</li> <li>\n<code>dns.FORMERR</code>: DNS server claims query was misformatted.</li> <li>\n<code>dns.SERVFAIL</code>: DNS server returned general failure.</li> <li>\n<code>dns.NOTFOUND</code>: Domain name not found.</li> <li>\n<code>dns.NOTIMP</code>: DNS server does not implement requested operation.</li> <li>\n<code>dns.REFUSED</code>: DNS server refused query.</li> <li>\n<code>dns.BADQUERY</code>: Misformatted DNS query.</li> <li>\n<code>dns.BADNAME</code>: Misformatted hostname.</li> <li>\n<code>dns.BADFAMILY</code>: Unsupported address family.</li> <li>\n<code>dns.BADRESP</code>: Misformatted DNS reply.</li> <li>\n<code>dns.CONNREFUSED</code>: Could not contact DNS servers.</li> <li>\n<code>dns.TIMEOUT</code>: Timeout while contacting DNS servers.</li> <li>\n<code>dns.EOF</code>: End of file.</li> <li>\n<code>dns.FILE</code>: Error reading file.</li> <li>\n<code>dns.NOMEM</code>: Out of memory.</li> <li>\n<code>dns.DESTRUCTION</code>: Channel is being destroyed.</li> <li>\n<code>dns.BADSTR</code>: Misformatted string.</li> <li>\n<code>dns.BADFLAGS</code>: Illegal flags specified.</li> <li>\n<code>dns.NONAME</code>: Given hostname is not numeric.</li> <li>\n<code>dns.BADHINTS</code>: Illegal hints flags specified.</li> <li>\n<code>dns.NOTINITIALIZED</code>: c-ares library initialization not yet performed.</li> <li>\n<code>dns.LOADIPHLPAPI</code>: Error loading iphlpapi.dll.</li> <li>\n<code>dns.ADDRGETNETWORKPARAMS</code>: Could not find GetNetworkParams function.</li> <li>\n<code>dns.CANCELLED</code>: DNS query cancelled.</li> </ul> <h2 id=\"dns_implementation_considerations\">Implementation considerations</h2> <p>Although <a href=\"#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a> and the various <code>dns.resolve*()/dns.reverse()</code> functions have the same goal of associating a network name with a network address (or vice versa), their behavior is quite different. These differences can have subtle but significant consequences on the behavior of Node.js programs.</p> <h3 id=\"dns_dns_lookup\"><code>dns.lookup()</code></h3> <p>Under the hood, <a href=\"#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a> uses the same operating system facilities as most other programs. For instance, <a href=\"#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a> will almost always resolve a given name the same way as the <code>ping</code> command. On most POSIX-like operating systems, the behavior of the <a href=\"#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a> function can be modified by changing settings in <a href=\"http://man7.org/linux/man-pages/man5/nsswitch.conf.5.html\">nsswitch.conf(5)</a> and/or <a href=\"http://man7.org/linux/man-pages/man5/resolv.conf.5.html\">resolv.conf(5)</a>, but note that changing these files will change the behavior of <em>all other programs running on the same operating system</em>.</p> <p>Though the call to <code>dns.lookup()</code> will be asynchronous from JavaScript's perspective, it is implemented as a synchronous call to <a href=\"http://man7.org/linux/man-pages/man3/getaddrinfo.3.html\">getaddrinfo(3)</a> that runs on libuv's threadpool. Because libuv's threadpool has a fixed size, it means that if for whatever reason the call to <a href=\"http://man7.org/linux/man-pages/man3/getaddrinfo.3.html\">getaddrinfo(3)</a> takes a long time, other operations that could run on libuv's threadpool (such as filesystem operations) will experience degraded performance. In order to mitigate this issue, one potential solution is to increase the size of libuv's threadpool by setting the <code>'UV_THREADPOOL_SIZE'</code> environment variable to a value greater than <code>4</code> (its current default value). For more information on libuv's threadpool, see <a href=\"http://docs.libuv.org/en/latest/threadpool.html\">the official libuv documentation</a>.</p> <h3 id=\"dns_dns_resolve_dns_resolve_and_dns_reverse\">\n<code>dns.resolve()</code>, <code>dns.resolve*()</code> and <code>dns.reverse()</code>\n</h3> <p>These functions are implemented quite differently than <a href=\"#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a>. They do not use <a href=\"http://man7.org/linux/man-pages/man3/getaddrinfo.3.html\">getaddrinfo(3)</a> and they <em>always</em> perform a DNS query on the network. This network communication is always done asynchronously, and does not use libuv's threadpool.</p> <p>As a result, these functions cannot have the same negative impact on other processing that happens on libuv's threadpool that <a href=\"#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a> can have.</p> <p>They do not use the same set of configuration files than what <a href=\"#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a> uses. For instance, <em>they do not use the configuration from <code>/etc/hosts</code></em>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/dns.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/dns.html</a>\n  </p>\n</div>\n","assert":"<h1 id=\"assert_assert\">Assert</h1> <div class=\"api_stability api_stability_2\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</div>\n<p>The <code>assert</code> module provides a simple set of assertion tests that can be used to test invariants.</p> <h2 id=\"assert_assert_value_message\">assert(value[, message])</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.9</span> </div>\n<ul> <li>\n<code>value</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>message</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>An alias of <a href=\"#assert_assert_ok_value_message\"><code>assert.ok()</code></a>.</p> <h2 id=\"assert_assert_deepequal_actual_expected_message\">assert.deepEqual(actual, expected[, message])</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.4.0, v4.7.1</td> <td>\n<p>Typed array slices are handled correctly now.</p> </td>\n</tr> <tr>\n<td>v6.1.0, v4.5.0</td> <td>\n<p>Objects with circular references can be used as inputs now.</p> </td>\n</tr> <tr>\n<td>v5.10.1, v4.4.3</td> <td>\n<p>Handle non-<code>Uint8Array</code> typed arrays correctly.</p> </td>\n</tr> <tr>\n<td>v0.1.21</td> <td>\n<p><span>Added in: v0.1.21</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>actual</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>expected</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>message</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Tests for deep equality between the <code>actual</code> and <code>expected</code> parameters. Primitive values are compared with the equal comparison operator ( <code>==</code> ).</p> <p>Only enumerable \"own\" properties are considered. The <code>deepEqual()</code> implementation does not test object prototypes, attached symbols, or non-enumerable properties. This can lead to some potentially surprising results. For example, the following example does not throw an <code>AssertionError</code> because the properties on the <a href=\"errors#errors_class_error\"><code>Error</code></a> object are non-enumerable:</p> <pre data-language=\"js\">// WARNING: This does not throw an AssertionError!\nassert.deepEqual(Error('a'), Error('b'));\n</pre> <p>\"Deep\" equality means that the enumerable \"own\" properties of child objects are evaluated also:</p> <pre data-language=\"js\">const assert = require('assert');\n\nconst obj1 = {\n  a : {\n    b : 1\n  }\n};\nconst obj2 = {\n  a : {\n    b : 2\n  }\n};\nconst obj3 = {\n  a : {\n    b : 1\n  }\n};\nconst obj4 = Object.create(obj1);\n\nassert.deepEqual(obj1, obj1);\n// OK, object is equal to itself\n\nassert.deepEqual(obj1, obj2);\n// AssertionError: { a: { b: 1 } } deepEqual { a: { b: 2 } }\n// values of b are different\n\nassert.deepEqual(obj1, obj3);\n// OK, objects are equal\n\nassert.deepEqual(obj1, obj4);\n// AssertionError: { a: { b: 1 } } deepEqual {}\n// Prototypes are ignored\n</pre> <p>If the values are not equal, an <code>AssertionError</code> is thrown with a <code>message</code> property set equal to the value of the <code>message</code> parameter. If the <code>message</code> parameter is undefined, a default error message is assigned.</p> <h2 id=\"assert_assert_deepstrictequal_actual_expected_message\">assert.deepStrictEqual(actual, expected[, message])</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.4.0, v4.7.1</td> <td>\n<p>Typed array slices are handled correctly now.</p> </td>\n</tr> <tr>\n<td>v6.1.0</td> <td>\n<p>Objects with circular references can be used as inputs now.</p> </td>\n</tr> <tr>\n<td>v5.10.1, v4.4.3</td> <td>\n<p>Handle non-<code>Uint8Array</code> typed arrays correctly.</p> </td>\n</tr> <tr>\n<td>v1.2.0</td> <td>\n<p><span>Added in: v1.2.0</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>actual</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>expected</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>message</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Generally identical to <code>assert.deepEqual()</code> with two exceptions. First, primitive values are compared using the strict equality operator ( <code>===</code> ). Second, object comparisons include a strict equality check of their prototypes.</p> <pre data-language=\"js\">const assert = require('assert');\n\nassert.deepEqual({a:1}, {a:'1'});\n// OK, because 1 == '1'\n\nassert.deepStrictEqual({a:1}, {a:'1'});\n// AssertionError: { a: 1 } deepStrictEqual { a: '1' }\n// because 1 !== '1' using strict equality\n</pre> <p>If the values are not equal, an <code>AssertionError</code> is thrown with a <code>message</code> property set equal to the value of the <code>message</code> parameter. If the <code>message</code> parameter is undefined, a default error message is assigned.</p> <h2 id=\"assert_assert_doesnotthrow_block_error_message\">assert.doesNotThrow(block[, error][, message])</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v5.11.0, v4.4.5</td> <td>\n<p>The <code>message</code> parameter is respected now.</p> </td>\n</tr> <tr>\n<td>v4.2.0</td> <td>\n<p>The <code>error</code> parameter can now be an arrow function.</p> </td>\n</tr> <tr>\n<td>v0.1.21</td> <td>\n<p><span>Added in: v0.1.21</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>block</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> <li>\n<code>error</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\" class=\"type\">&lt;RegExp&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> <li>\n<code>message</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Asserts that the function <code>block</code> does not throw an error. See <a href=\"#assert_assert_throws_block_error_message\"><code>assert.throws()</code></a> for more details.</p> <p>When <code>assert.doesNotThrow()</code> is called, it will immediately call the <code>block</code> function.</p> <p>If an error is thrown and it is the same type as that specified by the <code>error</code> parameter, then an <code>AssertionError</code> is thrown. If the error is of a different type, or if the <code>error</code> parameter is undefined, the error is propagated back to the caller.</p> <p>The following, for instance, will throw the <a href=\"errors#errors_class_typeerror\"><code>TypeError</code></a> because there is no matching error type in the assertion:</p> <pre data-language=\"js\">assert.doesNotThrow(\n  () =&gt; {\n    throw new TypeError('Wrong value');\n  },\n  SyntaxError\n);\n</pre> <p>However, the following will result in an <code>AssertionError</code> with the message 'Got unwanted exception (TypeError)..':</p> <pre data-language=\"js\">assert.doesNotThrow(\n  () =&gt; {\n    throw new TypeError('Wrong value');\n  },\n  TypeError\n);\n</pre> <p>If an <code>AssertionError</code> is thrown and a value is provided for the <code>message</code> parameter, the value of <code>message</code> will be appended to the <code>AssertionError</code> message:</p> <pre data-language=\"js\">assert.doesNotThrow(\n  () =&gt; {\n    throw new TypeError('Wrong value');\n  },\n  TypeError,\n  'Whoops'\n);\n// Throws: AssertionError: Got unwanted exception (TypeError). Whoops\n</pre> <h2 id=\"assert_assert_equal_actual_expected_message\">assert.equal(actual, expected[, message])</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.21</span> </div>\n<ul> <li>\n<code>actual</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>expected</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>message</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Tests shallow, coercive equality between the <code>actual</code> and <code>expected</code> parameters using the equal comparison operator ( <code>==</code> ).</p> <pre data-language=\"js\">const assert = require('assert');\n\nassert.equal(1, 1);\n// OK, 1 == 1\nassert.equal(1, '1');\n// OK, 1 == '1'\n\nassert.equal(1, 2);\n// AssertionError: 1 == 2\nassert.equal({a: {b: 1}}, {a: {b: 1}});\n//AssertionError: { a: { b: 1 } } == { a: { b: 1 } }\n</pre> <p>If the values are not equal, an <code>AssertionError</code> is thrown with a <code>message</code> property set equal to the value of the <code>message</code> parameter. If the <code>message</code> parameter is undefined, a default error message is assigned.</p> <h2 id=\"assert_assert_fail_actual_expected_message_operator\">assert.fail(actual, expected, message, operator)</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.21</span> </div>\n<ul> <li>\n<code>actual</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>expected</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>message</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>operator</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>Throws an <code>AssertionError</code>. If <code>message</code> is falsy, the error message is set as the values of <code>actual</code> and <code>expected</code> separated by the provided <code>operator</code>. Otherwise, the error message is the value of <code>message</code>.</p> <pre data-language=\"js\">const assert = require('assert');\n\nassert.fail(1, 2, undefined, '&gt;');\n// AssertionError: 1 &gt; 2\n\nassert.fail(1, 2, 'whoops', '&gt;');\n// AssertionError: whoops\n</pre> <h2 id=\"assert_assert_iferror_value\">assert.ifError(value)</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.97</span> </div>\n<ul> <li>\n<code>value</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Throws <code>value</code> if <code>value</code> is truthy. This is useful when testing the <code>error</code> argument in callbacks.</p> <pre data-language=\"js\">const assert = require('assert');\n\nassert.ifError(0);\n// OK\nassert.ifError(1);\n// Throws 1\nassert.ifError('error');\n// Throws 'error'\nassert.ifError(new Error());\n// Throws Error\n</pre> <h2 id=\"assert_assert_notdeepequal_actual_expected_message\">assert.notDeepEqual(actual, expected[, message])</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.21</span> </div>\n<ul> <li>\n<code>actual</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>expected</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>message</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Tests for any deep inequality. Opposite of <a href=\"#assert_assert_deepequal_actual_expected_message\"><code>assert.deepEqual()</code></a>.</p> <pre data-language=\"js\">const assert = require('assert');\n\nconst obj1 = {\n  a : {\n    b : 1\n  }\n};\nconst obj2 = {\n  a : {\n    b : 2\n  }\n};\nconst obj3 = {\n  a : {\n    b : 1\n  }\n};\nconst obj4 = Object.create(obj1);\n\nassert.notDeepEqual(obj1, obj1);\n// AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }\n\nassert.notDeepEqual(obj1, obj2);\n// OK, obj1 and obj2 are not deeply equal\n\nassert.notDeepEqual(obj1, obj3);\n// AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }\n\nassert.notDeepEqual(obj1, obj4);\n// OK, obj1 and obj2 are not deeply equal\n</pre> <p>If the values are deeply equal, an <code>AssertionError</code> is thrown with a <code>message</code> property set equal to the value of the <code>message</code> parameter. If the <code>message</code> parameter is undefined, a default error message is assigned.</p> <h2 id=\"assert_assert_notdeepstrictequal_actual_expected_message\">assert.notDeepStrictEqual(actual, expected[, message])</h2> <div class=\"api_metadata\"> <span>Added in: v1.2.0</span> </div>\n<ul> <li>\n<code>actual</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>expected</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>message</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Tests for deep strict inequality. Opposite of <a href=\"#assert_assert_deepstrictequal_actual_expected_message\"><code>assert.deepStrictEqual()</code></a>.</p> <pre data-language=\"js\">const assert = require('assert');\n\nassert.notDeepEqual({a:1}, {a:'1'});\n// AssertionError: { a: 1 } notDeepEqual { a: '1' }\n\nassert.notDeepStrictEqual({a:1}, {a:'1'});\n// OK\n</pre> <p>If the values are deeply and strictly equal, an <code>AssertionError</code> is thrown with a <code>message</code> property set equal to the value of the <code>message</code> parameter. If the <code>message</code> parameter is undefined, a default error message is assigned.</p> <h2 id=\"assert_assert_notequal_actual_expected_message\">assert.notEqual(actual, expected[, message])</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.21</span> </div>\n<ul> <li>\n<code>actual</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>expected</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>message</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Tests shallow, coercive inequality with the not equal comparison operator ( <code>!=</code> ).</p> <pre data-language=\"js\">const assert = require('assert');\n\nassert.notEqual(1, 2);\n// OK\n\nassert.notEqual(1, 1);\n// AssertionError: 1 != 1\n\nassert.notEqual(1, '1');\n// AssertionError: 1 != '1'\n</pre> <p>If the values are equal, an <code>AssertionError</code> is thrown with a <code>message</code> property set equal to the value of the <code>message</code> parameter. If the <code>message</code> parameter is undefined, a default error message is assigned.</p> <h2 id=\"assert_assert_notstrictequal_actual_expected_message\">assert.notStrictEqual(actual, expected[, message])</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.21</span> </div>\n<ul> <li>\n<code>actual</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>expected</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>message</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Tests strict inequality as determined by the strict not equal operator ( <code>!==</code> ).</p> <pre data-language=\"js\">const assert = require('assert');\n\nassert.notStrictEqual(1, 2);\n// OK\n\nassert.notStrictEqual(1, 1);\n// AssertionError: 1 !== 1\n\nassert.notStrictEqual(1, '1');\n// OK\n</pre> <p>If the values are strictly equal, an <code>AssertionError</code> is thrown with a <code>message</code> property set equal to the value of the <code>message</code> parameter. If the <code>message</code> parameter is undefined, a default error message is assigned.</p> <h2 id=\"assert_assert_ok_value_message\">assert.ok(value[, message])</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.21</span> </div>\n<ul> <li>\n<code>value</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>message</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Tests if <code>value</code> is truthy. It is equivalent to <code>assert.equal(!!value, true, message)</code>.</p> <p>If <code>value</code> is not truthy, an <code>AssertionError</code> is thrown with a <code>message</code> property set equal to the value of the <code>message</code> parameter. If the <code>message</code> parameter is <code>undefined</code>, a default error message is assigned.</p> <pre data-language=\"js\">const assert = require('assert');\n\nassert.ok(true);\n// OK\nassert.ok(1);\n// OK\nassert.ok(false);\n// throws \"AssertionError: false == true\"\nassert.ok(0);\n// throws \"AssertionError: 0 == true\"\nassert.ok(false, 'it\\'s false');\n// throws \"AssertionError: it's false\"\n</pre> <h2 id=\"assert_assert_strictequal_actual_expected_message\">assert.strictEqual(actual, expected[, message])</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.21</span> </div>\n<ul> <li>\n<code>actual</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>expected</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>message</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Tests strict equality as determined by the strict equality operator ( <code>===</code> ).</p> <pre data-language=\"js\">const assert = require('assert');\n\nassert.strictEqual(1, 2);\n// AssertionError: 1 === 2\n\nassert.strictEqual(1, 1);\n// OK\n\nassert.strictEqual(1, '1');\n// AssertionError: 1 === '1'\n</pre> <p>If the values are not strictly equal, an <code>AssertionError</code> is thrown with a <code>message</code> property set equal to the value of the <code>message</code> parameter. If the <code>message</code> parameter is undefined, a default error message is assigned.</p> <h2 id=\"assert_assert_throws_block_error_message\">assert.throws(block[, error][, message])</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v4.2.0</td> <td>\n<p>The <code>error</code> parameter can now be an arrow function.</p> </td>\n</tr> <tr>\n<td>v0.1.21</td> <td>\n<p><span>Added in: v0.1.21</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>block</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> <li>\n<code>error</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\" class=\"type\">&lt;RegExp&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> <li>\n<code>message</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Expects the function <code>block</code> to throw an error.</p> <p>If specified, <code>error</code> can be a constructor, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\"><code>RegExp</code></a>, or validation function.</p> <p>If specified, <code>message</code> will be the message provided by the <code>AssertionError</code> if the block fails to throw.</p> <p>Validate instanceof using constructor:</p> <pre data-language=\"js\">assert.throws(\n  () =&gt; {\n    throw new Error('Wrong value');\n  },\n  Error\n);\n</pre> <p>Validate error message using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\"><code>RegExp</code></a>:</p> <pre data-language=\"js\">assert.throws(\n  () =&gt; {\n    throw new Error('Wrong value');\n  },\n  /value/\n);\n</pre> <p>Custom error validation:</p> <pre data-language=\"js\">assert.throws(\n  () =&gt; {\n    throw new Error('Wrong value');\n  },\n  function(err) {\n    if ( (err instanceof Error) &amp;&amp; /value/.test(err) ) {\n      return true;\n    }\n  },\n  'unexpected error'\n);\n</pre> <p>Note that <code>error</code> can not be a string. If a string is provided as the second argument, then <code>error</code> is assumed to be omitted and the string will be used for <code>message</code> instead. This can lead to easy-to-miss mistakes:</p> <pre data-language=\"js\">// THIS IS A MISTAKE! DO NOT DO THIS!\nassert.throws(myFunction, 'missing foo', 'did not throw with expected message');\n\n// Do this instead.\nassert.throws(myFunction, /missing foo/, 'did not throw with expected message');\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/assert.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/assert.html</a>\n  </p>\n</div>\n","deprecations":"<h1 id=\"deprecations_deprecated_apis\">Deprecated APIs</h1> <p>Node.js may deprecate APIs when either: (a) use of the API is considered to be unsafe, (b) an improved alternative API has been made available, or (c) breaking changes to the API are expected in a future major release.</p> <p>Node.js utilizes three kinds of Deprecations:</p> <ul> <li>Documentation-only</li> <li>Runtime</li> <li>End-of-Life</li> </ul> <p>A Documentation-only deprecation is one that is expressed only within the Node.js API docs. These generate no side-effects while running Node.js.</p> <p>A Runtime deprecation will, by default, generate a process warning that will be printed to <code>stderr</code> the first time the deprecated API is used. When the <code>--throw-deprecation</code> command-line flag is used, a Runtime deprecation will cause an error to be thrown.</p> <p>An End-of-Life deprecation is used to identify code that either has been removed or will soon be removed from Node.js.</p> <h2 id=\"deprecations_un_deprecation\">Un-deprecation</h2> <p>From time-to-time the deprecation of an API may be reversed. Such action may happen in either a semver-minor or semver-major release. In such situations, this document will be updated with information relevant to the decision. <em>However, the deprecation identifier will not be modified</em>.</p> <h2 id=\"deprecations_list_of_deprecated_apis\">List of Deprecated APIs</h2>  <h3 id=\"deprecations_dep0062_node_debug\">DEP0062: node --debug</h3> <p>Type: Runtime</p> <p><code>--debug</code> activates the legacy V8 debugger interface, which has been removed as of V8 5.8. It is replaced by Inspector which is activated with <code>--inspect</code> instead.</p>  <h3 id=\"deprecations_dep0063_serverresponse_prototype_writeheader\">DEP0063: ServerResponse.prototype.writeHeader()</h3> <p>Type: Documentation-only</p> <p>The <code>http</code> module <code>ServerResponse.prototype.writeHeader()</code> API has been deprecated. Please use <code>ServerResponse.prototype.writeHead()</code> instead.</p> <p><em>Note</em>: The <code>ServerResponse.prototype.writeHeader()</code> method was never documented as an officially supported API.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/deprecations.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/deprecations.html</a>\n  </p>\n</div>\n","debugger":"<h1 id=\"debugger_debugger\">Debugger</h1> <div class=\"api_stability api_stability_2\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</div> <p>Node.js includes an out-of-process debugging utility accessible via a <a href=\"#debugger_tcp_based_protocol\">TCP-based protocol</a> and built-in debugging client. To use it, start Node.js with the <code>debug</code> argument followed by the path to the script to debug; a prompt will be displayed indicating successful launch of the debugger:</p> <pre data-language=\"txt\">$ node debug myscript.js\n&lt; debugger listening on port 5858\nconnecting... ok\nbreak in /home/indutny/Code/git/indutny/myscript.js:1\n  1 x = 5;\n  2 setTimeout(() =&gt; {\n  3   debugger;\ndebug&gt;\n</pre> <p>Node.js's debugger client is not a full-featured debugger, but simple step and inspection are possible.</p> <p>Inserting the statement <code>debugger;</code> into the source code of a script will enable a breakpoint at that position in the code:</p> <pre data-language=\"js\">// myscript.js\nx = 5;\nsetTimeout(() =&gt; {\n  debugger;\n  console.log('world');\n}, 1000);\nconsole.log('hello');\n</pre> <p>Once the debugger is run, a breakpoint will occur at line 4:</p> <pre data-language=\"txt\">$ node debug myscript.js\n&lt; debugger listening on port 5858\nconnecting... ok\nbreak in /home/indutny/Code/git/indutny/myscript.js:1\n  1 x = 5;\n  2 setTimeout(() =&gt; {\n  3   debugger;\ndebug&gt; cont\n&lt; hello\nbreak in /home/indutny/Code/git/indutny/myscript.js:3\n  1 x = 5;\n  2 setTimeout(() =&gt; {\n  3   debugger;\n  4   console.log('world');\n  5 }, 1000);\ndebug&gt; next\nbreak in /home/indutny/Code/git/indutny/myscript.js:4\n  2 setTimeout(() =&gt; {\n  3   debugger;\n  4   console.log('world');\n  5 }, 1000);\n  6 console.log('hello');\ndebug&gt; repl\nPress Ctrl + C to leave debug repl\n&gt; x\n5\n&gt; 2+2\n4\ndebug&gt; next\n&lt; world\nbreak in /home/indutny/Code/git/indutny/myscript.js:5\n  3   debugger;\n  4   console.log('world');\n  5 }, 1000);\n  6 console.log('hello');\n  7\ndebug&gt; quit\n</pre> <p>The <code>repl</code> command allows code to be evaluated remotely. The <code>next</code> command steps to the next line. Type <code>help</code> to see what other commands are available.</p> <p>Pressing <code>enter</code> without typing a command will repeat the previous debugger command.</p> <h2 id=\"debugger_watchers\">Watchers</h2> <p>It is possible to watch expression and variable values while debugging. On every breakpoint, each expression from the watchers list will be evaluated in the current context and displayed immediately before the breakpoint's source code listing.</p> <p>To begin watching an expression, type <code>watch('my_expression')</code>. The command <code>watchers</code> will print the active watchers. To remove a watcher, type <code>unwatch('my_expression')</code>.</p> <h2 id=\"debugger_command_reference\">Command reference</h2> <h3 id=\"debugger_stepping\">Stepping</h3> <div class=\"signature\">\n<ul> <li>\n<code>cont</code>, <code>c</code> - Continue execution</li> <li>\n<code>next</code>, <code>n</code> - Step next</li> <li>\n<code>step</code>, <code>s</code> - Step in</li> <li>\n<code>out</code>, <code>o</code> - Step out</li> <li>\n<code>pause</code> - Pause running code (like pause button in Developer Tools)</li> </ul> </div>\n<h3 id=\"debugger_breakpoints\">Breakpoints</h3> <div class=\"signature\">\n<ul> <li>\n<code>setBreakpoint()</code>, <code>sb()</code> - Set breakpoint on current line</li> <li>\n<code>setBreakpoint(line)</code>, <code>sb(line)</code> - Set breakpoint on specific line</li> <li>\n<code>setBreakpoint('fn()')</code>, <code>sb(...)</code> - Set breakpoint on a first statement in functions body</li> <li>\n<code>setBreakpoint('script.js', 1)</code>, <code>sb(...)</code> - Set breakpoint on first line of script.js</li> <li>\n<code>clearBreakpoint('script.js', 1)</code>, <code>cb(...)</code> - Clear breakpoint in script.js on line 1</li> </ul> </div>\n<p>It is also possible to set a breakpoint in a file (module) that is not loaded yet:</p> <pre data-language=\"txt\">$ node debug test/fixtures/break-in-module/main.js\n&lt; debugger listening on port 5858\nconnecting to port 5858... ok\nbreak in test/fixtures/break-in-module/main.js:1\n  1 var mod = require('./mod.js');\n  2 mod.hello();\n  3 mod.hello();\ndebug&gt; setBreakpoint('mod.js', 23)\nWarning: script 'mod.js' was not loaded yet.\n  1 var mod = require('./mod.js');\n  2 mod.hello();\n  3 mod.hello();\ndebug&gt; c\nbreak in test/fixtures/break-in-module/mod.js:23\n 21\n 22 exports.hello = () =&gt; {\n 23   return 'hello from module';\n 24 };\n 25\ndebug&gt;\n</pre> <h3 id=\"debugger_information\">Information</h3> <div class=\"signature\">\n<ul> <li>\n<code>backtrace</code>, <code>bt</code> - Print backtrace of current execution frame</li> <li>\n<code>list(5)</code> - List scripts source code with 5 line context (5 lines before and after)</li> <li>\n<code>watch(expr)</code> - Add expression to watch list</li> <li>\n<code>unwatch(expr)</code> - Remove expression from watch list</li> <li>\n<code>watchers</code> - List all watchers and their values (automatically listed on each breakpoint)</li> <li>\n<code>repl</code> - Open debugger's repl for evaluation in debugging script's context</li> <li>\n<code>exec expr</code> - Execute an expression in debugging script's context</li> </ul> </div>\n<h3 id=\"debugger_execution_control\">Execution control</h3> <div class=\"signature\">\n<ul> <li>\n<code>run</code> - Run script (automatically runs on debugger's start)</li> <li>\n<code>restart</code> - Restart script</li> <li>\n<code>kill</code> - Kill script</li> </ul> </div>\n<h3 id=\"debugger_various\">Various</h3> <div class=\"signature\">\n<ul> <li>\n<code>scripts</code> - List all loaded scripts</li> <li>\n<code>version</code> - Display V8's version</li> </ul> </div>\n<h2 id=\"debugger_advanced_usage\">Advanced Usage</h2> <h3 id=\"debugger_tcp_based_protocol\">TCP-based protocol</h3> <div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated: Use <a href=\"#debugger_v8_inspector_integration_for_node_js\">V8 Inspector Integration</a> instead. The debug protocol used by the <code>--debug</code> flag was removed from V8.</div>\n<p>An alternative way of enabling and accessing the debugger is to start Node.js with the <code>--debug</code> command-line flag or by signaling an existing Node.js process with <code>SIGUSR1</code>.</p> <p>Once a process has been set in debug mode this way, it can be inspected using the Node.js debugger by either connecting to the <code>pid</code> of the running process or via URI reference to the listening debugger:</p> <ul> <li>\n<code>node debug -p &lt;pid&gt;</code> - Connects to the process via the <code>pid</code>\n</li> <li>\n<code>node debug &lt;URI&gt;</code> - Connects to the process via the URI such as localhost:5858</li> </ul> <h3 id=\"debugger_v8_inspector_integration_for_node_js\">V8 Inspector Integration for Node.js</h3> <p><strong>NOTE: This is an experimental feature.</strong></p> <p>V8 Inspector integration allows attaching Chrome DevTools to Node.js instances for debugging and profiling. It uses the <a href=\"https://chromedevtools.github.io/debugger-protocol-viewer/\">Chrome Debugging Protocol</a>.</p> <p>V8 Inspector can be enabled by passing the <code>--inspect</code> flag when starting a Node.js application. It is also possible to supply a custom port with that flag, e.g. <code>--inspect=9222</code> will accept DevTools connections on port 9222.</p> <p>To break on the first line of the application code, pass the <code>--inspect-brk</code> flag instead of <code>--inspect</code>.</p> <pre data-language=\"txt\">$ node --inspect index.js\nDebugger listening on 127.0.0.1:9229.\nTo start debugging, open the following URL in Chrome:\n    chrome-devtools:[email protected]84980/inspector.html?experiments=true&amp;v8only=true&amp;ws=localhost:9229/node\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/debugger.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/debugger.html</a>\n  </p>\n</div>\n","globals":"<h1 id=\"globals_global_objects\">Global Objects</h1>  <p>These objects are available in all modules. Some of these objects aren't actually in the global scope but in the module scope - this will be noted.</p> <p>The objects listed here are specific to Node.js. There are a number of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\">built-in objects</a> that are part of the JavaScript language itself, which are also globally accessible.</p> <h2 id=\"globals_class_buffer\">Class: Buffer</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.103</span> </div> <ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li> </ul> <p>Used to handle binary data. See the <a href=\"buffer\">buffer section</a>.</p> <h2 id=\"globals_dirname\">__dirname</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.27</span> </div> <ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> <p>The directory name of the current module. This the same as the <a href=\"path#path_path_dirname_path\"><code>path.dirname()</code></a> of the <a href=\"#globals_filename\"><code>__filename</code></a>.</p> <p><code>__dirname</code> is not actually a global but rather local to each module.</p> <p>Example: running <code>node example.js</code> from <code>/Users/mjr</code></p> <pre data-language=\"js\">console.log(__dirname);\n// Prints: /Users/mjr\nconsole.log(path.dirname(__filename));\n// Prints: /Users/mjr\n</pre> <h2 id=\"globals_filename\">__filename</h2> <div class=\"api_metadata\"> <span>Added in: v0.0.1</span> </div> <ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> <p>The file name of the current module. This is the resolved absolute path of the current module file.</p> <p>For a main program this is not necessarily the same as the file name used in the command line.</p> <p>See <a href=\"#globals_dirname\"><code>__dirname</code></a> for the directory name of the current module.</p> <p><code>__filename</code> is not actually a global but rather local to each module.</p> <p>Examples:</p> <p>Running <code>node example.js</code> from <code>/Users/mjr</code></p> <pre data-language=\"js\">console.log(__filename);\n// Prints: /Users/mjr/example.js\nconsole.log(__dirname);\n// Prints: /Users/mjr\n</pre> <p>Given two modules: <code>a</code> and <code>b</code>, where <code>b</code> is a dependency of <code>a</code> and there is a directory structure of:</p> <ul> <li><code>/Users/mjr/app/a.js</code></li> <li><code>/Users/mjr/app/node_modules/b/b.js</code></li> </ul> <p>References to <code>__filename</code> within <code>b.js</code> will return <code>/Users/mjr/app/node_modules/b/b.js</code> while references to <code>__filename</code> within <code>a.js</code> will return <code>/Users/mjr/app/a.js</code>.</p> <h2 id=\"globals_clearimmediate_immediateobject\">clearImmediate(immediateObject)</h2> <div class=\"api_metadata\"> <span>Added in: v0.9.1</span> </div> <p><a href=\"timers#timers_clearimmediate_immediate\"><code>clearImmediate</code></a> is described in the <a href=\"timers\">timers</a> section.</p> <h2 id=\"globals_clearinterval_intervalobject\">clearInterval(intervalObject)</h2> <div class=\"api_metadata\"> <span>Added in: v0.0.1</span> </div> <p><a href=\"timers#timers_clearinterval_timeout\"><code>clearInterval</code></a> is described in the <a href=\"timers\">timers</a> section.</p> <h2 id=\"globals_cleartimeout_timeoutobject\">clearTimeout(timeoutObject)</h2> <div class=\"api_metadata\"> <span>Added in: v0.0.1</span> </div> <p><a href=\"timers#timers_cleartimeout_timeout\"><code>clearTimeout</code></a> is described in the <a href=\"timers\">timers</a> section.</p> <h2 id=\"globals_console\">console</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.100</span> </div> <ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li> </ul> <p>Used to print to stdout and stderr. See the <a href=\"console\"><code>console</code></a> section.</p> <h2 id=\"globals_exports\">exports</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.12</span> </div> <p>A reference to the <code>module.exports</code> that is shorter to type. See <a href=\"modules\">module system documentation</a> for details on when to use <code>exports</code> and when to use <code>module.exports</code>.</p> <p><code>exports</code> is not actually a global but rather local to each module.</p> <p>See the <a href=\"modules\">module system documentation</a> for more information.</p> <h2 id=\"globals_global\">global</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.27</span> </div> <ul> <li>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> The global namespace object.</li> </ul> <p>In browsers, the top-level scope is the global scope. That means that in browsers if you're in the global scope <code>var something</code> will define a global variable. In Node.js this is different. The top-level scope is not the global scope; <code>var something</code> inside an Node.js module will be local to that module.</p> <h2 id=\"globals_module\">module</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.16</span> </div> <ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li> </ul> <p>A reference to the current module. In particular <code>module.exports</code> is used for defining what a module exports and makes available through <code>require()</code>.</p> <p><code>module</code> is not actually a global but rather local to each module.</p> <p>See the <a href=\"modules\">module system documentation</a> for more information.</p> <h2 id=\"globals_process\">process</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.7</span> </div> <ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li> </ul> <p>The process object. See the <a href=\"process#process_process\"><code>process</code> object</a> section.</p> <h2 id=\"globals_require\">require()</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.13</span> </div> <ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li> </ul> <p>To require modules. See the <a href=\"modules#modules_modules\">Modules</a> section. <code>require</code> is not actually a global but rather local to each module.</p> <h3 id=\"globals_require_cache\">require.cache</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.0</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li> </ul> <p>Modules are cached in this object when they are required. By deleting a key value from this object, the next <code>require</code> will reload the module. Note that this does not apply to <a href=\"addons\">native addons</a>, for which reloading will result in an Error.</p> <h3 id=\"globals_require_extensions\">require.extensions</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.0</span><span>Deprecated since: v0.10.6</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated</div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li> </ul> <p>Instruct <code>require</code> on how to handle certain file extensions.</p> <p>Process files with the extension <code>.sjs</code> as <code>.js</code>:</p> <pre data-language=\"js\">require.extensions['.sjs'] = require.extensions['.js'];\n</pre> <p><strong>Deprecated</strong> In the past, this list has been used to load non-JavaScript modules into Node.js by compiling them on-demand. However, in practice, there are much better ways to do this, such as loading modules via some other Node.js program, or compiling them to JavaScript ahead of time.</p> <p>Since the module system is locked, this feature will probably never go away. However, it may have subtle bugs and complexities that are best left untouched.</p> <p>Note that the number of file system operations that the module system has to perform in order to resolve a <code>require(...)</code> statement to a filename scales linearly with the number of registered extensions.</p> <p>In other words, adding extensions slows down the module loader and should be discouraged.</p> <h3 id=\"globals_require_resolve\">require.resolve()</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.0</span> </div>\n<p>Use the internal <code>require()</code> machinery to look up the location of a module, but rather than loading the module, just return the resolved filename.</p> <h2 id=\"globals_setimmediate_callback_args\">setImmediate(callback[, ...args])</h2> <div class=\"api_metadata\"> <span>Added in: v0.9.1</span> </div> <p><a href=\"timers#timers_setimmediate_callback_args\"><code>setImmediate</code></a> is described in the <a href=\"timers\">timers</a> section.</p> <h2 id=\"globals_setinterval_callback_delay_args\">setInterval(callback, delay[, ...args])</h2> <div class=\"api_metadata\"> <span>Added in: v0.0.1</span> </div> <p><a href=\"timers#timers_setinterval_callback_delay_args\"><code>setInterval</code></a> is described in the <a href=\"timers\">timers</a> section.</p> <h2 id=\"globals_settimeout_callback_delay_args\">setTimeout(callback, delay[, ...args])</h2> <div class=\"api_metadata\"> <span>Added in: v0.0.1</span> </div> <p><a href=\"timers#timers_settimeout_callback_delay_args\"><code>setTimeout</code></a> is described in the <a href=\"timers\">timers</a> section.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/globals.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/globals.html</a>\n  </p>\n</div>\n","https":"<h1 id=\"https_https\">HTTPS</h1> <div class=\"api_stability api_stability_2\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</div>\n<p>HTTPS is the HTTP protocol over TLS/SSL. In Node.js this is implemented as a separate module.</p> <h2 id=\"https_class_https_agent\">Class: https.Agent</h2> <div class=\"api_metadata\"> <span>Added in: v0.4.5</span> </div>\n<p>An Agent object for HTTPS similar to <a href=\"http#http_class_http_agent\"><code>http.Agent</code></a>. See <a href=\"#https_https_request_options_callback\"><code>https.request()</code></a> for more information.</p> <h2 id=\"https_class_https_server\">Class: https.Server</h2> <div class=\"api_metadata\"> <span>Added in: v0.3.4</span> </div>\n<p>This class is a subclass of <code>tls.Server</code> and emits events same as <a href=\"http#http_class_http_server\"><code>http.Server</code></a>. See <a href=\"http#http_class_http_server\"><code>http.Server</code></a> for more information.</p> <h3 id=\"https_server_settimeout_msecs_callback\">server.setTimeout([msecs][, callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.2</span> </div>\n<ul> <li>\n<code>msecs</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Defaults to 120000 (2 minutes).</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>See <a href=\"http#http_server_settimeout_msecs_callback\"><code>http.Server#setTimeout()</code></a>.</p> <h3 id=\"https_server_timeout\">server.timeout</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.2</span> </div>\n<ul> <li>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Defaults to 120000 (2 minutes).</li> </ul> <p>See <a href=\"http#http_server_timeout\"><code>http.Server#timeout</code></a>.</p> <h2 id=\"https_https_createserver_options_requestlistener\">https.createServer(options[, requestListener])</h2> <div class=\"api_metadata\"> <span>Added in: v0.3.4</span> </div>\n<ul> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Accepts <code>options</code> from <a href=\"tls#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a> and <a href=\"tls#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a>.</li> <li>\n<code>requestListener</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A listener to be added to the <code>request</code> event.</li> </ul> <p>Example:</p> <pre data-language=\"js\">// curl -k https://localhost:8000/\nconst https = require('https');\nconst fs = require('fs');\n\nconst options = {\n  key: fs.readFileSync('test/fixtures/keys/agent2-key.pem'),\n  cert: fs.readFileSync('test/fixtures/keys/agent2-cert.pem')\n};\n\nhttps.createServer(options, (req, res) =&gt; {\n  res.writeHead(200);\n  res.end('hello world\\n');\n}).listen(8000);\n</pre> <p>Or</p> <pre data-language=\"js\">const https = require('https');\nconst fs = require('fs');\n\nconst options = {\n  pfx: fs.readFileSync('test/fixtures/test_cert.pfx'),\n  passphrase: 'sample'\n};\n\nhttps.createServer(options, (req, res) =&gt; {\n  res.writeHead(200);\n  res.end('hello world\\n');\n}).listen(8000);\n</pre> <h3 id=\"https_server_close_callback\">server.close([callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<ul> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>See <a href=\"http#http_server_close_callback\"><code>http.close()</code></a> for details.</p> <h3 id=\"https_server_listen_handle_callback\">server.listen(handle[, callback])</h3> <div class=\"signature\">\n<ul> <li>\n<code>handle</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> </div>\n<h3 id=\"https_server_listen_path_callback\">server.listen(path[, callback])</h3> <div class=\"signature\">\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> </div>\n<h3 id=\"https_server_listen_port_host_backlog_callback\">server.listen([port][, host][, backlog][, callback])</h3> <div class=\"signature\">\n<ul> <li>\n<code>port</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> <li>\n<code>hostname</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>backlog</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> </div>\n<p>See <a href=\"http#http_server_listen_port_hostname_backlog_callback\"><code>http.listen()</code></a> for details.</p> <h2 id=\"https_https_get_options_callback\">https.get(options[, callback])</h2> <div class=\"api_metadata\"> <span>Added in: v0.3.6</span> </div>\n<ul> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Accepts the same <code>options</code> as <a href=\"#https_https_request_options_callback\"><code>https.request()</code></a>, with the <code>method</code> always set to <code>GET</code>.</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Like <a href=\"http#http_http_get_options_callback\"><code>http.get()</code></a> but for HTTPS.</p> <p><code>options</code> can be an object or a string. If <code>options</code> is a string, it is automatically parsed with <a href=\"url#url_url_parse_urlstring_parsequerystring_slashesdenotehost\"><code>url.parse()</code></a>.</p> <p>Example:</p> <pre data-language=\"js\">const https = require('https');\n\nhttps.get('https://encrypted.google.com/', (res) =&gt; {\n  console.log('statusCode:', res.statusCode);\n  console.log('headers:', res.headers);\n\n  res.on('data', (d) =&gt; {\n    process.stdout.write(d);\n  });\n\n}).on('error', (e) =&gt; {\n  console.error(e);\n});\n</pre> <h2 id=\"https_https_globalagent\">https.globalAgent</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.9</span> </div>\n<p>Global instance of <a href=\"#https_class_https_agent\"><code>https.Agent</code></a> for all HTTPS client requests.</p> <h2 id=\"https_https_request_options_callback\">https.request(options[, callback])</h2> <div class=\"api_metadata\"> <span>Added in: v0.3.6</span> </div>\n<ul> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Accepts all <code>options</code> from <a href=\"http#http_http_request_options_callback\"><code>http.request()</code></a>, with some differences in default values:<ul> <li>\n<code>protocol</code> Defaults to <code>https:</code>\n</li> <li>\n<code>port</code> Defaults to <code>443</code>.</li> <li>\n<code>agent</code> Defaults to <code>https.globalAgent</code>.</li> </ul> </li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Makes a request to a secure web server.</p> <p>The following additional <code>options</code> from <a href=\"tls#tls_tls_connect_options_callback\"><code>tls.connect()</code></a> are also accepted when using a custom <a href=\"#https_class_https_agent\"><code>Agent</code></a>: <code>pfx</code>, <code>key</code>, <code>passphrase</code>, <code>cert</code>, <code>ca</code>, <code>ciphers</code>, <code>rejectUnauthorized</code>, <code>secureProtocol</code>, <code>servername</code></p> <p><code>options</code> can be an object or a string. If <code>options</code> is a string, it is automatically parsed with <a href=\"url#url_url_parse_urlstring_parsequerystring_slashesdenotehost\"><code>url.parse()</code></a>.</p> <p>Example:</p> <pre data-language=\"js\">const https = require('https');\n\nconst options = {\n  hostname: 'encrypted.google.com',\n  port: 443,\n  path: '/',\n  method: 'GET'\n};\n\nconst req = https.request(options, (res) =&gt; {\n  console.log('statusCode:', res.statusCode);\n  console.log('headers:', res.headers);\n\n  res.on('data', (d) =&gt; {\n    process.stdout.write(d);\n  });\n});\n\nreq.on('error', (e) =&gt; {\n  console.error(e);\n});\nreq.end();\n</pre> <p>Example using options from <a href=\"tls#tls_tls_connect_options_callback\"><code>tls.connect()</code></a>:</p> <pre data-language=\"js\">const options = {\n  hostname: 'encrypted.google.com',\n  port: 443,\n  path: '/',\n  method: 'GET',\n  key: fs.readFileSync('test/fixtures/keys/agent2-key.pem'),\n  cert: fs.readFileSync('test/fixtures/keys/agent2-cert.pem')\n};\noptions.agent = new https.Agent(options);\n\nconst req = https.request(options, (res) =&gt; {\n  // ...\n});\n</pre> <p>Alternatively, opt out of connection pooling by not using an <code>Agent</code>.</p> <p>Example:</p> <pre data-language=\"js\">const options = {\n  hostname: 'encrypted.google.com',\n  port: 443,\n  path: '/',\n  method: 'GET',\n  key: fs.readFileSync('test/fixtures/keys/agent2-key.pem'),\n  cert: fs.readFileSync('test/fixtures/keys/agent2-cert.pem'),\n  agent: false\n};\n\nconst req = https.request(options, (res) =&gt; {\n  // ...\n});\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/https.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/https.html</a>\n  </p>\n</div>\n","domain":"<h1 id=\"domain_domain\">Domain</h1> <div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated</div>\n<p><strong>This module is pending deprecation</strong>. Once a replacement API has been finalized, this module will be fully deprecated. Most end users should <strong>not</strong> have cause to use this module. Users who absolutely must have the functionality that domains provide may rely on it for the time being but should expect to have to migrate to a different solution in the future.</p> <p>Domains provide a way to handle multiple different IO operations as a single group. If any of the event emitters or callbacks registered to a domain emit an <code>'error'</code> event, or throw an error, then the domain object will be notified, rather than losing the context of the error in the <code>process.on('uncaughtException')</code> handler, or causing the program to exit immediately with an error code.</p> <h2 id=\"domain_warning_don_t_ignore_errors\">Warning: Don't Ignore Errors!</h2>  <p>Domain error handlers are not a substitute for closing down your process when an error occurs.</p> <p>By the very nature of how <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw\"><code>throw</code></a> works in JavaScript, there is almost never any way to safely \"pick up where you left off\", without leaking references, or creating some other sort of undefined brittle state.</p> <p>The safest way to respond to a thrown error is to shut down the process. Of course, in a normal web server, you might have many connections open, and it is not reasonable to abruptly shut those down because an error was triggered by someone else.</p> <p>The better approach is to send an error response to the request that triggered the error, while letting the others finish in their normal time, and stop listening for new requests in that worker.</p> <p>In this way, <code>domain</code> usage goes hand-in-hand with the cluster module, since the master process can fork a new worker when a worker encounters an error. For Node.js programs that scale to multiple machines, the terminating proxy or service registry can take note of the failure, and react accordingly.</p> <p>For example, this is not a good idea:</p> <pre data-language=\"js\">// XXX WARNING!  BAD IDEA!\n\nconst d = require('domain').create();\nd.on('error', (er) =&gt; {\n  // The error won't crash the process, but what it does is worse!\n  // Though we've prevented abrupt process restarting, we are leaking\n  // resources like crazy if this ever happens.\n  // This is no better than process.on('uncaughtException')!\n  console.log(`error, but oh well ${er.message}`);\n});\nd.run(() =&gt; {\n  require('http').createServer((req, res) =&gt; {\n    handleRequest(req, res);\n  }).listen(PORT);\n});\n</pre> <p>By using the context of a domain, and the resilience of separating our program into multiple worker processes, we can react more appropriately, and handle errors with much greater safety.</p> <pre data-language=\"js\">// Much better!\n\nconst cluster = require('cluster');\nconst PORT = +process.env.PORT || 1337;\n\nif (cluster.isMaster) {\n  // In real life, you'd probably use more than just 2 workers,\n  // and perhaps not put the master and worker in the same file.\n  //\n  // You can also of course get a bit fancier about logging, and\n  // implement whatever custom logic you need to prevent DoS\n  // attacks and other bad behavior.\n  //\n  // See the options in the cluster documentation.\n  //\n  // The important thing is that the master does very little,\n  // increasing our resilience to unexpected errors.\n\n  cluster.fork();\n  cluster.fork();\n\n  cluster.on('disconnect', (worker) =&gt; {\n    console.error('disconnect!');\n    cluster.fork();\n  });\n\n} else {\n  // the worker\n  //\n  // This is where we put our bugs!\n\n  const domain = require('domain');\n\n  // See the cluster documentation for more details about using\n  // worker processes to serve requests.  How it works, caveats, etc.\n\n  const server = require('http').createServer((req, res) =&gt; {\n    const d = domain.create();\n    d.on('error', (er) =&gt; {\n      console.error(`error ${er.stack}`);\n\n      // Note: we're in dangerous territory!\n      // By definition, something unexpected occurred,\n      // which we probably didn't want.\n      // Anything can happen now!  Be very careful!\n\n      try {\n        // make sure we close down within 30 seconds\n        const killtimer = setTimeout(() =&gt; {\n          process.exit(1);\n        }, 30000);\n        // But don't keep the process open just for that!\n        killtimer.unref();\n\n        // stop taking new requests.\n        server.close();\n\n        // Let the master know we're dead.  This will trigger a\n        // 'disconnect' in the cluster master, and then it will fork\n        // a new worker.\n        cluster.worker.disconnect();\n\n        // try to send an error to the request that triggered the problem\n        res.statusCode = 500;\n        res.setHeader('content-type', 'text/plain');\n        res.end('Oops, there was a problem!\\n');\n      } catch (er2) {\n        // oh well, not much we can do at this point.\n        console.error(`Error sending 500! ${er2.stack}`);\n      }\n    });\n\n    // Because req and res were created before this domain existed,\n    // we need to explicitly add them.\n    // See the explanation of implicit vs explicit binding below.\n    d.add(req);\n    d.add(res);\n\n    // Now run the handler function in the domain.\n    d.run(() =&gt; {\n      handleRequest(req, res);\n    });\n  });\n  server.listen(PORT);\n}\n\n// This part is not important.  Just an example routing thing.\n// You'd put your fancy application logic here.\nfunction handleRequest(req, res) {\n  switch (req.url) {\n    case '/error':\n      // We do some async stuff, and then...\n      setTimeout(() =&gt; {\n        // Whoops!\n        flerb.bark();\n      });\n      break;\n    default:\n      res.end('ok');\n  }\n}\n</pre> <h2 id=\"domain_additions_to_error_objects\">Additions to Error objects</h2>  <p>Any time an <code>Error</code> object is routed through a domain, a few extra fields are added to it.</p> <ul> <li>\n<code>error.domain</code> The domain that first handled the error.</li> <li>\n<code>error.domainEmitter</code> The event emitter that emitted an <code>'error'</code> event with the error object.</li> <li>\n<code>error.domainBound</code> The callback function which was bound to the domain, and passed an error as its first argument.</li> <li>\n<code>error.domainThrown</code> A boolean indicating whether the error was thrown, emitted, or passed to a bound callback function.</li> </ul> <h2 id=\"domain_implicit_binding\">Implicit Binding</h2>  <p>If domains are in use, then all <strong>new</strong> EventEmitter objects (including Stream objects, requests, responses, etc.) will be implicitly bound to the active domain at the time of their creation.</p> <p>Additionally, callbacks passed to lowlevel event loop requests (such as to fs.open, or other callback-taking methods) will automatically be bound to the active domain. If they throw, then the domain will catch the error.</p> <p>In order to prevent excessive memory usage, Domain objects themselves are not implicitly added as children of the active domain. If they were, then it would be too easy to prevent request and response objects from being properly garbage collected.</p> <p>If you <em>want</em> to nest Domain objects as children of a parent Domain, then you must explicitly add them.</p> <p>Implicit binding routes thrown errors and <code>'error'</code> events to the Domain's <code>'error'</code> event, but does not register the EventEmitter on the Domain, so <a href=\"#domain_domain_dispose\"><code>domain.dispose()</code></a> will not shut down the EventEmitter. Implicit binding only takes care of thrown errors and <code>'error'</code> events.</p> <h2 id=\"domain_explicit_binding\">Explicit Binding</h2>  <p>Sometimes, the domain in use is not the one that ought to be used for a specific event emitter. Or, the event emitter could have been created in the context of one domain, but ought to instead be bound to some other domain.</p> <p>For example, there could be one domain in use for an HTTP server, but perhaps we would like to have a separate domain to use for each request.</p> <p>That is possible via explicit binding.</p> <p>For example:</p> <pre data-language=\"js\">// create a top-level domain for the server\nconst domain = require('domain');\nconst http = require('http');\nconst serverDomain = domain.create();\n\nserverDomain.run(() =&gt; {\n  // server is created in the scope of serverDomain\n  http.createServer((req, res) =&gt; {\n    // req and res are also created in the scope of serverDomain\n    // however, we'd prefer to have a separate domain for each request.\n    // create it first thing, and add req and res to it.\n    const reqd = domain.create();\n    reqd.add(req);\n    reqd.add(res);\n    reqd.on('error', (er) =&gt; {\n      console.error('Error', er, req.url);\n      try {\n        res.writeHead(500);\n        res.end('Error occurred, sorry.');\n      } catch (er2) {\n        console.error('Error sending 500', er2, req.url);\n      }\n    });\n  }).listen(1337);\n});\n</pre> <h2 id=\"domain_domain_create\">domain.create()</h2> <div class=\"signature\">\n<ul> <li>Returns: <span class=\"type\">&lt;Domain&gt;</span>\n</li> </ul> </div>\n<p>Returns a new Domain object.</p> <h2 id=\"domain_class_domain\">Class: Domain</h2> <p>The Domain class encapsulates the functionality of routing errors and uncaught exceptions to the active Domain object.</p> <p>Domain is a child class of <a href=\"events#events_class_eventemitter\"><code>EventEmitter</code></a>. To handle the errors that it catches, listen to its <code>'error'</code> event.</p> <h3 id=\"domain_domain_members\">domain.members</h3> <div class=\"signature\">\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a></li> </ul> </div>\n<p>An array of timers and event emitters that have been explicitly added to the domain.</p> <h3 id=\"domain_domain_add_emitter\">domain.add(emitter)</h3> <div class=\"signature\">\n<ul> <li>\n<code>emitter</code> <a href=\"events#events_class_eventemitter\" class=\"type\">&lt;EventEmitter&gt;</a> | <a href=\"timers#timers_timers\" class=\"type\">&lt;Timer&gt;</a> emitter or timer to be added to the domain</li> </ul> </div>\n<p>Explicitly adds an emitter to the domain. If any event handlers called by the emitter throw an error, or if the emitter emits an <code>'error'</code> event, it will be routed to the domain's <code>'error'</code> event, just like with implicit binding.</p> <p>This also works with timers that are returned from <a href=\"timers#timers_setinterval_callback_delay_args\"><code>setInterval()</code></a> and <a href=\"timers#timers_settimeout_callback_delay_args\"><code>setTimeout()</code></a>. If their callback function throws, it will be caught by the domain 'error' handler.</p> <p>If the Timer or EventEmitter was already bound to a domain, it is removed from that one, and bound to this one instead.</p> <h3 id=\"domain_domain_bind_callback\">domain.bind(callback)</h3> <div class=\"signature\">\n<ul> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The callback function</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The bound function</li> </ul> </div>\n<p>The returned function will be a wrapper around the supplied callback function. When the returned function is called, any errors that are thrown will be routed to the domain's <code>'error'</code> event.</p> <h4 id=\"domain_example\">Example</h4> <pre data-language=\"js\">const d = domain.create();\n\nfunction readSomeFile(filename, cb) {\n  fs.readFile(filename, 'utf8', d.bind((er, data) =&gt; {\n    // if this throws, it will also be passed to the domain\n    return cb(er, data ? JSON.parse(data) : null);\n  }));\n}\n\nd.on('error', (er) =&gt; {\n  // an error occurred somewhere.\n  // if we throw it now, it will crash the program\n  // with the normal line number and stack message.\n});\n</pre> <h3 id=\"domain_domain_dispose\">domain.dispose()</h3> <div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated.  Please recover from failed IO actions explicitly via error event handlers set on the domain.</div>\n<p>Once <code>dispose</code> has been called, the domain will no longer be used by callbacks bound into the domain via <code>run</code>, <code>bind</code>, or <code>intercept</code>, and a <code>'dispose'</code> event is emitted.</p> <h3 id=\"domain_domain_enter\">domain.enter()</h3> <p>The <code>enter</code> method is plumbing used by the <code>run</code>, <code>bind</code>, and <code>intercept</code> methods to set the active domain. It sets <code>domain.active</code> and <code>process.domain</code> to the domain, and implicitly pushes the domain onto the domain stack managed by the domain module (see <a href=\"#domain_domain_exit\"><code>domain.exit()</code></a> for details on the domain stack). The call to <code>enter</code> delimits the beginning of a chain of asynchronous calls and I/O operations bound to a domain.</p> <p>Calling <code>enter</code> changes only the active domain, and does not alter the domain itself. <code>enter</code> and <code>exit</code> can be called an arbitrary number of times on a single domain.</p> <p>If the domain on which <code>enter</code> is called has been disposed, <code>enter</code> will return without setting the domain.</p> <h3 id=\"domain_domain_exit\">domain.exit()</h3> <p>The <code>exit</code> method exits the current domain, popping it off the domain stack. Any time execution is going to switch to the context of a different chain of asynchronous calls, it's important to ensure that the current domain is exited. The call to <code>exit</code> delimits either the end of or an interruption to the chain of asynchronous calls and I/O operations bound to a domain.</p> <p>If there are multiple, nested domains bound to the current execution context, <code>exit</code> will exit any domains nested within this domain.</p> <p>Calling <code>exit</code> changes only the active domain, and does not alter the domain itself. <code>enter</code> and <code>exit</code> can be called an arbitrary number of times on a single domain.</p> <p>If the domain on which <code>exit</code> is called has been disposed, <code>exit</code> will return without exiting the domain.</p> <h3 id=\"domain_domain_intercept_callback\">domain.intercept(callback)</h3> <div class=\"signature\">\n<ul> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The callback function</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The intercepted function</li> </ul> </div>\n<p>This method is almost identical to <a href=\"#domain_domain_bind_callback\"><code>domain.bind(callback)</code></a>. However, in addition to catching thrown errors, it will also intercept <a href=\"errors#errors_class_error\"><code>Error</code></a> objects sent as the first argument to the function.</p> <p>In this way, the common <code>if (err) return callback(err);</code> pattern can be replaced with a single error handler in a single place.</p> <h4 id=\"domain_example_1\">Example</h4> <pre data-language=\"js\">const d = domain.create();\n\nfunction readSomeFile(filename, cb) {\n  fs.readFile(filename, 'utf8', d.intercept((data) =&gt; {\n    // note, the first argument is never passed to the\n    // callback since it is assumed to be the 'Error' argument\n    // and thus intercepted by the domain.\n\n    // if this throws, it will also be passed to the domain\n    // so the error-handling logic can be moved to the 'error'\n    // event on the domain instead of being repeated throughout\n    // the program.\n    return cb(null, JSON.parse(data));\n  }));\n}\n\nd.on('error', (er) =&gt; {\n  // an error occurred somewhere.\n  // if we throw it now, it will crash the program\n  // with the normal line number and stack message.\n});\n</pre> <h3 id=\"domain_domain_remove_emitter\">domain.remove(emitter)</h3> <div class=\"signature\">\n<ul> <li>\n<code>emitter</code> <a href=\"events#events_class_eventemitter\" class=\"type\">&lt;EventEmitter&gt;</a> | <a href=\"timers#timers_timers\" class=\"type\">&lt;Timer&gt;</a> emitter or timer to be removed from the domain</li> </ul> </div>\n<p>The opposite of <a href=\"#domain_domain_add_emitter\"><code>domain.add(emitter)</code></a>. Removes domain handling from the specified emitter.</p> <h3 id=\"domain_domain_run_fn_args\">domain.run(fn[, ...args])</h3> <div class=\"signature\">\n<ul> <li>\n<code>fn</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> <li>\n<code>...args</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> </div>\n<p>Run the supplied function in the context of the domain, implicitly binding all event emitters, timers, and lowlevel requests that are created in that context. Optionally, arguments can be passed to the function.</p> <p>This is the most basic way to use a domain.</p> <p>Example:</p> <pre data-language=\"js\">const domain = require('domain');\nconst fs = require('fs');\nconst d = domain.create();\nd.on('error', (er) =&gt; {\n  console.error('Caught error!', er);\n});\nd.run(() =&gt; {\n  process.nextTick(() =&gt; {\n    setTimeout(() =&gt; { // simulating some various async stuff\n      fs.open('non-existent file', 'r', (er, fd) =&gt; {\n        if (er) throw er;\n        // proceed...\n      });\n    }, 100);\n  });\n});\n</pre> <p>In this example, the <code>d.on('error')</code> handler will be triggered, rather than crashing the program.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/domain.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/domain.html</a>\n  </p>\n</div>\n","cli":"<h1 id=\"cli_command_line_options\">Command Line Options</h1>  <p>Node.js comes with a variety of CLI options. These options expose built-in debugging, multiple ways to execute scripts, and other helpful runtime options.</p> <p>To view this documentation as a manual page in your terminal, run <code>man node</code>.</p> <h2 id=\"cli_synopsis\">Synopsis</h2> <p><code>node [options] [v8 options] [script.js | -e \"script\"] [--] [arguments]</code></p> <p><code>node debug [script.js | -e \"script\" | &lt;host&gt;:&lt;port&gt;] …</code></p> <p><code>node --v8-options</code></p> <p>Execute without arguments to start the <a href=\"repl\">REPL</a>.</p> <p><em>For more info about <code>node debug</code>, please see the <a href=\"debugger\">debugger</a> documentation.</em></p> <h2 id=\"cli_options\">Options</h2> <h3 id=\"cli_v_version\">\n<code>-v</code>, <code>--version</code>\n</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.3</span> </div>\n<p>Print node's version.</p> <h3 id=\"cli_h_help\">\n<code>-h</code>, <code>--help</code>\n</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.3</span> </div>\n<p>Print node command line options. The output of this option is less detailed than this document.</p> <h3 id=\"cli_e_eval_script\">\n<code>-e</code>, <code>--eval \"script\"</code>\n</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v5.11.0</td> <td>\n<p>Built-in libraries are now available as predefined variables.</p> </td>\n</tr> <tr>\n<td>v0.5.2</td> <td>\n<p><span>Added in: v0.5.2</span></p> </td>\n</tr> </table> </details> </div>\n<p>Evaluate the following argument as JavaScript. The modules which are predefined in the REPL can also be used in <code>script</code>.</p> <h3 id=\"cli_p_print_script\">\n<code>-p</code>, <code>--print \"script\"</code>\n</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v5.11.0</td> <td>\n<p>Built-in libraries are now available as predefined variables.</p> </td>\n</tr> <tr>\n<td>v0.6.4</td> <td>\n<p><span>Added in: v0.6.4</span></p> </td>\n</tr> </table> </details> </div>\n<p>Identical to <code>-e</code> but prints the result.</p> <h3 id=\"cli_c_check\">\n<code>-c</code>, <code>--check</code>\n</h3> <div class=\"api_metadata\"> <span>Added in: v5.0.0, v4.2.0</span> </div>\n<p>Syntax check the script without executing.</p> <h3 id=\"cli_i_interactive\">\n<code>-i</code>, <code>--interactive</code>\n</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.7</span> </div>\n<p>Opens the REPL even if stdin does not appear to be a terminal.</p> <h3 id=\"cli_r_require_module\">\n<code>-r</code>, <code>--require module</code>\n</h3> <div class=\"api_metadata\"> <span>Added in: v1.6.0</span> </div>\n<p>Preload the specified module at startup.</p> <p>Follows <code>require()</code>'s module resolution rules. <code>module</code> may be either a path to a file, or a node module name.</p> <h3 id=\"cli_inspect_host_port\"><code>--inspect[=[host:]port]</code></h3> <div class=\"api_metadata\"> <span>Added in: v6.3.0</span> </div>\n<p>Activate inspector on host:port. Default is 127.0.0.1:9229.</p> <p>V8 inspector integration allows tools such as Chrome DevTools and IDEs to debug and profile Node.js instances. The tools attach to Node.js instances via a tcp port and communicate using the <a href=\"https://chromedevtools.github.io/debugger-protocol-viewer\">Chrome Debugging Protocol</a>.</p> <h3 id=\"cli_inspect_brk_host_port\"><code>--inspect-brk[=[host:]port]</code></h3> <div class=\"api_metadata\"> <span>Added in: v7.6.0</span> </div>\n<p>Activate inspector on host:port and break at start of user script.</p> <h3 id=\"cli_no_deprecation\"><code>--no-deprecation</code></h3> <div class=\"api_metadata\"> <span>Added in: v0.8.0</span> </div>\n<p>Silence deprecation warnings.</p> <h3 id=\"cli_trace_deprecation\"><code>--trace-deprecation</code></h3> <div class=\"api_metadata\"> <span>Added in: v0.8.0</span> </div>\n<p>Print stack traces for deprecations.</p> <h3 id=\"cli_throw_deprecation\"><code>--throw-deprecation</code></h3> <div class=\"api_metadata\"> <span>Added in: v0.11.14</span> </div>\n<p>Throw errors for deprecations.</p> <h3 id=\"cli_no_warnings\"><code>--no-warnings</code></h3> <div class=\"api_metadata\"> <span>Added in: v6.0.0</span> </div>\n<p>Silence all process warnings (including deprecations).</p> <h3 id=\"cli_trace_warnings\"><code>--trace-warnings</code></h3> <div class=\"api_metadata\"> <span>Added in: v6.0.0</span> </div>\n<p>Print stack traces for process warnings (including deprecations).</p> <h3 id=\"cli_trace_sync_io\"><code>--trace-sync-io</code></h3> <div class=\"api_metadata\"> <span>Added in: v2.1.0</span> </div>\n<p>Prints a stack trace whenever synchronous I/O is detected after the first turn of the event loop.</p> <h3 id=\"cli_trace_events_enabled\"><code>--trace-events-enabled</code></h3> <div class=\"api_metadata\"> <span>Added in: v7.7.0</span> </div>\n<p>Enables the collection of trace event tracing information.</p> <h3 id=\"cli_trace_event_categories\"><code>--trace-event-categories</code></h3> <div class=\"api_metadata\"> <span>Added in: v7.7.0</span> </div>\n<p>A comma separated list of categories that should be traced when trace event tracing is enabled using <code>--trace-events-enabled</code>.</p> <h3 id=\"cli_zero_fill_buffers\"><code>--zero-fill-buffers</code></h3> <div class=\"api_metadata\"> <span>Added in: v6.0.0</span> </div>\n<p>Automatically zero-fills all newly allocated <a href=\"buffer#buffer_buffer\">Buffer</a> and <a href=\"buffer#buffer_class_slowbuffer\">SlowBuffer</a> instances.</p> <h3 id=\"cli_preserve_symlinks\"><code>--preserve-symlinks</code></h3> <div class=\"api_metadata\"> <span>Added in: v6.3.0</span> </div>\n<p>Instructs the module loader to preserve symbolic links when resolving and caching modules.</p> <p>By default, when Node.js loads a module from a path that is symbolically linked to a different on-disk location, Node.js will dereference the link and use the actual on-disk \"real path\" of the module as both an identifier and as a root path to locate other dependency modules. In most cases, this default behavior is acceptable. However, when using symbolically linked peer dependencies, as illustrated in the example below, the default behavior causes an exception to be thrown if <code>moduleA</code> attempts to require <code>moduleB</code> as a peer dependency:</p> <pre data-language=\"text\">{appDir}\n ├── app\n │   ├── index.js\n │   └── node_modules\n │       ├── moduleA -&gt; {appDir}/moduleA\n │       └── moduleB\n │           ├── index.js\n │           └── package.json\n └── moduleA\n     ├── index.js\n     └── package.json\n</pre> <p>The <code>--preserve-symlinks</code> command line flag instructs Node.js to use the symlink path for modules as opposed to the real path, allowing symbolically linked peer dependencies to be found.</p> <p>Note, however, that using <code>--preserve-symlinks</code> can have other side effects. Specifically, symbolically linked <em>native</em> modules can fail to load if those are linked from more than one location in the dependency tree (Node.js would see those as two separate modules and would attempt to load the module multiple times, causing an exception to be thrown).</p> <h3 id=\"cli_track_heap_objects\"><code>--track-heap-objects</code></h3> <div class=\"api_metadata\"> <span>Added in: v2.4.0</span> </div>\n<p>Track heap object allocations for heap snapshots.</p> <h3 id=\"cli_prof_process\"><code>--prof-process</code></h3> <div class=\"api_metadata\"> <span>Added in: v5.2.0</span> </div>\n<p>Process v8 profiler output generated using the v8 option <code>--prof</code>.</p> <h3 id=\"cli_v8_options\"><code>--v8-options</code></h3> <div class=\"api_metadata\"> <span>Added in: v0.1.3</span> </div>\n<p>Print v8 command line options.</p> <p>Note: v8 options allow words to be separated by both dashes (<code>-</code>) or underscores (<code>_</code>).</p> <p>For example, <code>--stack-trace-limit</code> is equivalent to <code>--stack_trace_limit</code>.</p> <h3 id=\"cli_tls_cipher_list_list\"><code>--tls-cipher-list=list</code></h3> <div class=\"api_metadata\"> <span>Added in: v4.0.0</span> </div>\n<p>Specify an alternative default TLS cipher list. (Requires Node.js to be built with crypto support. (Default))</p> <h3 id=\"cli_enable_fips\"><code>--enable-fips</code></h3> <div class=\"api_metadata\"> <span>Added in: v6.0.0</span> </div>\n<p>Enable FIPS-compliant crypto at startup. (Requires Node.js to be built with <code>./configure --openssl-fips</code>)</p> <h3 id=\"cli_force_fips\"><code>--force-fips</code></h3> <div class=\"api_metadata\"> <span>Added in: v6.0.0</span> </div>\n<p>Force FIPS-compliant crypto on startup. (Cannot be disabled from script code.) (Same requirements as <code>--enable-fips</code>)</p> <h3 id=\"cli_openssl_config_file\"><code>--openssl-config=file</code></h3> <div class=\"api_metadata\"> <span>Added in: v6.9.0</span> </div>\n<p>Load an OpenSSL configuration file on startup. Among other uses, this can be used to enable FIPS-compliant crypto if Node.js is built with <code>./configure --openssl-fips</code>.</p> <h3 id=\"cli_use_openssl_ca_use_bundled_ca\">\n<code>--use-openssl-ca</code>, <code>--use-bundled-ca</code>\n</h3> <div class=\"api_metadata\"> <span>Added in: v7.5.0</span> </div>\n<p>Use OpenSSL's default CA store or use bundled Mozilla CA store as supplied by current NodeJS version. The default store is selectable at build-time.</p> <p>Using OpenSSL store allows for external modifications of the store. For most Linux and BSD distributions, this store is maintained by the distribution maintainers and system administrators. OpenSSL CA store location is dependent on configuration of the OpenSSL library but this can be altered at runtime using environmental variables.</p> <p>The bundled CA store, as supplied by NodeJS, is a snapshot of Mozilla CA store that is fixed at release time. It is identical on all supported platforms.</p> <p>See <code>SSL_CERT_DIR</code> and <code>SSL_CERT_FILE</code>.</p> <h3 id=\"cli_icu_data_dir_file\"><code>--icu-data-dir=file</code></h3> <div class=\"api_metadata\"> <span>Added in: v0.11.15</span> </div>\n<p>Specify ICU data load path. (overrides <code>NODE_ICU_DATA</code>)</p> <h3 id=\"cli\"><code>--</code></h3> <div class=\"api_metadata\"> <span>Added in: v7.5.0</span> </div>\n<p>Indicate the end of node options. Pass the rest of the arguments to the script. If no script filename or eval/print script is supplied prior to this, then the next argument will be used as a script filename.</p> <h2 id=\"cli_environment_variables\">Environment Variables</h2> <h3 id=\"cli_node_debug_module\"><code>NODE_DEBUG=module[,…]</code></h3> <div class=\"api_metadata\"> <span>Added in: v0.1.32</span> </div>\n<p><code>','</code>-separated list of core modules that should print debug information.</p> <h3 id=\"cli_node_path_path\"><code>NODE_PATH=path[:…]</code></h3> <div class=\"api_metadata\"> <span>Added in: v0.1.32</span> </div>\n<p><code>':'</code>-separated list of directories prefixed to the module search path.</p> <p><em>Note: on Windows, this is a <code>';'</code>-separated list instead.</em></p> <h3 id=\"cli_node_disable_colors_1\"><code>NODE_DISABLE_COLORS=1</code></h3> <div class=\"api_metadata\"> <span>Added in: v0.3.0</span> </div>\n<p>When set to <code>1</code> colors will not be used in the REPL.</p> <h3 id=\"cli_node_icu_data_file\"><code>NODE_ICU_DATA=file</code></h3> <div class=\"api_metadata\"> <span>Added in: v0.11.15</span> </div>\n<p>Data path for ICU (Intl object) data. Will extend linked-in data when compiled with small-icu support.</p> <h3 id=\"cli_node_no_warnings_1\"><code>NODE_NO_WARNINGS=1</code></h3> <div class=\"api_metadata\"> <span>Added in: v7.5.0</span> </div>\n<p>When set to <code>1</code>, process warnings are silenced.</p> <h3 id=\"cli_node_preserve_symlinks_1\"><code>NODE_PRESERVE_SYMLINKS=1</code></h3> <div class=\"api_metadata\"> <span>Added in: v7.1.0</span> </div>\n<p>When set to <code>1</code>, instructs the module loader to preserve symbolic links when resolving and caching modules.</p> <h3 id=\"cli_node_repl_history_file\"><code>NODE_REPL_HISTORY=file</code></h3> <div class=\"api_metadata\"> <span>Added in: v3.0.0</span> </div>\n<p>Path to the file used to store the persistent REPL history. The default path is <code>~/.node_repl_history</code>, which is overridden by this variable. Setting the value to an empty string (<code>\"\"</code> or <code>\" \"</code>) disables persistent REPL history.</p> <h3 id=\"cli_node_tty_unsafe_async_1\"><code>NODE_TTY_UNSAFE_ASYNC=1</code></h3> <div class=\"api_metadata\"> <span>Added in: v6.4.0</span> </div>\n<p>When set to <code>1</code>, writes to <code>stdout</code> and <code>stderr</code> will be non-blocking and asynchronous when outputting to a TTY on platforms which support async stdio. Setting this will void any guarantee that stdio will not be interleaved or dropped at program exit. <strong>Use of this mode is not recommended.</strong></p> <h3 id=\"cli_node_extra_ca_certs_file\"><code>NODE_EXTRA_CA_CERTS=file</code></h3> <div class=\"api_metadata\"> <span>Added in: v7.3.0</span> </div>\n<p>When set, the well known \"root\" CAs (like VeriSign) will be extended with the extra certificates in <code>file</code>. The file should consist of one or more trusted certificates in PEM format. A message will be emitted (once) with <a href=\"process#process_process_emitwarning_warning_name_ctor\"><code>process.emitWarning()</code></a> if the file is missing or malformed, but any errors are otherwise ignored.</p> <p>Note that neither the well known nor extra certificates are used when the <code>ca</code> options property is explicitly specified for a TLS or HTTPS client or server.</p> <h3 id=\"cli_openssl_conf_file\"><code>OPENSSL_CONF=file</code></h3> <div class=\"api_metadata\"> <span>Added in: v7.7.0</span> </div>\n<p>Load an OpenSSL configuration file on startup. Among other uses, this can be used to enable FIPS-compliant crypto if Node.js is built with <code>./configure\n\\-\\-openssl\\-fips</code>.</p> <p>If the <a href=\"#cli_openssl_config_file\"><code>--openssl-config</code></a> command line option is used, the environment variable is ignored.</p> <h3 id=\"cli_ssl_cert_dir_dir\"><code>SSL_CERT_DIR=dir</code></h3> <div class=\"api_metadata\"> <span>Added in: v7.7.0</span> </div>\n<p>If <code>--use-openssl-ca</code> is enabled, this overrides and sets OpenSSL's directory containing trusted certificates.</p> <p>Note: Be aware that unless the child environment is explicitly set, this evironment variable will be inherited by any child processes, and if they use OpenSSL, it may cause them to trust the same CAs as node.</p> <h3 id=\"cli_ssl_cert_file_file\"><code>SSL_CERT_FILE=file</code></h3> <div class=\"api_metadata\"> <span>Added in: v7.7.0</span> </div>\n<p>If <code>--use-openssl-ca</code> is enabled, this overrides and sets OpenSSL's file containing trusted certificates.</p> <p>Note: Be aware that unless the child environment is explicitly set, this evironment variable will be inherited by any child processes, and if they use OpenSSL, it may cause them to trust the same CAs as node.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/cli.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/cli.html</a>\n  </p>\n</div>\n","events":"<h1 id=\"events_events\">Events</h1> <div class=\"api_stability api_stability_2\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</div> <p>Much of the Node.js core API is built around an idiomatic asynchronous event-driven architecture in which certain kinds of objects (called \"emitters\") periodically emit named events that cause Function objects (\"listeners\") to be called.</p> <p>For instance: a <a href=\"net#net_class_net_server\"><code>net.Server</code></a> object emits an event each time a peer connects to it; a <a href=\"fs#fs_class_fs_readstream\"><code>fs.ReadStream</code></a> emits an event when the file is opened; a <a href=\"stream\">stream</a> emits an event whenever data is available to be read.</p> <p>All objects that emit events are instances of the <code>EventEmitter</code> class. These objects expose an <code>eventEmitter.on()</code> function that allows one or more functions to be attached to named events emitted by the object. Typically, event names are camel-cased strings but any valid JavaScript property key can be used.</p> <p>When the <code>EventEmitter</code> object emits an event, all of the functions attached to that specific event are called <em>synchronously</em>. Any values returned by the called listeners are <em>ignored</em> and will be discarded.</p> <p>The following example shows a simple <code>EventEmitter</code> instance with a single listener. The <code>eventEmitter.on()</code> method is used to register listeners, while the <code>eventEmitter.emit()</code> method is used to trigger the event.</p> <pre data-language=\"js\">const EventEmitter = require('events');\n\nclass MyEmitter extends EventEmitter {}\n\nconst myEmitter = new MyEmitter();\nmyEmitter.on('event', () =&gt; {\n  console.log('an event occurred!');\n});\nmyEmitter.emit('event');\n</pre> <h2 id=\"events_passing_arguments_and_this_to_listeners\">Passing arguments and <code>this</code> to listeners</h2> <p>The <code>eventEmitter.emit()</code> method allows an arbitrary set of arguments to be passed to the listener functions. It is important to keep in mind that when an ordinary listener function is called by the <code>EventEmitter</code>, the standard <code>this</code> keyword is intentionally set to reference the <code>EventEmitter</code> to which the listener is attached.</p> <pre data-language=\"js\">const myEmitter = new MyEmitter();\nmyEmitter.on('event', function(a, b) {\n  console.log(a, b, this);\n  // Prints:\n  //   a b MyEmitter {\n  //     domain: null,\n  //     _events: { event: [Function] },\n  //     _eventsCount: 1,\n  //     _maxListeners: undefined }\n});\nmyEmitter.emit('event', 'a', 'b');\n</pre> <p>It is possible to use ES6 Arrow Functions as listeners, however, when doing so, the <code>this</code> keyword will no longer reference the <code>EventEmitter</code> instance:</p> <pre data-language=\"js\">const myEmitter = new MyEmitter();\nmyEmitter.on('event', (a, b) =&gt; {\n  console.log(a, b, this);\n  // Prints: a b {}\n});\nmyEmitter.emit('event', 'a', 'b');\n</pre> <h2 id=\"events_asynchronous_vs_synchronous\">Asynchronous vs. Synchronous</h2> <p>The <code>EventListener</code> calls all listeners synchronously in the order in which they were registered. This is important to ensure the proper sequencing of events and to avoid race conditions or logic errors. When appropriate, listener functions can switch to an asynchronous mode of operation using the <code>setImmediate()</code> or <code>process.nextTick()</code> methods:</p> <pre data-language=\"js\">const myEmitter = new MyEmitter();\nmyEmitter.on('event', (a, b) =&gt; {\n  setImmediate(() =&gt; {\n    console.log('this happens asynchronously');\n  });\n});\nmyEmitter.emit('event', 'a', 'b');\n</pre> <h2 id=\"events_handling_events_only_once\">Handling events only once</h2> <p>When a listener is registered using the <code>eventEmitter.on()</code> method, that listener will be invoked <em>every time</em> the named event is emitted.</p> <pre data-language=\"js\">const myEmitter = new MyEmitter();\nlet m = 0;\nmyEmitter.on('event', () =&gt; {\n  console.log(++m);\n});\nmyEmitter.emit('event');\n// Prints: 1\nmyEmitter.emit('event');\n// Prints: 2\n</pre> <p>Using the <code>eventEmitter.once()</code> method, it is possible to register a listener that is called at most once for a particular event. Once the event is emitted, the listener is unregistered and <em>then</em> called.</p> <pre data-language=\"js\">const myEmitter = new MyEmitter();\nlet m = 0;\nmyEmitter.once('event', () =&gt; {\n  console.log(++m);\n});\nmyEmitter.emit('event');\n// Prints: 1\nmyEmitter.emit('event');\n// Ignored\n</pre> <h2 id=\"events_error_events\">Error events</h2> <p>When an error occurs within an <code>EventEmitter</code> instance, the typical action is for an <code>'error'</code> event to be emitted. These are treated as special cases within Node.js.</p> <p>If an <code>EventEmitter</code> does <em>not</em> have at least one listener registered for the <code>'error'</code> event, and an <code>'error'</code> event is emitted, the error is thrown, a stack trace is printed, and the Node.js process exits.</p> <pre data-language=\"js\">const myEmitter = new MyEmitter();\nmyEmitter.emit('error', new Error('whoops!'));\n// Throws and crashes Node.js\n</pre> <p>To guard against crashing the Node.js process, a listener can be registered on the <a href=\"process#process_event_uncaughtexception\"><code>process</code> object's <code>uncaughtException</code> event</a> or the <a href=\"domain\"><code>domain</code></a> module can be used. (<em>Note, however, that the <code>domain</code> module has been deprecated</em>)</p> <pre data-language=\"js\">const myEmitter = new MyEmitter();\n\nprocess.on('uncaughtException', (err) =&gt; {\n  console.error('whoops! there was an error');\n});\n\nmyEmitter.emit('error', new Error('whoops!'));\n// Prints: whoops! there was an error\n</pre> <p>As a best practice, listeners should always be added for the <code>'error'</code> events.</p> <pre data-language=\"js\">const myEmitter = new MyEmitter();\nmyEmitter.on('error', (err) =&gt; {\n  console.error('whoops! there was an error');\n});\nmyEmitter.emit('error', new Error('whoops!'));\n// Prints: whoops! there was an error\n</pre> <h2 id=\"events_class_eventemitter\">Class: EventEmitter</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.26</span> </div>\n<p>The <code>EventEmitter</code> class is defined and exposed by the <code>events</code> module:</p> <pre data-language=\"js\">const EventEmitter = require('events');\n</pre> <p>All EventEmitters emit the event <code>'newListener'</code> when new listeners are added and <code>'removeListener'</code> when existing listeners are removed.</p> <h3 id=\"events_event_newlistener\">Event: 'newListener'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.26</span> </div>\n<ul> <li>\n<code>eventName</code> <span class=\"type\">&lt;any&gt;</span> The name of the event being listened for</li> <li>\n<code>listener</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The event handler function</li> </ul> <p>The <code>EventEmitter</code> instance will emit its own <code>'newListener'</code> event <em>before</em> a listener is added to its internal array of listeners.</p> <p>Listeners registered for the <code>'newListener'</code> event will be passed the event name and a reference to the listener being added.</p> <p>The fact that the event is triggered before adding the listener has a subtle but important side effect: any <em>additional</em> listeners registered to the same <code>name</code> <em>within</em> the <code>'newListener'</code> callback will be inserted <em>before</em> the listener that is in the process of being added.</p> <pre data-language=\"js\">const myEmitter = new MyEmitter();\n// Only do this once so we don't loop forever\nmyEmitter.once('newListener', (event, listener) =&gt; {\n  if (event === 'event') {\n    // Insert a new listener in front\n    myEmitter.on('event', () =&gt; {\n      console.log('B');\n    });\n  }\n});\nmyEmitter.on('event', () =&gt; {\n  console.log('A');\n});\nmyEmitter.emit('event');\n// Prints:\n//   B\n//   A\n</pre> <h3 id=\"events_event_removelistener\">Event: 'removeListener'</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.1.0, v4.7.0</td> <td>\n<p>For listeners attached using <code>.once()</code>, the <code>listener</code> argument now yields the original listener function.</p> </td>\n</tr> <tr>\n<td>v0.9.3</td> <td>\n<p><span>Added in: v0.9.3</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>eventName</code> <span class=\"type\">&lt;any&gt;</span> The event name</li> <li>\n<code>listener</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The event handler function</li> </ul> <p>The <code>'removeListener'</code> event is emitted <em>after</em> the <code>listener</code> is removed.</p> <h3 id=\"events_eventemitter_listenercount_emitter_eventname\">EventEmitter.listenerCount(emitter, eventName)</h3> <div class=\"api_metadata\"> <span>Added in: v0.9.12</span><span>Deprecated since: v4.0.0</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated: Use <a href=\"#events_emitter_listenercount_eventname\"><code>emitter.listenerCount()</code></a> instead.</div>\n<p>A class method that returns the number of listeners for the given <code>eventName</code> registered on the given <code>emitter</code>.</p> <pre data-language=\"js\">const myEmitter = new MyEmitter();\nmyEmitter.on('event', () =&gt; {});\nmyEmitter.on('event', () =&gt; {});\nconsole.log(EventEmitter.listenerCount(myEmitter, 'event'));\n// Prints: 2\n</pre> <h3 id=\"events_eventemitter_defaultmaxlisteners\">EventEmitter.defaultMaxListeners</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.2</span> </div>\n<p>By default, a maximum of <code>10</code> listeners can be registered for any single event. This limit can be changed for individual <code>EventEmitter</code> instances using the <a href=\"#events_emitter_setmaxlisteners_n\"><code>emitter.setMaxListeners(n)</code></a> method. To change the default for <em>all</em> <code>EventEmitter</code> instances, the <code>EventEmitter.defaultMaxListeners</code> property can be used.</p> <p>Take caution when setting the <code>EventEmitter.defaultMaxListeners</code> because the change effects <em>all</em> <code>EventEmitter</code> instances, including those created before the change is made. However, calling <a href=\"#events_emitter_setmaxlisteners_n\"><code>emitter.setMaxListeners(n)</code></a> still has precedence over <code>EventEmitter.defaultMaxListeners</code>.</p> <p>Note that this is not a hard limit. The <code>EventEmitter</code> instance will allow more listeners to be added but will output a trace warning to stderr indicating that a \"possible EventEmitter memory leak\" has been detected. For any single <code>EventEmitter</code>, the <code>emitter.getMaxListeners()</code> and <code>emitter.setMaxListeners()</code> methods can be used to temporarily avoid this warning:</p> <pre data-language=\"js\">emitter.setMaxListeners(emitter.getMaxListeners() + 1);\nemitter.once('event', () =&gt; {\n  // do stuff\n  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));\n});\n</pre> <p>The <a href=\"cli#cli_trace_warnings\"><code>--trace-warnings</code></a> command line flag can be used to display the stack trace for such warnings.</p> <p>The emitted warning can be inspected with <a href=\"process#process_event_warning\"><code>process.on('warning')</code></a> and will have the additional <code>emitter</code>, <code>type</code> and <code>count</code> properties, referring to the event emitter instance, the event’s name and the number of attached listeners, respectively. Its <code>name</code> property is set to <code>'MaxListenersExceededWarning'</code>.</p> <h3 id=\"events_emitter_addlistener_eventname_listener\">emitter.addListener(eventName, listener)</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.26</span> </div>\n<ul> <li>\n<code>eventName</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>listener</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Alias for <code>emitter.on(eventName, listener)</code>.</p> <h3 id=\"events_emitter_emit_eventname_args\">emitter.emit(eventName[, ...args])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.26</span> </div>\n<ul> <li>\n<code>eventName</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>...args</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Synchronously calls each of the listeners registered for the event named <code>eventName</code>, in the order they were registered, passing the supplied arguments to each.</p> <p>Returns <code>true</code> if the event had listeners, <code>false</code> otherwise.</p> <h3 id=\"events_emitter_eventnames\">emitter.eventNames()</h3> <div class=\"api_metadata\"> <span>Added in: v6.0.0</span> </div>\n<p>Returns an array listing the events for which the emitter has registered listeners. The values in the array will be strings or Symbols.</p> <pre data-language=\"js\">const EventEmitter = require('events');\nconst myEE = new EventEmitter();\nmyEE.on('foo', () =&gt; {});\nmyEE.on('bar', () =&gt; {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () =&gt; {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n</pre> <h3 id=\"events_emitter_getmaxlisteners\">emitter.getMaxListeners()</h3> <div class=\"api_metadata\"> <span>Added in: v1.0.0</span> </div>\n<p>Returns the current max listener value for the <code>EventEmitter</code> which is either set by <a href=\"#events_emitter_setmaxlisteners_n\"><code>emitter.setMaxListeners(n)</code></a> or defaults to <a href=\"#events_eventemitter_defaultmaxlisteners\"><code>EventEmitter.defaultMaxListeners</code></a>.</p> <h3 id=\"events_emitter_listenercount_eventname\">emitter.listenerCount(eventName)</h3> <div class=\"api_metadata\"> <span>Added in: v3.2.0</span> </div>\n<ul> <li>\n<code>eventName</code> <span class=\"type\">&lt;any&gt;</span> The name of the event being listened for</li> </ul> <p>Returns the number of listeners listening to the event named <code>eventName</code>.</p> <h3 id=\"events_emitter_listeners_eventname\">emitter.listeners(eventName)</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>For listeners attached using <code>.once()</code> this returns the original listeners instead of wrapper functions now.</p> </td>\n</tr> <tr>\n<td>v0.1.26</td> <td>\n<p><span>Added in: v0.1.26</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>eventName</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Returns a copy of the array of listeners for the event named <code>eventName</code>.</p> <pre data-language=\"js\">server.on('connection', (stream) =&gt; {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n</pre> <h3 id=\"events_emitter_on_eventname_listener\">emitter.on(eventName, listener)</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.101</span> </div>\n<ul> <li>\n<code>eventName</code> <span class=\"type\">&lt;any&gt;</span> The name of the event.</li> <li>\n<code>listener</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The callback function</li> </ul> <p>Adds the <code>listener</code> function to the end of the listeners array for the event named <code>eventName</code>. No checks are made to see if the <code>listener</code> has already been added. Multiple calls passing the same combination of <code>eventName</code> and <code>listener</code> will result in the <code>listener</code> being added, and called, multiple times.</p> <pre data-language=\"js\">server.on('connection', (stream) =&gt; {\n  console.log('someone connected!');\n});\n</pre> <p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p> <p>By default, event listeners are invoked in the order they are added. The <code>emitter.prependListener()</code> method can be used as an alternative to add the event listener to the beginning of the listeners array.</p> <pre data-language=\"js\">const myEE = new EventEmitter();\nmyEE.on('foo', () =&gt; console.log('a'));\nmyEE.prependListener('foo', () =&gt; console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n</pre> <h3 id=\"events_emitter_once_eventname_listener\">emitter.once(eventName, listener)</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.0</span> </div>\n<ul> <li>\n<code>eventName</code> <span class=\"type\">&lt;any&gt;</span> The name of the event.</li> <li>\n<code>listener</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The callback function</li> </ul> <p>Adds a <strong>one time</strong> <code>listener</code> function for the event named <code>eventName</code>. The next time <code>eventName</code> is triggered, this listener is removed and then invoked.</p> <pre data-language=\"js\">server.once('connection', (stream) =&gt; {\n  console.log('Ah, we have our first user!');\n});\n</pre> <p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p> <p>By default, event listeners are invoked in the order they are added. The <code>emitter.prependOnceListener()</code> method can be used as an alternative to add the event listener to the beginning of the listeners array.</p> <pre data-language=\"js\">const myEE = new EventEmitter();\nmyEE.once('foo', () =&gt; console.log('a'));\nmyEE.prependOnceListener('foo', () =&gt; console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n</pre> <h3 id=\"events_emitter_prependlistener_eventname_listener\">emitter.prependListener(eventName, listener)</h3> <div class=\"api_metadata\"> <span>Added in: v6.0.0</span> </div>\n<ul> <li>\n<code>eventName</code> <span class=\"type\">&lt;any&gt;</span> The name of the event.</li> <li>\n<code>listener</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The callback function</li> </ul> <p>Adds the <code>listener</code> function to the <em>beginning</em> of the listeners array for the event named <code>eventName</code>. No checks are made to see if the <code>listener</code> has already been added. Multiple calls passing the same combination of <code>eventName</code> and <code>listener</code> will result in the <code>listener</code> being added, and called, multiple times.</p> <pre data-language=\"js\">server.prependListener('connection', (stream) =&gt; {\n  console.log('someone connected!');\n});\n</pre> <p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p> <h3 id=\"events_emitter_prependoncelistener_eventname_listener\">emitter.prependOnceListener(eventName, listener)</h3> <div class=\"api_metadata\"> <span>Added in: v6.0.0</span> </div>\n<ul> <li>\n<code>eventName</code> <span class=\"type\">&lt;any&gt;</span> The name of the event.</li> <li>\n<code>listener</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The callback function</li> </ul> <p>Adds a <strong>one time</strong> <code>listener</code> function for the event named <code>eventName</code> to the <em>beginning</em> of the listeners array. The next time <code>eventName</code> is triggered, this listener is removed, and then invoked.</p> <pre data-language=\"js\">server.prependOnceListener('connection', (stream) =&gt; {\n  console.log('Ah, we have our first user!');\n});\n</pre> <p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p> <h3 id=\"events_emitter_removealllisteners_eventname\">emitter.removeAllListeners([eventName])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.26</span> </div>\n<ul> <li>\n<code>eventName</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Removes all listeners, or those of the specified <code>eventName</code>.</p> <p>Note that it is bad practice to remove listeners added elsewhere in the code, particularly when the <code>EventEmitter</code> instance was created by some other component or module (e.g. sockets or file streams).</p> <p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p> <h3 id=\"events_emitter_removelistener_eventname_listener\">emitter.removeListener(eventName, listener)</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.26</span> </div>\n<ul> <li>\n<code>eventName</code> <span class=\"type\">&lt;any&gt;</span>\n</li> <li>\n<code>listener</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Removes the specified <code>listener</code> from the listener array for the event named <code>eventName</code>.</p> <pre data-language=\"js\">const callback = (stream) =&gt; {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\n</pre> <p><code>removeListener</code> will remove, at most, one instance of a listener from the listener array. If any single listener has been added multiple times to the listener array for the specified <code>eventName</code>, then <code>removeListener</code> must be called multiple times to remove each instance.</p> <p>Note that once an event has been emitted, all listeners attached to it at the time of emitting will be called in order. This implies that any <code>removeListener()</code> or <code>removeAllListeners()</code> calls <em>after</em> emitting and <em>before</em> the last listener finishes execution will not remove them from <code>emit()</code> in progress. Subsequent events will behave as expected.</p> <pre data-language=\"js\">const myEmitter = new MyEmitter();\n\nconst callbackA = () =&gt; {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () =&gt; {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n</pre> <p>Because listeners are managed using an internal array, calling this will change the position indices of any listener registered <em>after</em> the listener being removed. This will not impact the order in which listeners are called, but it means that any copies of the listener array as returned by the <code>emitter.listeners()</code> method will need to be recreated.</p> <p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p> <h3 id=\"events_emitter_setmaxlisteners_n\">emitter.setMaxListeners(n)</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.5</span> </div>\n<ul> <li>\n<code>n</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>By default EventEmitters will print a warning if more than <code>10</code> listeners are added for a particular event. This is a useful default that helps finding memory leaks. Obviously, not all events should be limited to just 10 listeners. The <code>emitter.setMaxListeners()</code> method allows the limit to be modified for this specific <code>EventEmitter</code> instance. The value can be set to <code>Infinity</code> (or <code>0</code>) to indicate an unlimited number of listeners.</p> <p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/events.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/events.html</a>\n  </p>\n</div>\n","modules":"<h1 id=\"modules_modules\">Modules</h1> <div class=\"api_stability api_stability_2\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</div> <p>Node.js has a simple module loading system. In Node.js, files and modules are in one-to-one correspondence (each file is treated as a separate module).</p> <p>As an example, consider a file named <code>foo.js</code>:</p> <pre data-language=\"js\">const circle = require('./circle.js');\nconsole.log(`The area of a circle of radius 4 is ${circle.area(4)}`);\n</pre> <p>On the first line, <code>foo.js</code> loads the module <code>circle.js</code> that is in the same directory as <code>foo.js</code>.</p> <p>Here are the contents of <code>circle.js</code>:</p> <pre data-language=\"js\">const { PI } = Math;\n\nexports.area = (r) =&gt; PI * r ** 2;\n\nexports.circumference = (r) =&gt; 2 * PI * r;\n</pre> <p>The module <code>circle.js</code> has exported the functions <code>area()</code> and <code>circumference()</code>. To add functions and objects to the root of your module, you can add them to the special <code>exports</code> object.</p> <p>Variables local to the module will be private, because the module is wrapped in a function by Node.js (see <a href=\"#modules_the_module_wrapper\">module wrapper</a>). In this example, the variable <code>PI</code> is private to <code>circle.js</code>.</p> <p>If you want the root of your module's export to be a function (such as a constructor) or if you want to export a complete object in one assignment instead of building it one property at a time, assign it to <code>module.exports</code> instead of <code>exports</code>.</p> <p>Below, <code>bar.js</code> makes use of the <code>square</code> module, which exports a constructor:</p> <pre data-language=\"js\">const square = require('./square.js');\nconst mySquare = square(2);\nconsole.log(`The area of my square is ${mySquare.area()}`);\n</pre> <p>The <code>square</code> module is defined in <code>square.js</code>:</p> <pre data-language=\"js\">// assigning to exports will not modify module, must use module.exports\nmodule.exports = (width) =&gt; {\n  return {\n    area: () =&gt; width ** 2\n  };\n};\n</pre> <p>The module system is implemented in the <code>require('module')</code> module.</p> <h2 id=\"modules_accessing_the_main_module\">Accessing the main module</h2>  <p>When a file is run directly from Node.js, <code>require.main</code> is set to its <code>module</code>. That means that you can determine whether a file has been run directly by testing</p> <pre data-language=\"js\">require.main === module\n</pre> <p>For a file <code>foo.js</code>, this will be <code>true</code> if run via <code>node foo.js</code>, but <code>false</code> if run by <code>require('./foo')</code>.</p> <p>Because <code>module</code> provides a <code>filename</code> property (normally equivalent to <code>__filename</code>), the entry point of the current application can be obtained by checking <code>require.main.filename</code>.</p> <h2 id=\"modules_addenda_package_manager_tips\">Addenda: Package Manager Tips</h2>  <p>The semantics of Node.js's <code>require()</code> function were designed to be general enough to support a number of reasonable directory structures. Package manager programs such as <code>dpkg</code>, <code>rpm</code>, and <code>npm</code> will hopefully find it possible to build native packages from Node.js modules without modification.</p> <p>Below we give a suggested directory structure that could work:</p> <p>Let's say that we wanted to have the folder at <code>/usr/lib/node/&lt;some-package&gt;/&lt;some-version&gt;</code> hold the contents of a specific version of a package.</p> <p>Packages can depend on one another. In order to install package <code>foo</code>, you may have to install a specific version of package <code>bar</code>. The <code>bar</code> package may itself have dependencies, and in some cases, these dependencies may even collide or form cycles.</p> <p>Since Node.js looks up the <code>realpath</code> of any modules it loads (that is, resolves symlinks), and then looks for their dependencies in the <code>node_modules</code> folders as described <a href=\"#modules_loading_from_node_modules_folders\">here</a>, this situation is very simple to resolve with the following architecture:</p> <ul> <li>\n<code>/usr/lib/node/foo/1.2.3/</code> - Contents of the <code>foo</code> package, version 1.2.3.</li> <li>\n<code>/usr/lib/node/bar/4.3.2/</code> - Contents of the <code>bar</code> package that <code>foo</code> depends on.</li> <li>\n<code>/usr/lib/node/foo/1.2.3/node_modules/bar</code> - Symbolic link to <code>/usr/lib/node/bar/4.3.2/</code>.</li> <li>\n<code>/usr/lib/node/bar/4.3.2/node_modules/*</code> - Symbolic links to the packages that <code>bar</code> depends on.</li> </ul> <p>Thus, even if a cycle is encountered, or if there are dependency conflicts, every module will be able to get a version of its dependency that it can use.</p> <p>When the code in the <code>foo</code> package does <code>require('bar')</code>, it will get the version that is symlinked into <code>/usr/lib/node/foo/1.2.3/node_modules/bar</code>. Then, when the code in the <code>bar</code> package calls <code>require('quux')</code>, it'll get the version that is symlinked into <code>/usr/lib/node/bar/4.3.2/node_modules/quux</code>.</p> <p>Furthermore, to make the module lookup process even more optimal, rather than putting packages directly in <code>/usr/lib/node</code>, we could put them in <code>/usr/lib/node_modules/&lt;name&gt;/&lt;version&gt;</code>. Then Node.js will not bother looking for missing dependencies in <code>/usr/node_modules</code> or <code>/node_modules</code>.</p> <p>In order to make modules available to the Node.js REPL, it might be useful to also add the <code>/usr/lib/node_modules</code> folder to the <code>$NODE_PATH</code> environment variable. Since the module lookups using <code>node_modules</code> folders are all relative, and based on the real path of the files making the calls to <code>require()</code>, the packages themselves can be anywhere.</p> <h2 id=\"modules_all_together\">All Together...</h2>  <p>To get the exact filename that will be loaded when <code>require()</code> is called, use the <code>require.resolve()</code> function.</p> <p>Putting together all of the above, here is the high-level algorithm in pseudocode of what <code>require.resolve()</code> does:</p> <pre data-language=\"txt\">require(X) from module at path Y\n1. If X is a core module,\n   a. return the core module\n   b. STOP\n2. If X begins with '/'\n   a. set Y to be the filesystem root\n3. If X begins with './' or '/' or '../'\n   a. LOAD_AS_FILE(Y + X)\n   b. LOAD_AS_DIRECTORY(Y + X)\n4. LOAD_NODE_MODULES(X, dirname(Y))\n5. THROW \"not found\"\n\nLOAD_AS_FILE(X)\n1. If X is a file, load X as JavaScript text.  STOP\n2. If X.js is a file, load X.js as JavaScript text.  STOP\n3. If X.json is a file, parse X.json to a JavaScript Object.  STOP\n4. If X.node is a file, load X.node as binary addon.  STOP\n\nLOAD_INDEX(X)\n1. If X/index.js is a file, load X/index.js as JavaScript text.  STOP\n2. If X/index.json is a file, parse X/index.json to a JavaScript object. STOP\n3. If X/index.node is a file, load X/index.node as binary addon.  STOP\n\nLOAD_AS_DIRECTORY(X)\n1. If X/package.json is a file,\n   a. Parse X/package.json, and look for \"main\" field.\n   b. let M = X + (json main field)\n   c. LOAD_AS_FILE(M)\n   d. LOAD_INDEX(M)\n2. LOAD_INDEX(X)\n\nLOAD_NODE_MODULES(X, START)\n1. let DIRS=NODE_MODULES_PATHS(START)\n2. for each DIR in DIRS:\n   a. LOAD_AS_FILE(DIR/X)\n   b. LOAD_AS_DIRECTORY(DIR/X)\n\nNODE_MODULES_PATHS(START)\n1. let PARTS = path split(START)\n2. let I = count of PARTS - 1\n3. let DIRS = []\n4. while I &gt;= 0,\n   a. if PARTS[I] = \"node_modules\" CONTINUE\n   b. DIR = path join(PARTS[0 .. I] + \"node_modules\")\n   c. DIRS = DIRS + DIR\n   d. let I = I - 1\n5. return DIRS\n</pre> <h2 id=\"modules_caching\">Caching</h2>  <p>Modules are cached after the first time they are loaded. This means (among other things) that every call to <code>require('foo')</code> will get exactly the same object returned, if it would resolve to the same file.</p> <p>Multiple calls to <code>require('foo')</code> may not cause the module code to be executed multiple times. This is an important feature. With it, \"partially done\" objects can be returned, thus allowing transitive dependencies to be loaded even when they would cause cycles.</p> <p>If you want to have a module execute code multiple times, then export a function, and call that function.</p> <h3 id=\"modules_module_caching_caveats\">Module Caching Caveats</h3>  <p>Modules are cached based on their resolved filename. Since modules may resolve to a different filename based on the location of the calling module (loading from <code>node_modules</code> folders), it is not a <em>guarantee</em> that <code>require('foo')</code> will always return the exact same object, if it would resolve to different files.</p> <p>Additionally, on case-insensitive file systems or operating systems, different resolved filenames can point to the same file, but the cache will still treat them as different modules and will reload the file multiple times. For example, <code>require('./foo')</code> and <code>require('./FOO')</code> return two different objects, irrespective of whether or not <code>./foo</code> and <code>./FOO</code> are the same file.</p> <h2 id=\"modules_core_modules\">Core Modules</h2>  <p>Node.js has several modules compiled into the binary. These modules are described in greater detail elsewhere in this documentation.</p> <p>The core modules are defined within Node.js's source and are located in the <code>lib/</code> folder.</p> <p>Core modules are always preferentially loaded if their identifier is passed to <code>require()</code>. For instance, <code>require('http')</code> will always return the built in HTTP module, even if there is a file by that name.</p> <h2 id=\"modules_cycles\">Cycles</h2>  <p>When there are circular <code>require()</code> calls, a module might not have finished executing when it is returned.</p> <p>Consider this situation:</p> <p><code>a.js</code>:</p> <pre data-language=\"js\">console.log('a starting');\nexports.done = false;\nconst b = require('./b.js');\nconsole.log('in a, b.done = %j', b.done);\nexports.done = true;\nconsole.log('a done');\n</pre> <p><code>b.js</code>:</p> <pre data-language=\"js\">console.log('b starting');\nexports.done = false;\nconst a = require('./a.js');\nconsole.log('in b, a.done = %j', a.done);\nexports.done = true;\nconsole.log('b done');\n</pre> <p><code>main.js</code>:</p> <pre data-language=\"js\">console.log('main starting');\nconst a = require('./a.js');\nconst b = require('./b.js');\nconsole.log('in main, a.done=%j, b.done=%j', a.done, b.done);\n</pre> <p>When <code>main.js</code> loads <code>a.js</code>, then <code>a.js</code> in turn loads <code>b.js</code>. At that point, <code>b.js</code> tries to load <code>a.js</code>. In order to prevent an infinite loop, an <strong>unfinished copy</strong> of the <code>a.js</code> exports object is returned to the <code>b.js</code> module. <code>b.js</code> then finishes loading, and its <code>exports</code> object is provided to the <code>a.js</code> module.</p> <p>By the time <code>main.js</code> has loaded both modules, they're both finished. The output of this program would thus be:</p> <pre data-language=\"txt\">$ node main.js\nmain starting\na starting\nb starting\nin b, a.done = false\nb done\nin a, b.done = true\na done\nin main, a.done=true, b.done=true\n</pre> <p>If you have cyclic module dependencies in your program, make sure to plan accordingly.</p> <h2 id=\"modules_file_modules\">File Modules</h2>  <p>If the exact filename is not found, then Node.js will attempt to load the required filename with the added extensions: <code>.js</code>, <code>.json</code>, and finally <code>.node</code>.</p> <p><code>.js</code> files are interpreted as JavaScript text files, and <code>.json</code> files are parsed as JSON text files. <code>.node</code> files are interpreted as compiled addon modules loaded with <code>dlopen</code>.</p> <p>A required module prefixed with <code>'/'</code> is an absolute path to the file. For example, <code>require('/home/marco/foo.js')</code> will load the file at <code>/home/marco/foo.js</code>.</p> <p>A required module prefixed with <code>'./'</code> is relative to the file calling <code>require()</code>. That is, <code>circle.js</code> must be in the same directory as <code>foo.js</code> for <code>require('./circle')</code> to find it.</p> <p>Without a leading '/', './', or '../' to indicate a file, the module must either be a core module or is loaded from a <code>node_modules</code> folder.</p> <p>If the given path does not exist, <code>require()</code> will throw an <a href=\"errors#errors_class_error\"><code>Error</code></a> with its <code>code</code> property set to <code>'MODULE_NOT_FOUND'</code>.</p> <h2 id=\"modules_folders_as_modules\">Folders as Modules</h2>  <p>It is convenient to organize programs and libraries into self-contained directories, and then provide a single entry point to that library. There are three ways in which a folder may be passed to <code>require()</code> as an argument.</p> <p>The first is to create a <code>package.json</code> file in the root of the folder, which specifies a <code>main</code> module. An example package.json file might look like this:</p> <pre data-language=\"json\">{ \"name\" : \"some-library\",\n  \"main\" : \"./lib/some-library.js\" }\n</pre> <p>If this was in a folder at <code>./some-library</code>, then <code>require('./some-library')</code> would attempt to load <code>./some-library/lib/some-library.js</code>.</p> <p>This is the extent of Node.js's awareness of package.json files.</p> <p>Note: If the file specified by the <code>\"main\"</code> entry of <code>package.json</code> is missing and can not be resolved, Node.js will report the entire module as missing with the default error:</p> <pre data-language=\"txt\">Error: Cannot find module 'some-library'\n</pre> <p>If there is no package.json file present in the directory, then Node.js will attempt to load an <code>index.js</code> or <code>index.node</code> file out of that directory. For example, if there was no package.json file in the above example, then <code>require('./some-library')</code> would attempt to load:</p> <ul> <li><code>./some-library/index.js</code></li> <li><code>./some-library/index.node</code></li> </ul> <h2 id=\"modules_loading_from_node_modules_folders\">Loading from <code>node_modules</code> Folders</h2>  <p>If the module identifier passed to <code>require()</code> is not a <a href=\"#modules_core_modules\">core</a> module, and does not begin with <code>'/'</code>, <code>'../'</code>, or <code>'./'</code>, then Node.js starts at the parent directory of the current module, and adds <code>/node_modules</code>, and attempts to load the module from that location. Node will not append <code>node_modules</code> to a path already ending in <code>node_modules</code>.</p> <p>If it is not found there, then it moves to the parent directory, and so on, until the root of the file system is reached.</p> <p>For example, if the file at <code>'/home/ry/projects/foo.js'</code> called <code>require('bar.js')</code>, then Node.js would look in the following locations, in this order:</p> <ul> <li><code>/home/ry/projects/node_modules/bar.js</code></li> <li><code>/home/ry/node_modules/bar.js</code></li> <li><code>/home/node_modules/bar.js</code></li> <li><code>/node_modules/bar.js</code></li> </ul> <p>This allows programs to localize their dependencies, so that they do not clash.</p> <p>You can require specific files or sub modules distributed with a module by including a path suffix after the module name. For instance <code>require('example-module/path/to/file')</code> would resolve <code>path/to/file</code> relative to where <code>example-module</code> is located. The suffixed path follows the same module resolution semantics.</p> <h2 id=\"modules_loading_from_the_global_folders\">Loading from the global folders</h2>  <p>If the <code>NODE_PATH</code> environment variable is set to a colon-delimited list of absolute paths, then Node.js will search those paths for modules if they are not found elsewhere. (Note: On Windows, <code>NODE_PATH</code> is delimited by semicolons instead of colons.)</p> <p><code>NODE_PATH</code> was originally created to support loading modules from varying paths before the current <a href=\"#modules_all_together\">module resolution</a> algorithm was frozen.</p> <p><code>NODE_PATH</code> is still supported, but is less necessary now that the Node.js ecosystem has settled on a convention for locating dependent modules. Sometimes deployments that rely on <code>NODE_PATH</code> show surprising behavior when people are unaware that <code>NODE_PATH</code> must be set. Sometimes a module's dependencies change, causing a different version (or even a different module) to be loaded as the <code>NODE_PATH</code> is searched.</p> <p>Additionally, Node.js will search in the following locations:</p> <ul> <li>1: <code>$HOME/.node_modules</code>\n</li> <li>2: <code>$HOME/.node_libraries</code>\n</li> <li>3: <code>$PREFIX/lib/node</code>\n</li> </ul> <p>Where <code>$HOME</code> is the user's home directory, and <code>$PREFIX</code> is Node.js's configured <code>node_prefix</code>.</p> <p>These are mostly for historic reasons. <strong>You are highly encouraged to place your dependencies locally in <code>node_modules</code> folders.</strong> They will be loaded faster, and more reliably.</p> <h2 id=\"modules_the_module_wrapper\">The module wrapper</h2>  <p>Before a module's code is executed, Node.js will wrap it with a function wrapper that looks like the following:</p> <pre data-language=\"js\">(function (exports, require, module, __filename, __dirname) {\n// Your module code actually lives in here\n});\n</pre> <p>By doing this, Node.js achieves a few things:</p> <ul> <li>It keeps top-level variables (defined with <code>var</code>, <code>const</code> or <code>let</code>) scoped to the module rather than the global object.</li> <li>It helps to provide some global-looking variables that are actually specific to the module, such as:<ul> <li>The <code>module</code> and <code>exports</code> objects that the implementor can use to export values from the module.</li> <li>The convenience variables <code>__filename</code> and <code>__dirname</code>, containing the module's absolute filename and directory path.</li> </ul> </li> </ul> <h2 id=\"modules_the_module_object\">The <code>module</code> Object</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.16</span> </div>  <ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li> </ul> <p>In each module, the <code>module</code> free variable is a reference to the object representing the current module. For convenience, <code>module.exports</code> is also accessible via the <code>exports</code> module-global. <code>module</code> is not actually a global but rather local to each module.</p> <h3 id=\"modules_module_children\">module.children</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.16</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a></li> </ul> <p>The module objects required by this one.</p> <h3 id=\"modules_module_exports\">module.exports</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.16</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li> </ul> <p>The <code>module.exports</code> object is created by the Module system. Sometimes this is not acceptable; many want their module to be an instance of some class. To do this, assign the desired export object to <code>module.exports</code>. Note that assigning the desired object to <code>exports</code> will simply rebind the local <code>exports</code> variable, which is probably not what you want to do.</p> <p>For example suppose we were making a module called <code>a.js</code></p> <pre data-language=\"js\">const EventEmitter = require('events');\n\nmodule.exports = new EventEmitter();\n\n// Do some work, and after some time emit\n// the 'ready' event from the module itself.\nsetTimeout(() =&gt; {\n  module.exports.emit('ready');\n}, 1000);\n</pre> <p>Then in another file we could do</p> <pre data-language=\"js\">const a = require('./a');\na.on('ready', () =&gt; {\n  console.log('module a is ready');\n});\n</pre> <p>Note that assignment to <code>module.exports</code> must be done immediately. It cannot be done in any callbacks. This does not work:</p> <p>x.js:</p> <pre data-language=\"js\">setTimeout(() =&gt; {\n  module.exports = { a: 'hello' };\n}, 0);\n</pre> <p>y.js:</p> <pre data-language=\"js\">const x = require('./x');\nconsole.log(x.a);\n</pre> <h4 id=\"modules_exports_shortcut\">exports shortcut</h4> <div class=\"api_metadata\"> <span>Added in: v0.1.16</span> </div>\n<p>The <code>exports</code> variable is available within a module's file-level scope, and is assigned the value of <code>module.exports</code> before the module is evaluated.</p> <p>It allows a shortcut, so that <code>module.exports.f = ...</code> can be written more succinctly as <code>exports.f = ...</code>. However, be aware that like any variable, if a new value is assigned to <code>exports</code>, it is no longer bound to <code>module.exports</code>:</p> <pre data-language=\"js\">module.exports.hello = true; // Exported from require of module\nexports = { hello: false };  // Not exported, only available in the module\n</pre> <p>When the <code>module.exports</code> property is being completely replaced by a new object, it is common to also reassign <code>exports</code>, for example:</p> <pre data-language=\"js\">module.exports = exports = function Constructor() {\n  // ... etc.\n};\n</pre> <p>To illustrate the behavior, imagine this hypothetical implementation of <code>require()</code>, which is quite similar to what is actually done by <code>require()</code>:</p> <pre data-language=\"js\">function require(/* ... */) {\n  const module = { exports: {} };\n  ((module, exports) =&gt; {\n    // Your module code here. In this example, define a function.\n    function someFunc() {}\n    exports = someFunc;\n    // At this point, exports is no longer a shortcut to module.exports, and\n    // this module will still export an empty default object.\n    module.exports = someFunc;\n    // At this point, the module will now export someFunc, instead of the\n    // default object.\n  })(module, module.exports);\n  return module.exports;\n}\n</pre> <h3 id=\"modules_module_filename\">module.filename</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.16</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> <p>The fully resolved filename to the module.</p> <h3 id=\"modules_module_id\">module.id</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.16</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> <p>The identifier for the module. Typically this is the fully resolved filename.</p> <h3 id=\"modules_module_loaded\">module.loaded</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.16</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li> </ul> <p>Whether or not the module is done loading, or is in the process of loading.</p> <h3 id=\"modules_module_parent\">module.parent</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.16</span> </div>\n<ul> <li>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Module object</li> </ul> <p>The module that first required this one.</p> <h3 id=\"modules_module_require_id\">module.require(id)</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.1</span> </div>\n<ul> <li>\n<code>id</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> <code>module.exports</code> from the resolved module</li> </ul> <p>The <code>module.require</code> method provides a way to load a module as if <code>require()</code> was called from the original module.</p> <p>Note that in order to do this, you must get a reference to the <code>module</code> object. Since <code>require()</code> returns the <code>module.exports</code>, and the <code>module</code> is typically <em>only</em> available within a specific module's code, it must be explicitly exported in order to be used.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/modules.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/modules.html</a>\n  </p>\n</div>\n","errors":"<h1 id=\"errors_errors\">Errors</h1>  <p>Applications running in Node.js will generally experience four categories of errors:</p> <ul> <li>Standard JavaScript errors such as:<ul> <li>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError\" class=\"type\">&lt;EvalError&gt;</a> : thrown when a call to <code>eval()</code> fails.</li> <li>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\" class=\"type\">&lt;SyntaxError&gt;</a> : thrown in response to improper JavaScript language syntax.</li> <li>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\" class=\"type\">&lt;RangeError&gt;</a> : thrown when a value is not within an expected range</li> <li>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\" class=\"type\">&lt;ReferenceError&gt;</a> : thrown when using undefined variables</li> <li>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\" class=\"type\">&lt;TypeError&gt;</a> : thrown when passing arguments of the wrong type</li> <li>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError\" class=\"type\">&lt;URIError&gt;</a> : thrown when a global URI handling function is misused.</li> </ul> </li> <li>System errors triggered by underlying operating system constraints such as attempting to open a file that does not exist, attempting to send data over a closed socket, etc;</li> <li>And User-specified errors triggered by application code.</li> <li>Assertion Errors are a special class of error that can be triggered whenever Node.js detects an exceptional logic violation that should never occur. These are raised typically by the <code>assert</code> module.</li> </ul> <p>All JavaScript and System errors raised by Node.js inherit from, or are instances of, the standard JavaScript <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a> class and are guaranteed to provide <em>at least</em> the properties available on that class.</p> <h2 id=\"errors_error_propagation_and_interception\">Error Propagation and Interception</h2>  <p>Node.js supports several mechanisms for propagating and handling errors that occur while an application is running. How these errors are reported and handled depends entirely on the type of Error and the style of the API that is called.</p> <p>All JavaScript errors are handled as exceptions that <em>immediately</em> generate and throw an error using the standard JavaScript <code>throw</code> mechanism. These are handled using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\"><code>try / catch</code> construct</a> provided by the JavaScript language.</p> <pre data-language=\"js\">// Throws with a ReferenceError because z is undefined\ntry {\n  const m = 1;\n  const n = m + z;\n} catch (err) {\n  // Handle the error here.\n}\n</pre> <p>Any use of the JavaScript <code>throw</code> mechanism will raise an exception that <em>must</em> be handled using <code>try / catch</code> or the Node.js process will exit immediately.</p> <p>With few exceptions, <em>Synchronous</em> APIs (any blocking method that does not accept a <code>callback</code> function, such as <a href=\"fs#fs_fs_readfilesync_file_options\"><code>fs.readFileSync</code></a>), will use <code>throw</code> to report errors.</p> <p>Errors that occur within <em>Asynchronous APIs</em> may be reported in multiple ways:</p> <ul> <li>Most asynchronous methods that accept a <code>callback</code> function will accept an <code>Error</code> object passed as the first argument to that function. If that first argument is not <code>null</code> and is an instance of <code>Error</code>, then an error occurred that should be handled.</li> </ul>  <pre data-language=\"js\">  const fs = require('fs');\n  fs.readFile('a file that does not exist', (err, data) =&gt; {\n    if (err) {\n      console.error('There was an error reading the file!', err);\n      return;\n    }\n    // Otherwise handle the data\n  });\n</pre> <ul> <li>\n<p>When an asynchronous method is called on an object that is an <code>EventEmitter</code>, errors can be routed to that object's <code>'error'</code> event.</p> <pre data-language=\"js\">const net = require('net');\nconst connection = net.connect('localhost');\n\n// Adding an 'error' event handler to a stream:\nconnection.on('error', (err) =&gt; {\n  // If the connection is reset by the server, or if it can't\n  // connect at all, or on any sort of error encountered by\n  // the connection, the error will be sent here.\n  console.error(err);\n});\n\nconnection.pipe(process.stdout);\n</pre> </li> <li>\n<p>A handful of typically asynchronous methods in the Node.js API may still use the <code>throw</code> mechanism to raise exceptions that must be handled using <code>try / catch</code>. There is no comprehensive list of such methods; please refer to the documentation of each method to determine the appropriate error handling mechanism required.</p> </li> </ul> <p>The use of the <code>'error'</code> event mechanism is most common for <a href=\"stream\">stream-based</a> and <a href=\"events#events_class_eventemitter\">event emitter-based</a> APIs, which themselves represent a series of asynchronous operations over time (as opposed to a single operation that may pass or fail).</p> <p>For <em>all</em> <code>EventEmitter</code> objects, if an <code>'error'</code> event handler is not provided, the error will be thrown, causing the Node.js process to report an unhandled exception and crash unless either: The <a href=\"domain\"><code>domain</code></a> module is used appropriately or a handler has been registered for the <a href=\"process#process_event_uncaughtexception\"><code>process.on('uncaughtException')</code></a> event.</p> <pre data-language=\"js\">const EventEmitter = require('events');\nconst ee = new EventEmitter();\n\nsetImmediate(() =&gt; {\n  // This will crash the process because no 'error' event\n  // handler has been added.\n  ee.emit('error', new Error('This will crash'));\n});\n</pre> <p>Errors generated in this way <em>cannot</em> be intercepted using <code>try / catch</code> as they are thrown <em>after</em> the calling code has already exited.</p> <p>Developers must refer to the documentation for each method to determine exactly how errors raised by those methods are propagated.</p> <h3 id=\"errors_node_js_style_callbacks\">Node.js style callbacks</h3>  <p>Most asynchronous methods exposed by the Node.js core API follow an idiomatic pattern referred to as a \"Node.js style callback\". With this pattern, a callback function is passed to the method as an argument. When the operation either completes or an error is raised, the callback function is called with the Error object (if any) passed as the first argument. If no error was raised, the first argument will be passed as <code>null</code>.</p> <pre data-language=\"js\">const fs = require('fs');\n\nfunction nodeStyleCallback(err, data) {\n  if (err) {\n    console.error('There was an error', err);\n    return;\n  }\n  console.log(data);\n}\n\nfs.readFile('/some/file/that/does-not-exist', nodeStyleCallback);\nfs.readFile('/some/file/that/does-exist', nodeStyleCallback);\n</pre> <p>The JavaScript <code>try / catch</code> mechanism <strong>cannot</strong> be used to intercept errors generated by asynchronous APIs. A common mistake for beginners is to try to use <code>throw</code> inside a Node.js style callback:</p> <pre data-language=\"js\">// THIS WILL NOT WORK:\nconst fs = require('fs');\n\ntry {\n  fs.readFile('/some/file/that/does-not-exist', (err, data) =&gt; {\n    // mistaken assumption: throwing here...\n    if (err) {\n      throw err;\n    }\n  });\n} catch (err) {\n  // This will not catch the throw!\n  console.error(err);\n}\n</pre> <p>This will not work because the callback function passed to <code>fs.readFile()</code> is called asynchronously. By the time the callback has been called, the surrounding code (including the <code>try { } catch (err) { }</code> block will have already exited. Throwing an error inside the callback <strong>can crash the Node.js process</strong> in most cases. If <a href=\"domain\">domains</a> are enabled, or a handler has been registered with <code>process.on('uncaughtException')</code>, such errors can be intercepted.</p> <h2 id=\"errors_class_error\">Class: Error</h2>  <p>A generic JavaScript <code>Error</code> object that does not denote any specific circumstance of why the error occurred. <code>Error</code> objects capture a \"stack trace\" detailing the point in the code at which the <code>Error</code> was instantiated, and may provide a text description of the error.</p> <p>All errors generated by Node.js, including all System and JavaScript errors, will either be instances of, or inherit from, the <code>Error</code> class.</p> <h3 id=\"errors_new_error_message\">new Error(message)</h3> <div class=\"signature\">\n<ul> <li>\n<code>message</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> </div>\n<p>Creates a new <code>Error</code> object and sets the <code>error.message</code> property to the provided text message. If an object is passed as <code>message</code>, the text message is generated by calling <code>message.toString()</code>. The <code>error.stack</code> property will represent the point in the code at which <code>new Error()</code> was called. Stack traces are dependent on <a href=\"https://github.com/v8/v8/wiki/Stack-Trace-API\">V8's stack trace API</a>. Stack traces extend only to either (a) the beginning of <em>synchronous code execution</em>, or (b) the number of frames given by the property <code>Error.stackTraceLimit</code>, whichever is smaller.</p> <h3 id=\"errors_error_capturestacktrace_targetobject_constructoropt\">Error.captureStackTrace(targetObject[, constructorOpt])</h3> <div class=\"signature\">\n<ul> <li>\n<code>targetObject</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> <li>\n<code>constructorOpt</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> </div>\n<p>Creates a <code>.stack</code> property on <code>targetObject</code>, which when accessed returns a string representing the location in the code at which <code>Error.captureStackTrace()</code> was called.</p> <pre data-language=\"js\">const myObject = {};\nError.captureStackTrace(myObject);\nmyObject.stack;  // similar to `new Error().stack`\n</pre> <p>The first line of the trace, instead of being prefixed with <code>ErrorType:\nmessage</code>, will be the result of calling <code>targetObject.toString()</code>.</p> <p>The optional <code>constructorOpt</code> argument accepts a function. If given, all frames above <code>constructorOpt</code>, including <code>constructorOpt</code>, will be omitted from the generated stack trace.</p> <p>The <code>constructorOpt</code> argument is useful for hiding implementation details of error generation from an end user. For instance:</p> <pre data-language=\"js\">function MyError() {\n  Error.captureStackTrace(this, MyError);\n}\n\n// Without passing MyError to captureStackTrace, the MyError\n// frame would show up in the .stack property. By passing\n// the constructor, we omit that frame and all frames above it.\nnew MyError().stack;\n</pre> <h3 id=\"errors_error_stacktracelimit\">Error.stackTraceLimit</h3> <div class=\"signature\">\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li> </ul> </div>\n<p>The <code>Error.stackTraceLimit</code> property specifies the number of stack frames collected by a stack trace (whether generated by <code>new Error().stack</code> or <code>Error.captureStackTrace(obj)</code>).</p> <p>The default value is <code>10</code> but may be set to any valid JavaScript number. Changes will affect any stack trace captured <em>after</em> the value has been changed.</p> <p>If set to a non-number value, or set to a negative number, stack traces will not capture any frames.</p> <h3 id=\"errors_error_message\">error.message</h3> <div class=\"signature\">\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> </div>\n<p>The <code>error.message</code> property is the string description of the error as set by calling <code>new Error(message)</code>. The <code>message</code> passed to the constructor will also appear in the first line of the stack trace of the <code>Error</code>, however changing this property after the <code>Error</code> object is created <em>may not</em> change the first line of the stack trace (for example, when <code>error.stack</code> is read before this property is changed).</p> <pre data-language=\"js\">const err = new Error('The message');\nconsole.error(err.message);\n// Prints: The message\n</pre> <h3 id=\"errors_error_stack\">error.stack</h3> <div class=\"signature\">\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> </div>\n<p>The <code>error.stack</code> property is a string describing the point in the code at which the <code>Error</code> was instantiated.</p> <p>For example:</p> <pre data-language=\"txt\">Error: Things keep happening!\n   at /home/gbusey/file.js:525:2\n   at Frobnicator.refrobulate (/home/gbusey/business-logic.js:424:21)\n   at Actor.&lt;anonymous&gt; (/home/gbusey/actors.js:400:8)\n   at increaseSynergy (/home/gbusey/actors.js:701:6)\n</pre> <p>The first line is formatted as <code>&lt;error class name&gt;: &lt;error message&gt;</code>, and is followed by a series of stack frames (each line beginning with \"at \"). Each frame describes a call site within the code that lead to the error being generated. V8 attempts to display a name for each function (by variable name, function name, or object method name), but occasionally it will not be able to find a suitable name. If V8 cannot determine a name for the function, only location information will be displayed for that frame. Otherwise, the determined function name will be displayed with location information appended in parentheses.</p> <p>It is important to note that frames are <strong>only</strong> generated for JavaScript functions. If, for example, execution synchronously passes through a C++ addon function called <code>cheetahify</code>, which itself calls a JavaScript function, the frame representing the <code>cheetahify</code> call will <strong>not</strong> be present in the stack traces:</p> <pre data-language=\"js\">const cheetahify = require('./native-binding.node');\n\nfunction makeFaster() {\n  // cheetahify *synchronously* calls speedy.\n  cheetahify(function speedy() {\n    throw new Error('oh no!');\n  });\n}\n\nmakeFaster(); // will throw:\n  // /home/gbusey/file.js:6\n  //     throw new Error('oh no!');\n  //           ^\n  // Error: oh no!\n  //     at speedy (/home/gbusey/file.js:6:11)\n  //     at makeFaster (/home/gbusey/file.js:5:3)\n  //     at Object.&lt;anonymous&gt; (/home/gbusey/file.js:10:1)\n  //     at Module._compile (module.js:456:26)\n  //     at Object.Module._extensions..js (module.js:474:10)\n  //     at Module.load (module.js:356:32)\n  //     at Function.Module._load (module.js:312:12)\n  //     at Function.Module.runMain (module.js:497:10)\n  //     at startup (node.js:119:16)\n  //     at node.js:906:3\n</pre> <p>The location information will be one of:</p> <ul> <li>\n<code>native</code>, if the frame represents a call internal to V8 (as in <code>[].forEach</code>).</li> <li>\n<code>plain-filename.js:line:column</code>, if the frame represents a call internal to Node.js.</li> <li>\n<code>/absolute/path/to/file.js:line:column</code>, if the frame represents a call in a user program, or its dependencies.</li> </ul> <p>The string representing the stack trace is lazily generated when the <code>error.stack</code> property is <strong>accessed</strong>.</p> <p>The number of frames captured by the stack trace is bounded by the smaller of <code>Error.stackTraceLimit</code> or the number of available frames on the current event loop tick.</p> <p>System-level errors are generated as augmented <code>Error</code> instances, which are detailed <a href=\"#errors_system_errors\">here</a>.</p> <h2 id=\"errors_class_rangeerror\">Class: RangeError</h2> <p>A subclass of <code>Error</code> that indicates that a provided argument was not within the set or range of acceptable values for a function; whether that is a numeric range, or outside the set of options for a given function parameter.</p> <p>For example:</p> <pre data-language=\"js\">require('net').connect(-1);\n  // throws \"RangeError: \"port\" option should be &gt;= 0 and &lt; 65536: -1\"\n</pre> <p>Node.js will generate and throw <code>RangeError</code> instances <em>immediately</em> as a form of argument validation.</p> <h2 id=\"errors_class_referenceerror\">Class: ReferenceError</h2> <p>A subclass of <code>Error</code> that indicates that an attempt is being made to access a variable that is not defined. Such errors commonly indicate typos in code, or an otherwise broken program.</p> <p>While client code may generate and propagate these errors, in practice, only V8 will do so.</p> <pre data-language=\"js\">doesNotExist;\n  // throws ReferenceError, doesNotExist is not a variable in this program.\n</pre> <p>Unless an application is dynamically generating and running code, <code>ReferenceError</code> instances should always be considered a bug in the code or its dependencies.</p> <h2 id=\"errors_class_syntaxerror\">Class: SyntaxError</h2> <p>A subclass of <code>Error</code> that indicates that a program is not valid JavaScript. These errors may only be generated and propagated as a result of code evaluation. Code evaluation may happen as a result of <code>eval</code>, <code>Function</code>, <code>require</code>, or <a href=\"vm\">vm</a>. These errors are almost always indicative of a broken program.</p> <pre data-language=\"js\">try {\n  require('vm').runInThisContext('binary ! isNotOk');\n} catch (err) {\n  // err will be a SyntaxError\n}\n</pre> <p><code>SyntaxError</code> instances are unrecoverable in the context that created them – they may only be caught by other contexts.</p> <h2 id=\"errors_class_typeerror\">Class: TypeError</h2> <p>A subclass of <code>Error</code> that indicates that a provided argument is not an allowable type. For example, passing a function to a parameter which expects a string would be considered a TypeError.</p> <pre data-language=\"js\">require('url').parse(() =&gt; { });\n  // throws TypeError, since it expected a string\n</pre> <p>Node.js will generate and throw <code>TypeError</code> instances <em>immediately</em> as a form of argument validation.</p> <h2 id=\"errors_exceptions_vs_errors\">Exceptions vs. Errors</h2>  <p>A JavaScript exception is a value that is thrown as a result of an invalid operation or as the target of a <code>throw</code> statement. While it is not required that these values are instances of <code>Error</code> or classes which inherit from <code>Error</code>, all exceptions thrown by Node.js or the JavaScript runtime <em>will</em> be instances of Error.</p> <p>Some exceptions are <em>unrecoverable</em> at the JavaScript layer. Such exceptions will <em>always</em> cause the Node.js process to crash. Examples include <code>assert()</code> checks or <code>abort()</code> calls in the C++ layer.</p> <h2 id=\"errors_system_errors\">System Errors</h2> <p>System errors are generated when exceptions occur within the program's runtime environment. Typically, these are operational errors that occur when an application violates an operating system constraint such as attempting to read a file that does not exist or when the user does not have sufficient permissions.</p> <p>System errors are typically generated at the syscall level: an exhaustive list of error codes and their meanings is available by running <code>man 2 intro</code> or <code>man 3 errno</code> on most Unices; or <a href=\"http://man7.org/linux/man-pages/man3/errno.3.html\">online</a>.</p> <p>In Node.js, system errors are represented as augmented <code>Error</code> objects with added properties.</p> <h3 id=\"errors_class_system_error\">Class: System Error</h3> <h4 id=\"errors_error_code\">error.code</h4> <div class=\"signature\">\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> </div>\n<p>The <code>error.code</code> property is a string representing the error code, which is always <code>E</code> followed by a sequence of capital letters.</p> <h4 id=\"errors_error_errno\">error.errno</h4> <div class=\"signature\">\n<ul> <li>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> </ul> </div>\n<p>The <code>error.errno</code> property is a number or a string. The number is a <strong>negative</strong> value which corresponds to the error code defined in <a href=\"http://docs.libuv.org/en/v1.x/errors.html\"><code>libuv Error handling</code></a>. See uv-errno.h header file (<code>deps/uv/include/uv-errno.h</code> in the Node.js source tree) for details. In case of a string, it is the same as <code>error.code</code>.</p> <h4 id=\"errors_error_syscall\">error.syscall</h4> <div class=\"signature\">\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> </div>\n<p>The <code>error.syscall</code> property is a string describing the <a href=\"http://man7.org/linux/man-pages/man2/syscall.2.html\">syscall</a> that failed.</p> <h4 id=\"errors_error_path\">error.path</h4> <div class=\"signature\">\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> </div>\n<p>When present (e.g. in <code>fs</code> or <code>child_process</code>), the <code>error.path</code> property is a string containing a relevant invalid pathname.</p> <h4 id=\"errors_error_address\">error.address</h4> <div class=\"signature\">\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> </div>\n<p>When present (e.g. in <code>net</code> or <code>dgram</code>), the <code>error.address</code> property is a string describing the address to which the connection failed.</p> <h4 id=\"errors_error_port\">error.port</h4> <div class=\"signature\">\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li> </ul> </div>\n<p>When present (e.g. in <code>net</code> or <code>dgram</code>), the <code>error.port</code> property is a number representing the connection's port that is not available.</p> <h3 id=\"errors_common_system_errors\">Common System Errors</h3> <p>This list is <strong>not exhaustive</strong>, but enumerates many of the common system errors encountered when writing a Node.js program. An exhaustive list may be found <a href=\"http://man7.org/linux/man-pages/man3/errno.3.html\">here</a>.</p> <ul> <li>\n<p><code>EACCES</code> (Permission denied): An attempt was made to access a file in a way forbidden by its file access permissions.</p> </li> <li>\n<p><code>EADDRINUSE</code> (Address already in use): An attempt to bind a server (<a href=\"net\"><code>net</code></a>, <a href=\"http\"><code>http</code></a>, or <a href=\"https\"><code>https</code></a>) to a local address failed due to another server on the local system already occupying that address.</p> </li> <li>\n<p><code>ECONNREFUSED</code> (Connection refused): No connection could be made because the target machine actively refused it. This usually results from trying to connect to a service that is inactive on the foreign host.</p> </li> <li>\n<p><code>ECONNRESET</code> (Connection reset by peer): A connection was forcibly closed by a peer. This normally results from a loss of the connection on the remote socket due to a timeout or reboot. Commonly encountered via the <a href=\"http\"><code>http</code></a> and <a href=\"net\"><code>net</code></a> modules.</p> </li> <li>\n<p><code>EEXIST</code> (File exists): An existing file was the target of an operation that required that the target not exist.</p> </li> <li>\n<p><code>EISDIR</code> (Is a directory): An operation expected a file, but the given pathname was a directory.</p> </li> <li>\n<p><code>EMFILE</code> (Too many open files in system): Maximum number of <a href=\"https://en.wikipedia.org/wiki/File_descriptor\">file descriptors</a> allowable on the system has been reached, and requests for another descriptor cannot be fulfilled until at least one has been closed. This is encountered when opening many files at once in parallel, especially on systems (in particular, OS X) where there is a low file descriptor limit for processes. To remedy a low limit, run <code>ulimit -n 2048</code> in the same shell that will run the Node.js process.</p> </li> <li>\n<p><code>ENOENT</code> (No such file or directory): Commonly raised by <a href=\"fs\"><code>fs</code></a> operations to indicate that a component of the specified pathname does not exist -- no entity (file or directory) could be found by the given path.</p> </li> <li>\n<p><code>ENOTDIR</code> (Not a directory): A component of the given pathname existed, but was not a directory as expected. Commonly raised by <a href=\"fs#fs_fs_readdir_path_options_callback\"><code>fs.readdir</code></a>.</p> </li> <li>\n<p><code>ENOTEMPTY</code> (Directory not empty): A directory with entries was the target of an operation that requires an empty directory -- usually <a href=\"fs#fs_fs_unlink_path_callback\"><code>fs.unlink</code></a>.</p> </li> <li>\n<p><code>EPERM</code> (Operation not permitted): An attempt was made to perform an operation that requires elevated privileges.</p> </li> <li>\n<p><code>EPIPE</code> (Broken pipe): A write on a pipe, socket, or FIFO for which there is no process to read the data. Commonly encountered at the <a href=\"net\"><code>net</code></a> and <a href=\"http\"><code>http</code></a> layers, indicative that the remote side of the stream being written to has been closed.</p> </li> <li>\n<p><code>ETIMEDOUT</code> (Operation timed out): A connect or send request failed because the connected party did not properly respond after a period of time. Usually encountered by <a href=\"http\"><code>http</code></a> or <a href=\"net\"><code>net</code></a> -- often a sign that a <code>socket.end()</code> was not properly called.</p> </li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/errors.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/errors.html</a>\n  </p>\n</div>\n","crypto":"<h1 id=\"crypto_crypto\">Crypto</h1> <div class=\"api_stability api_stability_2\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</div>\n<p>The <code>crypto</code> module provides cryptographic functionality that includes a set of wrappers for OpenSSL's hash, HMAC, cipher, decipher, sign and verify functions.</p> <p>Use <code>require('crypto')</code> to access this module.</p> <pre data-language=\"js\">const crypto = require('crypto');\n\nconst secret = 'abcdefg';\nconst hash = crypto.createHmac('sha256', secret)\n                   .update('I love cupcakes')\n                   .digest('hex');\nconsole.log(hash);\n// Prints:\n//   c0fa1bc00531bd78ef38c628449c5102aeabd49b5dc3a2a516ea6ea959d6658e\n</pre> <h2 id=\"crypto_determining_if_crypto_support_is_unavailable\">Determining if crypto support is unavailable</h2> <p>It is possible for Node.js to be built without including support for the <code>crypto</code> module. In such cases, calling <code>require('crypto')</code> will result in an error being thrown.</p> <pre data-language=\"js\">let crypto;\ntry {\n  crypto = require('crypto');\n} catch (err) {\n  console.log('crypto support is disabled!');\n}\n</pre> <h2 id=\"crypto_class_certificate\">Class: Certificate</h2> <div class=\"api_metadata\"> <span>Added in: v0.11.8</span> </div>\n<p>SPKAC is a Certificate Signing Request mechanism originally implemented by Netscape and now specified formally as part of <a href=\"http://www.w3.org/TR/html5/forms.html#the-keygen-element\">HTML5's <code>keygen</code> element</a>.</p> <p>The <code>crypto</code> module provides the <code>Certificate</code> class for working with SPKAC data. The most common usage is handling output generated by the HTML5 <code>&lt;keygen&gt;</code> element. Node.js uses <a href=\"https://www.openssl.org/docs/man1.0.2/apps/spkac.html\">OpenSSL's SPKAC implementation</a> internally.</p> <h3 id=\"crypto_new_crypto_certificate\">new crypto.Certificate()</h3> <p>Instances of the <code>Certificate</code> class can be created using the <code>new</code> keyword or by calling <code>crypto.Certificate()</code> as a function:</p> <pre data-language=\"js\">const crypto = require('crypto');\n\nconst cert1 = new crypto.Certificate();\nconst cert2 = crypto.Certificate();\n</pre> <h3 id=\"crypto_certificate_exportchallenge_spkac\">certificate.exportChallenge(spkac)</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.8</span> </div>\n<p>The <code>spkac</code> data structure includes a public key and a challenge. The <code>certificate.exportChallenge()</code> returns the challenge component in the form of a Node.js <a href=\"buffer\"><code>Buffer</code></a>. The <code>spkac</code> argument can be either a string or a <a href=\"buffer\"><code>Buffer</code></a>.</p> <pre data-language=\"js\">const cert = require('crypto').Certificate();\nconst spkac = getSpkacSomehow();\nconst challenge = cert.exportChallenge(spkac);\nconsole.log(challenge.toString('utf8'));\n// Prints: the challenge as a UTF8 string\n</pre> <h3 id=\"crypto_certificate_exportpublickey_spkac\">certificate.exportPublicKey(spkac)</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.8</span> </div>\n<p>The <code>spkac</code> data structure includes a public key and a challenge. The <code>certificate.exportPublicKey()</code> returns the public key component in the form of a Node.js <a href=\"buffer\"><code>Buffer</code></a>. The <code>spkac</code> argument can be either a string or a <a href=\"buffer\"><code>Buffer</code></a>.</p> <pre data-language=\"js\">const cert = require('crypto').Certificate();\nconst spkac = getSpkacSomehow();\nconst publicKey = cert.exportPublicKey(spkac);\nconsole.log(publicKey);\n// Prints: the public key as &lt;Buffer ...&gt;\n</pre> <h3 id=\"crypto_certificate_verifyspkac_spkac\">certificate.verifySpkac(spkac)</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.8</span> </div>\n<p>Returns <code>true</code> if the given <code>spkac</code> data structure is valid, <code>false</code> otherwise. The <code>spkac</code> argument must be a Node.js <a href=\"buffer\"><code>Buffer</code></a>.</p> <pre data-language=\"js\">const cert = require('crypto').Certificate();\nconst spkac = getSpkacSomehow();\nconsole.log(cert.verifySpkac(Buffer.from(spkac)));\n// Prints: true or false\n</pre> <h2 id=\"crypto_class_cipher\">Class: Cipher</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.94</span> </div>\n<p>Instances of the <code>Cipher</code> class are used to encrypt data. The class can be used in one of two ways:</p> <ul> <li>As a <a href=\"stream\">stream</a> that is both readable and writable, where plain unencrypted data is written to produce encrypted data on the readable side, or</li> <li>Using the <a href=\"#crypto_cipher_update_data_input_encoding_output_encoding\"><code>cipher.update()</code></a> and <a href=\"#crypto_cipher_final_output_encoding\"><code>cipher.final()</code></a> methods to produce the encrypted data.</li> </ul> <p>The <a href=\"#crypto_crypto_createcipher_algorithm_password\"><code>crypto.createCipher()</code></a> or <a href=\"#crypto_crypto_createcipheriv_algorithm_key_iv\"><code>crypto.createCipheriv()</code></a> methods are used to create <code>Cipher</code> instances. <code>Cipher</code> objects are not to be created directly using the <code>new</code> keyword.</p> <p>Example: Using <code>Cipher</code> objects as streams:</p> <pre data-language=\"js\">const crypto = require('crypto');\nconst cipher = crypto.createCipher('aes192', 'a password');\n\nlet encrypted = '';\ncipher.on('readable', () =&gt; {\n  const data = cipher.read();\n  if (data)\n    encrypted += data.toString('hex');\n});\ncipher.on('end', () =&gt; {\n  console.log(encrypted);\n  // Prints: ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504\n});\n\ncipher.write('some clear text data');\ncipher.end();\n</pre> <p>Example: Using <code>Cipher</code> and piped streams:</p> <pre data-language=\"js\">const crypto = require('crypto');\nconst fs = require('fs');\nconst cipher = crypto.createCipher('aes192', 'a password');\n\nconst input = fs.createReadStream('test.js');\nconst output = fs.createWriteStream('test.enc');\n\ninput.pipe(cipher).pipe(output);\n</pre> <p>Example: Using the <a href=\"#crypto_cipher_update_data_input_encoding_output_encoding\"><code>cipher.update()</code></a> and <a href=\"#crypto_cipher_final_output_encoding\"><code>cipher.final()</code></a> methods:</p> <pre data-language=\"js\">const crypto = require('crypto');\nconst cipher = crypto.createCipher('aes192', 'a password');\n\nlet encrypted = cipher.update('some clear text data', 'utf8', 'hex');\nencrypted += cipher.final('hex');\nconsole.log(encrypted);\n// Prints: ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504\n</pre> <h3 id=\"crypto_cipher_final_output_encoding\">cipher.final([output_encoding])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.94</span> </div>\n<p>Returns any remaining enciphered contents. If <code>output_encoding</code> parameter is one of <code>'latin1'</code>, <code>'base64'</code> or <code>'hex'</code>, a string is returned. If an <code>output_encoding</code> is not provided, a <a href=\"buffer\"><code>Buffer</code></a> is returned.</p> <p>Once the <code>cipher.final()</code> method has been called, the <code>Cipher</code> object can no longer be used to encrypt data. Attempts to call <code>cipher.final()</code> more than once will result in an error being thrown.</p> <h3 id=\"crypto_cipher_setaad_buffer\">cipher.setAAD(buffer)</h3> <div class=\"api_metadata\"> <span>Added in: v1.0.0</span> </div>\n<p>When using an authenticated encryption mode (only <code>GCM</code> is currently supported), the <code>cipher.setAAD()</code> method sets the value used for the <em>additional authenticated data</em> (AAD) input parameter.</p> <p>Returns <code>this</code> for method chaining.</p> <h3 id=\"crypto_cipher_getauthtag\">cipher.getAuthTag()</h3> <div class=\"api_metadata\"> <span>Added in: v1.0.0</span> </div>\n<p>When using an authenticated encryption mode (only <code>GCM</code> is currently supported), the <code>cipher.getAuthTag()</code> method returns a <a href=\"buffer\"><code>Buffer</code></a> containing the <em>authentication tag</em> that has been computed from the given data.</p> <p>The <code>cipher.getAuthTag()</code> method should only be called after encryption has been completed using the <a href=\"#crypto_cipher_final_output_encoding\"><code>cipher.final()</code></a> method.</p> <h3 id=\"crypto_cipher_setautopadding_auto_padding_true\">cipher.setAutoPadding(auto_padding=true)</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.1</span> </div>\n<p>When using block encryption algorithms, the <code>Cipher</code> class will automatically add padding to the input data to the appropriate block size. To disable the default padding call <code>cipher.setAutoPadding(false)</code>.</p> <p>When <code>auto_padding</code> is <code>false</code>, the length of the entire input data must be a multiple of the cipher's block size or <a href=\"#crypto_cipher_final_output_encoding\"><code>cipher.final()</code></a> will throw an Error. Disabling automatic padding is useful for non-standard padding, for instance using <code>0x0</code> instead of PKCS padding.</p> <p>The <code>cipher.setAutoPadding()</code> method must be called before <a href=\"#crypto_cipher_final_output_encoding\"><code>cipher.final()</code></a>.</p> <p>Returns <code>this</code> for method chaining.</p> <h3 id=\"crypto_cipher_update_data_input_encoding_output_encoding\">cipher.update(data[, input_encoding][, output_encoding])</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>The default <code>input_encoding</code> changed from <code>binary</code> to <code>utf8</code>.</p> </td>\n</tr> <tr>\n<td>v0.1.94</td> <td>\n<p><span>Added in: v0.1.94</span></p> </td>\n</tr> </table> </details> </div>\n<p>Updates the cipher with <code>data</code>. If the <code>input_encoding</code> argument is given, its value must be one of <code>'utf8'</code>, <code>'ascii'</code>, or <code>'latin1'</code> and the <code>data</code> argument is a string using the specified encoding. If the <code>input_encoding</code> argument is not given, <code>data</code> must be a <a href=\"buffer\"><code>Buffer</code></a>. If <code>data</code> is a <a href=\"buffer\"><code>Buffer</code></a> then <code>input_encoding</code> is ignored.</p> <p>The <code>output_encoding</code> specifies the output format of the enciphered data, and can be <code>'latin1'</code>, <code>'base64'</code> or <code>'hex'</code>. If the <code>output_encoding</code> is specified, a string using the specified encoding is returned. If no <code>output_encoding</code> is provided, a <a href=\"buffer\"><code>Buffer</code></a> is returned.</p> <p>The <code>cipher.update()</code> method can be called multiple times with new data until <a href=\"#crypto_cipher_final_output_encoding\"><code>cipher.final()</code></a> is called. Calling <code>cipher.update()</code> after <a href=\"#crypto_cipher_final_output_encoding\"><code>cipher.final()</code></a> will result in an error being thrown.</p> <h2 id=\"crypto_class_decipher\">Class: Decipher</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.94</span> </div>\n<p>Instances of the <code>Decipher</code> class are used to decrypt data. The class can be used in one of two ways:</p> <ul> <li>As a <a href=\"stream\">stream</a> that is both readable and writable, where plain encrypted data is written to produce unencrypted data on the readable side, or</li> <li>Using the <a href=\"#crypto_decipher_update_data_input_encoding_output_encoding\"><code>decipher.update()</code></a> and <a href=\"#crypto_decipher_final_output_encoding\"><code>decipher.final()</code></a> methods to produce the unencrypted data.</li> </ul> <p>The <a href=\"#crypto_crypto_createdecipher_algorithm_password\"><code>crypto.createDecipher()</code></a> or <a href=\"#crypto_crypto_createdecipheriv_algorithm_key_iv\"><code>crypto.createDecipheriv()</code></a> methods are used to create <code>Decipher</code> instances. <code>Decipher</code> objects are not to be created directly using the <code>new</code> keyword.</p> <p>Example: Using <code>Decipher</code> objects as streams:</p> <pre data-language=\"js\">const crypto = require('crypto');\nconst decipher = crypto.createDecipher('aes192', 'a password');\n\nlet decrypted = '';\ndecipher.on('readable', () =&gt; {\n  const data = decipher.read();\n  if (data)\n    decrypted += data.toString('utf8');\n});\ndecipher.on('end', () =&gt; {\n  console.log(decrypted);\n  // Prints: some clear text data\n});\n\nconst encrypted = 'ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504';\ndecipher.write(encrypted, 'hex');\ndecipher.end();\n</pre> <p>Example: Using <code>Decipher</code> and piped streams:</p> <pre data-language=\"js\">const crypto = require('crypto');\nconst fs = require('fs');\nconst decipher = crypto.createDecipher('aes192', 'a password');\n\nconst input = fs.createReadStream('test.enc');\nconst output = fs.createWriteStream('test.js');\n\ninput.pipe(decipher).pipe(output);\n</pre> <p>Example: Using the <a href=\"#crypto_decipher_update_data_input_encoding_output_encoding\"><code>decipher.update()</code></a> and <a href=\"#crypto_decipher_final_output_encoding\"><code>decipher.final()</code></a> methods:</p> <pre data-language=\"js\">const crypto = require('crypto');\nconst decipher = crypto.createDecipher('aes192', 'a password');\n\nconst encrypted = 'ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504';\nlet decrypted = decipher.update(encrypted, 'hex', 'utf8');\ndecrypted += decipher.final('utf8');\nconsole.log(decrypted);\n// Prints: some clear text data\n</pre> <h3 id=\"crypto_decipher_final_output_encoding\">decipher.final([output_encoding])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.94</span> </div>\n<p>Returns any remaining deciphered contents. If <code>output_encoding</code> parameter is one of <code>'latin1'</code>, <code>'ascii'</code> or <code>'utf8'</code>, a string is returned. If an <code>output_encoding</code> is not provided, a <a href=\"buffer\"><code>Buffer</code></a> is returned.</p> <p>Once the <code>decipher.final()</code> method has been called, the <code>Decipher</code> object can no longer be used to decrypt data. Attempts to call <code>decipher.final()</code> more than once will result in an error being thrown.</p> <h3 id=\"crypto_decipher_setaad_buffer\">decipher.setAAD(buffer)</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.2.0</td> <td>\n<p>This method now returns a reference to <code>decipher</code>.</p> </td>\n</tr> <tr>\n<td>v1.0.0</td> <td>\n<p><span>Added in: v1.0.0</span></p> </td>\n</tr> </table> </details> </div>\n<p>When using an authenticated encryption mode (only <code>GCM</code> is currently supported), the <code>decipher.setAAD()</code> method sets the value used for the <em>additional authenticated data</em> (AAD) input parameter.</p> <p>Returns <code>this</code> for method chaining.</p> <h3 id=\"crypto_decipher_setauthtag_buffer\">decipher.setAuthTag(buffer)</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.2.0</td> <td>\n<p>This method now returns a reference to <code>decipher</code>.</p> </td>\n</tr> <tr>\n<td>v1.0.0</td> <td>\n<p><span>Added in: v1.0.0</span></p> </td>\n</tr> </table> </details> </div>\n<p>When using an authenticated encryption mode (only <code>GCM</code> is currently supported), the <code>decipher.setAuthTag()</code> method is used to pass in the received <em>authentication tag</em>. If no tag is provided, or if the cipher text has been tampered with, <a href=\"#crypto_decipher_final_output_encoding\"><code>decipher.final()</code></a> with throw, indicating that the cipher text should be discarded due to failed authentication.</p> <p>Returns <code>this</code> for method chaining.</p> <h3 id=\"crypto_decipher_setautopadding_auto_padding_true\">decipher.setAutoPadding(auto_padding=true)</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.1</span> </div>\n<p>When data has been encrypted without standard block padding, calling <code>decipher.setAutoPadding(false)</code> will disable automatic padding to prevent <a href=\"#crypto_decipher_final_output_encoding\"><code>decipher.final()</code></a> from checking for and removing padding.</p> <p>Turning auto padding off will only work if the input data's length is a multiple of the ciphers block size.</p> <p>The <code>decipher.setAutoPadding()</code> method must be called before <a href=\"#crypto_decipher_update_data_input_encoding_output_encoding\"><code>decipher.update()</code></a>.</p> <p>Returns <code>this</code> for method chaining.</p> <h3 id=\"crypto_decipher_update_data_input_encoding_output_encoding\">decipher.update(data[, input_encoding][, output_encoding])</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>The default <code>input_encoding</code> changed from <code>binary</code> to <code>utf8</code>.</p> </td>\n</tr> <tr>\n<td>v0.1.94</td> <td>\n<p><span>Added in: v0.1.94</span></p> </td>\n</tr> </table> </details> </div>\n<p>Updates the decipher with <code>data</code>. If the <code>input_encoding</code> argument is given, its value must be one of <code>'latin1'</code>, <code>'base64'</code>, or <code>'hex'</code> and the <code>data</code> argument is a string using the specified encoding. If the <code>input_encoding</code> argument is not given, <code>data</code> must be a <a href=\"buffer\"><code>Buffer</code></a>. If <code>data</code> is a <a href=\"buffer\"><code>Buffer</code></a> then <code>input_encoding</code> is ignored.</p> <p>The <code>output_encoding</code> specifies the output format of the enciphered data, and can be <code>'latin1'</code>, <code>'ascii'</code> or <code>'utf8'</code>. If the <code>output_encoding</code> is specified, a string using the specified encoding is returned. If no <code>output_encoding</code> is provided, a <a href=\"buffer\"><code>Buffer</code></a> is returned.</p> <p>The <code>decipher.update()</code> method can be called multiple times with new data until <a href=\"#crypto_decipher_final_output_encoding\"><code>decipher.final()</code></a> is called. Calling <code>decipher.update()</code> after <a href=\"#crypto_decipher_final_output_encoding\"><code>decipher.final()</code></a> will result in an error being thrown.</p> <h2 id=\"crypto_class_diffiehellman\">Class: DiffieHellman</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.0</span> </div>\n<p>The <code>DiffieHellman</code> class is a utility for creating Diffie-Hellman key exchanges.</p> <p>Instances of the <code>DiffieHellman</code> class can be created using the <a href=\"#crypto_crypto_creatediffiehellman_prime_prime_encoding_generator_generator_encoding\"><code>crypto.createDiffieHellman()</code></a> function.</p> <pre data-language=\"js\">const crypto = require('crypto');\nconst assert = require('assert');\n\n// Generate Alice's keys...\nconst alice = crypto.createDiffieHellman(2048);\nconst aliceKey = alice.generateKeys();\n\n// Generate Bob's keys...\nconst bob = crypto.createDiffieHellman(alice.getPrime(), alice.getGenerator());\nconst bobKey = bob.generateKeys();\n\n// Exchange and generate the secret...\nconst aliceSecret = alice.computeSecret(bobKey);\nconst bobSecret = bob.computeSecret(aliceKey);\n\n// OK\nassert.strictEqual(aliceSecret.toString('hex'), bobSecret.toString('hex'));\n</pre> <h3 id=\"crypto_diffiehellman_computesecret_other_public_key_input_encoding_output_encoding\">diffieHellman.computeSecret(other_public_key[, input_encoding][, output_encoding])</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.0</span> </div>\n<p>Computes the shared secret using <code>other_public_key</code> as the other party's public key and returns the computed shared secret. The supplied key is interpreted using the specified <code>input_encoding</code>, and secret is encoded using specified <code>output_encoding</code>. Encodings can be <code>'latin1'</code>, <code>'hex'</code>, or <code>'base64'</code>. If the <code>input_encoding</code> is not provided, <code>other_public_key</code> is expected to be a <a href=\"buffer\"><code>Buffer</code></a>.</p> <p>If <code>output_encoding</code> is given a string is returned; otherwise, a <a href=\"buffer\"><code>Buffer</code></a> is returned.</p> <h3 id=\"crypto_diffiehellman_generatekeys_encoding\">diffieHellman.generateKeys([encoding])</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.0</span> </div>\n<p>Generates private and public Diffie-Hellman key values, and returns the public key in the specified <code>encoding</code>. This key should be transferred to the other party. Encoding can be <code>'latin1'</code>, <code>'hex'</code>, or <code>'base64'</code>. If <code>encoding</code> is provided a string is returned; otherwise a <a href=\"buffer\"><code>Buffer</code></a> is returned.</p> <h3 id=\"crypto_diffiehellman_getgenerator_encoding\">diffieHellman.getGenerator([encoding])</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.0</span> </div>\n<p>Returns the Diffie-Hellman generator in the specified <code>encoding</code>, which can be <code>'latin1'</code>, <code>'hex'</code>, or <code>'base64'</code>. If <code>encoding</code> is provided a string is returned; otherwise a <a href=\"buffer\"><code>Buffer</code></a> is returned.</p> <h3 id=\"crypto_diffiehellman_getprime_encoding\">diffieHellman.getPrime([encoding])</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.0</span> </div>\n<p>Returns the Diffie-Hellman prime in the specified <code>encoding</code>, which can be <code>'latin1'</code>, <code>'hex'</code>, or <code>'base64'</code>. If <code>encoding</code> is provided a string is returned; otherwise a <a href=\"buffer\"><code>Buffer</code></a> is returned.</p> <h3 id=\"crypto_diffiehellman_getprivatekey_encoding\">diffieHellman.getPrivateKey([encoding])</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.0</span> </div>\n<p>Returns the Diffie-Hellman private key in the specified <code>encoding</code>, which can be <code>'latin1'</code>, <code>'hex'</code>, or <code>'base64'</code>. If <code>encoding</code> is provided a string is returned; otherwise a <a href=\"buffer\"><code>Buffer</code></a> is returned.</p> <h3 id=\"crypto_diffiehellman_getpublickey_encoding\">diffieHellman.getPublicKey([encoding])</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.0</span> </div>\n<p>Returns the Diffie-Hellman public key in the specified <code>encoding</code>, which can be <code>'latin1'</code>, <code>'hex'</code>, or <code>'base64'</code>. If <code>encoding</code> is provided a string is returned; otherwise a <a href=\"buffer\"><code>Buffer</code></a> is returned.</p> <h3 id=\"crypto_diffiehellman_setprivatekey_private_key_encoding\">diffieHellman.setPrivateKey(private_key[, encoding])</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.0</span> </div>\n<p>Sets the Diffie-Hellman private key. If the <code>encoding</code> argument is provided and is either <code>'latin1'</code>, <code>'hex'</code>, or <code>'base64'</code>, <code>private_key</code> is expected to be a string. If no <code>encoding</code> is provided, <code>private_key</code> is expected to be a <a href=\"buffer\"><code>Buffer</code></a>.</p> <h3 id=\"crypto_diffiehellman_setpublickey_public_key_encoding\">diffieHellman.setPublicKey(public_key[, encoding])</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.0</span> </div>\n<p>Sets the Diffie-Hellman public key. If the <code>encoding</code> argument is provided and is either <code>'latin1'</code>, <code>'hex'</code> or <code>'base64'</code>, <code>public_key</code> is expected to be a string. If no <code>encoding</code> is provided, <code>public_key</code> is expected to be a <a href=\"buffer\"><code>Buffer</code></a>.</p> <h3 id=\"crypto_diffiehellman_verifyerror\">diffieHellman.verifyError</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.12</span> </div>\n<p>A bit field containing any warnings and/or errors resulting from a check performed during initialization of the <code>DiffieHellman</code> object.</p> <p>The following values are valid for this property (as defined in <code>constants</code> module):</p> <ul> <li><code>DH_CHECK_P_NOT_SAFE_PRIME</code></li> <li><code>DH_CHECK_P_NOT_PRIME</code></li> <li><code>DH_UNABLE_TO_CHECK_GENERATOR</code></li> <li><code>DH_NOT_SUITABLE_GENERATOR</code></li> </ul> <h2 id=\"crypto_class_ecdh\">Class: ECDH</h2> <div class=\"api_metadata\"> <span>Added in: v0.11.14</span> </div>\n<p>The <code>ECDH</code> class is a utility for creating Elliptic Curve Diffie-Hellman (ECDH) key exchanges.</p> <p>Instances of the <code>ECDH</code> class can be created using the <a href=\"#crypto_crypto_createecdh_curve_name\"><code>crypto.createECDH()</code></a> function.</p> <pre data-language=\"js\">const crypto = require('crypto');\nconst assert = require('assert');\n\n// Generate Alice's keys...\nconst alice = crypto.createECDH('secp521r1');\nconst aliceKey = alice.generateKeys();\n\n// Generate Bob's keys...\nconst bob = crypto.createECDH('secp521r1');\nconst bobKey = bob.generateKeys();\n\n// Exchange and generate the secret...\nconst aliceSecret = alice.computeSecret(bobKey);\nconst bobSecret = bob.computeSecret(aliceKey);\n\nassert.strictEqual(aliceSecret.toString('hex'), bobSecret.toString('hex'));\n  // OK\n</pre> <h3 id=\"crypto_ecdh_computesecret_other_public_key_input_encoding_output_encoding\">ecdh.computeSecret(other_public_key[, input_encoding][, output_encoding])</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>The default <code>input_encoding</code> changed from <code>binary</code> to <code>utf8</code>.</p> </td>\n</tr> <tr>\n<td>v0.11.14</td> <td>\n<p><span>Added in: v0.11.14</span></p> </td>\n</tr> </table> </details> </div>\n<p>Computes the shared secret using <code>other_public_key</code> as the other party's public key and returns the computed shared secret. The supplied key is interpreted using specified <code>input_encoding</code>, and the returned secret is encoded using the specified <code>output_encoding</code>. Encodings can be <code>'latin1'</code>, <code>'hex'</code>, or <code>'base64'</code>. If the <code>input_encoding</code> is not provided, <code>other_public_key</code> is expected to be a <a href=\"buffer\"><code>Buffer</code></a>.</p> <p>If <code>output_encoding</code> is given a string will be returned; otherwise a <a href=\"buffer\"><code>Buffer</code></a> is returned.</p> <h3 id=\"crypto_ecdh_generatekeys_encoding_format\">ecdh.generateKeys([encoding[, format]])</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.14</span> </div>\n<p>Generates private and public EC Diffie-Hellman key values, and returns the public key in the specified <code>format</code> and <code>encoding</code>. This key should be transferred to the other party.</p> <p>The <code>format</code> argument specifies point encoding and can be <code>'compressed'</code> or <code>'uncompressed'</code>. If <code>format</code> is not specified, the point will be returned in <code>'uncompressed'</code> format.</p> <p>The <code>encoding</code> argument can be <code>'latin1'</code>, <code>'hex'</code>, or <code>'base64'</code>. If <code>encoding</code> is provided a string is returned; otherwise a <a href=\"buffer\"><code>Buffer</code></a> is returned.</p> <h3 id=\"crypto_ecdh_getprivatekey_encoding\">ecdh.getPrivateKey([encoding])</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.14</span> </div>\n<p>Returns the EC Diffie-Hellman private key in the specified <code>encoding</code>, which can be <code>'latin1'</code>, <code>'hex'</code>, or <code>'base64'</code>. If <code>encoding</code> is provided a string is returned; otherwise a <a href=\"buffer\"><code>Buffer</code></a> is returned.</p> <h3 id=\"crypto_ecdh_getpublickey_encoding_format\">ecdh.getPublicKey([encoding[, format]])</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.14</span> </div>\n<p>Returns the EC Diffie-Hellman public key in the specified <code>encoding</code> and <code>format</code>.</p> <p>The <code>format</code> argument specifies point encoding and can be <code>'compressed'</code> or <code>'uncompressed'</code>. If <code>format</code> is not specified the point will be returned in <code>'uncompressed'</code> format.</p> <p>The <code>encoding</code> argument can be <code>'latin1'</code>, <code>'hex'</code>, or <code>'base64'</code>. If <code>encoding</code> is specified, a string is returned; otherwise a <a href=\"buffer\"><code>Buffer</code></a> is returned.</p> <h3 id=\"crypto_ecdh_setprivatekey_private_key_encoding\">ecdh.setPrivateKey(private_key[, encoding])</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.14</span> </div>\n<p>Sets the EC Diffie-Hellman private key. The <code>encoding</code> can be <code>'latin1'</code>, <code>'hex'</code> or <code>'base64'</code>. If <code>encoding</code> is provided, <code>private_key</code> is expected to be a string; otherwise <code>private_key</code> is expected to be a <a href=\"buffer\"><code>Buffer</code></a>. If <code>private_key</code> is not valid for the curve specified when the <code>ECDH</code> object was created, an error is thrown. Upon setting the private key, the associated public point (key) is also generated and set in the ECDH object.</p> <h3 id=\"crypto_ecdh_setpublickey_public_key_encoding\">ecdh.setPublicKey(public_key[, encoding])</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.14</span><span>Deprecated since: v5.2.0</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated</div>\n<p>Sets the EC Diffie-Hellman public key. Key encoding can be <code>'latin1'</code>, <code>'hex'</code> or <code>'base64'</code>. If <code>encoding</code> is provided <code>public_key</code> is expected to be a string; otherwise a <a href=\"buffer\"><code>Buffer</code></a> is expected.</p> <p>Note that there is not normally a reason to call this method because <code>ECDH</code> only requires a private key and the other party's public key to compute the shared secret. Typically either <a href=\"#crypto_ecdh_generatekeys_encoding_format\"><code>ecdh.generateKeys()</code></a> or <a href=\"#crypto_ecdh_setprivatekey_private_key_encoding\"><code>ecdh.setPrivateKey()</code></a> will be called. The <a href=\"#crypto_ecdh_setprivatekey_private_key_encoding\"><code>ecdh.setPrivateKey()</code></a> method attempts to generate the public point/key associated with the private key being set.</p> <p>Example (obtaining a shared secret):</p> <pre data-language=\"js\">const crypto = require('crypto');\nconst alice = crypto.createECDH('secp256k1');\nconst bob = crypto.createECDH('secp256k1');\n\n// Note: This is a shortcut way to specify one of Alice's previous private\n// keys. It would be unwise to use such a predictable private key in a real\n// application.\nalice.setPrivateKey(\n  crypto.createHash('sha256').update('alice', 'utf8').digest()\n);\n\n// Bob uses a newly generated cryptographically strong\n// pseudorandom key pair\nbob.generateKeys();\n\nconst aliceSecret = alice.computeSecret(bob.getPublicKey(), null, 'hex');\nconst bobSecret = bob.computeSecret(alice.getPublicKey(), null, 'hex');\n\n// aliceSecret and bobSecret should be the same shared secret value\nconsole.log(aliceSecret === bobSecret);\n</pre> <h2 id=\"crypto_class_hash\">Class: Hash</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.92</span> </div>\n<p>The <code>Hash</code> class is a utility for creating hash digests of data. It can be used in one of two ways:</p> <ul> <li>As a <a href=\"stream\">stream</a> that is both readable and writable, where data is written to produce a computed hash digest on the readable side, or</li> <li>Using the <a href=\"#crypto_hash_update_data_input_encoding\"><code>hash.update()</code></a> and <a href=\"#crypto_hash_digest_encoding\"><code>hash.digest()</code></a> methods to produce the computed hash.</li> </ul> <p>The <a href=\"#crypto_crypto_createhash_algorithm\"><code>crypto.createHash()</code></a> method is used to create <code>Hash</code> instances. <code>Hash</code> objects are not to be created directly using the <code>new</code> keyword.</p> <p>Example: Using <code>Hash</code> objects as streams:</p> <pre data-language=\"js\">const crypto = require('crypto');\nconst hash = crypto.createHash('sha256');\n\nhash.on('readable', () =&gt; {\n  const data = hash.read();\n  if (data)\n    console.log(data.toString('hex'));\n    // Prints:\n    //   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50\n});\n\nhash.write('some data to hash');\nhash.end();\n</pre> <p>Example: Using <code>Hash</code> and piped streams:</p> <pre data-language=\"js\">const crypto = require('crypto');\nconst fs = require('fs');\nconst hash = crypto.createHash('sha256');\n\nconst input = fs.createReadStream('test.js');\ninput.pipe(hash).pipe(process.stdout);\n</pre> <p>Example: Using the <a href=\"#crypto_hash_update_data_input_encoding\"><code>hash.update()</code></a> and <a href=\"#crypto_hash_digest_encoding\"><code>hash.digest()</code></a> methods:</p> <pre data-language=\"js\">const crypto = require('crypto');\nconst hash = crypto.createHash('sha256');\n\nhash.update('some data to hash');\nconsole.log(hash.digest('hex'));\n// Prints:\n//   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50\n</pre> <h3 id=\"crypto_hash_digest_encoding\">hash.digest([encoding])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.92</span> </div>\n<p>Calculates the digest of all of the data passed to be hashed (using the <a href=\"#crypto_hash_update_data_input_encoding\"><code>hash.update()</code></a> method). The <code>encoding</code> can be <code>'hex'</code>, <code>'latin1'</code> or <code>'base64'</code>. If <code>encoding</code> is provided a string will be returned; otherwise a <a href=\"buffer\"><code>Buffer</code></a> is returned.</p> <p>The <code>Hash</code> object can not be used again after <code>hash.digest()</code> method has been called. Multiple calls will cause an error to be thrown.</p> <h3 id=\"crypto_hash_update_data_input_encoding\">hash.update(data[, input_encoding])</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>The default <code>input_encoding</code> changed from <code>binary</code> to <code>utf8</code>.</p> </td>\n</tr> <tr>\n<td>v0.1.92</td> <td>\n<p><span>Added in: v0.1.92</span></p> </td>\n</tr> </table> </details> </div>\n<p>Updates the hash content with the given <code>data</code>, the encoding of which is given in <code>input_encoding</code> and can be <code>'utf8'</code>, <code>'ascii'</code> or <code>'latin1'</code>. If <code>encoding</code> is not provided, and the <code>data</code> is a string, an encoding of <code>'utf8'</code> is enforced. If <code>data</code> is a <a href=\"buffer\"><code>Buffer</code></a> then <code>input_encoding</code> is ignored.</p> <p>This can be called many times with new data as it is streamed.</p> <h2 id=\"crypto_class_hmac\">Class: Hmac</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.94</span> </div>\n<p>The <code>Hmac</code> Class is a utility for creating cryptographic HMAC digests. It can be used in one of two ways:</p> <ul> <li>As a <a href=\"stream\">stream</a> that is both readable and writable, where data is written to produce a computed HMAC digest on the readable side, or</li> <li>Using the <a href=\"#crypto_hmac_update_data_input_encoding\"><code>hmac.update()</code></a> and <a href=\"#crypto_hmac_digest_encoding\"><code>hmac.digest()</code></a> methods to produce the computed HMAC digest.</li> </ul> <p>The <a href=\"#crypto_crypto_createhmac_algorithm_key\"><code>crypto.createHmac()</code></a> method is used to create <code>Hmac</code> instances. <code>Hmac</code> objects are not to be created directly using the <code>new</code> keyword.</p> <p>Example: Using <code>Hmac</code> objects as streams:</p> <pre data-language=\"js\">const crypto = require('crypto');\nconst hmac = crypto.createHmac('sha256', 'a secret');\n\nhmac.on('readable', () =&gt; {\n  const data = hmac.read();\n  if (data)\n    console.log(data.toString('hex'));\n    // Prints:\n    //   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e\n});\n\nhmac.write('some data to hash');\nhmac.end();\n</pre> <p>Example: Using <code>Hmac</code> and piped streams:</p> <pre data-language=\"js\">const crypto = require('crypto');\nconst fs = require('fs');\nconst hmac = crypto.createHmac('sha256', 'a secret');\n\nconst input = fs.createReadStream('test.js');\ninput.pipe(hmac).pipe(process.stdout);\n</pre> <p>Example: Using the <a href=\"#crypto_hmac_update_data_input_encoding\"><code>hmac.update()</code></a> and <a href=\"#crypto_hmac_digest_encoding\"><code>hmac.digest()</code></a> methods:</p> <pre data-language=\"js\">const crypto = require('crypto');\nconst hmac = crypto.createHmac('sha256', 'a secret');\n\nhmac.update('some data to hash');\nconsole.log(hmac.digest('hex'));\n// Prints:\n//   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e\n</pre> <h3 id=\"crypto_hmac_digest_encoding\">hmac.digest([encoding])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.94</span> </div>\n<p>Calculates the HMAC digest of all of the data passed using <a href=\"#crypto_hmac_update_data_input_encoding\"><code>hmac.update()</code></a>. The <code>encoding</code> can be <code>'hex'</code>, <code>'latin1'</code> or <code>'base64'</code>. If <code>encoding</code> is provided a string is returned; otherwise a <a href=\"buffer\"><code>Buffer</code></a> is returned;</p> <p>The <code>Hmac</code> object can not be used again after <code>hmac.digest()</code> has been called. Multiple calls to <code>hmac.digest()</code> will result in an error being thrown.</p> <h3 id=\"crypto_hmac_update_data_input_encoding\">hmac.update(data[, input_encoding])</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>The default <code>input_encoding</code> changed from <code>binary</code> to <code>utf8</code>.</p> </td>\n</tr> <tr>\n<td>v0.1.94</td> <td>\n<p><span>Added in: v0.1.94</span></p> </td>\n</tr> </table> </details> </div>\n<p>Updates the <code>Hmac</code> content with the given <code>data</code>, the encoding of which is given in <code>input_encoding</code> and can be <code>'utf8'</code>, <code>'ascii'</code> or <code>'latin1'</code>. If <code>encoding</code> is not provided, and the <code>data</code> is a string, an encoding of <code>'utf8'</code> is enforced. If <code>data</code> is a <a href=\"buffer\"><code>Buffer</code></a> then <code>input_encoding</code> is ignored.</p> <p>This can be called many times with new data as it is streamed.</p> <h2 id=\"crypto_class_sign\">Class: Sign</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.92</span> </div>\n<p>The <code>Sign</code> Class is a utility for generating signatures. It can be used in one of two ways:</p> <ul> <li>As a writable <a href=\"stream\">stream</a>, where data to be signed is written and the <a href=\"#crypto_sign_sign_private_key_output_format\"><code>sign.sign()</code></a> method is used to generate and return the signature, or</li> <li>Using the <a href=\"#crypto_sign_update_data_input_encoding\"><code>sign.update()</code></a> and <a href=\"#crypto_sign_sign_private_key_output_format\"><code>sign.sign()</code></a> methods to produce the signature.</li> </ul> <p>The <a href=\"#crypto_crypto_createsign_algorithm\"><code>crypto.createSign()</code></a> method is used to create <code>Sign</code> instances. <code>Sign</code> objects are not to be created directly using the <code>new</code> keyword.</p> <p>Example: Using <code>Sign</code> objects as streams:</p> <pre data-language=\"js\">const crypto = require('crypto');\nconst sign = crypto.createSign('RSA-SHA256');\n\nsign.write('some data to sign');\nsign.end();\n\nconst privateKey = getPrivateKeySomehow();\nconsole.log(sign.sign(privateKey, 'hex'));\n// Prints: the calculated signature\n</pre> <p>Example: Using the <a href=\"#crypto_sign_update_data_input_encoding\"><code>sign.update()</code></a> and <a href=\"#crypto_sign_sign_private_key_output_format\"><code>sign.sign()</code></a> methods:</p> <pre data-language=\"js\">const crypto = require('crypto');\nconst sign = crypto.createSign('RSA-SHA256');\n\nsign.update('some data to sign');\n\nconst privateKey = getPrivateKeySomehow();\nconsole.log(sign.sign(privateKey, 'hex'));\n// Prints: the calculated signature\n</pre> <p>A <code>Sign</code> instance can also be created by just passing in the digest algorithm name, in which case OpenSSL will infer the full signature algorithm from the type of the PEM-formatted private key, including algorithms that do not have directly exposed name constants, e.g. 'ecdsa-with-SHA256'.</p> <p>Example: signing using ECDSA with SHA256</p> <pre data-language=\"js\">const crypto = require('crypto');\nconst sign = crypto.createSign('sha256');\n\nsign.update('some data to sign');\n\nconst privateKey =\n`-----BEGIN EC PRIVATE KEY-----\nMHcCAQEEIF+jnWY1D5kbVYDNvxxo/Y+ku2uJPDwS0r/VuPZQrjjVoAoGCCqGSM49\nAwEHoUQDQgAEurOxfSxmqIRYzJVagdZfMMSjRNNhB8i3mXyIMq704m2m52FdfKZ2\npQhByd5eyj3lgZ7m7jbchtdgyOF8Io/1ng==\n-----END EC PRIVATE KEY-----`;\n\nconsole.log(sign.sign(privateKey).toString('hex'));\n</pre> <h3 id=\"crypto_sign_sign_private_key_output_format\">sign.sign(private_key[, output_format])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.92</span> </div>\n<p>Calculates the signature on all the data passed through using either <a href=\"#crypto_sign_update_data_input_encoding\"><code>sign.update()</code></a> or <a href=\"stream#stream_writable_write_chunk_encoding_callback\"><code>sign.write()</code></a>.</p> <p>The <code>private_key</code> argument can be an object or a string. If <code>private_key</code> is a string, it is treated as a raw key with no passphrase. If <code>private_key</code> is an object, it is interpreted as a hash containing two properties:</p> <ul> <li>\n<code>key</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> - PEM encoded private key</li> <li>\n<code>passphrase</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> - passphrase for the private key</li> </ul> <p>The <code>output_format</code> can specify one of <code>'latin1'</code>, <code>'hex'</code> or <code>'base64'</code>. If <code>output_format</code> is provided a string is returned; otherwise a <a href=\"buffer\"><code>Buffer</code></a> is returned.</p> <p>The <code>Sign</code> object can not be again used after <code>sign.sign()</code> method has been called. Multiple calls to <code>sign.sign()</code> will result in an error being thrown.</p> <h3 id=\"crypto_sign_update_data_input_encoding\">sign.update(data[, input_encoding])</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>The default <code>input_encoding</code> changed from <code>binary</code> to <code>utf8</code>.</p> </td>\n</tr> <tr>\n<td>v0.1.92</td> <td>\n<p><span>Added in: v0.1.92</span></p> </td>\n</tr> </table> </details> </div>\n<p>Updates the <code>Sign</code> content with the given <code>data</code>, the encoding of which is given in <code>input_encoding</code> and can be <code>'utf8'</code>, <code>'ascii'</code> or <code>'latin1'</code>. If <code>encoding</code> is not provided, and the <code>data</code> is a string, an encoding of <code>'utf8'</code> is enforced. If <code>data</code> is a <a href=\"buffer\"><code>Buffer</code></a> then <code>input_encoding</code> is ignored.</p> <p>This can be called many times with new data as it is streamed.</p> <h2 id=\"crypto_class_verify\">Class: Verify</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.92</span> </div>\n<p>The <code>Verify</code> class is a utility for verifying signatures. It can be used in one of two ways:</p> <ul> <li>As a writable <a href=\"stream\">stream</a> where written data is used to validate against the supplied signature, or</li> <li>Using the <a href=\"#crypto_verifier_update_data_input_encoding\"><code>verify.update()</code></a> and <a href=\"#crypto_verifier_verify_object_signature_signature_format\"><code>verify.verify()</code></a> methods to verify the signature.</li> </ul> <p>The <a href=\"#crypto_crypto_createverify_algorithm\"><code>crypto.createVerify()</code></a> method is used to create <code>Verify</code> instances. <code>Verify</code> objects are not to be created directly using the <code>new</code> keyword.</p> <p>Example: Using <code>Verify</code> objects as streams:</p> <pre data-language=\"js\">const crypto = require('crypto');\nconst verify = crypto.createVerify('RSA-SHA256');\n\nverify.write('some data to sign');\nverify.end();\n\nconst publicKey = getPublicKeySomehow();\nconst signature = getSignatureToVerify();\nconsole.log(verify.verify(publicKey, signature));\n// Prints: true or false\n</pre> <p>Example: Using the <a href=\"#crypto_verifier_update_data_input_encoding\"><code>verify.update()</code></a> and <a href=\"#crypto_verifier_verify_object_signature_signature_format\"><code>verify.verify()</code></a> methods:</p> <pre data-language=\"js\">const crypto = require('crypto');\nconst verify = crypto.createVerify('RSA-SHA256');\n\nverify.update('some data to sign');\n\nconst publicKey = getPublicKeySomehow();\nconst signature = getSignatureToVerify();\nconsole.log(verify.verify(publicKey, signature));\n// Prints: true or false\n</pre> <h3 id=\"crypto_verifier_update_data_input_encoding\">verifier.update(data[, input_encoding])</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>The default <code>input_encoding</code> changed from <code>binary</code> to <code>utf8</code>.</p> </td>\n</tr> <tr>\n<td>v0.1.92</td> <td>\n<p><span>Added in: v0.1.92</span></p> </td>\n</tr> </table> </details> </div>\n<p>Updates the <code>Verify</code> content with the given <code>data</code>, the encoding of which is given in <code>input_encoding</code> and can be <code>'utf8'</code>, <code>'ascii'</code> or <code>'latin1'</code>. If <code>encoding</code> is not provided, and the <code>data</code> is a string, an encoding of <code>'utf8'</code> is enforced. If <code>data</code> is a <a href=\"buffer\"><code>Buffer</code></a> then <code>input_encoding</code> is ignored.</p> <p>This can be called many times with new data as it is streamed.</p> <h3 id=\"crypto_verifier_verify_object_signature_signature_format\">verifier.verify(object, signature[, signature_format])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.92</span> </div>\n<p>Verifies the provided data using the given <code>object</code> and <code>signature</code>. The <code>object</code> argument is a string containing a PEM encoded object, which can be one an RSA public key, a DSA public key, or an X.509 certificate. The <code>signature</code> argument is the previously calculated signature for the data, in the <code>signature_format</code> which can be <code>'latin1'</code>, <code>'hex'</code> or <code>'base64'</code>. If a <code>signature_format</code> is specified, the <code>signature</code> is expected to be a string; otherwise <code>signature</code> is expected to be a <a href=\"buffer\"><code>Buffer</code></a>.</p> <p>Returns <code>true</code> or <code>false</code> depending on the validity of the signature for the data and public key.</p> <p>The <code>verifier</code> object can not be used again after <code>verify.verify()</code> has been called. Multiple calls to <code>verify.verify()</code> will result in an error being thrown.</p> <h2 id=\"crypto_crypto_module_methods_and_properties\">\n<code>crypto</code> module methods and properties</h2> <h3 id=\"crypto_crypto_constants\">crypto.constants</h3> <div class=\"api_metadata\"> <span>Added in: v6.3.0</span> </div>\n<p>Returns an object containing commonly used constants for crypto and security related operations. The specific constants currently defined are described in <a href=\"#crypto_crypto_constants_1\">Crypto Constants</a>.</p> <h3 id=\"crypto_crypto_default_encoding\">crypto.DEFAULT_ENCODING</h3> <div class=\"api_metadata\"> <span>Added in: v0.9.3</span> </div>\n<p>The default encoding to use for functions that can take either strings or <a href=\"buffer\">buffers</a>. The default value is <code>'buffer'</code>, which makes methods default to <a href=\"buffer\"><code>Buffer</code></a> objects.</p> <p>The <code>crypto.DEFAULT_ENCODING</code> mechanism is provided for backwards compatibility with legacy programs that expect <code>'latin1'</code> to be the default encoding.</p> <p>New applications should expect the default to be <code>'buffer'</code>. This property may become deprecated in a future Node.js release.</p> <h3 id=\"crypto_crypto_fips\">crypto.fips</h3> <div class=\"api_metadata\"> <span>Added in: v6.0.0</span> </div>\n<p>Property for checking and controlling whether a FIPS compliant crypto provider is currently in use. Setting to true requires a FIPS build of Node.js.</p> <h3 id=\"crypto_crypto_createcipher_algorithm_password\">crypto.createCipher(algorithm, password)</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.94</span> </div>\n<p>Creates and returns a <code>Cipher</code> object that uses the given <code>algorithm</code> and <code>password</code>.</p> <p>The <code>algorithm</code> is dependent on OpenSSL, examples are <code>'aes192'</code>, etc. On recent OpenSSL releases, <code>openssl list-cipher-algorithms</code> will display the available cipher algorithms.</p> <p>The <code>password</code> is used to derive the cipher key and initialization vector (IV). The value must be either a <code>'latin1'</code> encoded string or a <a href=\"buffer\"><code>Buffer</code></a>.</p> <p>The implementation of <code>crypto.createCipher()</code> derives keys using the OpenSSL function <a href=\"https://www.openssl.org/docs/man1.0.2/crypto/EVP_BytesToKey.html\"><code>EVP_BytesToKey</code></a> with the digest algorithm set to MD5, one iteration, and no salt. The lack of salt allows dictionary attacks as the same password always creates the same key. The low iteration count and non-cryptographically secure hash algorithm allow passwords to be tested very rapidly.</p> <p>In line with OpenSSL's recommendation to use pbkdf2 instead of <a href=\"https://www.openssl.org/docs/man1.0.2/crypto/EVP_BytesToKey.html\"><code>EVP_BytesToKey</code></a> it is recommended that developers derive a key and IV on their own using <a href=\"#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback\"><code>crypto.pbkdf2()</code></a> and to use <a href=\"#crypto_crypto_createcipheriv_algorithm_key_iv\"><code>crypto.createCipheriv()</code></a> to create the <code>Cipher</code> object.</p> <h3 id=\"crypto_crypto_createcipheriv_algorithm_key_iv\">crypto.createCipheriv(algorithm, key, iv)</h3> <p>Creates and returns a <code>Cipher</code> object, with the given <code>algorithm</code>, <code>key</code> and initialization vector (<code>iv</code>).</p> <p>The <code>algorithm</code> is dependent on OpenSSL, examples are <code>'aes192'</code>, etc. On recent OpenSSL releases, <code>openssl list-cipher-algorithms</code> will display the available cipher algorithms.</p> <p>The <code>key</code> is the raw key used by the <code>algorithm</code> and <code>iv</code> is an <a href=\"https://en.wikipedia.org/wiki/Initialization_vector\">initialization vector</a>. Both arguments must be <code>'utf8'</code> encoded strings or <a href=\"buffer\">buffers</a>.</p> <h3 id=\"crypto_crypto_createcredentials_details\">crypto.createCredentials(details)</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.92</span><span>Deprecated since: v0.11.13</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated: Use <a href=\"tls#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a> instead.</div>\n<ul> <li>\n<code>details</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Identical to <a href=\"tls#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a>.</li> </ul> <p>The <code>crypto.createCredentials()</code> method is a deprecated function for creating and returning a <code>tls.SecureContext</code>. It should not be used. Replace it with <a href=\"tls#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a> which has the exact same arguments and return value.</p> <p>Returns a <code>tls.SecureContext</code>, as-if <a href=\"tls#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a> had been called.</p> <h3 id=\"crypto_crypto_createdecipher_algorithm_password\">crypto.createDecipher(algorithm, password)</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.94</span> </div>\n<p>Creates and returns a <code>Decipher</code> object that uses the given <code>algorithm</code> and <code>password</code> (key).</p> <p>The implementation of <code>crypto.createDecipher()</code> derives keys using the OpenSSL function <a href=\"https://www.openssl.org/docs/man1.0.2/crypto/EVP_BytesToKey.html\"><code>EVP_BytesToKey</code></a> with the digest algorithm set to MD5, one iteration, and no salt. The lack of salt allows dictionary attacks as the same password always creates the same key. The low iteration count and non-cryptographically secure hash algorithm allow passwords to be tested very rapidly.</p> <p>In line with OpenSSL's recommendation to use pbkdf2 instead of <a href=\"https://www.openssl.org/docs/man1.0.2/crypto/EVP_BytesToKey.html\"><code>EVP_BytesToKey</code></a> it is recommended that developers derive a key and IV on their own using <a href=\"#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback\"><code>crypto.pbkdf2()</code></a> and to use <a href=\"#crypto_crypto_createdecipheriv_algorithm_key_iv\"><code>crypto.createDecipheriv()</code></a> to create the <code>Decipher</code> object.</p> <h3 id=\"crypto_crypto_createdecipheriv_algorithm_key_iv\">crypto.createDecipheriv(algorithm, key, iv)</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.94</span> </div>\n<p>Creates and returns a <code>Decipher</code> object that uses the given <code>algorithm</code>, <code>key</code> and initialization vector (<code>iv</code>).</p> <p>The <code>algorithm</code> is dependent on OpenSSL, examples are <code>'aes192'</code>, etc. On recent OpenSSL releases, <code>openssl list-cipher-algorithms</code> will display the available cipher algorithms.</p> <p>The <code>key</code> is the raw key used by the <code>algorithm</code> and <code>iv</code> is an <a href=\"https://en.wikipedia.org/wiki/Initialization_vector\">initialization vector</a>. Both arguments must be <code>'utf8'</code> encoded strings or <a href=\"buffer\">buffers</a>.</p> <h3 id=\"crypto_crypto_creatediffiehellman_prime_prime_encoding_generator_generator_encoding\">crypto.createDiffieHellman(prime[, prime_encoding][, generator][, generator_encoding])</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>The default for the encoding parameters changed from <code>binary</code> to <code>utf8</code>.</p> </td>\n</tr> <tr>\n<td>v0.11.12</td> <td>\n<p><span>Added in: v0.11.12</span></p> </td>\n</tr> </table> </details> </div>\n<p>Creates a <code>DiffieHellman</code> key exchange object using the supplied <code>prime</code> and an optional specific <code>generator</code>.</p> <p>The <code>generator</code> argument can be a number, string, or <a href=\"buffer\"><code>Buffer</code></a>. If <code>generator</code> is not specified, the value <code>2</code> is used.</p> <p>The <code>prime_encoding</code> and <code>generator_encoding</code> arguments can be <code>'latin1'</code>, <code>'hex'</code>, or <code>'base64'</code>.</p> <p>If <code>prime_encoding</code> is specified, <code>prime</code> is expected to be a string; otherwise a <a href=\"buffer\"><code>Buffer</code></a> is expected.</p> <p>If <code>generator_encoding</code> is specified, <code>generator</code> is expected to be a string; otherwise either a number or <a href=\"buffer\"><code>Buffer</code></a> is expected.</p> <h3 id=\"crypto_crypto_creatediffiehellman_prime_length_generator\">crypto.createDiffieHellman(prime_length[, generator])</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.0</span> </div>\n<p>Creates a <code>DiffieHellman</code> key exchange object and generates a prime of <code>prime_length</code> bits using an optional specific numeric <code>generator</code>. If <code>generator</code> is not specified, the value <code>2</code> is used.</p> <h3 id=\"crypto_crypto_createecdh_curve_name\">crypto.createECDH(curve_name)</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.14</span> </div>\n<p>Creates an Elliptic Curve Diffie-Hellman (<code>ECDH</code>) key exchange object using a predefined curve specified by the <code>curve_name</code> string. Use <a href=\"#crypto_crypto_getcurves\"><code>crypto.getCurves()</code></a> to obtain a list of available curve names. On recent OpenSSL releases, <code>openssl ecparam -list_curves</code> will also display the name and description of each available elliptic curve.</p> <h3 id=\"crypto_crypto_createhash_algorithm\">crypto.createHash(algorithm)</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.92</span> </div>\n<p>Creates and returns a <code>Hash</code> object that can be used to generate hash digests using the given <code>algorithm</code>.</p> <p>The <code>algorithm</code> is dependent on the available algorithms supported by the version of OpenSSL on the platform. Examples are <code>'sha256'</code>, <code>'sha512'</code>, etc. On recent releases of OpenSSL, <code>openssl list-message-digest-algorithms</code> will display the available digest algorithms.</p> <p>Example: generating the sha256 sum of a file</p> <pre data-language=\"js\">const filename = process.argv[2];\nconst crypto = require('crypto');\nconst fs = require('fs');\n\nconst hash = crypto.createHash('sha256');\n\nconst input = fs.createReadStream(filename);\ninput.on('readable', () =&gt; {\n  const data = input.read();\n  if (data)\n    hash.update(data);\n  else {\n    console.log(`${hash.digest('hex')} ${filename}`);\n  }\n});\n</pre> <h3 id=\"crypto_crypto_createhmac_algorithm_key\">crypto.createHmac(algorithm, key)</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.94</span> </div>\n<p>Creates and returns an <code>Hmac</code> object that uses the given <code>algorithm</code> and <code>key</code>.</p> <p>The <code>algorithm</code> is dependent on the available algorithms supported by the version of OpenSSL on the platform. Examples are <code>'sha256'</code>, <code>'sha512'</code>, etc. On recent releases of OpenSSL, <code>openssl list-message-digest-algorithms</code> will display the available digest algorithms.</p> <p>The <code>key</code> is the HMAC key used to generate the cryptographic HMAC hash.</p> <p>Example: generating the sha256 HMAC of a file</p> <pre data-language=\"js\">const filename = process.argv[2];\nconst crypto = require('crypto');\nconst fs = require('fs');\n\nconst hmac = crypto.createHmac('sha256', 'a secret');\n\nconst input = fs.createReadStream(filename);\ninput.on('readable', () =&gt; {\n  const data = input.read();\n  if (data)\n    hmac.update(data);\n  else {\n    console.log(`${hmac.digest('hex')} ${filename}`);\n  }\n});\n</pre> <h3 id=\"crypto_crypto_createsign_algorithm\">crypto.createSign(algorithm)</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.92</span> </div>\n<p>Creates and returns a <code>Sign</code> object that uses the given <code>algorithm</code>. Use <a href=\"#crypto_crypto_gethashes\"><code>crypto.getHashes()</code></a> to obtain an array of names of the available signing algorithms.</p> <h3 id=\"crypto_crypto_createverify_algorithm\">crypto.createVerify(algorithm)</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.92</span> </div>\n<p>Creates and returns a <code>Verify</code> object that uses the given algorithm. Use <a href=\"#crypto_crypto_gethashes\"><code>crypto.getHashes()</code></a> to obtain an array of names of the available signing algorithms.</p> <h3 id=\"crypto_crypto_getciphers\">crypto.getCiphers()</h3> <div class=\"api_metadata\"> <span>Added in: v0.9.3</span> </div>\n<p>Returns an array with the names of the supported cipher algorithms.</p> <p>Example:</p> <pre data-language=\"js\">const ciphers = crypto.getCiphers();\nconsole.log(ciphers); // ['aes-128-cbc', 'aes-128-ccm', ...]\n</pre> <h3 id=\"crypto_crypto_getcurves\">crypto.getCurves()</h3> <div class=\"api_metadata\"> <span>Added in: v2.3.0</span> </div>\n<p>Returns an array with the names of the supported elliptic curves.</p> <p>Example:</p> <pre data-language=\"js\">const curves = crypto.getCurves();\nconsole.log(curves); // ['Oakley-EC2N-3', 'Oakley-EC2N-4', ...]\n</pre> <h3 id=\"crypto_crypto_getdiffiehellman_group_name\">crypto.getDiffieHellman(group_name)</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.5</span> </div>\n<p>Creates a predefined <code>DiffieHellman</code> key exchange object. The supported groups are: <code>'modp1'</code>, <code>'modp2'</code>, <code>'modp5'</code> (defined in <a href=\"https://www.rfc-editor.org/rfc/rfc2412.txt\">RFC 2412</a>, but see <a href=\"#crypto_support_for_weak_or_compromised_algorithms\">Caveats</a>) and <code>'modp14'</code>, <code>'modp15'</code>, <code>'modp16'</code>, <code>'modp17'</code>, <code>'modp18'</code> (defined in <a href=\"https://www.rfc-editor.org/rfc/rfc3526.txt\">RFC 3526</a>). The returned object mimics the interface of objects created by <a href=\"#crypto_crypto_creatediffiehellman_prime_prime_encoding_generator_generator_encoding\"><code>crypto.createDiffieHellman()</code></a>, but will not allow changing the keys (with <a href=\"#crypto_diffiehellman_setpublickey_public_key_encoding\"><code>diffieHellman.setPublicKey()</code></a> for example). The advantage of using this method is that the parties do not have to generate nor exchange a group modulus beforehand, saving both processor and communication time.</p> <p>Example (obtaining a shared secret):</p> <pre data-language=\"js\">const crypto = require('crypto');\nconst alice = crypto.getDiffieHellman('modp14');\nconst bob = crypto.getDiffieHellman('modp14');\n\nalice.generateKeys();\nbob.generateKeys();\n\nconst aliceSecret = alice.computeSecret(bob.getPublicKey(), null, 'hex');\nconst bobSecret = bob.computeSecret(alice.getPublicKey(), null, 'hex');\n\n/* aliceSecret and bobSecret should be the same */\nconsole.log(aliceSecret === bobSecret);\n</pre> <h3 id=\"crypto_crypto_gethashes\">crypto.getHashes()</h3> <div class=\"api_metadata\"> <span>Added in: v0.9.3</span> </div>\n<p>Returns an array of the names of the supported hash algorithms, such as <code>RSA-SHA256</code>.</p> <p>Example:</p> <pre data-language=\"js\">const hashes = crypto.getHashes();\nconsole.log(hashes); // ['DSA', 'DSA-SHA', 'DSA-SHA1', ...]\n</pre> <h3 id=\"crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback\">crypto.pbkdf2(password, salt, iterations, keylen, digest, callback)</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>Calling this function without passing the <code>digest</code> parameter is deprecated now and will emit a warning.</p> </td>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>The default encoding for <code>password</code> if it is a string changed from <code>binary</code> to <code>utf8</code>.</p> </td>\n</tr> <tr>\n<td>v0.5.5</td> <td>\n<p><span>Added in: v0.5.5</span></p> </td>\n</tr> </table> </details> </div>\n<p>Provides an asynchronous Password-Based Key Derivation Function 2 (PBKDF2) implementation. A selected HMAC digest algorithm specified by <code>digest</code> is applied to derive a key of the requested byte length (<code>keylen</code>) from the <code>password</code>, <code>salt</code> and <code>iterations</code>.</p> <p>The supplied <code>callback</code> function is called with two arguments: <code>err</code> and <code>derivedKey</code>. If an error occurs, <code>err</code> will be set; otherwise <code>err</code> will be null. The successfully generated <code>derivedKey</code> will be passed as a <a href=\"buffer\"><code>Buffer</code></a>.</p> <p>The <code>iterations</code> argument must be a number set as high as possible. The higher the number of iterations, the more secure the derived key will be, but will take a longer amount of time to complete.</p> <p>The <code>salt</code> should also be as unique as possible. It is recommended that the salts are random and their lengths are greater than 16 bytes. See <a href=\"http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf\">NIST SP 800-132</a> for details.</p> <p>Example:</p> <pre data-language=\"js\">const crypto = require('crypto');\ncrypto.pbkdf2('secret', 'salt', 100000, 512, 'sha512', (err, key) =&gt; {\n  if (err) throw err;\n  console.log(key.toString('hex'));  // '3745e48...aa39b34'\n});\n</pre> <p>An array of supported digest functions can be retrieved using <a href=\"#crypto_crypto_gethashes\"><code>crypto.getHashes()</code></a>.</p> <h3 id=\"crypto_crypto_pbkdf2sync_password_salt_iterations_keylen_digest\">crypto.pbkdf2Sync(password, salt, iterations, keylen, digest)</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>Calling this function without passing the <code>digest</code> parameter is deprecated now and will emit a warning.</p> </td>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>The default encoding for <code>password</code> if it is a string changed from <code>binary</code> to <code>utf8</code>.</p> </td>\n</tr> <tr>\n<td>v0.9.3</td> <td>\n<p><span>Added in: v0.9.3</span></p> </td>\n</tr> </table> </details> </div>\n<p>Provides a synchronous Password-Based Key Derivation Function 2 (PBKDF2) implementation. A selected HMAC digest algorithm specified by <code>digest</code> is applied to derive a key of the requested byte length (<code>keylen</code>) from the <code>password</code>, <code>salt</code> and <code>iterations</code>.</p> <p>If an error occurs an Error will be thrown, otherwise the derived key will be returned as a <a href=\"buffer\"><code>Buffer</code></a>.</p> <p>The <code>iterations</code> argument must be a number set as high as possible. The higher the number of iterations, the more secure the derived key will be, but will take a longer amount of time to complete.</p> <p>The <code>salt</code> should also be as unique as possible. It is recommended that the salts are random and their lengths are greater than 16 bytes. See <a href=\"http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf\">NIST SP 800-132</a> for details.</p> <p>Example:</p> <pre data-language=\"js\">const crypto = require('crypto');\nconst key = crypto.pbkdf2Sync('secret', 'salt', 100000, 512, 'sha512');\nconsole.log(key.toString('hex'));  // '3745e48...aa39b34'\n</pre> <p>An array of supported digest functions can be retrieved using <a href=\"#crypto_crypto_gethashes\"><code>crypto.getHashes()</code></a>.</p> <h3 id=\"crypto_crypto_privatedecrypt_private_key_buffer\">crypto.privateDecrypt(private_key, buffer)</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.14</span> </div>\n<p>Decrypts <code>buffer</code> with <code>private_key</code>.</p> <p><code>private_key</code> can be an object or a string. If <code>private_key</code> is a string, it is treated as the key with no passphrase and will use <code>RSA_PKCS1_OAEP_PADDING</code>. If <code>private_key</code> is an object, it is interpreted as a hash object with the keys:</p> <ul> <li>\n<code>key</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> - PEM encoded private key</li> <li>\n<code>passphrase</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> - Optional passphrase for the private key</li> <li>\n<code>padding</code> : An optional padding value, one of the following:<ul> <li><code>crypto.constants.RSA_NO_PADDING</code></li> <li><code>crypto.constants.RSA_PKCS1_PADDING</code></li> <li><code>crypto.constants.RSA_PKCS1_OAEP_PADDING</code></li> </ul> </li> </ul> <p>All paddings are defined in <code>crypto.constants</code>.</p> <h3 id=\"crypto_crypto_privateencrypt_private_key_buffer\">crypto.privateEncrypt(private_key, buffer)</h3> <div class=\"api_metadata\"> <span>Added in: v1.1.0</span> </div>\n<p>Encrypts <code>buffer</code> with <code>private_key</code>.</p> <p><code>private_key</code> can be an object or a string. If <code>private_key</code> is a string, it is treated as the key with no passphrase and will use <code>RSA_PKCS1_PADDING</code>. If <code>private_key</code> is an object, it is interpreted as a hash object with the keys:</p> <ul> <li>\n<code>key</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> - PEM encoded private key</li> <li>\n<code>passphrase</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> - Optional passphrase for the private key</li> <li>\n<code>padding</code> : An optional padding value, one of the following:<ul> <li><code>crypto.constants.RSA_NO_PADDING</code></li> <li><code>crypto.constants.RSA_PKCS1_PADDING</code></li> </ul> </li> </ul> <p>All paddings are defined in <code>crypto.constants</code>.</p> <h3 id=\"crypto_crypto_publicdecrypt_public_key_buffer\">crypto.publicDecrypt(public_key, buffer)</h3> <div class=\"api_metadata\"> <span>Added in: v1.1.0</span> </div>\n<p>Decrypts <code>buffer</code> with <code>public_key</code>.</p> <p><code>public_key</code> can be an object or a string. If <code>public_key</code> is a string, it is treated as the key with no passphrase and will use <code>RSA_PKCS1_PADDING</code>. If <code>public_key</code> is an object, it is interpreted as a hash object with the keys:</p> <ul> <li>\n<code>key</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> - PEM encoded public key</li> <li>\n<code>passphrase</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> - Optional passphrase for the private key</li> <li>\n<code>padding</code> : An optional padding value, one of the following:<ul> <li><code>crypto.constants.RSA_NO_PADDING</code></li> <li><code>crypto.constants.RSA_PKCS1_PADDING</code></li> <li><code>crypto.constants.RSA_PKCS1_OAEP_PADDING</code></li> </ul> </li> </ul> <p>Because RSA public keys can be derived from private keys, a private key may be passed instead of a public key.</p> <p>All paddings are defined in <code>crypto.constants</code>.</p> <h3 id=\"crypto_crypto_publicencrypt_public_key_buffer\">crypto.publicEncrypt(public_key, buffer)</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.14</span> </div>\n<p>Encrypts <code>buffer</code> with <code>public_key</code>.</p> <p><code>public_key</code> can be an object or a string. If <code>public_key</code> is a string, it is treated as the key with no passphrase and will use <code>RSA_PKCS1_OAEP_PADDING</code>. If <code>public_key</code> is an object, it is interpreted as a hash object with the keys:</p> <ul> <li>\n<code>key</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> - PEM encoded public key</li> <li>\n<code>passphrase</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> - Optional passphrase for the private key</li> <li>\n<code>padding</code> : An optional padding value, one of the following:<ul> <li><code>crypto.constants.RSA_NO_PADDING</code></li> <li><code>crypto.constants.RSA_PKCS1_PADDING</code></li> <li><code>crypto.constants.RSA_PKCS1_OAEP_PADDING</code></li> </ul> </li> </ul> <p>Because RSA public keys can be derived from private keys, a private key may be passed instead of a public key.</p> <p>All paddings are defined in <code>crypto.constants</code>.</p> <h3 id=\"crypto_crypto_randombytes_size_callback\">crypto.randomBytes(size[, callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.8</span> </div>\n<p>Generates cryptographically strong pseudo-random data. The <code>size</code> argument is a number indicating the number of bytes to generate.</p> <p>If a <code>callback</code> function is provided, the bytes are generated asynchronously and the <code>callback</code> function is invoked with two arguments: <code>err</code> and <code>buf</code>. If an error occurs, <code>err</code> will be an Error object; otherwise it is null. The <code>buf</code> argument is a <a href=\"buffer\"><code>Buffer</code></a> containing the generated bytes.</p> <pre data-language=\"js\">// Asynchronous\nconst crypto = require('crypto');\ncrypto.randomBytes(256, (err, buf) =&gt; {\n  if (err) throw err;\n  console.log(`${buf.length} bytes of random data: ${buf.toString('hex')}`);\n});\n</pre> <p>If the <code>callback</code> function is not provided, the random bytes are generated synchronously and returned as a <a href=\"buffer\"><code>Buffer</code></a>. An error will be thrown if there is a problem generating the bytes.</p> <pre data-language=\"js\">// Synchronous\nconst buf = crypto.randomBytes(256);\nconsole.log(\n  `${buf.length} bytes of random data: ${buf.toString('hex')}`);\n</pre> <p>The <code>crypto.randomBytes()</code> method will block until there is sufficient entropy. This should normally never take longer than a few milliseconds. The only time when generating the random bytes may conceivably block for a longer period of time is right after boot, when the whole system is still low on entropy.</p> <h3 id=\"crypto_crypto_randomfillsync_buffer_offset_size\">crypto.randomFillSync(buffer[, offset][, size])</h3> <div class=\"api_metadata\"> <span>Added in: v7.10.0</span> </div>\n<ul> <li>\n<code>buffer</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\" class=\"type\">&lt;Uint8Array&gt;</a> Must be supplied.</li> <li>\n<code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Defaults to <code>0</code>.</li> <li>\n<code>size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Defaults to <code>buffer.length - offset</code>.</li> </ul> <p>Synchronous version of <a href=\"#crypto_crypto_randomfill_buffer_offset_size_callback\"><code>crypto.randomFill()</code></a>.</p> <p>Returns <code>buffer</code></p> <pre data-language=\"js\">const buf = Buffer.alloc(10);\nconsole.log(crypto.randomFillSync(buf).toString('hex'));\n\ncrypto.randomFillSync(buf, 5);\nconsole.log(buf.toString('hex'));\n\n// The above is equivalent to the following:\ncrypto.randomFillSync(buf, 5, 5);\nconsole.log(buf.toString('hex'));\n</pre> <h3 id=\"crypto_crypto_randomfill_buffer_offset_size_callback\">crypto.randomFill(buffer[, offset][, size], callback)</h3> <div class=\"api_metadata\"> <span>Added in: v7.10.0</span> </div>\n<ul> <li>\n<code>buffer</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\" class=\"type\">&lt;Uint8Array&gt;</a> Must be supplied.</li> <li>\n<code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Defaults to <code>0</code>.</li> <li>\n<code>size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Defaults to <code>buffer.length - offset</code>.</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> <code>function(err, buf) {}</code>.</li> </ul> <p>This function is similar to <a href=\"#crypto_crypto_randombytes_size_callback\"><code>crypto.randomBytes()</code></a> but requires the first argument to be a <a href=\"buffer\"><code>Buffer</code></a> that will be filled. It also requires that a callback is passed in.</p> <p>If the <code>callback</code> function is not provided, an error will be thrown.</p> <pre data-language=\"js\">const buf = Buffer.alloc(10);\ncrypto.randomFill(buf, (err, buf) =&gt; {\n  if (err) throw err;\n  console.log(buf.toString('hex'));\n});\n\ncrypto.randomFill(buf, 5, (err, buf) =&gt; {\n  if (err) throw err;\n  console.log(buf.toString('hex'));\n});\n\n// The above is equivalent to the following:\ncrypto.randomFill(buf, 5, 5, (err, buf) =&gt; {\n  if (err) throw err;\n  console.log(buf.toString('hex'));\n});\n</pre> <h3 id=\"crypto_crypto_setengine_engine_flags\">crypto.setEngine(engine[, flags])</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.11</span> </div>\n<p>Load and set the <code>engine</code> for some or all OpenSSL functions (selected by flags).</p> <p><code>engine</code> could be either an id or a path to the engine's shared library.</p> <p>The optional <code>flags</code> argument uses <code>ENGINE_METHOD_ALL</code> by default. The <code>flags</code> is a bit field taking one of or a mix of the following flags (defined in <code>crypto.constants</code>):</p> <ul> <li><code>crypto.constants.ENGINE_METHOD_RSA</code></li> <li><code>crypto.constants.ENGINE_METHOD_DSA</code></li> <li><code>crypto.constants.ENGINE_METHOD_DH</code></li> <li><code>crypto.constants.ENGINE_METHOD_RAND</code></li> <li><code>crypto.constants.ENGINE_METHOD_ECDH</code></li> <li><code>crypto.constants.ENGINE_METHOD_ECDSA</code></li> <li><code>crypto.constants.ENGINE_METHOD_CIPHERS</code></li> <li><code>crypto.constants.ENGINE_METHOD_DIGESTS</code></li> <li><code>crypto.constants.ENGINE_METHOD_STORE</code></li> <li><code>crypto.constants.ENGINE_METHOD_PKEY_METHS</code></li> <li><code>crypto.constants.ENGINE_METHOD_PKEY_ASN1_METHS</code></li> <li><code>crypto.constants.ENGINE_METHOD_ALL</code></li> <li><code>crypto.constants.ENGINE_METHOD_NONE</code></li> </ul> <h3 id=\"crypto_crypto_timingsafeequal_a_b\">crypto.timingSafeEqual(a, b)</h3> <div class=\"api_metadata\"> <span>Added in: v6.6.0</span> </div>\n<p>Returns true if <code>a</code> is equal to <code>b</code>, without leaking timing information that would allow an attacker to guess one of the values. This is suitable for comparing HMAC digests or secret values like authentication cookies or <a href=\"https://www.w3.org/TR/capability-urls/\">capability urls</a>.</p> <p><code>a</code> and <code>b</code> must both be <code>Buffer</code>s, and they must have the same length.</p> <p><strong>Note</strong>: Use of <code>crypto.timingSafeEqual</code> does not guarantee that the <em>surrounding</em> code is timing-safe. Care should be taken to ensure that the surrounding code does not introduce timing vulnerabilities.</p> <h2 id=\"crypto_notes\">Notes</h2> <h3 id=\"crypto_legacy_streams_api_pre_node_js_v0_10\">Legacy Streams API (pre Node.js v0.10)</h3> <p>The Crypto module was added to Node.js before there was the concept of a unified Stream API, and before there were <a href=\"buffer\"><code>Buffer</code></a> objects for handling binary data. As such, the many of the <code>crypto</code> defined classes have methods not typically found on other Node.js classes that implement the <a href=\"stream\">streams</a> API (e.g. <code>update()</code>, <code>final()</code>, or <code>digest()</code>). Also, many methods accepted and returned <code>'latin1'</code> encoded strings by default rather than Buffers. This default was changed after Node.js v0.8 to use <a href=\"buffer\"><code>Buffer</code></a> objects by default instead.</p> <h3 id=\"crypto_recent_ecdh_changes\">Recent ECDH Changes</h3> <p>Usage of <code>ECDH</code> with non-dynamically generated key pairs has been simplified. Now, <a href=\"#crypto_ecdh_setprivatekey_private_key_encoding\"><code>ecdh.setPrivateKey()</code></a> can be called with a preselected private key and the associated public point (key) will be computed and stored in the object. This allows code to only store and provide the private part of the EC key pair. <a href=\"#crypto_ecdh_setprivatekey_private_key_encoding\"><code>ecdh.setPrivateKey()</code></a> now also validates that the private key is valid for the selected curve.</p> <p>The <a href=\"#crypto_ecdh_setpublickey_public_key_encoding\"><code>ecdh.setPublicKey()</code></a> method is now deprecated as its inclusion in the API is not useful. Either a previously stored private key should be set, which automatically generates the associated public key, or <a href=\"#crypto_ecdh_generatekeys_encoding_format\"><code>ecdh.generateKeys()</code></a> should be called. The main drawback of using <a href=\"#crypto_ecdh_setpublickey_public_key_encoding\"><code>ecdh.setPublicKey()</code></a> is that it can be used to put the ECDH key pair into an inconsistent state.</p> <h3 id=\"crypto_support_for_weak_or_compromised_algorithms\">Support for weak or compromised algorithms</h3> <p>The <code>crypto</code> module still supports some algorithms which are already compromised and are not currently recommended for use. The API also allows the use of ciphers and hashes with a small key size that are considered to be too weak for safe use.</p> <p>Users should take full responsibility for selecting the crypto algorithm and key size according to their security requirements.</p> <p>Based on the recommendations of <a href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST SP 800-131A</a>:</p> <ul> <li>MD5 and SHA-1 are no longer acceptable where collision resistance is required such as digital signatures.</li> <li>The key used with RSA, DSA and DH algorithms is recommended to have at least 2048 bits and that of the curve of ECDSA and ECDH at least 224 bits, to be safe to use for several years.</li> <li>The DH groups of <code>modp1</code>, <code>modp2</code> and <code>modp5</code> have a key size smaller than 2048 bits and are not recommended.</li> </ul> <p>See the reference for other recommendations and details.</p> <h2 id=\"crypto_crypto_constants_1\">Crypto Constants</h2> <p>The following constants exported by <code>crypto.constants</code> apply to various uses of the <code>crypto</code>, <code>tls</code>, and <code>https</code> modules and are generally specific to OpenSSL.</p> <h3 id=\"crypto_openssl_options\">OpenSSL Options</h3> <table> <tr> <th>Constant</th> <th>Description</th> </tr> <tr> <td><code>SSL_OP_ALL</code></td> <td>Applies multiple bug workarounds within OpenSSL. See <a href=\"https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html\">https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html</a> for detail.</td> </tr> <tr> <td><code>SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION</code></td> <td>Allows legacy insecure renegotiation between OpenSSL and unpatched clients or servers. See <a href=\"https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html\">https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html</a>.</td> </tr> <tr> <td><code>SSL_OP_CIPHER_SERVER_PREFERENCE</code></td> <td>Attempts to use the server's preferences instead of the client's when selecting a cipher. Behaviour depends on protocol version. See <a href=\"https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html\">https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html</a>.</td> </tr> <tr> <td><code>SSL_OP_CISCO_ANYCONNECT</code></td> <td>Instructs OpenSSL to use Cisco's \"speshul\" version of DTLS_BAD_VER.</td> </tr> <tr> <td><code>SSL_OP_COOKIE_EXCHANGE</code></td> <td>Instructs OpenSSL to turn on cookie exchange.</td> </tr> <tr> <td><code>SSL_OP_CRYPTOPRO_TLSEXT_BUG</code></td> <td>Instructs OpenSSL to add server-hello extension from an early version of the cryptopro draft.</td> </tr> <tr> <td><code>SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS</code></td> <td>Instructs OpenSSL to disable a SSL 3.0/TLS 1.0 vulnerability workaround added in OpenSSL 0.9.6d.</td> </tr> <tr> <td><code>SSL_OP_EPHEMERAL_RSA</code></td> <td>Instructs OpenSSL to always use the tmp_rsa key when performing RSA operations.</td> </tr> <tr> <td><code>SSL_OP_LEGACY_SERVER_CONNECT</code></td> <td>Allows initial connection to servers that do not support RI.</td> </tr> <tr> <td><code>SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER</code></td> <td></td> </tr> <tr> <td><code>SSL_OP_MICROSOFT_SESS_ID_BUG</code></td> <td></td> </tr> <tr> <td><code>SSL_OP_MSIE_SSLV2_RSA_PADDING</code></td> <td>Instructs OpenSSL to disable the workaround for a man-in-the-middle protocol-version vulnerability in the SSL 2.0 server implementation.</td> </tr> <tr> <td><code>SSL_OP_NETSCAPE_CA_DN_BUG</code></td> <td></td> </tr> <tr> <td><code>SSL_OP_NETSCAPE_CHALLENGE_BUG</code></td> <td></td> </tr> <tr> <td><code>SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG</code></td> <td></td> </tr> <tr> <td><code>SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG</code></td> <td></td> </tr> <tr> <td><code>SSL_OP_NO_COMPRESSION</code></td> <td>Instructs OpenSSL to disable support for SSL/TLS compression.</td> </tr> <tr> <td><code>SSL_OP_NO_QUERY_MTU</code></td> <td></td> </tr> <tr> <td><code>SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION</code></td> <td>Instructs OpenSSL to always start a new session when performing renegotiation.</td> </tr> <tr> <td><code>SSL_OP_NO_SSLv2</code></td> <td>Instructs OpenSSL to turn off SSL v2</td> </tr> <tr> <td><code>SSL_OP_NO_SSLv3</code></td> <td>Instructs OpenSSL to turn off SSL v3</td> </tr> <tr> <td><code>SSL_OP_NO_TICKET</code></td> <td>Instructs OpenSSL to disable use of RFC4507bis tickets.</td> </tr> <tr> <td><code>SSL_OP_NO_TLSv1</code></td> <td>Instructs OpenSSL to turn off TLS v1</td> </tr> <tr> <td><code>SSL_OP_NO_TLSv1_1</code></td> <td>Instructs OpenSSL to turn off TLS v1.1</td> </tr> <tr> <td><code>SSL_OP_NO_TLSv1_2</code></td> <td>Instructs OpenSSL to turn off TLS v1.2</td> </tr> <td><code>SSL_OP_PKCS1_CHECK_1</code></td> <td></td> <tr> <td><code>SSL_OP_PKCS1_CHECK_2</code></td> <td></td> </tr> <tr> <td><code>SSL_OP_SINGLE_DH_USE</code></td> <td>Instructs OpenSSL to always create a new key when using temporary/ephemeral DH parameters.</td> </tr> <tr> <td><code>SSL_OP_SINGLE_ECDH_USE</code></td> <td>Instructs OpenSSL to always create a new key when using temporary/ephemeral ECDH parameters.</td> </tr> <td><code>SSL_OP_SSLEAY_080_CLIENT_DH_BUG</code></td> <td></td> <tr> <td><code>SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG</code></td> <td></td> </tr> <tr> <td><code>SSL_OP_TLS_BLOCK_PADDING_BUG</code></td> <td></td> </tr> <tr> <td><code>SSL_OP_TLS_D5_BUG</code></td> <td></td> </tr> <tr> <td><code>SSL_OP_TLS_ROLLBACK_BUG</code></td> <td>Instructs OpenSSL to disable version rollback attack detection.</td> </tr> </table> <h3 id=\"crypto_openssl_engine_constants\">OpenSSL Engine Constants</h3> <table> <tr> <th>Constant</th> <th>Description</th> </tr> <tr> <td><code>ENGINE_METHOD_RSA</code></td> <td>Limit engine usage to RSA</td> </tr> <tr> <td><code>ENGINE_METHOD_DSA</code></td> <td>Limit engine usage to DSA</td> </tr> <tr> <td><code>ENGINE_METHOD_DH</code></td> <td>Limit engine usage to DH</td> </tr> <tr> <td><code>ENGINE_METHOD_RAND</code></td> <td>Limit engine usage to RAND</td> </tr> <tr> <td><code>ENGINE_METHOD_ECDH</code></td> <td>Limit engine usage to ECDH</td> </tr> <tr> <td><code>ENGINE_METHOD_ECDSA</code></td> <td>Limit engine usage to ECDSA</td> </tr> <tr> <td><code>ENGINE_METHOD_CIPHERS</code></td> <td>Limit engine usage to CIPHERS</td> </tr> <tr> <td><code>ENGINE_METHOD_DIGESTS</code></td> <td>Limit engine usage to DIGESTS</td> </tr> <tr> <td><code>ENGINE_METHOD_STORE</code></td> <td>Limit engine usage to STORE</td> </tr> <tr> <td><code>ENGINE_METHOD_PKEY_METHS</code></td> <td>Limit engine usage to PKEY_METHDS</td> </tr> <tr> <td><code>ENGINE_METHOD_PKEY_ASN1_METHS</code></td> <td>Limit engine usage to PKEY_ASN1_METHS</td> </tr> <tr> <td><code>ENGINE_METHOD_ALL</code></td> <td></td> </tr> <tr> <td><code>ENGINE_METHOD_NONE</code></td> <td></td> </tr> </table> <h3 id=\"crypto_other_openssl_constants\">Other OpenSSL Constants</h3> <table> <tr> <th>Constant</th> <th>Description</th> </tr> <tr> <td><code>DH_CHECK_P_NOT_SAFE_PRIME</code></td> <td></td> </tr> <tr> <td><code>DH_CHECK_P_NOT_PRIME</code></td> <td></td> </tr> <tr> <td><code>DH_UNABLE_TO_CHECK_GENERATOR</code></td> <td></td> </tr> <tr> <td><code>DH_NOT_SUITABLE_GENERATOR</code></td> <td></td> </tr> <tr> <td><code>NPN_ENABLED</code></td> <td></td> </tr> <tr> <td><code>ALPN_ENABLED</code></td> <td></td> </tr> <tr> <td><code>RSA_PKCS1_PADDING</code></td> <td></td> </tr> <tr> <td><code>RSA_SSLV23_PADDING</code></td> <td></td> </tr> <tr> <td><code>RSA_NO_PADDING</code></td> <td></td> </tr> <tr> <td><code>RSA_PKCS1_OAEP_PADDING</code></td> <td></td> </tr> <tr> <td><code>RSA_X931_PADDING</code></td> <td></td> </tr> <tr> <td><code>RSA_PKCS1_PSS_PADDING</code></td> <td></td> </tr> <tr> <td><code>POINT_CONVERSION_COMPRESSED</code></td> <td></td> </tr> <tr> <td><code>POINT_CONVERSION_UNCOMPRESSED</code></td> <td></td> </tr> <tr> <td><code>POINT_CONVERSION_HYBRID</code></td> <td></td> </tr> </table> <h3 id=\"crypto_node_js_crypto_constants\">Node.js Crypto Constants</h3> <table> <tr> <th>Constant</th> <th>Description</th> </tr> <tr> <td><code>defaultCoreCipherList</code></td> <td>Specifies the built-in default cipher list used by Node.js.</td> </tr> <tr> <td><code>defaultCipherList</code></td> <td>Specifies the active default cipher list used by the current Node.js process.</td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/crypto.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/crypto.html</a>\n  </p>\n</div>\n","net":"<h1 id=\"net_net\">Net</h1> <div class=\"api_stability api_stability_2\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</div>\n<p>The <code>net</code> module provides you with an asynchronous network wrapper. It contains functions for creating both servers and clients (called streams). You can include this module with <code>require('net');</code>.</p> <h2 id=\"net_class_net_server\">Class: net.Server</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<p>This class is used to create a TCP or local server.</p> <p><code>net.Server</code> is an <a href=\"events#events_class_eventemitter\"><code>EventEmitter</code></a> with the following events:</p> <h3 id=\"net_event_close\">Event: 'close'</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.0</span> </div>\n<p>Emitted when the server closes. Note that if connections exist, this event is not emitted until all connections are ended.</p> <h3 id=\"net_event_connection\">Event: 'connection'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<ul> <li>\n<a href=\"net#net_class_net_socket\" class=\"type\">&lt;net.Socket&gt;</a> The connection object</li> </ul> <p>Emitted when a new connection is made. <code>socket</code> is an instance of <code>net.Socket</code>.</p> <h3 id=\"net_event_error\">Event: 'error'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a></li> </ul> <p>Emitted when an error occurs. Unlike <a href=\"#net_class_net_socket\"><code>net.Socket</code></a>, the <a href=\"#net_event_close\"><code>'close'</code></a> event will <strong>not</strong> be emitted directly following this event unless <a href=\"#net_server_close_callback\"><code>server.close()</code></a> is manually called. See the example in discussion of <a href=\"#net_server_listen_port_hostname_backlog_callback\"><code>server.listen()</code></a>.</p> <h3 id=\"net_event_listening\">Event: 'listening'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<p>Emitted when the server has been bound after calling <code>server.listen</code>.</p> <h3 id=\"net_server_address\">server.address()</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<p>Returns the bound address, the address family name, and port of the server as reported by the operating system. Useful to find which port was assigned when getting an OS-assigned address. Returns an object with <code>port</code>, <code>family</code>, and <code>address</code> properties: <code>{ port: 12346, family: 'IPv4', address: '127.0.0.1' }</code></p> <p>Example:</p> <pre data-language=\"js\">const server = net.createServer((socket) =&gt; {\n  socket.end('goodbye\\n');\n}).on('error', (err) =&gt; {\n  // handle errors here\n  throw err;\n});\n\n// grab a random port.\nserver.listen(() =&gt; {\n  console.log('opened server on', server.address());\n});\n</pre> <p>Don't call <code>server.address()</code> until the <code>'listening'</code> event has been emitted.</p> <h3 id=\"net_server_close_callback\">server.close([callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<p>Stops the server from accepting new connections and keeps existing connections. This function is asynchronous, the server is finally closed when all connections are ended and the server emits a <a href=\"#net_event_close\"><code>'close'</code></a> event. The optional <code>callback</code> will be called once the <code>'close'</code> event occurs. Unlike that event, it will be called with an Error as its only argument if the server was not open when it was closed.</p> <h3 id=\"net_server_connections\">server.connections</h3> <div class=\"api_metadata\"> <span>Added in: v0.2.0</span><span>Deprecated since: v0.9.7</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated: Use <a href=\"#net_server_getconnections_callback\"><code>server.getConnections()</code></a> instead.</div>\n<p>The number of concurrent connections on the server.</p> <p>This becomes <code>null</code> when sending a socket to a child with <a href=\"child_process#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a>. To poll forks and get current number of active connections use asynchronous <code>server.getConnections</code> instead.</p> <h3 id=\"net_server_getconnections_callback\">server.getConnections(callback)</h3> <div class=\"api_metadata\"> <span>Added in: v0.9.7</span> </div>\n<p>Asynchronously get the number of concurrent connections on the server. Works when sockets were sent to forks.</p> <p>Callback should take two arguments <code>err</code> and <code>count</code>.</p> <h3 id=\"net_server_listen_handle_backlog_callback\">server.listen(handle[, backlog][, callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.10</span> </div>\n<ul> <li>\n<code>handle</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> <li>\n<code>backlog</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>The <code>handle</code> object can be set to either a server or socket (anything with an underlying <code>_handle</code> member), or a <code>{fd: &lt;n&gt;}</code> object.</p> <p>This will cause the server to accept connections on the specified handle, but it is presumed that the file descriptor or handle has already been bound to a port or domain socket.</p> <p>Listening on a file descriptor is not supported on Windows.</p> <p>This function is asynchronous. When the server has been bound, <a href=\"#net_event_listening\"><code>'listening'</code></a> event will be emitted. The last parameter <code>callback</code> will be added as a listener for the <a href=\"#net_event_listening\"><code>'listening'</code></a> event.</p> <p>The parameter <code>backlog</code> behaves the same as in <a href=\"#net_server_listen_port_hostname_backlog_callback\"><code>server.listen([port][, hostname][, backlog][, callback])</code></a>.</p> <h3 id=\"net_server_listen_options_callback\">server.listen(options[, callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.14</span> </div>\n<ul> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> - Required. Supports the following properties:<ul> <li>\n<code>port</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> - Optional.</li> <li>\n<code>host</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> - Optional.</li> <li>\n<code>backlog</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> - Optional.</li> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> - Optional.</li> <li>\n<code>exclusive</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> - Optional.</li> </ul> </li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> - Optional.</li> </ul> <p>The <code>port</code>, <code>host</code>, and <code>backlog</code> properties of <code>options</code>, as well as the optional callback function, behave as they do on a call to <a href=\"#net_server_listen_port_hostname_backlog_callback\"><code>server.listen([port][, hostname][, backlog][, callback])</code></a>. Alternatively, the <code>path</code> option can be used to specify a UNIX socket.</p> <p>If <code>exclusive</code> is <code>false</code> (default), then cluster workers will use the same underlying handle, allowing connection handling duties to be shared. When <code>exclusive</code> is <code>true</code>, the handle is not shared, and attempted port sharing results in an error. An example which listens on an exclusive port is shown below.</p> <pre data-language=\"js\">server.listen({\n  host: 'localhost',\n  port: 80,\n  exclusive: true\n});\n</pre> <p><em>Note</em>: The <code>server.listen()</code> method may be called multiple times. Each subsequent call will <em>re-open</em> the server using the provided options.</p> <h3 id=\"net_server_listen_path_backlog_callback\">server.listen(path[, backlog][, callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>backlog</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Start a local socket server listening for connections on the given <code>path</code>.</p> <p>This function is asynchronous. When the server has been bound, <a href=\"#net_event_listening\"><code>'listening'</code></a> event will be emitted. The last parameter <code>callback</code> will be added as a listener for the <a href=\"#net_event_listening\"><code>'listening'</code></a> event.</p> <p>On UNIX, the local domain is usually known as the UNIX domain. The path is a filesystem path name. It gets truncated to <code>sizeof(sockaddr_un.sun_path)</code> bytes, decreased by 1. It varies on different operating system between 91 and 107 bytes. The typical values are 107 on Linux and 103 on OS X. The path is subject to the same naming conventions and permissions checks as would be done on file creation, will be visible in the filesystem, and will <em>persist until unlinked</em>.</p> <p>On Windows, the local domain is implemented using a named pipe. The path <em>must</em> refer to an entry in <code>\\\\?\\pipe\\</code> or <code>\\\\.\\pipe\\</code>. Any characters are permitted, but the latter may do some processing of pipe names, such as resolving <code>..</code> sequences. Despite appearances, the pipe name space is flat. Pipes will <em>not persist</em>, they are removed when the last reference to them is closed. Do not forget JavaScript string escaping requires paths to be specified with double-backslashes, such as:</p> <pre data-language=\"js\">net.createServer().listen(\n    path.join('\\\\\\\\?\\\\pipe', process.cwd(), 'myctl'));\n</pre> <p>The parameter <code>backlog</code> behaves the same as in <a href=\"#net_server_listen_port_hostname_backlog_callback\"><code>server.listen([port][, hostname][, backlog][, callback])</code></a>.</p> <p><em>Note</em>: The <code>server.listen()</code> method may be called multiple times. Each subsequent call will <em>re-open</em> the server using the provided options.</p> <h3 id=\"net_server_listen_port_hostname_backlog_callback\">server.listen([port][, hostname][, backlog][, callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<p>Begin accepting connections on the specified <code>port</code> and <code>hostname</code>. If the <code>hostname</code> is omitted, the server will accept connections on the <a href=\"https://en.wikipedia.org/wiki/IPv6_address#Unspecified_address\">unspecified IPv6 address</a> (<code>::</code>) when IPv6 is available, or the <a href=\"https://en.wikipedia.org/wiki/0.0.0.0\">unspecified IPv4 address</a> (<code>0.0.0.0</code>) otherwise.</p> <p><em>Note</em>: in most operating systems, listening to the <a href=\"https://en.wikipedia.org/wiki/IPv6_address#Unspecified_address\">unspecified IPv6 address</a> (<code>::</code>) may cause the <code>net.Server</code> to also listen on the <a href=\"https://en.wikipedia.org/wiki/0.0.0.0\">unspecified IPv4 address</a> (<code>0.0.0.0</code>).</p> <p>Omit the port argument, or use a port value of <code>0</code>, to have the operating system assign a random port, which can be retrieved by using <code>server.address().port</code> after the <code>'listening'</code> event has been emitted.</p> <p>Backlog is the maximum length of the queue of pending connections. The actual length will be determined by the OS through sysctl settings such as <code>tcp_max_syn_backlog</code> and <code>somaxconn</code> on Linux. The default value of this parameter is 511 (not 512).</p> <p>This function is asynchronous. When the server has been bound, <a href=\"#net_event_listening\"><code>'listening'</code></a> event will be emitted. The last parameter <code>callback</code> will be added as a listener for the <a href=\"#net_event_listening\"><code>'listening'</code></a> event.</p> <p>One issue some users run into is getting <code>EADDRINUSE</code> errors. This means that another server is already running on the requested port. One way of handling this would be to wait a second and then try again:</p> <pre data-language=\"js\">server.on('error', (e) =&gt; {\n  if (e.code == 'EADDRINUSE') {\n    console.log('Address in use, retrying...');\n    setTimeout(() =&gt; {\n      server.close();\n      server.listen(PORT, HOST);\n    }, 1000);\n  }\n});\n</pre> <p>(Note: All sockets in Node.js are set <code>SO_REUSEADDR</code>.)</p> <p><em>Note</em>: The <code>server.listen()</code> method may be called multiple times. Each subsequent call will <em>re-open</em> the server using the provided options.</p> <h3 id=\"net_server_listening\">server.listening</h3> <div class=\"api_metadata\"> <span>Added in: v5.7.0</span> </div>\n<p>A Boolean indicating whether or not the server is listening for connections.</p> <h3 id=\"net_server_maxconnections\">server.maxConnections</h3> <div class=\"api_metadata\"> <span>Added in: v0.2.0</span> </div>\n<p>Set this property to reject connections when the server's connection count gets high.</p> <p>It is not recommended to use this option once a socket has been sent to a child with <a href=\"child_process#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a>.</p> <h3 id=\"net_server_ref\">server.ref()</h3> <div class=\"api_metadata\"> <span>Added in: v0.9.1</span> </div>\n<p>Opposite of <code>unref</code>, calling <code>ref</code> on a previously <code>unref</code>d server will <em>not</em> let the program exit if it's the only server left (the default behavior). If the server is <code>ref</code>d calling <code>ref</code> again will have no effect.</p> <p>Returns <code>server</code>.</p> <h3 id=\"net_server_unref\">server.unref()</h3> <div class=\"api_metadata\"> <span>Added in: v0.9.1</span> </div>\n<p>Calling <code>unref</code> on a server will allow the program to exit if this is the only active server in the event system. If the server is already <code>unref</code>d calling <code>unref</code> again will have no effect.</p> <p>Returns <code>server</code>.</p> <h2 id=\"net_class_net_socket\">Class: net.Socket</h2> <div class=\"api_metadata\"> <span>Added in: v0.3.4</span> </div>\n<p>This object is an abstraction of a TCP or local socket. <code>net.Socket</code> instances implement a duplex Stream interface. They can be created by the user and used as a client (with <a href=\"#net_socket_connect_options_connectlistener\"><code>connect()</code></a>) or they can be created by Node.js and passed to the user through the <code>'connection'</code> event of a server.</p> <h3 id=\"net_new_net_socket_options\">new net.Socket([options])</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.4</span> </div>\n<p>Construct a new socket object.</p> <p><code>options</code> is an object with the following defaults:</p> <pre data-language=\"js\">{\n  fd: null,\n  allowHalfOpen: false,\n  readable: false,\n  writable: false\n}\n</pre> <p><code>fd</code> allows you to specify the existing file descriptor of socket. Set <code>readable</code> and/or <code>writable</code> to <code>true</code> to allow reads and/or writes on this socket (NOTE: Works only when <code>fd</code> is passed). About <code>allowHalfOpen</code>, refer to <a href=\"#net_net_createserver_options_connectionlistener\"><code>net.createServer()</code></a> and <a href=\"#net_event_end\"><code>'end'</code></a> event.</p> <p><code>net.Socket</code> instances are <a href=\"events#events_class_eventemitter\"><code>EventEmitter</code></a> with the following events:</p> <h3 id=\"net_event_close_1\">Event: 'close'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<ul> <li>\n<code>had_error</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <code>true</code> if the socket had a transmission error.</li> </ul> <p>Emitted once the socket is fully closed. The argument <code>had_error</code> is a boolean which says if the socket was closed due to a transmission error.</p> <h3 id=\"net_event_connect\">Event: 'connect'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<p>Emitted when a socket connection is successfully established. See <a href=\"#net_socket_connect_options_connectlistener\"><code>connect()</code></a>.</p> <h3 id=\"net_event_data\">Event: 'data'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<ul> <li><a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li> </ul> <p>Emitted when data is received. The argument <code>data</code> will be a <code>Buffer</code> or <code>String</code>. Encoding of data is set by <code>socket.setEncoding()</code>. (See the <a href=\"stream#stream_class_stream_readable\">Readable Stream</a> section for more information.)</p> <p>Note that the <strong>data will be lost</strong> if there is no listener when a <code>Socket</code> emits a <code>'data'</code> event.</p> <h3 id=\"net_event_drain\">Event: 'drain'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<p>Emitted when the write buffer becomes empty. Can be used to throttle uploads.</p> <p>See also: the return values of <code>socket.write()</code></p> <h3 id=\"net_event_end\">Event: 'end'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<p>Emitted when the other end of the socket sends a FIN packet.</p> <p>By default (<code>allowHalfOpen == false</code>) the socket will destroy its file descriptor once it has written out its pending write queue. However, by setting <code>allowHalfOpen == true</code> the socket will not automatically <code>end()</code> its side allowing the user to write arbitrary amounts of data, with the caveat that the user is required to <code>end()</code> their side now.</p> <h3 id=\"net_event_error_1\">Event: 'error'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a></li> </ul> <p>Emitted when an error occurs. The <code>'close'</code> event will be called directly following this event.</p> <h3 id=\"net_event_lookup\">Event: 'lookup'</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v5.10.0</td> <td>\n<p>The <code>host</code> parameter is supported now.</p> </td>\n</tr> <tr>\n<td>v0.11.3</td> <td>\n<p><span>Added in: v0.11.3</span></p> </td>\n</tr> </table> </details> </div>\n<p>Emitted after resolving the hostname but before connecting. Not applicable to UNIX sockets.</p> <ul> <li>\n<code>err</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type\" class=\"type\">&lt;null&gt;</a> The error object. See <a href=\"dns#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a>.</li> <li>\n<code>address</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The IP address.</li> <li>\n<code>family</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type\" class=\"type\">&lt;null&gt;</a> The address type. See <a href=\"dns#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a>.</li> <li>\n<code>host</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The hostname.</li> </ul> <h3 id=\"net_event_timeout\">Event: 'timeout'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<p>Emitted if the socket times out from inactivity. This is only to notify that the socket has been idle. The user must manually close the connection.</p> <p>See also: <a href=\"#net_socket_settimeout_timeout_callback\"><code>socket.setTimeout()</code></a></p> <h3 id=\"net_socket_address\">socket.address()</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<p>Returns the bound address, the address family name and port of the socket as reported by the operating system. Returns an object with three properties, e.g. <code>{ port: 12346, family: 'IPv4', address: '127.0.0.1' }</code></p> <h3 id=\"net_socket_buffersize\">socket.bufferSize</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.8</span> </div>\n<p><code>net.Socket</code> has the property that <code>socket.write()</code> always works. This is to help users get up and running quickly. The computer cannot always keep up with the amount of data that is written to a socket - the network connection simply might be too slow. Node.js will internally queue up the data written to a socket and send it out over the wire when it is possible. (Internally it is polling on the socket's file descriptor for being writable).</p> <p>The consequence of this internal buffering is that memory may grow. This property shows the number of characters currently buffered to be written. (Number of characters is approximately equal to the number of bytes to be written, but the buffer may contain strings, and the strings are lazily encoded, so the exact number of bytes is not known.)</p> <p>Users who experience large or growing <code>bufferSize</code> should attempt to \"throttle\" the data flows in their program with <a href=\"#net_socket_pause\"><code>pause()</code></a> and <a href=\"#net_socket_resume\"><code>resume()</code></a>.</p> <h3 id=\"net_socket_bytesread\">socket.bytesRead</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.3</span> </div>\n<p>The amount of received bytes.</p> <h3 id=\"net_socket_byteswritten\">socket.bytesWritten</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.3</span> </div>\n<p>The amount of bytes sent.</p> <h3 id=\"net_socket_connect_options_connectlistener\">socket.connect(options[, connectListener])</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>The <code>hints</code> option defaults to <code>0</code> in all cases now. Previously, in the absence of the <code>family</code> option it would default to <code>dns.ADDRCONFIG | dns.V4MAPPED</code>.</p> </td>\n</tr> <tr>\n<td>v5.11.0</td> <td>\n<p>The <code>hints</code> option is supported now.</p> </td>\n</tr> <tr>\n<td>v0.1.90</td> <td>\n<p><span>Added in: v0.1.90</span></p> </td>\n</tr> </table> </details> </div>\n<p>Opens the connection for a given socket.</p> <p>For TCP sockets, <code>options</code> argument should be an object which specifies:</p> <ul> <li>\n<p><code>port</code>: Port the client should connect to (Required).</p> </li> <li>\n<p><code>host</code>: Host the client should connect to. Defaults to <code>'localhost'</code>.</p> </li> <li>\n<p><code>localAddress</code>: Local interface to bind to for network connections.</p> </li> <li>\n<p><code>localPort</code>: Local port to bind to for network connections.</p> </li> <li>\n<p><code>family</code> : Version of IP stack. Defaults to <code>4</code>.</p> </li> <li>\n<p><code>hints</code>: <a href=\"dns#dns_supported_getaddrinfo_flags\"><code>dns.lookup()</code> hints</a>. Defaults to <code>0</code>.</p> </li> <li>\n<p><code>lookup</code> : Custom lookup function. Defaults to <code>dns.lookup</code>.</p> </li> </ul> <p>For local domain sockets, <code>options</code> argument should be an object which specifies:</p> <ul> <li>\n<code>path</code>: Path the client should connect to (Required).</li> </ul> <p>Normally this method is not needed, as <code>net.createConnection</code> opens the socket. Use this only if you are implementing a custom Socket.</p> <p>This function is asynchronous. When the <a href=\"#net_event_connect\"><code>'connect'</code></a> event is emitted the socket is established. If there is a problem connecting, the <code>'connect'</code> event will not be emitted, the <a href=\"#net_event_error_1\"><code>'error'</code></a> event will be emitted with the exception.</p> <p>The <code>connectListener</code> parameter will be added as a listener for the <a href=\"#net_event_connect\"><code>'connect'</code></a> event.</p> <h3 id=\"net_socket_connect_path_connectlistener\">socket.connect(path[, connectListener])</h3> <h3 id=\"net_socket_connect_port_host_connectlistener\">socket.connect(port[, host][, connectListener])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<p>As <a href=\"#net_socket_connect_options_connectlistener\"><code>socket.connect(options[, connectListener])</code></a>, with options as either <code>{port: port, host: host}</code> or <code>{path: path}</code>.</p> <h3 id=\"net_socket_connecting\">socket.connecting</h3> <div class=\"api_metadata\"> <span>Added in: v6.1.0</span> </div>\n<p>If <code>true</code> - <a href=\"#net_socket_connect_options_connectlistener\"><code>socket.connect(options[, connectListener])</code></a> was called and haven't yet finished. Will be set to <code>false</code> before emitting <code>connect</code> event and/or calling <a href=\"#net_socket_connect_options_connectlistener\"><code>socket.connect(options[, connectListener])</code></a>'s callback.</p> <h3 id=\"net_socket_destroy_exception\">socket.destroy([exception])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<p>Ensures that no more I/O activity happens on this socket. Only necessary in case of errors (parse error or so).</p> <p>If <code>exception</code> is specified, an <a href=\"#net_event_error_1\"><code>'error'</code></a> event will be emitted and any listeners for that event will receive <code>exception</code> as an argument.</p> <h3 id=\"net_socket_destroyed\">socket.destroyed</h3> <p>A Boolean value that indicates if the connection is destroyed or not. Once a connection is destroyed no further data can be transferred using it.</p> <h3 id=\"net_socket_end_data_encoding\">socket.end([data][, encoding])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<p>Half-closes the socket. i.e., it sends a FIN packet. It is possible the server will still send some data.</p> <p>If <code>data</code> is specified, it is equivalent to calling <code>socket.write(data, encoding)</code> followed by <code>socket.end()</code>.</p> <h3 id=\"net_socket_localaddress\">socket.localAddress</h3> <div class=\"api_metadata\"> <span>Added in: v0.9.6</span> </div>\n<p>The string representation of the local IP address the remote client is connecting on. For example, if you are listening on <code>'0.0.0.0'</code> and the client connects on <code>'192.168.1.1'</code>, the value would be <code>'192.168.1.1'</code>.</p> <h3 id=\"net_socket_localport\">socket.localPort</h3> <div class=\"api_metadata\"> <span>Added in: v0.9.6</span> </div>\n<p>The numeric representation of the local port. For example, <code>80</code> or <code>21</code>.</p> <h3 id=\"net_socket_pause\">socket.pause()</h3> <p>Pauses the reading of data. That is, <a href=\"#net_event_data\"><code>'data'</code></a> events will not be emitted. Useful to throttle back an upload.</p> <h3 id=\"net_socket_ref\">socket.ref()</h3> <div class=\"api_metadata\"> <span>Added in: v0.9.1</span> </div>\n<p>Opposite of <code>unref</code>, calling <code>ref</code> on a previously <code>unref</code>d socket will <em>not</em> let the program exit if it's the only socket left (the default behavior). If the socket is <code>ref</code>d calling <code>ref</code> again will have no effect.</p> <p>Returns <code>socket</code>.</p> <h3 id=\"net_socket_remoteaddress\">socket.remoteAddress</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.10</span> </div>\n<p>The string representation of the remote IP address. For example, <code>'74.125.127.100'</code> or <code>'2001:4860:a005::68'</code>. Value may be <code>undefined</code> if the socket is destroyed (for example, if the client disconnected).</p> <h3 id=\"net_socket_remotefamily\">socket.remoteFamily</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.14</span> </div>\n<p>The string representation of the remote IP family. <code>'IPv4'</code> or <code>'IPv6'</code>.</p> <h3 id=\"net_socket_remoteport\">socket.remotePort</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.10</span> </div>\n<p>The numeric representation of the remote port. For example, <code>80</code> or <code>21</code>.</p> <h3 id=\"net_socket_resume\">socket.resume()</h3> <p>Resumes reading after a call to <a href=\"#net_socket_pause\"><code>pause()</code></a>.</p> <h3 id=\"net_socket_setencoding_encoding\">socket.setEncoding([encoding])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<p>Set the encoding for the socket as a <a href=\"stream#stream_class_stream_readable\">Readable Stream</a>. See <a href=\"stream#stream_readable_setencoding_encoding\"><code>stream.setEncoding()</code></a> for more information.</p> <h3 id=\"net_socket_setkeepalive_enable_initialdelay\">socket.setKeepAlive([enable][, initialDelay])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.92</span> </div>\n<p>Enable/disable keep-alive functionality, and optionally set the initial delay before the first keepalive probe is sent on an idle socket. <code>enable</code> defaults to <code>false</code>.</p> <p>Set <code>initialDelay</code> (in milliseconds) to set the delay between the last data packet received and the first keepalive probe. Setting 0 for initialDelay will leave the value unchanged from the default (or previous) setting. Defaults to <code>0</code>.</p> <p>Returns <code>socket</code>.</p> <h3 id=\"net_socket_setnodelay_nodelay\">socket.setNoDelay([noDelay])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<p>Disables the Nagle algorithm. By default TCP connections use the Nagle algorithm, they buffer data before sending it off. Setting <code>true</code> for <code>noDelay</code> will immediately fire off data each time <code>socket.write()</code> is called. <code>noDelay</code> defaults to <code>true</code>.</p> <p>Returns <code>socket</code>.</p> <h3 id=\"net_socket_settimeout_timeout_callback\">socket.setTimeout(timeout[, callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<p>Sets the socket to timeout after <code>timeout</code> milliseconds of inactivity on the socket. By default <code>net.Socket</code> do not have a timeout.</p> <p>When an idle timeout is triggered the socket will receive a <a href=\"#net_event_timeout\"><code>'timeout'</code></a> event but the connection will not be severed. The user must manually <a href=\"#net_socket_end_data_encoding\"><code>end()</code></a> or <a href=\"#net_socket_destroy_exception\"><code>destroy()</code></a> the socket.</p> <p>If <code>timeout</code> is 0, then the existing idle timeout is disabled.</p> <p>The optional <code>callback</code> parameter will be added as a one time listener for the <a href=\"#net_event_timeout\"><code>'timeout'</code></a> event.</p> <p>Returns <code>socket</code>.</p> <h3 id=\"net_socket_unref\">socket.unref()</h3> <div class=\"api_metadata\"> <span>Added in: v0.9.1</span> </div>\n<p>Calling <code>unref</code> on a socket will allow the program to exit if this is the only active socket in the event system. If the socket is already <code>unref</code>d calling <code>unref</code> again will have no effect.</p> <p>Returns <code>socket</code>.</p> <h3 id=\"net_socket_write_data_encoding_callback\">socket.write(data[, encoding][, callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<p>Sends data on the socket. The second parameter specifies the encoding in the case of a string--it defaults to UTF8 encoding.</p> <p>Returns <code>true</code> if the entire data was flushed successfully to the kernel buffer. Returns <code>false</code> if all or part of the data was queued in user memory. <a href=\"#net_event_drain\"><code>'drain'</code></a> will be emitted when the buffer is again free.</p> <p>The optional <code>callback</code> parameter will be executed when the data is finally written out - this may not be immediately.</p> <h2 id=\"net_net_connect_options_connectlistener\">net.connect(options[, connectListener])</h2> <div class=\"api_metadata\"> <span>Added in: v0.7.0</span> </div>\n<p>A factory function, which returns a new <a href=\"#net_class_net_socket\"><code>net.Socket</code></a> and automatically connects with the supplied <code>options</code>.</p> <p>The options are passed to both the <a href=\"#net_class_net_socket\"><code>net.Socket</code></a> constructor and the <a href=\"#net_socket_connect_options_connectlistener\"><code>socket.connect</code></a> method.</p> <p>The <code>connectListener</code> parameter will be added as a listener for the <a href=\"#net_event_connect\"><code>'connect'</code></a> event once.</p> <p>Here is an example of a client of the previously described echo server:</p> <pre data-language=\"js\">const net = require('net');\nconst client = net.connect({port: 8124}, () =&gt; {\n  // 'connect' listener\n  console.log('connected to server!');\n  client.write('world!\\r\\n');\n});\nclient.on('data', (data) =&gt; {\n  console.log(data.toString());\n  client.end();\n});\nclient.on('end', () =&gt; {\n  console.log('disconnected from server');\n});\n</pre> <p>To connect on the socket <code>/tmp/echo.sock</code> the second line would just be changed to</p> <pre data-language=\"js\">const client = net.connect({path: '/tmp/echo.sock'});\n</pre> <h2 id=\"net_net_connect_path_connectlistener\">net.connect(path[, connectListener])</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<p>A factory function, which returns a new unix <a href=\"#net_class_net_socket\"><code>net.Socket</code></a> and automatically connects to the supplied <code>path</code>.</p> <p>The <code>connectListener</code> parameter will be added as a listener for the <a href=\"#net_event_connect\"><code>'connect'</code></a> event once.</p> <h2 id=\"net_net_connect_port_host_connectlistener\">net.connect(port[, host][, connectListener])</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<p>A factory function, which returns a new <a href=\"#net_class_net_socket\"><code>net.Socket</code></a> and automatically connects to the supplied <code>port</code> and <code>host</code>.</p> <p>If <code>host</code> is omitted, <code>'localhost'</code> will be assumed.</p> <p>The <code>connectListener</code> parameter will be added as a listener for the <a href=\"#net_event_connect\"><code>'connect'</code></a> event once.</p> <h2 id=\"net_net_createconnection_options_connectlistener\">net.createConnection(options[, connectListener])</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<p>A factory function, which returns a new <a href=\"#net_class_net_socket\"><code>net.Socket</code></a> and automatically connects with the supplied <code>options</code>.</p> <p>The options are passed to both the <a href=\"#net_class_net_socket\"><code>net.Socket</code></a> constructor and the <a href=\"#net_socket_connect_options_connectlistener\"><code>socket.connect</code></a> method.</p> <p>Passing <code>timeout</code> as an option will call <a href=\"#net_socket_settimeout_timeout_callback\"><code>socket.setTimeout()</code></a> after the socket is created, but before it is connecting.</p> <p>The <code>connectListener</code> parameter will be added as a listener for the <a href=\"#net_event_connect\"><code>'connect'</code></a> event once.</p> <p>Following is an example of a client of the echo server described in the <a href=\"#net_net_createserver_options_connectionlistener\"><code>net.createServer()</code></a> section:</p> <pre data-language=\"js\">const net = require('net');\nconst client = net.createConnection({port: 8124}, () =&gt; {\n  //'connect' listener\n  console.log('connected to server!');\n  client.write('world!\\r\\n');\n});\nclient.on('data', (data) =&gt; {\n  console.log(data.toString());\n  client.end();\n});\nclient.on('end', () =&gt; {\n  console.log('disconnected from server');\n});\n</pre> <p>To connect on the socket <code>/tmp/echo.sock</code> the second line would just be changed to</p> <pre data-language=\"js\">const client = net.connect({path: '/tmp/echo.sock'});\n</pre> <h2 id=\"net_net_createconnection_path_connectlistener\">net.createConnection(path[, connectListener])</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<p>A factory function, which returns a new unix <a href=\"#net_class_net_socket\"><code>net.Socket</code></a> and automatically connects to the supplied <code>path</code>.</p> <p>The <code>connectListener</code> parameter will be added as a listener for the <a href=\"#net_event_connect\"><code>'connect'</code></a> event once.</p> <h2 id=\"net_net_createconnection_port_host_connectlistener\">net.createConnection(port[, host][, connectListener])</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<p>A factory function, which returns a new <a href=\"#net_class_net_socket\"><code>net.Socket</code></a> and automatically connects to the supplied <code>port</code> and <code>host</code>.</p> <p>If <code>host</code> is omitted, <code>'localhost'</code> will be assumed.</p> <p>The <code>connectListener</code> parameter will be added as a listener for the <a href=\"#net_event_connect\"><code>'connect'</code></a> event once.</p> <h2 id=\"net_net_createserver_options_connectionlistener\">net.createServer([options][, connectionListener])</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.0</span> </div>\n<p>Creates a new server. The <code>connectionListener</code> argument is automatically set as a listener for the <a href=\"#net_event_connection\"><code>'connection'</code></a> event.</p> <p><code>options</code> is an object with the following defaults:</p> <pre data-language=\"js\">{\n  allowHalfOpen: false,\n  pauseOnConnect: false\n}\n</pre> <p>If <code>allowHalfOpen</code> is <code>true</code>, then the socket won't automatically send a FIN packet when the other end of the socket sends a FIN packet. The socket becomes non-readable, but still writable. You should call the <a href=\"#net_socket_end_data_encoding\"><code>end()</code></a> method explicitly. See <a href=\"#net_event_end\"><code>'end'</code></a> event for more information.</p> <p>If <code>pauseOnConnect</code> is <code>true</code>, then the socket associated with each incoming connection will be paused, and no data will be read from its handle. This allows connections to be passed between processes without any data being read by the original process. To begin reading data from a paused socket, call <a href=\"#net_socket_resume\"><code>resume()</code></a>.</p> <p>Here is an example of an echo server which listens for connections on port 8124:</p> <pre data-language=\"js\">const net = require('net');\nconst server = net.createServer((c) =&gt; {\n  // 'connection' listener\n  console.log('client connected');\n  c.on('end', () =&gt; {\n    console.log('client disconnected');\n  });\n  c.write('hello\\r\\n');\n  c.pipe(c);\n});\nserver.on('error', (err) =&gt; {\n  throw err;\n});\nserver.listen(8124, () =&gt; {\n  console.log('server bound');\n});\n</pre> <p>Test this by using <code>telnet</code>:</p> <pre data-language=\"console\">$ telnet localhost 8124\n</pre> <p>To listen on the socket <code>/tmp/echo.sock</code> the third line from the last would just be changed to</p> <pre data-language=\"js\">server.listen('/tmp/echo.sock', () =&gt; {\n  console.log('server bound');\n});\n</pre> <p>Use <code>nc</code> to connect to a UNIX domain socket server:</p> <pre data-language=\"console\">$ nc -U /tmp/echo.sock\n</pre> <h2 id=\"net_net_isip_input\">net.isIP(input)</h2> <div class=\"api_metadata\"> <span>Added in: v0.3.0</span> </div>\n<p>Tests if input is an IP address. Returns 0 for invalid strings, returns 4 for IP version 4 addresses, and returns 6 for IP version 6 addresses.</p> <h2 id=\"net_net_isipv4_input\">net.isIPv4(input)</h2> <div class=\"api_metadata\"> <span>Added in: v0.3.0</span> </div>\n<p>Returns true if input is a version 4 IP address, otherwise returns false.</p> <h2 id=\"net_net_isipv6_input\">net.isIPv6(input)</h2> <div class=\"api_metadata\"> <span>Added in: v0.3.0</span> </div>\n<p>Returns true if input is a version 6 IP address, otherwise returns false.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/net.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/net.html</a>\n  </p>\n</div>\n","addons":"<h1 id=\"addons_c_c_addons\">C/C++ Addons</h1> <p>Node.js Addons are dynamically-linked shared objects, written in C or C++, that can be loaded into Node.js using the <a href=\"globals#globals_require\"><code>require()</code></a> function, and used just as if they were an ordinary Node.js module. They are used primarily to provide an interface between JavaScript running in Node.js and C/C++ libraries.</p> <p>At the moment, the method for implementing Addons is rather complicated, involving knowledge of several components and APIs :</p> <ul> <li>\n<p>V8: the C++ library Node.js currently uses to provide the JavaScript implementation. V8 provides the mechanisms for creating objects, calling functions, etc. V8's API is documented mostly in the <code>v8.h</code> header file (<code>deps/v8/include/v8.h</code> in the Node.js source tree), which is also available <a href=\"https://v8docs.nodesource.com/\">online</a>.</p> </li> <li>\n<p><a href=\"https://github.com/libuv/libuv\">libuv</a>: The C library that implements the Node.js event loop, its worker threads and all of the asynchronous behaviors of the platform. It also serves as a cross-platform abstraction library, giving easy, POSIX-like access across all major operating systems to many common system tasks, such as interacting with the filesystem, sockets, timers and system events. libuv also provides a pthreads-like threading abstraction that may be used to power more sophisticated asynchronous Addons that need to move beyond the standard event loop. Addon authors are encouraged to think about how to avoid blocking the event loop with I/O or other time-intensive tasks by off-loading work via libuv to non-blocking system operations, worker threads or a custom use of libuv's threads.</p> </li> <li>\n<p>Internal Node.js libraries. Node.js itself exports a number of C/C++ APIs that Addons can use — the most important of which is the <code>node::ObjectWrap</code> class.</p> </li> <li>\n<p>Node.js includes a number of other statically linked libraries including OpenSSL. These other libraries are located in the <code>deps/</code> directory in the Node.js source tree. Only the V8 and OpenSSL symbols are purposefully re-exported by Node.js and may be used to various extents by Addons. See <a href=\"#addons_linking_to_node_js_own_dependencies\">Linking to Node.js' own dependencies</a> for additional information.</p> </li> </ul> <p>All of the following examples are available for <a href=\"https://github.com/nodejs/node-addon-examples\">download</a> and may be used as a starting-point for your own Addon.</p> <h2 id=\"addons_hello_world\">Hello world</h2> <p>This \"Hello world\" example is a simple Addon, written in C++, that is the equivalent of the following JavaScript code:</p> <pre data-language=\"js\">module.exports.hello = () =&gt; 'world';\n</pre> <p>First, create the file <code>hello.cc</code>:</p> <pre data-language=\"cpp\">// hello.cc\n#include &lt;node.h&gt;\n\nnamespace demo {\n\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid Method(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n  args.GetReturnValue().Set(String::NewFromUtf8(isolate, \"world\"));\n}\n\nvoid init(Local&lt;Object&gt; exports) {\n  NODE_SET_METHOD(exports, \"hello\", Method);\n}\n\nNODE_MODULE(addon, init)\n\n}  // namespace demo\n</pre> <p>Note that all Node.js Addons must export an initialization function following the pattern:</p> <pre data-language=\"cpp\">void Initialize(Local&lt;Object&gt; exports);\nNODE_MODULE(module_name, Initialize)\n</pre> <p>There is no semi-colon after <code>NODE_MODULE</code> as it's not a function (see <code>node.h</code>).</p> <p>The <code>module_name</code> must match the filename of the final binary (excluding the .node suffix).</p> <p>In the <code>hello.cc</code> example, then, the initialization function is <code>init</code> and the Addon module name is <code>addon</code>.</p> <h3 id=\"addons_building\">Building</h3> <p>Once the source code has been written, it must be compiled into the binary <code>addon.node</code> file. To do so, create a file called <code>binding.gyp</code> in the top-level of the project describing the build configuration of your module using a JSON-like format. This file is used by <a href=\"https://github.com/nodejs/node-gyp\">node-gyp</a> -- a tool written specifically to compile Node.js Addons.</p> <pre data-language=\"json\">{\n  \"targets\": [\n    {\n      \"target_name\": \"addon\",\n      \"sources\": [ \"hello.cc\" ]\n    }\n  ]\n}\n</pre> <p><em>Note: A version of the <code>node-gyp</code> utility is bundled and distributed with Node.js as part of <code>npm</code>. This version is not made directly available for developers to use and is intended only to support the ability to use the <code>npm install</code> command to compile and install Addons. Developers who wish to use <code>node-gyp</code> directly can install it using the command <code>npm install -g node-gyp</code>. See the <code>node-gyp</code> <a href=\"https://github.com/nodejs/node-gyp#installation\">installation instructions</a> for more information, including platform-specific requirements.</em></p> <p>Once the <code>binding.gyp</code> file has been created, use <code>node-gyp configure</code> to generate the appropriate project build files for the current platform. This will generate either a <code>Makefile</code> (on Unix platforms) or a <code>vcxproj</code> file (on Windows) in the <code>build/</code> directory.</p> <p>Next, invoke the <code>node-gyp build</code> command to generate the compiled <code>addon.node</code> file. This will be put into the <code>build/Release/</code> directory.</p> <p>When using <code>npm install</code> to install a Node.js Addon, npm uses its own bundled version of <code>node-gyp</code> to perform this same set of actions, generating a compiled version of the Addon for the user's platform on demand.</p> <p>Once built, the binary Addon can be used from within Node.js by pointing <a href=\"globals#globals_require\"><code>require()</code></a> to the built <code>addon.node</code> module:</p> <pre data-language=\"js\">// hello.js\nconst addon = require('./build/Release/addon');\n\nconsole.log(addon.hello());\n// Prints: 'world'\n</pre> <p>Please see the examples below for further information or <a href=\"https://github.com/arturadib/node-qt\">https://github.com/arturadib/node-qt</a> for an example in production.</p> <p>Because the exact path to the compiled Addon binary can vary depending on how it is compiled (i.e. sometimes it may be in <code>./build/Debug/</code>), Addons can use the <a href=\"https://github.com/TooTallNate/node-bindings\">bindings</a> package to load the compiled module.</p> <p>Note that while the <code>bindings</code> package implementation is more sophisticated in how it locates Addon modules, it is essentially using a try-catch pattern similar to:</p> <pre data-language=\"js\">try {\n  return require('./build/Release/addon.node');\n} catch (err) {\n  return require('./build/Debug/addon.node');\n}\n</pre> <h3 id=\"addons_linking_to_node_js_own_dependencies\">Linking to Node.js' own dependencies</h3> <p>Node.js uses a number of statically linked libraries such as V8, libuv and OpenSSL. All Addons are required to link to V8 and may link to any of the other dependencies as well. Typically, this is as simple as including the appropriate <code>#include &lt;...&gt;</code> statements (e.g. <code>#include &lt;v8.h&gt;</code>) and <code>node-gyp</code> will locate the appropriate headers automatically. However, there are a few caveats to be aware of:</p> <ul> <li>\n<p>When <code>node-gyp</code> runs, it will detect the specific release version of Node.js and download either the full source tarball or just the headers. If the full source is downloaded, Addons will have complete access to the full set of Node.js dependencies. However, if only the Node.js headers are downloaded, then only the symbols exported by Node.js will be available.</p> </li> <li>\n<p><code>node-gyp</code> can be run using the <code>--nodedir</code> flag pointing at a local Node.js source image. Using this option, the Addon will have access to the full set of dependencies.</p> </li> </ul> <h3 id=\"addons_loading_addons_using_require\">Loading Addons using require()</h3> <p>The filename extension of the compiled Addon binary is <code>.node</code> (as opposed to <code>.dll</code> or <code>.so</code>). The <a href=\"globals#globals_require\"><code>require()</code></a> function is written to look for files with the <code>.node</code> file extension and initialize those as dynamically-linked libraries.</p> <p>When calling <a href=\"globals#globals_require\"><code>require()</code></a>, the <code>.node</code> extension can usually be omitted and Node.js will still find and initialize the Addon. One caveat, however, is that Node.js will first attempt to locate and load modules or JavaScript files that happen to share the same base name. For instance, if there is a file <code>addon.js</code> in the same directory as the binary <code>addon.node</code>, then <a href=\"globals#globals_require\"><code>require('addon')</code></a> will give precedence to the <code>addon.js</code> file and load it instead.</p> <h2 id=\"addons_native_abstractions_for_node_js\">Native Abstractions for Node.js</h2> <p>Each of the examples illustrated in this document make direct use of the Node.js and V8 APIs for implementing Addons. It is important to understand that the V8 API can, and has, changed dramatically from one V8 release to the next (and one major Node.js release to the next). With each change, Addons may need to be updated and recompiled in order to continue functioning. The Node.js release schedule is designed to minimize the frequency and impact of such changes but there is little that Node.js can do currently to ensure stability of the V8 APIs.</p> <p>The <a href=\"https://github.com/nodejs/nan\">Native Abstractions for Node.js</a> (or <code>nan</code>) provide a set of tools that Addon developers are recommended to use to keep compatibility between past and future releases of V8 and Node.js. See the <code>nan</code> <a href=\"https://github.com/nodejs/nan/tree/master/examples/\">examples</a> for an illustration of how it can be used.</p> <h2 id=\"addons_n_api\">N-API</h2> <div class=\"api_stability api_stability_1\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 1</a> - Experimental</div>\n<p>N-API is an API for building native Addons. It is independent from the underlying JavaScript runtime (ex V8) and is maintained as part of Node.js itself. This API will be Application Binary Interface (ABI) stable across version of Node.js. It is intended to insulate Addons from changes in the underlying JavaScript engine and allow modules compiled for one version to run on later versions of Node.js without recompilation. Addons are built/packaged with the same approach/tools outlined in this document (node-gyp, etc.). The only difference is the set of APIs that are used by the native code. Instead of using the V8 or <a href=\"https://github.com/nodejs/nan\">Native Abstractions for Node.js</a> APIs, the functions available in the N-API are used.</p> <p>The functions available and how to use them are documented in the section titled <a href=\"n-api\">C/C++ Addons - N-API</a>.</p> <h2 id=\"addons_addon_examples\">Addon examples</h2> <p>Following are some example Addons intended to help developers get started. The examples make use of the V8 APIs. Refer to the online <a href=\"https://v8docs.nodesource.com/\">V8 reference</a> for help with the various V8 calls, and V8's <a href=\"https://github.com/v8/v8/wiki/Embedder's%20Guide\">Embedder's Guide</a> for an explanation of several concepts used such as handles, scopes, function templates, etc.</p> <p>Each of these examples using the following <code>binding.gyp</code> file:</p> <pre data-language=\"json\">{\n  \"targets\": [\n    {\n      \"target_name\": \"addon\",\n      \"sources\": [ \"addon.cc\" ]\n    }\n  ]\n}\n</pre> <p>In cases where there is more than one <code>.cc</code> file, simply add the additional filename to the <code>sources</code> array. For example:</p> <pre data-language=\"json\">\"sources\": [\"addon.cc\", \"myexample.cc\"]\n</pre> <p>Once the <code>binding.gyp</code> file is ready, the example Addons can be configured and built using <code>node-gyp</code>:</p> <pre data-language=\"console\">$ node-gyp configure build\n</pre> <h3 id=\"addons_function_arguments\">Function arguments</h3> <p>Addons will typically expose objects and functions that can be accessed from JavaScript running within Node.js. When functions are invoked from JavaScript, the input arguments and return value must be mapped to and from the C/C++ code.</p> <p>The following example illustrates how to read function arguments passed from JavaScript and how to return a result:</p> <pre data-language=\"cpp\">// addon.cc\n#include &lt;node.h&gt;\n\nnamespace demo {\n\nusing v8::Exception;\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Number;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\n// This is the implementation of the \"add\" method\n// Input arguments are passed using the\n// const FunctionCallbackInfo&lt;Value&gt;&amp; args struct\nvoid Add(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  // Check the number of arguments passed.\n  if (args.Length() &lt; 2) {\n    // Throw an Error that is passed back to JavaScript\n    isolate-&gt;ThrowException(Exception::TypeError(\n        String::NewFromUtf8(isolate, \"Wrong number of arguments\")));\n    return;\n  }\n\n  // Check the argument types\n  if (!args[0]-&gt;IsNumber() || !args[1]-&gt;IsNumber()) {\n    isolate-&gt;ThrowException(Exception::TypeError(\n        String::NewFromUtf8(isolate, \"Wrong arguments\")));\n    return;\n  }\n\n  // Perform the operation\n  double value = args[0]-&gt;NumberValue() + args[1]-&gt;NumberValue();\n  Local&lt;Number&gt; num = Number::New(isolate, value);\n\n  // Set the return value (using the passed in\n  // FunctionCallbackInfo&lt;Value&gt;&amp;)\n  args.GetReturnValue().Set(num);\n}\n\nvoid Init(Local&lt;Object&gt; exports) {\n  NODE_SET_METHOD(exports, \"add\", Add);\n}\n\nNODE_MODULE(addon, Init)\n\n}  // namespace demo\n</pre> <p>Once compiled, the example Addon can be required and used from within Node.js:</p> <pre data-language=\"js\">// test.js\nconst addon = require('./build/Release/addon');\n\nconsole.log('This should be eight:', addon.add(3, 5));\n</pre> <h3 id=\"addons_callbacks\">Callbacks</h3> <p>It is common practice within Addons to pass JavaScript functions to a C++ function and execute them from there. The following example illustrates how to invoke such callbacks:</p> <pre data-language=\"cpp\">// addon.cc\n#include &lt;node.h&gt;\n\nnamespace demo {\n\nusing v8::Function;\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Null;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid RunCallback(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n  Local&lt;Function&gt; cb = Local&lt;Function&gt;::Cast(args[0]);\n  const unsigned argc = 1;\n  Local&lt;Value&gt; argv[argc] = { String::NewFromUtf8(isolate, \"hello world\") };\n  cb-&gt;Call(Null(isolate), argc, argv);\n}\n\nvoid Init(Local&lt;Object&gt; exports, Local&lt;Object&gt; module) {\n  NODE_SET_METHOD(module, \"exports\", RunCallback);\n}\n\nNODE_MODULE(addon, Init)\n\n}  // namespace demo\n</pre> <p>Note that this example uses a two-argument form of <code>Init()</code> that receives the full <code>module</code> object as the second argument. This allows the Addon to completely overwrite <code>exports</code> with a single function instead of adding the function as a property of <code>exports</code>.</p> <p>To test it, run the following JavaScript:</p> <pre data-language=\"js\">// test.js\nconst addon = require('./build/Release/addon');\n\naddon((msg) =&gt; {\n  console.log(msg);\n// Prints: 'hello world'\n});\n</pre> <p>Note that, in this example, the callback function is invoked synchronously.</p> <h3 id=\"addons_object_factory\">Object factory</h3> <p>Addons can create and return new objects from within a C++ function as illustrated in the following example. An object is created and returned with a property <code>msg</code> that echoes the string passed to <code>createObject()</code>:</p> <pre data-language=\"cpp\">// addon.cc\n#include &lt;node.h&gt;\n\nnamespace demo {\n\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid CreateObject(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  Local&lt;Object&gt; obj = Object::New(isolate);\n  obj-&gt;Set(String::NewFromUtf8(isolate, \"msg\"), args[0]-&gt;ToString());\n\n  args.GetReturnValue().Set(obj);\n}\n\nvoid Init(Local&lt;Object&gt; exports, Local&lt;Object&gt; module) {\n  NODE_SET_METHOD(module, \"exports\", CreateObject);\n}\n\nNODE_MODULE(addon, Init)\n\n}  // namespace demo\n</pre> <p>To test it in JavaScript:</p> <pre data-language=\"js\">// test.js\nconst addon = require('./build/Release/addon');\n\nconst obj1 = addon('hello');\nconst obj2 = addon('world');\nconsole.log(obj1.msg, obj2.msg);\n// Prints: 'hello world'\n</pre> <h3 id=\"addons_function_factory\">Function factory</h3> <p>Another common scenario is creating JavaScript functions that wrap C++ functions and returning those back to JavaScript:</p> <pre data-language=\"cpp\">// addon.cc\n#include &lt;node.h&gt;\n\nnamespace demo {\n\nusing v8::Function;\nusing v8::FunctionCallbackInfo;\nusing v8::FunctionTemplate;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid MyFunction(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n  args.GetReturnValue().Set(String::NewFromUtf8(isolate, \"hello world\"));\n}\n\nvoid CreateFunction(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(isolate, MyFunction);\n  Local&lt;Function&gt; fn = tpl-&gt;GetFunction();\n\n  // omit this to make it anonymous\n  fn-&gt;SetName(String::NewFromUtf8(isolate, \"theFunction\"));\n\n  args.GetReturnValue().Set(fn);\n}\n\nvoid Init(Local&lt;Object&gt; exports, Local&lt;Object&gt; module) {\n  NODE_SET_METHOD(module, \"exports\", CreateFunction);\n}\n\nNODE_MODULE(addon, Init)\n\n}  // namespace demo\n</pre> <p>To test:</p> <pre data-language=\"js\">// test.js\nconst addon = require('./build/Release/addon');\n\nconst fn = addon();\nconsole.log(fn());\n// Prints: 'hello world'\n</pre> <h3 id=\"addons_wrapping_c_objects\">Wrapping C++ objects</h3> <p>It is also possible to wrap C++ objects/classes in a way that allows new instances to be created using the JavaScript <code>new</code> operator:</p> <pre data-language=\"cpp\">// addon.cc\n#include &lt;node.h&gt;\n#include \"myobject.h\"\n\nnamespace demo {\n\nusing v8::Local;\nusing v8::Object;\n\nvoid InitAll(Local&lt;Object&gt; exports) {\n  MyObject::Init(exports);\n}\n\nNODE_MODULE(addon, InitAll)\n\n}  // namespace demo\n</pre> <p>Then, in <code>myobject.h</code>, the wrapper class inherits from <code>node::ObjectWrap</code>:</p> <pre data-language=\"cpp\">// myobject.h\n#ifndef MYOBJECT_H\n#define MYOBJECT_H\n\n#include &lt;node.h&gt;\n#include &lt;node_object_wrap.h&gt;\n\nnamespace demo {\n\nclass MyObject : public node::ObjectWrap {\n public:\n  static void Init(v8::Local&lt;v8::Object&gt; exports);\n\n private:\n  explicit MyObject(double value = 0);\n  ~MyObject();\n\n  static void New(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);\n  static void PlusOne(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);\n  static v8::Persistent&lt;v8::Function&gt; constructor;\n  double value_;\n};\n\n}  // namespace demo\n\n#endif\n</pre> <p>In <code>myobject.cc</code>, implement the various methods that are to be exposed. Below, the method <code>plusOne()</code> is exposed by adding it to the constructor's prototype:</p> <pre data-language=\"cpp\">// myobject.cc\n#include \"myobject.h\"\n\nnamespace demo {\n\nusing v8::Context;\nusing v8::Function;\nusing v8::FunctionCallbackInfo;\nusing v8::FunctionTemplate;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Number;\nusing v8::Object;\nusing v8::Persistent;\nusing v8::String;\nusing v8::Value;\n\nPersistent&lt;Function&gt; MyObject::constructor;\n\nMyObject::MyObject(double value) : value_(value) {\n}\n\nMyObject::~MyObject() {\n}\n\nvoid MyObject::Init(Local&lt;Object&gt; exports) {\n  Isolate* isolate = exports-&gt;GetIsolate();\n\n  // Prepare constructor template\n  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(isolate, New);\n  tpl-&gt;SetClassName(String::NewFromUtf8(isolate, \"MyObject\"));\n  tpl-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(1);\n\n  // Prototype\n  NODE_SET_PROTOTYPE_METHOD(tpl, \"plusOne\", PlusOne);\n\n  constructor.Reset(isolate, tpl-&gt;GetFunction());\n  exports-&gt;Set(String::NewFromUtf8(isolate, \"MyObject\"),\n               tpl-&gt;GetFunction());\n}\n\nvoid MyObject::New(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  if (args.IsConstructCall()) {\n    // Invoked as constructor: `new MyObject(...)`\n    double value = args[0]-&gt;IsUndefined() ? 0 : args[0]-&gt;NumberValue();\n    MyObject* obj = new MyObject(value);\n    obj-&gt;Wrap(args.This());\n    args.GetReturnValue().Set(args.This());\n  } else {\n    // Invoked as plain function `MyObject(...)`, turn into construct call.\n    const int argc = 1;\n    Local&lt;Value&gt; argv[argc] = { args[0] };\n    Local&lt;Context&gt; context = isolate-&gt;GetCurrentContext();\n    Local&lt;Function&gt; cons = Local&lt;Function&gt;::New(isolate, constructor);\n    Local&lt;Object&gt; result =\n        cons-&gt;NewInstance(context, argc, argv).ToLocalChecked();\n    args.GetReturnValue().Set(result);\n  }\n}\n\nvoid MyObject::PlusOne(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  MyObject* obj = ObjectWrap::Unwrap&lt;MyObject&gt;(args.Holder());\n  obj-&gt;value_ += 1;\n\n  args.GetReturnValue().Set(Number::New(isolate, obj-&gt;value_));\n}\n\n}  // namespace demo\n</pre> <p>To build this example, the <code>myobject.cc</code> file must be added to the <code>binding.gyp</code>:</p> <pre data-language=\"json\">{\n  \"targets\": [\n    {\n      \"target_name\": \"addon\",\n      \"sources\": [\n        \"addon.cc\",\n        \"myobject.cc\"\n      ]\n    }\n  ]\n}\n</pre> <p>Test it with:</p> <pre data-language=\"js\">// test.js\nconst addon = require('./build/Release/addon');\n\nconst obj = new addon.MyObject(10);\nconsole.log(obj.plusOne());\n// Prints: 11\nconsole.log(obj.plusOne());\n// Prints: 12\nconsole.log(obj.plusOne());\n// Prints: 13\n</pre> <h3 id=\"addons_factory_of_wrapped_objects\">Factory of wrapped objects</h3> <p>Alternatively, it is possible to use a factory pattern to avoid explicitly creating object instances using the JavaScript <code>new</code> operator:</p> <pre data-language=\"js\">const obj = addon.createObject();\n// instead of:\n// const obj = new addon.Object();\n</pre> <p>First, the <code>createObject()</code> method is implemented in <code>addon.cc</code>:</p> <pre data-language=\"cpp\">// addon.cc\n#include &lt;node.h&gt;\n#include \"myobject.h\"\n\nnamespace demo {\n\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid CreateObject(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  MyObject::NewInstance(args);\n}\n\nvoid InitAll(Local&lt;Object&gt; exports, Local&lt;Object&gt; module) {\n  MyObject::Init(exports-&gt;GetIsolate());\n\n  NODE_SET_METHOD(module, \"exports\", CreateObject);\n}\n\nNODE_MODULE(addon, InitAll)\n\n}  // namespace demo\n</pre> <p>In <code>myobject.h</code>, the static method <code>NewInstance()</code> is added to handle instantiating the object. This method takes the place of using <code>new</code> in JavaScript:</p> <pre data-language=\"cpp\">// myobject.h\n#ifndef MYOBJECT_H\n#define MYOBJECT_H\n\n#include &lt;node.h&gt;\n#include &lt;node_object_wrap.h&gt;\n\nnamespace demo {\n\nclass MyObject : public node::ObjectWrap {\n public:\n  static void Init(v8::Isolate* isolate);\n  static void NewInstance(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);\n\n private:\n  explicit MyObject(double value = 0);\n  ~MyObject();\n\n  static void New(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);\n  static void PlusOne(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);\n  static v8::Persistent&lt;v8::Function&gt; constructor;\n  double value_;\n};\n\n}  // namespace demo\n\n#endif\n</pre> <p>The implementation in <code>myobject.cc</code> is similar to the previous example:</p> <pre data-language=\"cpp\">// myobject.cc\n#include &lt;node.h&gt;\n#include \"myobject.h\"\n\nnamespace demo {\n\nusing v8::Context;\nusing v8::Function;\nusing v8::FunctionCallbackInfo;\nusing v8::FunctionTemplate;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Number;\nusing v8::Object;\nusing v8::Persistent;\nusing v8::String;\nusing v8::Value;\n\nPersistent&lt;Function&gt; MyObject::constructor;\n\nMyObject::MyObject(double value) : value_(value) {\n}\n\nMyObject::~MyObject() {\n}\n\nvoid MyObject::Init(Isolate* isolate) {\n  // Prepare constructor template\n  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(isolate, New);\n  tpl-&gt;SetClassName(String::NewFromUtf8(isolate, \"MyObject\"));\n  tpl-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(1);\n\n  // Prototype\n  NODE_SET_PROTOTYPE_METHOD(tpl, \"plusOne\", PlusOne);\n\n  constructor.Reset(isolate, tpl-&gt;GetFunction());\n}\n\nvoid MyObject::New(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  if (args.IsConstructCall()) {\n    // Invoked as constructor: `new MyObject(...)`\n    double value = args[0]-&gt;IsUndefined() ? 0 : args[0]-&gt;NumberValue();\n    MyObject* obj = new MyObject(value);\n    obj-&gt;Wrap(args.This());\n    args.GetReturnValue().Set(args.This());\n  } else {\n    // Invoked as plain function `MyObject(...)`, turn into construct call.\n    const int argc = 1;\n    Local&lt;Value&gt; argv[argc] = { args[0] };\n    Local&lt;Function&gt; cons = Local&lt;Function&gt;::New(isolate, constructor);\n    Local&lt;Context&gt; context = isolate-&gt;GetCurrentContext();\n    Local&lt;Object&gt; instance =\n        cons-&gt;NewInstance(context, argc, argv).ToLocalChecked();\n    args.GetReturnValue().Set(instance);\n  }\n}\n\nvoid MyObject::NewInstance(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  const unsigned argc = 1;\n  Local&lt;Value&gt; argv[argc] = { args[0] };\n  Local&lt;Function&gt; cons = Local&lt;Function&gt;::New(isolate, constructor);\n  Local&lt;Context&gt; context = isolate-&gt;GetCurrentContext();\n  Local&lt;Object&gt; instance =\n      cons-&gt;NewInstance(context, argc, argv).ToLocalChecked();\n\n  args.GetReturnValue().Set(instance);\n}\n\nvoid MyObject::PlusOne(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  MyObject* obj = ObjectWrap::Unwrap&lt;MyObject&gt;(args.Holder());\n  obj-&gt;value_ += 1;\n\n  args.GetReturnValue().Set(Number::New(isolate, obj-&gt;value_));\n}\n\n}  // namespace demo\n</pre> <p>Once again, to build this example, the <code>myobject.cc</code> file must be added to the <code>binding.gyp</code>:</p> <pre data-language=\"json\">{\n  \"targets\": [\n    {\n      \"target_name\": \"addon\",\n      \"sources\": [\n        \"addon.cc\",\n        \"myobject.cc\"\n      ]\n    }\n  ]\n}\n</pre> <p>Test it with:</p> <pre data-language=\"js\">// test.js\nconst createObject = require('./build/Release/addon');\n\nconst obj = createObject(10);\nconsole.log(obj.plusOne());\n// Prints: 11\nconsole.log(obj.plusOne());\n// Prints: 12\nconsole.log(obj.plusOne());\n// Prints: 13\n\nconst obj2 = createObject(20);\nconsole.log(obj2.plusOne());\n// Prints: 21\nconsole.log(obj2.plusOne());\n// Prints: 22\nconsole.log(obj2.plusOne());\n// Prints: 23\n</pre> <h3 id=\"addons_passing_wrapped_objects_around\">Passing wrapped objects around</h3> <p>In addition to wrapping and returning C++ objects, it is possible to pass wrapped objects around by unwrapping them with the Node.js helper function <code>node::ObjectWrap::Unwrap</code>. The following examples shows a function <code>add()</code> that can take two <code>MyObject</code> objects as input arguments:</p> <pre data-language=\"cpp\">// addon.cc\n#include &lt;node.h&gt;\n#include &lt;node_object_wrap.h&gt;\n#include \"myobject.h\"\n\nnamespace demo {\n\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Number;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid CreateObject(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  MyObject::NewInstance(args);\n}\n\nvoid Add(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  MyObject* obj1 = node::ObjectWrap::Unwrap&lt;MyObject&gt;(\n      args[0]-&gt;ToObject());\n  MyObject* obj2 = node::ObjectWrap::Unwrap&lt;MyObject&gt;(\n      args[1]-&gt;ToObject());\n\n  double sum = obj1-&gt;value() + obj2-&gt;value();\n  args.GetReturnValue().Set(Number::New(isolate, sum));\n}\n\nvoid InitAll(Local&lt;Object&gt; exports) {\n  MyObject::Init(exports-&gt;GetIsolate());\n\n  NODE_SET_METHOD(exports, \"createObject\", CreateObject);\n  NODE_SET_METHOD(exports, \"add\", Add);\n}\n\nNODE_MODULE(addon, InitAll)\n\n}  // namespace demo\n</pre> <p>In <code>myobject.h</code>, a new public method is added to allow access to private values after unwrapping the object.</p> <pre data-language=\"cpp\">// myobject.h\n#ifndef MYOBJECT_H\n#define MYOBJECT_H\n\n#include &lt;node.h&gt;\n#include &lt;node_object_wrap.h&gt;\n\nnamespace demo {\n\nclass MyObject : public node::ObjectWrap {\n public:\n  static void Init(v8::Isolate* isolate);\n  static void NewInstance(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);\n  inline double value() const { return value_; }\n\n private:\n  explicit MyObject(double value = 0);\n  ~MyObject();\n\n  static void New(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);\n  static v8::Persistent&lt;v8::Function&gt; constructor;\n  double value_;\n};\n\n}  // namespace demo\n\n#endif\n</pre> <p>The implementation of <code>myobject.cc</code> is similar to before:</p> <pre data-language=\"cpp\">// myobject.cc\n#include &lt;node.h&gt;\n#include \"myobject.h\"\n\nnamespace demo {\n\nusing v8::Context;\nusing v8::Function;\nusing v8::FunctionCallbackInfo;\nusing v8::FunctionTemplate;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Object;\nusing v8::Persistent;\nusing v8::String;\nusing v8::Value;\n\nPersistent&lt;Function&gt; MyObject::constructor;\n\nMyObject::MyObject(double value) : value_(value) {\n}\n\nMyObject::~MyObject() {\n}\n\nvoid MyObject::Init(Isolate* isolate) {\n  // Prepare constructor template\n  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(isolate, New);\n  tpl-&gt;SetClassName(String::NewFromUtf8(isolate, \"MyObject\"));\n  tpl-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(1);\n\n  constructor.Reset(isolate, tpl-&gt;GetFunction());\n}\n\nvoid MyObject::New(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  if (args.IsConstructCall()) {\n    // Invoked as constructor: `new MyObject(...)`\n    double value = args[0]-&gt;IsUndefined() ? 0 : args[0]-&gt;NumberValue();\n    MyObject* obj = new MyObject(value);\n    obj-&gt;Wrap(args.This());\n    args.GetReturnValue().Set(args.This());\n  } else {\n    // Invoked as plain function `MyObject(...)`, turn into construct call.\n    const int argc = 1;\n    Local&lt;Value&gt; argv[argc] = { args[0] };\n    Local&lt;Context&gt; context = isolate-&gt;GetCurrentContext();\n    Local&lt;Function&gt; cons = Local&lt;Function&gt;::New(isolate, constructor);\n    Local&lt;Object&gt; instance =\n        cons-&gt;NewInstance(context, argc, argv).ToLocalChecked();\n    args.GetReturnValue().Set(instance);\n  }\n}\n\nvoid MyObject::NewInstance(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  const unsigned argc = 1;\n  Local&lt;Value&gt; argv[argc] = { args[0] };\n  Local&lt;Function&gt; cons = Local&lt;Function&gt;::New(isolate, constructor);\n  Local&lt;Context&gt; context = isolate-&gt;GetCurrentContext();\n  Local&lt;Object&gt; instance =\n      cons-&gt;NewInstance(context, argc, argv).ToLocalChecked();\n\n  args.GetReturnValue().Set(instance);\n}\n\n}  // namespace demo\n</pre> <p>Test it with:</p> <pre data-language=\"js\">// test.js\nconst addon = require('./build/Release/addon');\n\nconst obj1 = addon.createObject(10);\nconst obj2 = addon.createObject(20);\nconst result = addon.add(obj1, obj2);\n\nconsole.log(result);\n// Prints: 30\n</pre> <h3 id=\"addons_atexit_hooks\">AtExit hooks</h3> <p>An \"AtExit\" hook is a function that is invoked after the Node.js event loop has ended but before the JavaScript VM is terminated and Node.js shuts down. \"AtExit\" hooks are registered using the <code>node::AtExit</code> API.</p> <h4 id=\"addons_void_atexit_callback_args\">void AtExit(callback, args)</h4> <div class=\"signature\">\n<ul> <li>\n<code>callback</code>: <code>void (*)(void*)</code> - A pointer to the function to call at exit.</li> <li>\n<code>args</code>: <code>void*</code> - A pointer to pass to the callback at exit.</li> </ul> </div>\n<p>Registers exit hooks that run after the event loop has ended but before the VM is killed.</p> <p>AtExit takes two parameters: a pointer to a callback function to run at exit, and a pointer to untyped context data to be passed to that callback.</p> <p>Callbacks are run in last-in first-out order.</p> <p>The following <code>addon.cc</code> implements AtExit:</p> <pre data-language=\"cpp\">// addon.cc\n#undef NDEBUG\n#include &lt;assert.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;node.h&gt;\n\nnamespace demo {\n\nusing node::AtExit;\nusing v8::HandleScope;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Object;\n\nstatic char cookie[] = \"yum yum\";\nstatic int at_exit_cb1_called = 0;\nstatic int at_exit_cb2_called = 0;\n\nstatic void at_exit_cb1(void* arg) {\n  Isolate* isolate = static_cast&lt;Isolate*&gt;(arg);\n  HandleScope scope(isolate);\n  Local&lt;Object&gt; obj = Object::New(isolate);\n  assert(!obj.IsEmpty()); // assert VM is still alive\n  assert(obj-&gt;IsObject());\n  at_exit_cb1_called++;\n}\n\nstatic void at_exit_cb2(void* arg) {\n  assert(arg == static_cast&lt;void*&gt;(cookie));\n  at_exit_cb2_called++;\n}\n\nstatic void sanity_check(void*) {\n  assert(at_exit_cb1_called == 1);\n  assert(at_exit_cb2_called == 2);\n}\n\nvoid init(Local&lt;Object&gt; exports) {\n  AtExit(sanity_check);\n  AtExit(at_exit_cb2, cookie);\n  AtExit(at_exit_cb2, cookie);\n  AtExit(at_exit_cb1, exports-&gt;GetIsolate());\n}\n\nNODE_MODULE(addon, init);\n\n}  // namespace demo\n</pre> <p>Test in JavaScript by running:</p> <pre data-language=\"js\">// test.js\nconst addon = require('./build/Release/addon');\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/addons.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/addons.html</a>\n  </p>\n</div>\n","cluster":"<h1 id=\"cluster_cluster\">Cluster</h1> <div class=\"api_stability api_stability_2\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</div>\n<p>A single instance of Node.js runs in a single thread. To take advantage of multi-core systems the user will sometimes want to launch a cluster of Node.js processes to handle the load.</p> <p>The cluster module allows you to easily create child processes that all share server ports.</p> <pre data-language=\"js\">const cluster = require('cluster');\nconst http = require('http');\nconst numCPUs = require('os').cpus().length;\n\nif (cluster.isMaster) {\n  console.log(`Master ${process.pid} is running`);\n\n  // Fork workers.\n  for (let i = 0; i &lt; numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on('exit', (worker, code, signal) =&gt; {\n    console.log(`worker ${worker.process.pid} died`);\n  });\n} else {\n  // Workers can share any TCP connection\n  // In this case it is an HTTP server\n  http.createServer((req, res) =&gt; {\n    res.writeHead(200);\n    res.end('hello world\\n');\n  }).listen(8000);\n\n  console.log(`Worker ${process.pid} started`);\n}\n</pre> <p>Running Node.js will now share port 8000 between the workers:</p> <pre data-language=\"txt\">$ node server.js\nMaster 3596 is running\nWorker 4324 started\nWorker 4520 started\nWorker 6056 started\nWorker 5644 started\n</pre> <p>Please note that on Windows, it is not yet possible to set up a named pipe server in a worker.</p> <h2 id=\"cluster_how_it_works\">How It Works</h2>  <p>The worker processes are spawned using the <a href=\"child_process#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a> method, so that they can communicate with the parent via IPC and pass server handles back and forth.</p> <p>The cluster module supports two methods of distributing incoming connections.</p> <p>The first one (and the default one on all platforms except Windows), is the round-robin approach, where the master process listens on a port, accepts new connections and distributes them across the workers in a round-robin fashion, with some built-in smarts to avoid overloading a worker process.</p> <p>The second approach is where the master process creates the listen socket and sends it to interested workers. The workers then accept incoming connections directly.</p> <p>The second approach should, in theory, give the best performance. In practice however, distribution tends to be very unbalanced due to operating system scheduler vagaries. Loads have been observed where over 70% of all connections ended up in just two processes, out of a total of eight.</p> <p>Because <code>server.listen()</code> hands off most of the work to the master process, there are three cases where the behavior between a normal Node.js process and a cluster worker differs:</p> <ol> <li>\n<code>server.listen({fd: 7})</code> Because the message is passed to the master, file descriptor 7 <strong>in the parent</strong> will be listened on, and the handle passed to the worker, rather than listening to the worker's idea of what the number 7 file descriptor references.</li> <li>\n<code>server.listen(handle)</code> Listening on handles explicitly will cause the worker to use the supplied handle, rather than talk to the master process. If the worker already has the handle, then it's presumed that you know what you are doing.</li> <li>\n<code>server.listen(0)</code> Normally, this will cause servers to listen on a random port. However, in a cluster, each worker will receive the same \"random\" port each time they do <code>listen(0)</code>. In essence, the port is random the first time, but predictable thereafter. If you want to listen on a unique port, generate a port number based on the cluster worker ID.</li> </ol> <p>There is no routing logic in Node.js, or in your program, and no shared state between the workers. Therefore, it is important to design your program such that it does not rely too heavily on in-memory data objects for things like sessions and login.</p> <p>Because workers are all separate processes, they can be killed or re-spawned depending on your program's needs, without affecting other workers. As long as there are some workers still alive, the server will continue to accept connections. If no workers are alive, existing connections will be dropped and new connections will be refused. Node.js does not automatically manage the number of workers for you, however. It is your responsibility to manage the worker pool for your application's needs.</p> <h2 id=\"cluster_class_worker\">Class: Worker</h2> <div class=\"api_metadata\"> <span>Added in: v0.7.0</span> </div>\n<p>A Worker object contains all public information and method about a worker. In the master it can be obtained using <code>cluster.workers</code>. In a worker it can be obtained using <code>cluster.worker</code>.</p> <h3 id=\"cluster_event_disconnect\">Event: 'disconnect'</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.7</span> </div>\n<p>Similar to the <code>cluster.on('disconnect')</code> event, but specific to this worker.</p> <pre data-language=\"js\">cluster.fork().on('disconnect', () =&gt; {\n  // Worker has disconnected\n});\n</pre> <h3 id=\"cluster_event_error\">Event: 'error'</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.3</span> </div>\n<p>This event is the same as the one provided by <a href=\"child_process#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a>.</p> <p>In a worker you can also use <code>process.on('error')</code>.</p> <h3 id=\"cluster_event_exit\">Event: 'exit'</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.2</span> </div>\n<ul> <li>\n<code>code</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> the exit code, if it exited normally.</li> <li>\n<code>signal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> the name of the signal (e.g. <code>'SIGHUP'</code>) that caused the process to be killed.</li> </ul> <p>Similar to the <code>cluster.on('exit')</code> event, but specific to this worker.</p> <pre data-language=\"js\">const worker = cluster.fork();\nworker.on('exit', (code, signal) =&gt; {\n  if (signal) {\n    console.log(`worker was killed by signal: ${signal}`);\n  } else if (code !== 0) {\n    console.log(`worker exited with error code: ${code}`);\n  } else {\n    console.log('worker success!');\n  }\n});\n</pre> <h3 id=\"cluster_event_listening\">Event: 'listening'</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.0</span> </div>\n<ul> <li>\n<code>address</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> </ul> <p>Similar to the <code>cluster.on('listening')</code> event, but specific to this worker.</p> <pre data-language=\"js\">cluster.fork().on('listening', (address) =&gt; {\n  // Worker is listening\n});\n</pre> <p>It is not emitted in the worker.</p> <h3 id=\"cluster_event_message\">Event: 'message'</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.0</span> </div>\n<ul> <li>\n<code>message</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> <li>\n<code>handle</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type\" class=\"type\">&lt;undefined&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> </ul> <p>Similar to the <code>cluster.on('message')</code> event, but specific to this worker. In a worker you can also use <code>process.on('message')</code>.</p> <p>See <a href=\"process#process_event_message\"><code>process</code> event: <code>'message'</code></a>.</p> <p>As an example, here is a cluster that keeps count of the number of requests in the master process using the message system:</p> <pre data-language=\"js\">const cluster = require('cluster');\nconst http = require('http');\n\nif (cluster.isMaster) {\n\n  // Keep track of http requests\n  let numReqs = 0;\n  setInterval(() =&gt; {\n    console.log(`numReqs = ${numReqs}`);\n  }, 1000);\n\n  // Count requests\n  function messageHandler(msg) {\n    if (msg.cmd &amp;&amp; msg.cmd === 'notifyRequest') {\n      numReqs += 1;\n    }\n  }\n\n  // Start workers and listen for messages containing notifyRequest\n  const numCPUs = require('os').cpus().length;\n  for (let i = 0; i &lt; numCPUs; i++) {\n    cluster.fork();\n  }\n\n  for (const id in cluster.workers) {\n    cluster.workers[id].on('message', messageHandler);\n  }\n\n} else {\n\n  // Worker processes have a http server.\n  http.Server((req, res) =&gt; {\n    res.writeHead(200);\n    res.end('hello world\\n');\n\n    // notify master about the request\n    process.send({ cmd: 'notifyRequest' });\n  }).listen(8000);\n}\n</pre> <h3 id=\"cluster_event_online\">Event: 'online'</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.0</span> </div>\n<p>Similar to the <code>cluster.on('online')</code> event, but specific to this worker.</p> <pre data-language=\"js\">cluster.fork().on('online', () =&gt; {\n  // Worker is online\n});\n</pre> <p>It is not emitted in the worker.</p> <h3 id=\"cluster_worker_disconnect\">worker.disconnect()</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.3.0</td> <td>\n<p>This method now returns a reference to <code>worker</code>.</p> </td>\n</tr> <tr>\n<td>v0.7.7</td> <td>\n<p><span>Added in: v0.7.7</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>Returns: <span class=\"type\">&lt;Worker&gt;</span> A reference to <code>worker</code>.</li> </ul> <p>In a worker, this function will close all servers, wait for the <code>'close'</code> event on those servers, and then disconnect the IPC channel.</p> <p>In the master, an internal message is sent to the worker causing it to call <code>.disconnect()</code> on itself.</p> <p>Causes <code>.exitedAfterDisconnect</code> to be set.</p> <p>Note that after a server is closed, it will no longer accept new connections, but connections may be accepted by any other listening worker. Existing connections will be allowed to close as usual. When no more connections exist, see <a href=\"net#net_event_close\"><code>server.close()</code></a>, the IPC channel to the worker will close allowing it to die gracefully.</p> <p>The above applies <em>only</em> to server connections, client connections are not automatically closed by workers, and disconnect does not wait for them to close before exiting.</p> <p>Note that in a worker, <code>process.disconnect</code> exists, but it is not this function, it is <a href=\"child_process#child_process_child_disconnect\"><code>disconnect</code></a>.</p> <p>Because long living server connections may block workers from disconnecting, it may be useful to send a message, so application specific actions may be taken to close them. It also may be useful to implement a timeout, killing a worker if the <code>'disconnect'</code> event has not been emitted after some time.</p> <pre data-language=\"js\">if (cluster.isMaster) {\n  const worker = cluster.fork();\n  let timeout;\n\n  worker.on('listening', (address) =&gt; {\n    worker.send('shutdown');\n    worker.disconnect();\n    timeout = setTimeout(() =&gt; {\n      worker.kill();\n    }, 2000);\n  });\n\n  worker.on('disconnect', () =&gt; {\n    clearTimeout(timeout);\n  });\n\n} else if (cluster.isWorker) {\n  const net = require('net');\n  const server = net.createServer((socket) =&gt; {\n    // connections never end\n  });\n\n  server.listen(8000);\n\n  process.on('message', (msg) =&gt; {\n    if (msg === 'shutdown') {\n      // initiate graceful close of any connections to server\n    }\n  });\n}\n</pre> <h3 id=\"cluster_worker_exitedafterdisconnect\">worker.exitedAfterDisconnect</h3> <div class=\"api_metadata\"> <span>Added in: v6.0.0</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li> </ul> <p>Set by calling <code>.kill()</code> or <code>.disconnect()</code>. Until then, it is <code>undefined</code>.</p> <p>The boolean <code>worker.exitedAfterDisconnect</code> lets you distinguish between voluntary and accidental exit, the master may choose not to respawn a worker based on this value.</p> <pre data-language=\"js\">cluster.on('exit', (worker, code, signal) =&gt; {\n  if (worker.exitedAfterDisconnect === true) {\n    console.log('Oh, it was just voluntary – no need to worry');\n  }\n});\n\n// kill worker\nworker.kill();\n</pre> <h3 id=\"cluster_worker_id\">worker.id</h3> <div class=\"api_metadata\"> <span>Added in: v0.8.0</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li> </ul> <p>Each new worker is given its own unique id, this id is stored in the <code>id</code>.</p> <p>While a worker is alive, this is the key that indexes it in cluster.workers</p> <h3 id=\"cluster_worker_isconnected\">worker.isConnected()</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.14</span> </div>\n<p>This function returns <code>true</code> if the worker is connected to its master via its IPC channel, <code>false</code> otherwise. A worker is connected to its master after it's been created. It is disconnected after the <code>'disconnect'</code> event is emitted.</p> <h3 id=\"cluster_worker_isdead\">worker.isDead()</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.14</span> </div>\n<p>This function returns <code>true</code> if the worker's process has terminated (either because of exiting or being signaled). Otherwise, it returns <code>false</code>.</p> <h3 id=\"cluster_worker_kill_signal_sigterm\">worker.kill([signal='SIGTERM'])</h3> <div class=\"api_metadata\"> <span>Added in: v0.9.12</span> </div>\n<ul> <li>\n<code>signal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Name of the kill signal to send to the worker process.</li> </ul> <p>This function will kill the worker. In the master, it does this by disconnecting the <code>worker.process</code>, and once disconnected, killing with <code>signal</code>. In the worker, it does it by disconnecting the channel, and then exiting with code <code>0</code>.</p> <p>Causes <code>.exitedAfterDisconnect</code> to be set.</p> <p>This method is aliased as <code>worker.destroy()</code> for backwards compatibility.</p> <p>Note that in a worker, <code>process.kill()</code> exists, but it is not this function, it is <a href=\"process#process_process_kill_pid_signal\"><code>kill</code></a>.</p> <h3 id=\"cluster_worker_process\">worker.process</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.0</span> </div>\n<ul> <li><a href=\"child_process#child_process_class_childprocess\" class=\"type\">&lt;ChildProcess&gt;</a></li> </ul> <p>All workers are created using <a href=\"child_process#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a>, the returned object from this function is stored as <code>.process</code>. In a worker, the global <code>process</code> is stored.</p> <p>See: <a href=\"child_process#child_process_child_process_fork_modulepath_args_options\">Child Process module</a></p> <p>Note that workers will call <code>process.exit(0)</code> if the <code>'disconnect'</code> event occurs on <code>process</code> and <code>.exitedAfterDisconnect</code> is not <code>true</code>. This protects against accidental disconnection.</p> <h3 id=\"cluster_worker_send_message_sendhandle_callback\">worker.send(message[, sendHandle][, callback])</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v4.0.0</td> <td>\n<p>The <code>callback</code> parameter is supported now.</p> </td>\n</tr> <tr>\n<td>v0.7.0</td> <td>\n<p><span>Added in: v0.7.0</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>message</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> <li>\n<code>sendHandle</code> <a href=\"net#net_server_listen_handle_backlog_callback\" class=\"type\">&lt;Handle&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> <li>Returns: Boolean</li> </ul> <p>Send a message to a worker or master, optionally with a handle.</p> <p>In the master this sends a message to a specific worker. It is identical to <a href=\"child_process#child_process_child_send_message_sendhandle_options_callback\"><code>ChildProcess.send()</code></a>.</p> <p>In a worker this sends a message to the master. It is identical to <code>process.send()</code>.</p> <p>This example will echo back all messages from the master:</p> <pre data-language=\"js\">if (cluster.isMaster) {\n  const worker = cluster.fork();\n  worker.send('hi there');\n\n} else if (cluster.isWorker) {\n  process.on('message', (msg) =&gt; {\n    process.send(msg);\n  });\n}\n</pre> <h3 id=\"cluster_worker_suicide\">worker.suicide</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>Accessing this property will now emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p><span>Deprecated since: v6.0.0</span></p> </td>\n</tr> <tr>\n<td>v0.7.0</td> <td>\n<p><span>Added in: v0.7.0</span></p> </td>\n</tr> </table> </details> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated: Use <a href=\"#cluster_worker_exitedafterdisconnect\"><code>worker.exitedAfterDisconnect</code></a> instead.</div>\n<p>An alias to <a href=\"#cluster_worker_exitedafterdisconnect\"><code>worker.exitedAfterDisconnect</code></a>.</p> <p>Set by calling <code>.kill()</code> or <code>.disconnect()</code>. Until then, it is <code>undefined</code>.</p> <p>The boolean <code>worker.suicide</code> lets you distinguish between voluntary and accidental exit, the master may choose not to respawn a worker based on this value.</p> <pre data-language=\"js\">cluster.on('exit', (worker, code, signal) =&gt; {\n  if (worker.suicide === true) {\n    console.log('Oh, it was just voluntary – no need to worry');\n  }\n});\n\n// kill worker\nworker.kill();\n</pre> <p>This API only exists for backwards compatibility and will be removed in the future.</p> <h2 id=\"cluster_event_disconnect_1\">Event: 'disconnect'</h2> <div class=\"api_metadata\"> <span>Added in: v0.7.9</span> </div>\n<ul> <li>\n<code>worker</code> <a href=\"cluster#cluster_class_worker\" class=\"type\">&lt;cluster.Worker&gt;</a>\n</li> </ul> <p>Emitted after the worker IPC channel has disconnected. This can occur when a worker exits gracefully, is killed, or is disconnected manually (such as with worker.disconnect()).</p> <p>There may be a delay between the <code>'disconnect'</code> and <code>'exit'</code> events. These events can be used to detect if the process is stuck in a cleanup or if there are long-living connections.</p> <pre data-language=\"js\">cluster.on('disconnect', (worker) =&gt; {\n  console.log(`The worker #${worker.id} has disconnected`);\n});\n</pre> <h2 id=\"cluster_event_exit_1\">Event: 'exit'</h2> <div class=\"api_metadata\"> <span>Added in: v0.7.9</span> </div>\n<ul> <li>\n<code>worker</code> <a href=\"cluster#cluster_class_worker\" class=\"type\">&lt;cluster.Worker&gt;</a>\n</li> <li>\n<code>code</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> the exit code, if it exited normally.</li> <li>\n<code>signal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> the name of the signal (e.g. <code>'SIGHUP'</code>) that caused the process to be killed.</li> </ul> <p>When any of the workers die the cluster module will emit the <code>'exit'</code> event.</p> <p>This can be used to restart the worker by calling <code>.fork()</code> again.</p> <pre data-language=\"js\">cluster.on('exit', (worker, code, signal) =&gt; {\n  console.log('worker %d died (%s). restarting...',\n    worker.process.pid, signal || code);\n  cluster.fork();\n});\n</pre> <p>See <a href=\"child_process#child_process_event_exit\">child_process event: 'exit'</a>.</p> <h2 id=\"cluster_event_fork\">Event: 'fork'</h2> <div class=\"api_metadata\"> <span>Added in: v0.7.0</span> </div>\n<ul> <li>\n<code>worker</code> <a href=\"cluster#cluster_class_worker\" class=\"type\">&lt;cluster.Worker&gt;</a>\n</li> </ul> <p>When a new worker is forked the cluster module will emit a <code>'fork'</code> event. This can be used to log worker activity, and create your own timeout.</p> <pre data-language=\"js\">const timeouts = [];\nfunction errorMsg() {\n  console.error('Something must be wrong with the connection ...');\n}\n\ncluster.on('fork', (worker) =&gt; {\n  timeouts[worker.id] = setTimeout(errorMsg, 2000);\n});\ncluster.on('listening', (worker, address) =&gt; {\n  clearTimeout(timeouts[worker.id]);\n});\ncluster.on('exit', (worker, code, signal) =&gt; {\n  clearTimeout(timeouts[worker.id]);\n  errorMsg();\n});\n</pre> <h2 id=\"cluster_event_listening_1\">Event: 'listening'</h2> <div class=\"api_metadata\"> <span>Added in: v0.7.0</span> </div>\n<ul> <li>\n<code>worker</code> <a href=\"cluster#cluster_class_worker\" class=\"type\">&lt;cluster.Worker&gt;</a>\n</li> <li>\n<code>address</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> </ul> <p>After calling <code>listen()</code> from a worker, when the <code>'listening'</code> event is emitted on the server, a <code>'listening'</code> event will also be emitted on <code>cluster</code> in the master.</p> <p>The event handler is executed with two arguments, the <code>worker</code> contains the worker object and the <code>address</code> object contains the following connection properties: <code>address</code>, <code>port</code> and <code>addressType</code>. This is very useful if the worker is listening on more than one address.</p> <pre data-language=\"js\">cluster.on('listening', (worker, address) =&gt; {\n  console.log(\n    `A worker is now connected to ${address.address}:${address.port}`);\n});\n</pre> <p>The <code>addressType</code> is one of:</p> <ul> <li>\n<code>4</code> (TCPv4)</li> <li>\n<code>6</code> (TCPv6)</li> <li>\n<code>-1</code> (unix domain socket)</li> <li>\n<code>\"udp4\"</code> or <code>\"udp6\"</code> (UDP v4 or v6)</li> </ul> <h2 id=\"cluster_event_message_1\">Event: 'message'</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>The <code>worker</code> parameter is passed now; see below for details.</p> </td>\n</tr> <tr>\n<td>v2.5.0</td> <td>\n<p><span>Added in: v2.5.0</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>worker</code> <a href=\"cluster#cluster_class_worker\" class=\"type\">&lt;cluster.Worker&gt;</a>\n</li> <li>\n<code>message</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> <li>\n<code>handle</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type\" class=\"type\">&lt;undefined&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> </ul> <p>Emitted when the cluster master receives a message from any worker.</p> <p>See <a href=\"child_process#child_process_event_message\">child_process event: 'message'</a>.</p> <p>Before Node.js v6.0, this event emitted only the message and the handle, but not the worker object, contrary to what the documentation stated.</p> <p>If you need to support older versions and don't need the worker object, you can work around the discrepancy by checking the number of arguments:</p> <pre data-language=\"js\">cluster.on('message', (worker, message, handle) =&gt; {\n  if (arguments.length === 2) {\n    handle = message;\n    message = worker;\n    worker = undefined;\n  }\n  // ...\n});\n</pre> <h2 id=\"cluster_event_online_1\">Event: 'online'</h2> <div class=\"api_metadata\"> <span>Added in: v0.7.0</span> </div>\n<ul> <li>\n<code>worker</code> <a href=\"cluster#cluster_class_worker\" class=\"type\">&lt;cluster.Worker&gt;</a>\n</li> </ul> <p>After forking a new worker, the worker should respond with an online message. When the master receives an online message it will emit this event. The difference between <code>'fork'</code> and <code>'online'</code> is that fork is emitted when the master forks a worker, and 'online' is emitted when the worker is running.</p> <pre data-language=\"js\">cluster.on('online', (worker) =&gt; {\n  console.log('Yay, the worker responded after it was forked');\n});\n</pre> <h2 id=\"cluster_event_setup\">Event: 'setup'</h2> <div class=\"api_metadata\"> <span>Added in: v0.7.1</span> </div>\n<ul> <li>\n<code>settings</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> </ul> <p>Emitted every time <code>.setupMaster()</code> is called.</p> <p>The <code>settings</code> object is the <code>cluster.settings</code> object at the time <code>.setupMaster()</code> was called and is advisory only, since multiple calls to <code>.setupMaster()</code> can be made in a single tick.</p> <p>If accuracy is important, use <code>cluster.settings</code>.</p> <h2 id=\"cluster_cluster_disconnect_callback\">cluster.disconnect([callback])</h2> <div class=\"api_metadata\"> <span>Added in: v0.7.7</span> </div>\n<ul> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> called when all workers are disconnected and handles are closed</li> </ul> <p>Calls <code>.disconnect()</code> on each worker in <code>cluster.workers</code>.</p> <p>When they are disconnected all internal handles will be closed, allowing the master process to die gracefully if no other event is waiting.</p> <p>The method takes an optional callback argument which will be called when finished.</p> <p>This can only be called from the master process.</p> <h2 id=\"cluster_cluster_fork_env\">cluster.fork([env])</h2> <div class=\"api_metadata\"> <span>Added in: v0.6.0</span> </div>\n<ul> <li>\n<code>env</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Key/value pairs to add to worker process environment.</li> <li>return <a href=\"cluster#cluster_class_worker\" class=\"type\">&lt;cluster.Worker&gt;</a>\n</li> </ul> <p>Spawn a new worker process.</p> <p>This can only be called from the master process.</p> <h2 id=\"cluster_cluster_ismaster\">cluster.isMaster</h2> <div class=\"api_metadata\"> <span>Added in: v0.8.1</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li> </ul> <p>True if the process is a master. This is determined by the <code>process.env.NODE_UNIQUE_ID</code>. If <code>process.env.NODE_UNIQUE_ID</code> is undefined, then <code>isMaster</code> is <code>true</code>.</p> <h2 id=\"cluster_cluster_isworker\">cluster.isWorker</h2> <div class=\"api_metadata\"> <span>Added in: v0.6.0</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li> </ul> <p>True if the process is not a master (it is the negation of <code>cluster.isMaster</code>).</p> <h2 id=\"cluster_cluster_schedulingpolicy\">cluster.schedulingPolicy</h2> <div class=\"api_metadata\"> <span>Added in: v0.11.2</span> </div>\n<p>The scheduling policy, either <code>cluster.SCHED_RR</code> for round-robin or <code>cluster.SCHED_NONE</code> to leave it to the operating system. This is a global setting and effectively frozen once you spawn the first worker or call <code>cluster.setupMaster()</code>, whatever comes first.</p> <p><code>SCHED_RR</code> is the default on all operating systems except Windows. Windows will change to <code>SCHED_RR</code> once libuv is able to effectively distribute IOCP handles without incurring a large performance hit.</p> <p><code>cluster.schedulingPolicy</code> can also be set through the <code>NODE_CLUSTER_SCHED_POLICY</code> environment variable. Valid values are <code>\"rr\"</code> and <code>\"none\"</code>.</p> <h2 id=\"cluster_cluster_settings\">cluster.settings</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.4.0</td> <td>\n<p>The <code>stdio</code> option is supported now.</p> </td>\n</tr> <tr>\n<td>v0.7.1</td> <td>\n<p><span>Added in: v0.7.1</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>execArgv</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> list of string arguments passed to the Node.js executable. (Default=<code>process.execArgv</code>)</li> <li>\n<code>exec</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> file path to worker file. (Default=<code>process.argv[1]</code>)</li> <li>\n<code>args</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> string arguments passed to worker. (Default=<code>process.argv.slice(2)</code>)</li> <li>\n<code>silent</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> whether or not to send output to parent's stdio. (Default=<code>false</code>)</li> <li>\n<code>stdio</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> Configures the stdio of forked processes. Because the cluster module relies on IPC to function, this configuration must contain an <code>'ipc'</code> entry. When this option is provided, it overrides <code>silent</code>.</li> <li>\n<code>uid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the user identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setuid.2.html\">setuid(2)</a>.)</li> <li>\n<code>gid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the group identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setgid.2.html\">setgid(2)</a>.)</li> </ul> </li> </ul> <p>After calling <code>.setupMaster()</code> (or <code>.fork()</code>) this settings object will contain the settings, including the default values.</p> <p>This object is not supposed to be changed or set manually, by you.</p> <h2 id=\"cluster_cluster_setupmaster_settings\">cluster.setupMaster([settings])</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.4.0</td> <td>\n<p>The <code>stdio</code> option is supported now.</p> </td>\n</tr> <tr>\n<td>v0.7.1</td> <td>\n<p><span>Added in: v0.7.1</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>settings</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>exec</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> file path to worker file. (Default=<code>process.argv[1]</code>)</li> <li>\n<code>args</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> string arguments passed to worker. (Default=<code>process.argv.slice(2)</code>)</li> <li>\n<code>silent</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> whether or not to send output to parent's stdio. (Default=<code>false</code>)</li> <li>\n<code>stdio</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> Configures the stdio of forked processes. When this option is provided, it overrides <code>silent</code>.</li> </ul> </li> </ul> <p><code>setupMaster</code> is used to change the default 'fork' behavior. Once called, the settings will be present in <code>cluster.settings</code>.</p> <p>Note that:</p> <ul> <li>any settings changes only affect future calls to <code>.fork()</code> and have no effect on workers that are already running</li> <li>The <em>only</em> attribute of a worker that cannot be set via <code>.setupMaster()</code> is the <code>env</code> passed to <code>.fork()</code>\n</li> <li>the defaults above apply to the first call only, the defaults for later calls is the current value at the time of <code>cluster.setupMaster()</code> is called</li> </ul> <p>Example:</p> <pre data-language=\"js\">const cluster = require('cluster');\ncluster.setupMaster({\n  exec: 'worker.js',\n  args: ['--use', 'https'],\n  silent: true\n});\ncluster.fork(); // https worker\ncluster.setupMaster({\n  exec: 'worker.js',\n  args: ['--use', 'http']\n});\ncluster.fork(); // http worker\n</pre> <p>This can only be called from the master process.</p> <h2 id=\"cluster_cluster_worker\">cluster.worker</h2> <div class=\"api_metadata\"> <span>Added in: v0.7.0</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li> </ul> <p>A reference to the current worker object. Not available in the master process.</p> <pre data-language=\"js\">const cluster = require('cluster');\n\nif (cluster.isMaster) {\n  console.log('I am master');\n  cluster.fork();\n  cluster.fork();\n} else if (cluster.isWorker) {\n  console.log(`I am worker #${cluster.worker.id}`);\n}\n</pre> <h2 id=\"cluster_cluster_workers\">cluster.workers</h2> <div class=\"api_metadata\"> <span>Added in: v0.7.0</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li> </ul> <p>A hash that stores the active worker objects, keyed by <code>id</code> field. Makes it easy to loop through all the workers. It is only available in the master process.</p> <p>A worker is removed from cluster.workers after the worker has disconnected <em>and</em> exited. The order between these two events cannot be determined in advance. However, it is guaranteed that the removal from the cluster.workers list happens before last <code>'disconnect'</code> or <code>'exit'</code> event is emitted.</p> <pre data-language=\"js\">// Go through all workers\nfunction eachWorker(callback) {\n  for (const id in cluster.workers) {\n    callback(cluster.workers[id]);\n  }\n}\neachWorker((worker) =&gt; {\n  worker.send('big announcement to all workers');\n});\n</pre> <p>Should you wish to reference a worker over a communication channel, using the worker's unique id is the easiest way to find the worker.</p> <pre data-language=\"js\">socket.on('data', (id) =&gt; {\n  const worker = cluster.workers[id];\n});\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/cluster.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/cluster.html</a>\n  </p>\n</div>\n","string_decoder":"<h1 id=\"string_decoder_string_decoder\">String Decoder</h1> <div class=\"api_stability api_stability_2\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</div>\n<p>The <code>string_decoder</code> module provides an API for decoding <code>Buffer</code> objects into strings in a manner that preserves encoded multi-byte UTF-8 and UTF-16 characters. It can be accessed using:</p> <pre data-language=\"js\">const StringDecoder = require('string_decoder').StringDecoder;\n</pre> <p>The following example shows the basic use of the <code>StringDecoder</code> class.</p> <pre data-language=\"js\">const StringDecoder = require('string_decoder').StringDecoder;\nconst decoder = new StringDecoder('utf8');\n\nconst cent = Buffer.from([0xC2, 0xA2]);\nconsole.log(decoder.write(cent));\n\nconst euro = Buffer.from([0xE2, 0x82, 0xAC]);\nconsole.log(decoder.write(euro));\n</pre> <p>When a <code>Buffer</code> instance is written to the <code>StringDecoder</code> instance, an internal buffer is used to ensure that the decoded string does not contain any incomplete multibyte characters. These are held in the buffer until the next call to <code>stringDecoder.write()</code> or until <code>stringDecoder.end()</code> is called.</p> <p>In the following example, the three UTF-8 encoded bytes of the European Euro symbol (<code>€</code>) are written over three separate operations:</p> <pre data-language=\"js\">const StringDecoder = require('string_decoder').StringDecoder;\nconst decoder = new StringDecoder('utf8');\n\ndecoder.write(Buffer.from([0xE2]));\ndecoder.write(Buffer.from([0x82]));\nconsole.log(decoder.end(Buffer.from([0xAC])));\n</pre> <h2 id=\"string_decoder_class_new_stringdecoder_encoding\">Class: new StringDecoder([encoding])</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.99</span> </div>\n<ul> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The character encoding the <code>StringDecoder</code> will use. Defaults to <code>'utf8'</code>.</li> </ul> <p>Creates a new <code>StringDecoder</code> instance.</p> <h3 id=\"string_decoder_stringdecoder_end_buffer\">stringDecoder.end([buffer])</h3> <div class=\"api_metadata\"> <span>Added in: v0.9.3</span> </div>\n<ul> <li>\n<code>buffer</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> A <code>Buffer</code> containing the bytes to decode.</li> </ul> <p>Returns any remaining input stored in the internal buffer as a string. Bytes representing incomplete UTF-8 and UTF-16 characters will be replaced with substitution characters appropriate for the character encoding.</p> <p>If the <code>buffer</code> argument is provided, one final call to <code>stringDecoder.write()</code> is performed before returning the remaining input.</p> <h3 id=\"string_decoder_stringdecoder_write_buffer\">stringDecoder.write(buffer)</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.99</span> </div>\n<ul> <li>\n<code>buffer</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> A <code>Buffer</code> containing the bytes to decode.</li> </ul> <p>Returns a decoded string, ensuring that any incomplete multibyte characters at the end of the <code>Buffer</code> are omitted from the returned string and stored in an internal buffer for the next call to <code>stringDecoder.write()</code> or <code>stringDecoder.end()</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/string_decoder.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/string_decoder.html</a>\n  </p>\n</div>\n","os":"<h1 id=\"os_os\">OS</h1> <div class=\"api_stability api_stability_2\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</div>\n<p>The <code>os</code> module provides a number of operating system-related utility methods. It can be accessed using:</p> <pre data-language=\"js\">const os = require('os');\n</pre> <h2 id=\"os_os_eol\">os.EOL</h2> <div class=\"api_metadata\"> <span>Added in: v0.7.8</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> <p>A string constant defining the operating system-specific end-of-line marker:</p> <ul> <li>\n<code>\\n</code> on POSIX</li> <li>\n<code>\\r\\n</code> on Windows</li> </ul> <h2 id=\"os_os_arch\">os.arch()</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.0</span> </div>\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>The <code>os.arch()</code> method returns a string identifying the operating system CPU architecture <em>for which the Node.js binary was compiled</em>.</p> <p>The current possible values are: <code>'arm'</code>, <code>'arm64'</code>, <code>'ia32'</code>, <code>'mips'</code>, <code>'mipsel'</code>, <code>'ppc'</code>, <code>'ppc64'</code>, <code>'s390'</code>, <code>'s390x'</code>, <code>'x32'</code>, <code>'x64'</code>, and <code>'x86'</code>.</p> <p>Equivalent to <a href=\"process#process_process_arch\"><code>process.arch</code></a>.</p> <h2 id=\"os_os_constants\">os.constants</h2> <div class=\"api_metadata\"> <span>Added in: v6.3.0</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li> </ul> <p>Returns an object containing commonly used operating system specific constants for error codes, process signals, and so on. The specific constants currently defined are described in <a href=\"#os_os_constants\">OS Constants</a>.</p> <h2 id=\"os_os_cpus\">os.cpus()</h2> <div class=\"api_metadata\"> <span>Added in: v0.3.3</span> </div>\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a>\n</li> </ul> <p>The <code>os.cpus()</code> method returns an array of objects containing information about each CPU/core installed.</p> <p>The properties included on each object include:</p> <ul> <li>\n<code>model</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>speed</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> (in MHz)</li> <li>\n<code>times</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>user</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The number of milliseconds the CPU has spent in user mode.</li> <li>\n<code>nice</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The number of milliseconds the CPU has spent in nice mode.</li> <li>\n<code>sys</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The number of milliseconds the CPU has spent in sys mode.</li> <li>\n<code>idle</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The number of milliseconds the CPU has spent in idle mode.</li> <li>\n<code>irq</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The number of milliseconds the CPU has spent in irq mode.</li> </ul> </li> </ul> <p>For example:</p> <pre data-language=\"js\">[\n  {\n    model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',\n    speed: 2926,\n    times: {\n      user: 252020,\n      nice: 0,\n      sys: 30340,\n      idle: 1070356870,\n      irq: 0\n    }\n  },\n  {\n    model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',\n    speed: 2926,\n    times: {\n      user: 306960,\n      nice: 0,\n      sys: 26980,\n      idle: 1071569080,\n      irq: 0\n    }\n  },\n  {\n    model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',\n    speed: 2926,\n    times: {\n      user: 248450,\n      nice: 0,\n      sys: 21750,\n      idle: 1070919370,\n      irq: 0\n    }\n  },\n  {\n    model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',\n    speed: 2926,\n    times: {\n      user: 256880,\n      nice: 0,\n      sys: 19430,\n      idle: 1070905480,\n      irq: 20\n    }\n  },\n  {\n    model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',\n    speed: 2926,\n    times: {\n      user: 511580,\n      nice: 20,\n      sys: 40900,\n      idle: 1070842510,\n      irq: 0\n    }\n  },\n  {\n    model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',\n    speed: 2926,\n    times: {\n      user: 291660,\n      nice: 0,\n      sys: 34360,\n      idle: 1070888000,\n      irq: 10\n    }\n  },\n  {\n    model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',\n    speed: 2926,\n    times: {\n      user: 308260,\n      nice: 0,\n      sys: 55410,\n      idle: 1071129970,\n      irq: 880\n    }\n  },\n  {\n    model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',\n    speed: 2926,\n    times: {\n      user: 266450,\n      nice: 1480,\n      sys: 34920,\n      idle: 1072572010,\n      irq: 30\n    }\n  }\n]\n</pre> <p><em>Note</em>: Because <code>nice</code> values are UNIX-specific, on Windows the <code>nice</code> values of all processors are always 0.</p> <h2 id=\"os_os_endianness\">os.endianness()</h2> <div class=\"api_metadata\"> <span>Added in: v0.9.4</span> </div>\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>The <code>os.endianness()</code> method returns a string identifying the endianness of the CPU <em>for which the Node.js binary was compiled</em>.</p> <p>Possible values are:</p> <ul> <li>\n<code>'BE'</code> for big endian</li> <li>\n<code>'LE'</code> for little endian.</li> </ul> <h2 id=\"os_os_freemem\">os.freemem()</h2> <div class=\"api_metadata\"> <span>Added in: v0.3.3</span> </div>\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>The <code>os.freemem()</code> method returns the amount of free system memory in bytes as an integer.</p> <h2 id=\"os_os_homedir\">os.homedir()</h2> <div class=\"api_metadata\"> <span>Added in: v2.3.0</span> </div>\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>The <code>os.homedir()</code> method returns the home directory of the current user as a string.</p> <h2 id=\"os_os_hostname\">os.hostname()</h2> <div class=\"api_metadata\"> <span>Added in: v0.3.3</span> </div>\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>The <code>os.hostname()</code> method returns the hostname of the operating system as a string.</p> <h2 id=\"os_os_loadavg\">os.loadavg()</h2> <div class=\"api_metadata\"> <span>Added in: v0.3.3</span> </div>\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a>\n</li> </ul> <p>The <code>os.loadavg()</code> method returns an array containing the 1, 5, and 15 minute load averages.</p> <p>The load average is a measure of system activity, calculated by the operating system and expressed as a fractional number. As a rule of thumb, the load average should ideally be less than the number of logical CPUs in the system.</p> <p>The load average is a UNIX-specific concept with no real equivalent on Windows platforms. On Windows, the return value is always <code>[0, 0, 0]</code>.</p> <h2 id=\"os_os_networkinterfaces\">os.networkInterfaces()</h2> <div class=\"api_metadata\"> <span>Added in: v0.6.0</span> </div>\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> </ul> <p>The <code>os.networkInterfaces()</code> method returns an object containing only network interfaces that have been assigned a network address.</p> <p>Each key on the returned object identifies a network interface. The associated value is an array of objects that each describe an assigned network address.</p> <p>The properties available on the assigned network address object include:</p> <ul> <li>\n<code>address</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The assigned IPv4 or IPv6 address</li> <li>\n<code>netmask</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The IPv4 or IPv6 network mask</li> <li>\n<code>family</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Either <code>IPv4</code> or <code>IPv6</code>\n</li> <li>\n<code>mac</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The MAC address of the network interface</li> <li>\n<code>internal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <code>true</code> if the network interface is a loopback or similar interface that is not remotely accessible; otherwise <code>false</code>\n</li> <li>\n<code>scopeid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The numeric IPv6 scope ID (only specified when <code>family</code> is <code>IPv6</code>)</li> </ul> <pre data-language=\"js\">{\n  lo: [\n    {\n      address: '127.0.0.1',\n      netmask: '255.0.0.0',\n      family: 'IPv4',\n      mac: '00:00:00:00:00:00',\n      internal: true\n    },\n    {\n      address: '::1',\n      netmask: 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff',\n      family: 'IPv6',\n      mac: '00:00:00:00:00:00',\n      internal: true\n    }\n  ],\n  eth0: [\n    {\n      address: '192.168.1.108',\n      netmask: '255.255.255.0',\n      family: 'IPv4',\n      mac: '01:02:03:0a:0b:0c',\n      internal: false\n    },\n    {\n      address: 'fe80::a00:27ff:fe4e:66a1',\n      netmask: 'ffff:ffff:ffff:ffff::',\n      family: 'IPv6',\n      mac: '01:02:03:0a:0b:0c',\n      internal: false\n    }\n  ]\n}\n</pre> <h2 id=\"os_os_platform\">os.platform()</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.0</span> </div>\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>The <code>os.platform()</code> method returns a string identifying the operating system platform as set during compile time of Node.js.</p> <p>Currently possible values are:</p> <ul> <li><code>'aix'</code></li> <li><code>'darwin'</code></li> <li><code>'freebsd'</code></li> <li><code>'linux'</code></li> <li><code>'openbsd'</code></li> <li><code>'sunos'</code></li> <li><code>'win32'</code></li> </ul> <p>Equivalent to <a href=\"process#process_process_platform\"><code>process.platform</code></a>.</p> <p><em>Note</em>: The value <code>'android'</code> may also be returned if the Node.js is built on the Android operating system. However, Android support in Node.js is considered to be experimental at this time.</p> <h2 id=\"os_os_release\">os.release()</h2> <div class=\"api_metadata\"> <span>Added in: v0.3.3</span> </div>\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>The <code>os.release()</code> method returns a string identifying the operating system release.</p> <p><em>Note</em>: On POSIX systems, the operating system release is determined by calling uname(3). On Windows, <code>GetVersionExW()</code> is used. Please see <a href=\"https://en.wikipedia.org/wiki/Uname#Examples\">https://en.wikipedia.org/wiki/Uname#Examples</a> for more information.</p> <h2 id=\"os_os_tmpdir\">os.tmpdir()</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v2.0.0</td> <td>\n<p>This function is now cross-platform consistent and no longer returns a path with a trailing slash on any platform</p> </td>\n</tr> <tr>\n<td>v0.9.9</td> <td>\n<p><span>Added in: v0.9.9</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>The <code>os.tmpdir()</code> method returns a string specifying the operating system's default directory for temporary files.</p> <h2 id=\"os_os_totalmem\">os.totalmem()</h2> <div class=\"api_metadata\"> <span>Added in: v0.3.3</span> </div>\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>The <code>os.totalmem()</code> method returns the total amount of system memory in bytes as an integer.</p> <h2 id=\"os_os_type\">os.type()</h2> <div class=\"api_metadata\"> <span>Added in: v0.3.3</span> </div>\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>The <code>os.type()</code> method returns a string identifying the operating system name as returned by <a href=\"http://man7.org/linux/man-pages/man3/uname.3.html\">uname(3)</a>. For example <code>'Linux'</code> on Linux, <code>'Darwin'</code> on OS X and <code>'Windows_NT'</code> on Windows.</p> <p>Please see <a href=\"https://en.wikipedia.org/wiki/Uname#Examples\">https://en.wikipedia.org/wiki/Uname#Examples</a> for additional information about the output of running <a href=\"http://man7.org/linux/man-pages/man3/uname.3.html\">uname(3)</a> on various operating systems.</p> <h2 id=\"os_os_uptime\">os.uptime()</h2> <div class=\"api_metadata\"> <span>Added in: v0.3.3</span> </div>\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>The <code>os.uptime()</code> method returns the system uptime in number of seconds.</p> <p><em>Note</em>: On Windows the returned value includes fractions of a second. Use <code>Math.floor()</code> to get whole seconds.</p> <h2 id=\"os_os_userinfo_options\">os.userInfo([options])</h2> <div class=\"api_metadata\"> <span>Added in: v6.0.0</span> </div>\n<ul> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Character encoding used to interpret resulting strings. If <code>encoding</code> is set to <code>'buffer'</code>, the <code>username</code>, <code>shell</code>, and <code>homedir</code> values will be <code>Buffer</code> instances. (Default: 'utf8')</li> </ul> </li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> </ul> <p>The <code>os.userInfo()</code> method returns information about the currently effective user -- on POSIX platforms, this is typically a subset of the password file. The returned object includes the <code>username</code>, <code>uid</code>, <code>gid</code>, <code>shell</code>, and <code>homedir</code>. On Windows, the <code>uid</code> and <code>gid</code> fields are <code>-1</code>, and <code>shell</code> is <code>null</code>.</p> <p>The value of <code>homedir</code> returned by <code>os.userInfo()</code> is provided by the operating system. This differs from the result of <code>os.homedir()</code>, which queries several environment variables for the home directory before falling back to the operating system response.</p> <h2 id=\"os_os_constants_1\">OS Constants</h2> <p>The following constants are exported by <code>os.constants</code>. <strong>Note:</strong> Not all constants will be available on every operating system.</p> <h3 id=\"os_signal_constants\">Signal Constants</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v5.11.0</td> <td>\n<p>Added support for <code>SIGINFO</code>.</p> </td>\n</tr> </table> </details> </div>\n<p>The following signal constants are exported by <code>os.constants.signals</code>:</p> <table> <tr> <th>Constant</th> <th>Description</th> </tr> <tr> <td><code>SIGHUP</code></td> <td>Sent to indicate when a controlling terminal is closed or a parent process exits.</td> </tr> <tr> <td><code>SIGINT</code></td> <td>Sent to indicate when a user wishes to interrupt a process (<code>(Ctrl+C)</code>).</td> </tr> <tr> <td><code>SIGQUIT</code></td> <td>Sent to indicate when a user wishes to terminate a process and perform a core dump.</td> </tr> <tr> <td><code>SIGILL</code></td> <td>Sent to a process to notify that it has attempted to perform an illegal, malformed, unknown or privileged instruction.</td> </tr> <tr> <td><code>SIGTRAP</code></td> <td>Sent to a process when an exception has occurred.</td> </tr> <tr> <td><code>SIGABRT</code></td> <td>Sent to a process to request that it abort.</td> </tr> <tr> <td><code>SIGIOT</code></td> <td>Synonym for <code>SIGABRT</code>\n</td> </tr> <tr> <td><code>SIGBUS</code></td> <td>Sent to a process to notify that it has caused a bus error.</td> </tr> <tr> <td><code>SIGFPE</code></td> <td>Sent to a process to notify that it has performed an illegal arithmetic operation.</td> </tr> <tr> <td><code>SIGKILL</code></td> <td>Sent to a process to terminate it immediately.</td> </tr> <tr> <td>\n<code>SIGUSR1</code> <code>SIGUSR2</code>\n</td> <td>Sent to a process to identify user-defined conditions.</td> </tr> <tr> <td><code>SIGSEGV</code></td> <td>Sent to a process to notify of a segmentation fault.</td> </tr> <tr> <td><code>SIGPIPE</code></td> <td>Sent to a process when it has attempted to write to a disconnected pipe.</td> </tr> <tr> <td><code>SIGALRM</code></td> <td>Sent to a process when a system timer elapses.</td> </tr> <tr> <td><code>SIGTERM</code></td> <td>Sent to a process to request termination.</td> </tr> <tr> <td><code>SIGCHLD</code></td> <td>Sent to a process when a child process terminates.</td> </tr> <tr> <td><code>SIGSTKFLT</code></td> <td>Sent to a process to indicate a stack fault on a coprocessor.</td> </tr> <tr> <td><code>SIGCONT</code></td> <td>Sent to instruct the operating system to continue a paused process.</td> </tr> <tr> <td><code>SIGSTOP</code></td> <td>Sent to instruct the operating system to halt a process.</td> </tr> <tr> <td><code>SIGTSTP</code></td> <td>Sent to a process to request it to stop.</td> </tr> <tr> <td><code>SIGBREAK</code></td> <td>Sent to indicate when a user wishes to interrupt a process.</td> </tr> <tr> <td><code>SIGTTIN</code></td> <td>Sent to a process when it reads from the TTY while in the background.</td> </tr> <tr> <td><code>SIGTTOU</code></td> <td>Sent to a process when it writes to the TTY while in the background.</td> </tr> <tr> <td><code>SIGURG</code></td> <td>Sent to a process when a socket has urgent data to read.</td> </tr> <tr> <td><code>SIGXCPU</code></td> <td>Sent to a process when it has exceeded its limit on CPU usage.</td> </tr> <tr> <td><code>SIGXFSZ</code></td> <td>Sent to a process when it grows a file larger than the maximum allowed.</td> </tr> <tr> <td><code>SIGVTALRM</code></td> <td>Sent to a process when a virtual timer has elapsed.</td> </tr> <tr> <td><code>SIGPROF</code></td> <td>Sent to a process when a system timer has elapsed.</td> </tr> <tr> <td><code>SIGWINCH</code></td> <td>Sent to a process when the controlling terminal has changed its size.</td> </tr> <tr> <td><code>SIGIO</code></td> <td>Sent to a process when I/O is available.</td> </tr> <tr> <td><code>SIGPOLL</code></td> <td>Synonym for <code>SIGIO</code>\n</td> </tr> <tr> <td><code>SIGLOST</code></td> <td>Sent to a process when a file lock has been lost.</td> </tr> <tr> <td><code>SIGPWR</code></td> <td>Sent to a process to notify of a power failure.</td> </tr> <tr> <td><code>SIGINFO</code></td> <td>Synonym for <code>SIGPWR</code>\n</td> </tr> <tr> <td><code>SIGSYS</code></td> <td>Sent to a process to notify of a bad argument.</td> </tr> <tr> <td><code>SIGUNUSED</code></td> <td>Synonym for <code>SIGSYS</code>\n</td> </tr> </table> <h3 id=\"os_error_constants\">Error Constants</h3> <p>The following error constants are exported by <code>os.constants.errno</code>:</p> <h4 id=\"os_posix_error_constants\">POSIX Error Constants</h4> <table> <tr> <th>Constant</th> <th>Description</th> </tr> <tr> <td><code>E2BIG</code></td> <td>Indicates that the list of arguments is longer than expected.</td> </tr> <tr> <td><code>EACCES</code></td> <td>Indicates that the operation did not have sufficient permissions.</td> </tr> <tr> <td><code>EADDRINUSE</code></td> <td>Indicates that the network address is already in use.</td> </tr> <tr> <td><code>EADDRNOTAVAIL</code></td> <td>Indicates that the network address is currently unavailable for use.</td> </tr> <tr> <td><code>EAFNOSUPPORT</code></td> <td>Indicates that the network address family is not supported.</td> </tr> <tr> <td><code>EAGAIN</code></td> <td>Indicates that there is currently no data available and to try the operation again later.</td> </tr> <tr> <td><code>EALREADY</code></td> <td>Indicates that the socket already has a pending connection in progress.</td> </tr> <tr> <td><code>EBADF</code></td> <td>Indicates that a file descriptor is not valid.</td> </tr> <tr> <td><code>EBADMSG</code></td> <td>Indicates an invalid data message.</td> </tr> <tr> <td><code>EBUSY</code></td> <td>Indicates that a device or resource is busy.</td> </tr> <tr> <td><code>ECANCELED</code></td> <td>Indicates that an operation was canceled.</td> </tr> <tr> <td><code>ECHILD</code></td> <td>Indicates that there are no child processes.</td> </tr> <tr> <td><code>ECONNABORTED</code></td> <td>Indicates that the network connection has been aborted.</td> </tr> <tr> <td><code>ECONNREFUSED</code></td> <td>Indicates that the network connection has been refused.</td> </tr> <tr> <td><code>ECONNRESET</code></td> <td>Indicates that the network connection has been reset.</td> </tr> <tr> <td><code>EDEADLK</code></td> <td>Indicates that a resource deadlock has been avoided.</td> </tr> <tr> <td><code>EDESTADDRREQ</code></td> <td>Indicates that a destination address is required.</td> </tr> <tr> <td><code>EDOM</code></td> <td>Indicates that an argument is out of the domain of the function.</td> </tr> <tr> <td><code>EDQUOT</code></td> <td>Indicates that the disk quota has been exceeded.</td> </tr> <tr> <td><code>EEXIST</code></td> <td>Indicates that the file already exists.</td> </tr> <tr> <td><code>EFAULT</code></td> <td>Indicates an invalid pointer address.</td> </tr> <tr> <td><code>EFBIG</code></td> <td>Indicates that the file is too large.</td> </tr> <tr> <td><code>EHOSTUNREACH</code></td> <td>Indicates that the host is unreachable.</td> </tr> <tr> <td><code>EIDRM</code></td> <td>Indicates that the identifier has been removed.</td> </tr> <tr> <td><code>EILSEQ</code></td> <td>Indicates an illegal byte sequence.</td> </tr> <tr> <td><code>EINPROGRESS</code></td> <td>Indicates that an operation is already in progress.</td> </tr> <tr> <td><code>EINTR</code></td> <td>Indicates that a function call was interrupted.</td> </tr> <tr> <td><code>EINVAL</code></td> <td>Indicates that an invalid argument was provided.</td> </tr> <tr> <td><code>EIO</code></td> <td>Indicates an otherwise unspecified I/O error.</td> </tr> <tr> <td><code>EISCONN</code></td> <td>Indicates that the socket is connected.</td> </tr> <tr> <td><code>EISDIR</code></td> <td>Indicates that the path is a directory.</td> </tr> <tr> <td><code>ELOOP</code></td> <td>Indicates too many levels of symbolic links in a path.</td> </tr> <tr> <td><code>EMFILE</code></td> <td>Indicates that there are too many open files.</td> </tr> <tr> <td><code>EMLINK</code></td> <td>Indicates that there are too many hard links to a file.</td> </tr> <tr> <td><code>EMSGSIZE</code></td> <td>Indicates that the provided message is too long.</td> </tr> <tr> <td><code>EMULTIHOP</code></td> <td>Indicates that a multihop was attempted.</td> </tr> <tr> <td><code>ENAMETOOLONG</code></td> <td>Indicates that the filename is too long.</td> </tr> <tr> <td><code>ENETDOWN</code></td> <td>Indicates that the network is down.</td> </tr> <tr> <td><code>ENETRESET</code></td> <td>Indicates that the connection has been aborted by the network.</td> </tr> <tr> <td><code>ENETUNREACH</code></td> <td>Indicates that the network is unreachable.</td> </tr> <tr> <td><code>ENFILE</code></td> <td>Indicates too many open files in the system.</td> </tr> <tr> <td><code>ENOBUFS</code></td> <td>Indicates that no buffer space is available.</td> </tr> <tr> <td><code>ENODATA</code></td> <td>Indicates that no message is available on the stream head read queue.</td> </tr> <tr> <td><code>ENODEV</code></td> <td>Indicates that there is no such device.</td> </tr> <tr> <td><code>ENOENT</code></td> <td>Indicates that there is no such file or directory.</td> </tr> <tr> <td><code>ENOEXEC</code></td> <td>Indicates an exec format error.</td> </tr> <tr> <td><code>ENOLCK</code></td> <td>Indicates that there are no locks available.</td> </tr> <tr> <td><code>ENOLINK</code></td> <td>Indications that a link has been severed.</td> </tr> <tr> <td><code>ENOMEM</code></td> <td>Indicates that there is not enough space.</td> </tr> <tr> <td><code>ENOMSG</code></td> <td>Indicates that there is no message of the desired type.</td> </tr> <tr> <td><code>ENOPROTOOPT</code></td> <td>Indicates that a given protocol is not available.</td> </tr> <tr> <td><code>ENOSPC</code></td> <td>Indicates that there is no space available on the device.</td> </tr> <tr> <td><code>ENOSR</code></td> <td>Indicates that there are no stream resources available.</td> </tr> <tr> <td><code>ENOSTR</code></td> <td>Indicates that a given resource is not a stream.</td> </tr> <tr> <td><code>ENOSYS</code></td> <td>Indicates that a function has not been implemented.</td> </tr> <tr> <td><code>ENOTCONN</code></td> <td>Indicates that the socket is not connected.</td> </tr> <tr> <td><code>ENOTDIR</code></td> <td>Indicates that the path is not a directory.</td> </tr> <tr> <td><code>ENOTEMPTY</code></td> <td>Indicates that the directory is not empty.</td> </tr> <tr> <td><code>ENOTSOCK</code></td> <td>Indicates that the given item is not a socket.</td> </tr> <tr> <td><code>ENOTSUP</code></td> <td>Indicates that a given operation is not supported.</td> </tr> <tr> <td><code>ENOTTY</code></td> <td>Indicates an inappropriate I/O control operation.</td> </tr> <tr> <td><code>ENXIO</code></td> <td>Indicates no such device or address.</td> </tr> <tr> <td><code>EOPNOTSUPP</code></td> <td>Indicates that an operation is not supported on the socket. Note that while <code>ENOTSUP</code> and <code>EOPNOTSUPP</code> have the same value on Linux, according to POSIX.1 these error values should be distinct.)</td> </tr> <tr> <td><code>EOVERFLOW</code></td> <td>Indicates that a value is too large to be stored in a given data type.</td> </tr> <tr> <td><code>EPERM</code></td> <td>Indicates that the operation is not permitted.</td> </tr> <tr> <td><code>EPIPE</code></td> <td>Indicates a broken pipe.</td> </tr> <tr> <td><code>EPROTO</code></td> <td>Indicates a protocol error.</td> </tr> <tr> <td><code>EPROTONOSUPPORT</code></td> <td>Indicates that a protocol is not supported.</td> </tr> <tr> <td><code>EPROTOTYPE</code></td> <td>Indicates the wrong type of protocol for a socket.</td> </tr> <tr> <td><code>ERANGE</code></td> <td>Indicates that the results are too large.</td> </tr> <tr> <td><code>EROFS</code></td> <td>Indicates that the file system is read only.</td> </tr> <tr> <td><code>ESPIPE</code></td> <td>Indicates an invalid seek operation.</td> </tr> <tr> <td><code>ESRCH</code></td> <td>Indicates that there is no such process.</td> </tr> <tr> <td><code>ESTALE</code></td> <td>Indicates that the file handle is stale.</td> </tr> <tr> <td><code>ETIME</code></td> <td>Indicates an expired timer.</td> </tr> <tr> <td><code>ETIMEDOUT</code></td> <td>Indicates that the connection timed out.</td> </tr> <tr> <td><code>ETXTBSY</code></td> <td>Indicates that a text file is busy.</td> </tr> <tr> <td><code>EWOULDBLOCK</code></td> <td>Indicates that the operation would block.</td> </tr> <tr> <td><code>EXDEV</code></td> <td>Indicates an improper link. </td>\n</tr> </table> <h4 id=\"os_windows_specific_error_constants\">Windows Specific Error Constants</h4> <p>The following error codes are specific to the Windows operating system:</p> <table> <tr> <th>Constant</th> <th>Description</th> </tr> <tr> <td><code>WSAEINTR</code></td> <td>Indicates an interrupted function call.</td> </tr> <tr> <td><code>WSAEBADF</code></td> <td>Indicates an invalid file handle.</td> </tr> <tr> <td><code>WSAEACCES</code></td> <td>Indicates insufficient permissions to complete the operation.</td> </tr> <tr> <td><code>WSAEFAULT</code></td> <td>Indicates an invalid pointer address.</td> </tr> <tr> <td><code>WSAEINVAL</code></td> <td>Indicates that an invalid argument was passed.</td> </tr> <tr> <td><code>WSAEMFILE</code></td> <td>Indicates that there are too many open files.</td> </tr> <tr> <td><code>WSAEWOULDBLOCK</code></td> <td>Indicates that a resource is temporarily unavailable.</td> </tr> <tr> <td><code>WSAEINPROGRESS</code></td> <td>Indicates that an operation is currently in progress.</td> </tr> <tr> <td><code>WSAEALREADY</code></td> <td>Indicates that an operation is already in progress.</td> </tr> <tr> <td><code>WSAENOTSOCK</code></td> <td>Indicates that the resource is not a socket.</td> </tr> <tr> <td><code>WSAEDESTADDRREQ</code></td> <td>Indicates that a destination address is required.</td> </tr> <tr> <td><code>WSAEMSGSIZE</code></td> <td>Indicates that the message size is too long.</td> </tr> <tr> <td><code>WSAEPROTOTYPE</code></td> <td>Indicates the wrong protocol type for the socket.</td> </tr> <tr> <td><code>WSAENOPROTOOPT</code></td> <td>Indicates a bad protocol option.</td> </tr> <tr> <td><code>WSAEPROTONOSUPPORT</code></td> <td>Indicates that the protocol is not supported.</td> </tr> <tr> <td><code>WSAESOCKTNOSUPPORT</code></td> <td>Indicates that the socket type is not supported.</td> </tr> <tr> <td><code>WSAEOPNOTSUPP</code></td> <td>Indicates that the operation is not supported.</td> </tr> <tr> <td><code>WSAEPFNOSUPPORT</code></td> <td>Indicates that the protocol family is not supported.</td> </tr> <tr> <td><code>WSAEAFNOSUPPORT</code></td> <td>Indicates that the address family is not supported.</td> </tr> <tr> <td><code>WSAEADDRINUSE</code></td> <td>Indicates that the network address is already in use.</td> </tr> <tr> <td><code>WSAEADDRNOTAVAIL</code></td> <td>Indicates that the network address is not available.</td> </tr> <tr> <td><code>WSAENETDOWN</code></td> <td>Indicates that the network is down.</td> </tr> <tr> <td><code>WSAENETUNREACH</code></td> <td>Indicates that the network is unreachable.</td> </tr> <tr> <td><code>WSAENETRESET</code></td> <td>Indicates that the network connection has been reset.</td> </tr> <tr> <td><code>WSAECONNABORTED</code></td> <td>Indicates that the connection has been aborted.</td> </tr> <tr> <td><code>WSAECONNRESET</code></td> <td>Indicates that the connection has been reset by the peer.</td> </tr> <tr> <td><code>WSAENOBUFS</code></td> <td>Indicates that there is no buffer space available.</td> </tr> <tr> <td><code>WSAEISCONN</code></td> <td>Indicates that the socket is already connected.</td> </tr> <tr> <td><code>WSAENOTCONN</code></td> <td>Indicates that the socket is not connected.</td> </tr> <tr> <td><code>WSAESHUTDOWN</code></td> <td>Indicates that data cannot be sent after the socket has been shutdown.</td> </tr> <tr> <td><code>WSAETOOMANYREFS</code></td> <td>Indicates that there are too many references.</td> </tr> <tr> <td><code>WSAETIMEDOUT</code></td> <td>Indicates that the connection has timed out.</td> </tr> <tr> <td><code>WSAECONNREFUSED</code></td> <td>Indicates that the connection has been refused.</td> </tr> <tr> <td><code>WSAELOOP</code></td> <td>Indicates that a name cannot be translated.</td> </tr> <tr> <td><code>WSAENAMETOOLONG</code></td> <td>Indicates that a name was too long.</td> </tr> <tr> <td><code>WSAEHOSTDOWN</code></td> <td>Indicates that a network host is down.</td> </tr> <tr> <td><code>WSAEHOSTUNREACH</code></td> <td>Indicates that there is no route to a network host.</td> </tr> <tr> <td><code>WSAENOTEMPTY</code></td> <td>Indicates that the directory is not empty.</td> </tr> <tr> <td><code>WSAEPROCLIM</code></td> <td>Indicates that there are too many processes.</td> </tr> <tr> <td><code>WSAEUSERS</code></td> <td>Indicates that the user quota has been exceeded.</td> </tr> <tr> <td><code>WSAEDQUOT</code></td> <td>Indicates that the disk quota has been exceeded.</td> </tr> <tr> <td><code>WSAESTALE</code></td> <td>Indicates a stale file handle reference.</td> </tr> <tr> <td><code>WSAEREMOTE</code></td> <td>Indicates that the item is remote.</td> </tr> <tr> <td><code>WSASYSNOTREADY</code></td> <td>Indicates that the network subsystem is not ready.</td> </tr> <tr> <td><code>WSAVERNOTSUPPORTED</code></td> <td>Indicates that the winsock.dll version is out of range.</td> </tr> <tr> <td><code>WSANOTINITIALISED</code></td> <td>Indicates that successful WSAStartup has not yet been performed.</td> </tr> <tr> <td><code>WSAEDISCON</code></td> <td>Indicates that a graceful shutdown is in progress.</td> </tr> <tr> <td><code>WSAENOMORE</code></td> <td>Indicates that there are no more results.</td> </tr> <tr> <td><code>WSAECANCELLED</code></td> <td>Indicates that an operation has been canceled.</td> </tr> <tr> <td><code>WSAEINVALIDPROCTABLE</code></td> <td>Indicates that the procedure call table is invalid.</td> </tr> <tr> <td><code>WSAEINVALIDPROVIDER</code></td> <td>Indicates an invalid service provider.</td> </tr> <tr> <td><code>WSAEPROVIDERFAILEDINIT</code></td> <td>Indicates that the service provider failed to initialized.</td> </tr> <tr> <td><code>WSASYSCALLFAILURE</code></td> <td>Indicates a system call failure.</td> </tr> <tr> <td><code>WSASERVICE_NOT_FOUND</code></td> <td>Indicates that a service was not found.</td> </tr> <tr> <td><code>WSATYPE_NOT_FOUND</code></td> <td>Indicates that a class type was not found.</td> </tr> <tr> <td><code>WSA_E_NO_MORE</code></td> <td>Indicates that there are no more results.</td> </tr> <tr> <td><code>WSA_E_CANCELLED</code></td> <td>Indicates that the call was canceled.</td> </tr> <tr> <td><code>WSAEREFUSED</code></td> <td>Indicates that a database query was refused.</td> </tr> </table> <h3 id=\"os_libuv_constants\">libuv Constants</h3> <table> <tr> <th>Constant</th> <th>Description</th> </tr> <tr> <td><code>UV_UDP_REUSEADDR</code></td> <td></td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/os.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/os.html</a>\n  </p>\n</div>\n","punycode":"<h1 id=\"punycode_punycode\">Punycode</h1> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>Accessing this module will now emit a deprecation warning.</p> </td>\n</tr> </table> </details> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated</div>\n<p><strong>The version of the punycode module bundled in Node.js is being deprecated</strong>. In a future major version of Node.js this module will be removed. Users currently depending on the <code>punycode</code> module should switch to using the userland-provided <a href=\"https://mths.be/punycode\">Punycode.js</a> module instead.</p> <p>The <code>punycode</code> module is a bundled version of the <a href=\"https://mths.be/punycode\">Punycode.js</a> module. It can be accessed using:</p> <pre data-language=\"js\">const punycode = require('punycode');\n</pre> <p><a href=\"https://tools.ietf.org/html/rfc3492\">Punycode</a> is a character encoding scheme defined by RFC 3492 that is primarily intended for use in Internationalized Domain Names. Because host names in URLs are limited to ASCII characters only, Domain Names that contain non-ASCII characters must be converted into ASCII using the Punycode scheme. For instance, the Japanese character that translates into the English word, <code>'example'</code> is <code>'例'</code>. The Internationalized Domain Name, <code>'例.com'</code> (equivalent to <code>'example.com'</code>) is represented by Punycode as the ASCII string <code>'xn--fsq.com'</code>.</p> <p>The <code>punycode</code> module provides a simple implementation of the Punycode standard.</p> <p><em>Note</em>: The <code>punycode</code> module is a third-party dependency used by Node.js and made available to developers as a convenience. Fixes or other modifications to the module must be directed to the <a href=\"https://mths.be/punycode\">Punycode.js</a> project.</p> <h2 id=\"punycode_punycode_decode_string\">punycode.decode(string)</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.1</span> </div>\n<ul> <li>\n<code>string</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>The <code>punycode.decode()</code> method converts a <a href=\"https://tools.ietf.org/html/rfc3492\">Punycode</a> string of ASCII-only characters to the equivalent string of Unicode codepoints.</p> <pre data-language=\"js\">punycode.decode('maana-pta'); // 'mañana'\npunycode.decode('--dqo34k'); // '☃-⌘'\n</pre> <h2 id=\"punycode_punycode_encode_string\">punycode.encode(string)</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.1</span> </div>\n<ul> <li>\n<code>string</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>The <code>punycode.encode()</code> method converts a string of Unicode codepoints to a <a href=\"https://tools.ietf.org/html/rfc3492\">Punycode</a> string of ASCII-only characters.</p> <pre data-language=\"js\">punycode.encode('mañana'); // 'maana-pta'\npunycode.encode('☃-⌘'); // '--dqo34k'\n</pre> <h2 id=\"punycode_punycode_toascii_domain\">punycode.toASCII(domain)</h2> <div class=\"api_metadata\"> <span>Added in: v0.6.1</span> </div>\n<ul> <li>\n<code>domain</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>The <code>punycode.toASCII()</code> method converts a Unicode string representing an Internationalized Domain Name to <a href=\"https://tools.ietf.org/html/rfc3492\">Punycode</a>. Only the non-ASCII parts of the domain name will be converted. Calling <code>punycode.toASCII()</code> on a string that already only contains ASCII characters will have no effect.</p> <pre data-language=\"js\">// encode domain names\npunycode.toASCII('mañana.com');  // 'xn--maana-pta.com'\npunycode.toASCII('☃-⌘.com');   // 'xn----dqo34k.com'\npunycode.toASCII('example.com'); // 'example.com'\n</pre> <h2 id=\"punycode_punycode_tounicode_domain\">punycode.toUnicode(domain)</h2> <div class=\"api_metadata\"> <span>Added in: v0.6.1</span> </div>\n<ul> <li>\n<code>domain</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>The <code>punycode.toUnicode()</code> method converts a string representing a domain name containing <a href=\"https://tools.ietf.org/html/rfc3492\">Punycode</a> encoded characters into Unicode. Only the <a href=\"https://tools.ietf.org/html/rfc3492\">Punycode</a> encoded parts of the domain name are be converted.</p> <pre data-language=\"js\">// decode domain names\npunycode.toUnicode('xn--maana-pta.com'); // 'mañana.com'\npunycode.toUnicode('xn----dqo34k.com');  // '☃-⌘.com'\npunycode.toUnicode('example.com');       // 'example.com'\n</pre> <h2 id=\"punycode_punycode_ucs2\">punycode.ucs2</h2> <div class=\"api_metadata\"> <span>Added in: v0.7.0</span> </div>\n<h3 id=\"punycode_punycode_ucs2_decode_string\">punycode.ucs2.decode(string)</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.0</span> </div>\n<ul> <li>\n<code>string</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>The <code>punycode.ucs2.decode()</code> method returns an array containing the numeric codepoint values of each Unicode symbol in the string.</p> <pre data-language=\"js\">punycode.ucs2.decode('abc'); // [0x61, 0x62, 0x63]\n// surrogate pair for U+1D306 tetragram for centre:\npunycode.ucs2.decode('\\uD834\\uDF06'); // [0x1D306]\n</pre> <h3 id=\"punycode_punycode_ucs2_encode_codepoints\">punycode.ucs2.encode(codePoints)</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.0</span> </div>\n<ul> <li>\n<code>codePoints</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a>\n</li> </ul> <p>The <code>punycode.ucs2.encode()</code> method returns a string based on an array of numeric code point values.</p> <pre data-language=\"js\">punycode.ucs2.encode([0x61, 0x62, 0x63]); // 'abc'\npunycode.ucs2.encode([0x1D306]); // '\\uD834\\uDF06'\n</pre> <h2 id=\"punycode_punycode_version\">punycode.version</h2> <div class=\"api_metadata\"> <span>Added in: v0.6.1</span> </div>\n<p>Returns a string identifying the current <a href=\"https://mths.be/punycode\">Punycode.js</a> version number.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/punycode.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/punycode.html</a>\n  </p>\n</div>\n","querystring":"<h1 id=\"querystring_query_string\">Query String</h1> <div class=\"api_stability api_stability_2\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</div> <p>The <code>querystring</code> module provides utilities for parsing and formatting URL query strings. It can be accessed using:</p> <pre data-language=\"js\">const querystring = require('querystring');\n</pre> <h2 id=\"querystring_querystring_escape_str\">querystring.escape(str)</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.25</span> </div>\n<ul> <li>\n<code>str</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>The <code>querystring.escape()</code> method performs URL percent-encoding on the given <code>str</code> in a manner that is optimized for the specific requirements of URL query strings.</p> <p>The <code>querystring.escape()</code> method is used by <code>querystring.stringify()</code> and is generally not expected to be used directly. It is exported primarily to allow application code to provide a replacement percent-encoding implementation if necessary by assigning <code>querystring.escape</code> to an alternative function.</p> <h2 id=\"querystring_querystring_parse_str_sep_eq_options\">querystring.parse(str[, sep[, eq[, options]]])</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>The returned object no longer inherits from <code>Object.prototype</code>.</p> </td>\n</tr> <tr>\n<td>v6.0.0, v4.2.4</td> <td>\n<p>The <code>eq</code> parameter may now have a length of more than <code>1</code>.</p> </td>\n</tr> <tr>\n<td>v0.1.25</td> <td>\n<p><span>Added in: v0.1.25</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>str</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The URL query string to parse</li> <li>\n<code>sep</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The substring used to delimit key and value pairs in the query string. Defaults to <code>'&amp;'</code>.</li> <li>\n<code>eq</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>. The substring used to delimit keys and values in the query string. Defaults to <code>'='</code>.</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>decodeURIComponent</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The function to use when decoding percent-encoded characters in the query string. Defaults to <code>querystring.unescape()</code>.</li> <li>\n<code>maxKeys</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the maximum number of keys to parse. Defaults to <code>1000</code>. Specify <code>0</code> to remove key counting limitations.</li> </ul> </li> </ul> <p>The <code>querystring.parse()</code> method parses a URL query string (<code>str</code>) into a collection of key and value pairs.</p> <p>For example, the query string <code>'foo=bar&amp;abc=xyz&amp;abc=123'</code> is parsed into:</p> <pre data-language=\"js\">{\n  foo: 'bar',\n  abc: ['xyz', '123']\n}\n</pre> <p><em>Note</em>: The object returned by the <code>querystring.parse()</code> method <em>does not</em> prototypically extend from the JavaScript <code>Object</code>. This means that the typical <code>Object</code> methods such as <code>obj.toString()</code>, <code>obj.hasOwnProperty()</code>, and others are not defined and <em>will not work</em>.</p> <p>By default, percent-encoded characters within the query string will be assumed to use UTF-8 encoding. If an alternative character encoding is used, then an alternative <code>decodeURIComponent</code> option will need to be specified as illustrated in the following example:</p> <pre data-language=\"js\">// Assuming gbkDecodeURIComponent function already exists...\n\nquerystring.parse('w=%D6%D0%CE%C4&amp;foo=bar', null, null,\n  { decodeURIComponent: gbkDecodeURIComponent })\n</pre> <h2 id=\"querystring_querystring_stringify_obj_sep_eq_options\">querystring.stringify(obj[, sep[, eq[, options]]])</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.25</span> </div>\n<ul> <li>\n<code>obj</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> The object to serialize into a URL query string</li> <li>\n<code>sep</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The substring used to delimit key and value pairs in the query string. Defaults to <code>'&amp;'</code>.</li> <li>\n<code>eq</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>. The substring used to delimit keys and values in the query string. Defaults to <code>'='</code>.</li> <li>\n<code>options</code><ul> <li>\n<code>encodeURIComponent</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The function to use when converting URL-unsafe characters to percent-encoding in the query string. Defaults to <code>querystring.escape()</code>.</li> </ul> </li> </ul> <p>The <code>querystring.stringify()</code> method produces a URL query string from a given <code>obj</code> by iterating through the object's \"own properties\".</p> <p>It serializes the following types of values passed in <code>obj</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number[]&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean[]&gt;</a> Any other input values will be coerced to empty strings.</p> <p>For example:</p> <pre data-language=\"js\">querystring.stringify({ foo: 'bar', baz: ['qux', 'quux'], corge: '' })\n// returns 'foo=bar&amp;baz=qux&amp;baz=quux&amp;corge='\n\nquerystring.stringify({ foo: 'bar', baz: 'qux' }, ';', ':')\n// returns 'foo:bar;baz:qux'\n</pre> <p>By default, characters requiring percent-encoding within the query string will be encoded as UTF-8. If an alternative encoding is required, then an alternative <code>encodeURIComponent</code> option will need to be specified as illustrated in the following example:</p> <pre data-language=\"js\">// Assuming gbkEncodeURIComponent function already exists,\n\nquerystring.stringify({ w: '中文', foo: 'bar' }, null, null,\n  { encodeURIComponent: gbkEncodeURIComponent })\n</pre> <h2 id=\"querystring_querystring_unescape_str\">querystring.unescape(str)</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.25</span> </div>\n<ul> <li>\n<code>str</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>The <code>querystring.unescape()</code> method performs decoding of URL percent-encoded characters on the given <code>str</code>.</p> <p>The <code>querystring.unescape()</code> method is used by <code>querystring.parse()</code> and is generally not expected to be used directly. It is exported primarily to allow application code to provide a replacement decoding implementation if necessary by assigning <code>querystring.unescape</code> to an alternative function.</p> <p>By default, the <code>querystring.unescape()</code> method will attempt to use the JavaScript built-in <code>decodeURIComponent()</code> method to decode. If that fails, a safer equivalent that does not throw on malformed URLs will be used.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/querystring.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/querystring.html</a>\n  </p>\n</div>\n","tty":"<h1 id=\"tty_tty\">TTY</h1> <div class=\"api_stability api_stability_2\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</div>\n<p>The <code>tty</code> module provides the <code>tty.ReadStream</code> and <code>tty.WriteStream</code> classes. In most cases, it will not be necessary or possible to use this module directly. However, it can be accessed using:</p> <pre data-language=\"js\">const tty = require('tty');\n</pre> <p>When Node.js detects that it is being run inside a text terminal (\"TTY\") context, the <code>process.stdin</code> will, by default, be initialized as an instance of <code>tty.ReadStream</code> and both <code>process.stdout</code> and <code>process.stderr</code> will, by default be instances of <code>tty.WriteStream</code>. The preferred method of determining whether Node.js is being run within a TTY context is to check that the value of the <code>process.stdout.isTTY</code> property is <code>true</code>:</p> <pre data-language=\"sh\">$ node -p -e \"Boolean(process.stdout.isTTY)\"\ntrue\n$ node -p -e \"Boolean(process.stdout.isTTY)\" | cat\nfalse\n</pre> <p>In most cases, there should be little to no reason for an application to create instances of the <code>tty.ReadStream</code> and <code>tty.WriteStream</code> classes.</p> <h2 id=\"tty_class_tty_readstream\">Class: tty.ReadStream</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.8</span> </div>\n<p>The <code>tty.ReadStream</code> class is a subclass of <code>net.Socket</code> that represents the readable side of a TTY. In normal circumstances <code>process.stdin</code> will be the only <code>tty.ReadStream</code> instance in a Node.js process and there should be no reason to create additional instances.</p> <h3 id=\"tty_readstream_israw\">readStream.isRaw</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.7</span> </div>\n<p>A <code>boolean</code> that is <code>true</code> if the TTY is currently configured to operate as a raw device. Defaults to <code>false</code>.</p> <h3 id=\"tty_readstream_setrawmode_mode\">readStream.setRawMode(mode)</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.7</span> </div>\n<p>Allows configuration of <code>tty.ReadStream</code> so that it operates as a raw device.</p> <p>When in raw mode, input is always available character-by-character, not including modifiers. Additionally, all special processing of characters by the terminal is disabled, including echoing input characters. Note that <code>CTRL</code>+<code>C</code> will no longer cause a <code>SIGINT</code> when in this mode.</p> <ul> <li>\n<code>mode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If <code>true</code>, configures the <code>tty.ReadStream</code> to operate as a raw device. If <code>false</code>, configures the <code>tty.ReadStream</code> to operate in its default mode. The <code>readStream.isRaw</code> property will be set to the resulting mode.</li> </ul> <h2 id=\"tty_class_tty_writestream\">Class: tty.WriteStream</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.8</span> </div>\n<p>The <code>tty.WriteStream</code> class is a subclass of <code>net.Socket</code> that represents the writable side of a TTY. In normal circumstances, <code>process.stdout</code> and <code>process.stderr</code> will be the only <code>tty.WriteStream</code> instances created for a Node.js process and there should be no reason to create additional instances.</p> <h3 id=\"tty_event_resize\">Event: 'resize'</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.7</span> </div>\n<p>The <code>'resize'</code> event is emitted whenever either of the <code>writeStream.columns</code> or <code>writeStream.rows</code> properties have changed. No arguments are passed to the listener callback when called.</p> <pre data-language=\"js\">process.stdout.on('resize', () =&gt; {\n  console.log('screen size has changed!');\n  console.log(`${process.stdout.columns}x${process.stdout.rows}`);\n});\n</pre> <h3 id=\"tty_writestream_columns\">writeStream.columns</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.7</span> </div>\n<p>A <code>number</code> specifying the number of columns the TTY currently has. This property is updated whenever the <code>'resize'</code> event is emitted.</p> <h3 id=\"tty_writestream_rows\">writeStream.rows</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.7</span> </div>\n<p>A <code>number</code> specifying the number of rows the TTY currently has. This property is updated whenever the <code>'resize'</code> event is emitted.</p> <h2 id=\"tty_tty_isatty_fd\">tty.isatty(fd)</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.8</span> </div>\n<ul> <li>\n<code>fd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> A numeric file descriptor</li> </ul> <p>The <code>tty.isatty()</code> method returns <code>true</code> if the given <code>fd</code> is associated with a TTY and <code>false</code> if is not.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/tty.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/tty.html</a>\n  </p>\n</div>\n","timers":"<h1 id=\"timers_timers\">Timers</h1> <div class=\"api_stability api_stability_2\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</div>\n<p>The <code>timer</code> module exposes a global API for scheduling functions to be called at some future period of time. Because the timer functions are globals, there is no need to call <code>require('timers')</code> to use the API.</p> <p>The timer functions within Node.js implement a similar API as the timers API provided by Web Browsers but use a different internal implementation that is built around <a href=\"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick\">the Node.js Event Loop</a>.</p> <h2 id=\"timers_class_immediate\">Class: Immediate</h2> <p>This object is created internally and is returned from <a href=\"timers#timers_setimmediate_callback_args\"><code>setImmediate()</code></a>. It can be passed to <a href=\"timers#timers_clearimmediate_immediate\"><code>clearImmediate()</code></a> in order to cancel the scheduled actions.</p> <h2 id=\"timers_class_timeout\">Class: Timeout</h2> <p>This object is created internally and is returned from <a href=\"timers#timers_settimeout_callback_delay_args\"><code>setTimeout()</code></a> and <a href=\"timers#timers_setinterval_callback_delay_args\"><code>setInterval()</code></a>. It can be passed to <a href=\"timers#timers_cleartimeout_timeout\"><code>clearTimeout()</code></a> or <a href=\"timers#timers_clearinterval_timeout\"><code>clearInterval()</code></a> (respectively) in order to cancel the scheduled actions.</p> <p>By default, when a timer is scheduled using either <a href=\"timers#timers_settimeout_callback_delay_args\"><code>setTimeout()</code></a> or <a href=\"timers#timers_setinterval_callback_delay_args\"><code>setInterval()</code></a>, the Node.js event loop will continue running as long as the timer is active. Each of the <code>Timeout</code> objects returned by these functions export both <code>timeout.ref()</code> and <code>timeout.unref()</code> functions that can be used to control this default behavior.</p> <h3 id=\"timers_timeout_ref\">timeout.ref()</h3> <div class=\"api_metadata\"> <span>Added in: v0.9.1</span> </div>\n<p>When called, requests that the Node.js event loop <em>not</em> exit so long as the <code>Timeout</code> is active. Calling <code>timeout.ref()</code> multiple times will have no effect.</p> <p><em>Note</em>: By default, all <code>Timeout</code> objects are \"ref'd\", making it normally unnecessary to call <code>timeout.ref()</code> unless <code>timeout.unref()</code> had been called previously.</p> <p>Returns a reference to the <code>Timeout</code>.</p> <h3 id=\"timers_timeout_unref\">timeout.unref()</h3> <div class=\"api_metadata\"> <span>Added in: v0.9.1</span> </div>\n<p>When called, the active <code>Timeout</code> object will not require the Node.js event loop to remain active. If there is no other activity keeping the event loop running, the process may exit before the <code>Timeout</code> object's callback is invoked. Calling <code>timeout.unref()</code> multiple times will have no effect.</p> <p><em>Note</em>: Calling <code>timeout.unref()</code> creates an internal timer that will wake the Node.js event loop. Creating too many of these can adversely impact performance of the Node.js application.</p> <p>Returns a reference to the <code>Timeout</code>.</p> <h2 id=\"timers_scheduling_timers\">Scheduling Timers</h2> <p>A timer in Node.js is an internal construct that calls a given function after a certain period of time. When a timer's function is called varies depending on which method was used to create the timer and what other work the Node.js event loop is doing.</p> <h3 id=\"timers_setimmediate_callback_args\">setImmediate(callback[, ...args])</h3> <div class=\"api_metadata\"> <span>Added in: v0.9.1</span> </div>\n<ul> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The function to call at the end of this turn of <a href=\"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick\">the Node.js Event Loop</a>\n</li> <li>\n<code>...args</code> <span class=\"type\">&lt;any&gt;</span> Optional arguments to pass when the <code>callback</code> is called.</li> </ul> <p>Schedules the \"immediate\" execution of the <code>callback</code> after I/O events' callbacks. Returns an <code>Immediate</code> for use with <a href=\"timers#timers_clearimmediate_immediate\"><code>clearImmediate()</code></a>.</p> <p>When multiple calls to <code>setImmediate()</code> are made, the <code>callback</code> functions are queued for execution in the order in which they are created. The entire callback queue is processed every event loop iteration. If an immediate timer is queued from inside an executing callback, that timer will not be triggered until the next event loop iteration.</p> <p>If <code>callback</code> is not a function, a <a href=\"errors#errors_class_typeerror\"><code>TypeError</code></a> will be thrown.</p> <h3 id=\"timers_setinterval_callback_delay_args\">setInterval(callback, delay[, ...args])</h3> <div class=\"api_metadata\"> <span>Added in: v0.0.1</span> </div>\n<ul> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The function to call when the timer elapses.</li> <li>\n<code>delay</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The number of milliseconds to wait before calling the <code>callback</code>.</li> <li>\n<code>...args</code> <span class=\"type\">&lt;any&gt;</span> Optional arguments to pass when the <code>callback</code> is called.</li> </ul> <p>Schedules repeated execution of <code>callback</code> every <code>delay</code> milliseconds. Returns a <code>Timeout</code> for use with <a href=\"timers#timers_clearinterval_timeout\"><code>clearInterval()</code></a>.</p> <p>When <code>delay</code> is larger than <code>2147483647</code> or less than <code>1</code>, the <code>delay</code> will be set to <code>1</code>.</p> <p>If <code>callback</code> is not a function, a <a href=\"errors#errors_class_typeerror\"><code>TypeError</code></a> will be thrown.</p> <h3 id=\"timers_settimeout_callback_delay_args\">setTimeout(callback, delay[, ...args])</h3> <div class=\"api_metadata\"> <span>Added in: v0.0.1</span> </div>\n<ul> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The function to call when the timer elapses.</li> <li>\n<code>delay</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The number of milliseconds to wait before calling the <code>callback</code>.</li> <li>\n<code>...args</code> <span class=\"type\">&lt;any&gt;</span> Optional arguments to pass when the <code>callback</code> is called.</li> </ul> <p>Schedules execution of a one-time <code>callback</code> after <code>delay</code> milliseconds. Returns a <code>Timeout</code> for use with <a href=\"timers#timers_cleartimeout_timeout\"><code>clearTimeout()</code></a>.</p> <p>The <code>callback</code> will likely not be invoked in precisely <code>delay</code> milliseconds. Node.js makes no guarantees about the exact timing of when callbacks will fire, nor of their ordering. The callback will be called as close as possible to the time specified.</p> <p><em>Note</em>: When <code>delay</code> is larger than <code>2147483647</code> or less than <code>1</code>, the <code>delay</code> will be set to <code>1</code>.</p> <p>If <code>callback</code> is not a function, a <a href=\"errors#errors_class_typeerror\"><code>TypeError</code></a> will be thrown.</p> <h2 id=\"timers_cancelling_timers\">Cancelling Timers</h2> <p>The <a href=\"timers#timers_setimmediate_callback_args\"><code>setImmediate()</code></a>, <a href=\"timers#timers_setinterval_callback_delay_args\"><code>setInterval()</code></a>, and <a href=\"timers#timers_settimeout_callback_delay_args\"><code>setTimeout()</code></a> methods each return objects that represent the scheduled timers. These can be used to cancel the timer and prevent it from triggering.</p> <h3 id=\"timers_clearimmediate_immediate\">clearImmediate(immediate)</h3> <div class=\"api_metadata\"> <span>Added in: v0.9.1</span> </div>\n<ul> <li>\n<code>immediate</code> <span class=\"type\">&lt;Immediate&gt;</span> An <code>Immediate</code> object as returned by <a href=\"timers#timers_setimmediate_callback_args\"><code>setImmediate()</code></a>.</li> </ul> <p>Cancels an <code>Immediate</code> object created by <a href=\"timers#timers_setimmediate_callback_args\"><code>setImmediate()</code></a>.</p> <h3 id=\"timers_clearinterval_timeout\">clearInterval(timeout)</h3> <div class=\"api_metadata\"> <span>Added in: v0.0.1</span> </div>\n<ul> <li>\n<code>timeout</code> <span class=\"type\">&lt;Timeout&gt;</span> A <code>Timeout</code> object as returned by <a href=\"timers#timers_setinterval_callback_delay_args\"><code>setInterval()</code></a>.</li> </ul> <p>Cancels a <code>Timeout</code> object created by <a href=\"timers#timers_setinterval_callback_delay_args\"><code>setInterval()</code></a>.</p> <h3 id=\"timers_cleartimeout_timeout\">clearTimeout(timeout)</h3> <div class=\"api_metadata\"> <span>Added in: v0.0.1</span> </div>\n<ul> <li>\n<code>timeout</code> <span class=\"type\">&lt;Timeout&gt;</span> A <code>Timeout</code> object as returned by <a href=\"timers#timers_settimeout_callback_delay_args\"><code>setTimeout()</code></a>.</li> </ul> <p>Cancels a <code>Timeout</code> object created by <a href=\"timers#timers_settimeout_callback_delay_args\"><code>setTimeout()</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/timers.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/timers.html</a>\n  </p>\n</div>\n","tracing":"<h1 id=\"tracing_tracing\">Tracing</h1> <p>Trace Event provides a mechanism to centralize tracing information generated by V8, Node core, and userspace code.</p> <p>Tracing can be enabled by passing the <code>--trace-events-enabled</code> flag when starting a Node.js application.</p> <p>The set of categories for which traces are recorded can be specified using the <code>--trace-event-categories</code> flag followed by a list of comma separated category names. By default the <code>node</code> and <code>v8</code> categories are enabled.</p> <pre data-language=\"txt\">node --trace-events-enabled --trace-event-categories v8,node server.js\n</pre> <p>Running Node.js with tracing enabled will produce log files that can be opened in the <a href=\"https://www.chromium.org/developers/how-tos/trace-event-profiling-tool\"><code>chrome://tracing</code></a> tab of Chrome.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/tracing.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/tracing.html</a>\n  </p>\n</div>\n","path":"<h1 id=\"path_path\">Path</h1> <div class=\"api_stability api_stability_2\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</div>\n<p>The <code>path</code> module provides utilities for working with file and directory paths. It can be accessed using:</p> <pre data-language=\"js\">const path = require('path');\n</pre> <h2 id=\"path_windows_vs_posix\">Windows vs. POSIX</h2> <p>The default operation of the <code>path</code> module varies based on the operating system on which a Node.js application is running. Specifically, when running on a Windows operating system, the <code>path</code> module will assume that Windows-style paths are being used.</p> <p>For example, using the <code>path.basename()</code> function with the Windows file path <code>C:\\temp\\myfile.html</code>, will yield different results when running on POSIX than when run on Windows:</p> <p>On POSIX:</p> <pre data-language=\"js\">path.basename('C:\\\\temp\\\\myfile.html');\n// Returns: 'C:\\\\temp\\\\myfile.html'\n</pre> <p>On Windows:</p> <pre data-language=\"js\">path.basename('C:\\\\temp\\\\myfile.html');\n// Returns: 'myfile.html'\n</pre> <p>To achieve consistent results when working with Windows file paths on any operating system, use <a href=\"#path_path_win32\"><code>path.win32</code></a>:</p> <p>On POSIX and Windows:</p> <pre data-language=\"js\">path.win32.basename('C:\\\\temp\\\\myfile.html');\n// Returns: 'myfile.html'\n</pre> <p>To achieve consistent results when working with POSIX file paths on any operating system, use <a href=\"#path_path_posix\"><code>path.posix</code></a>:</p> <p>On POSIX and Windows:</p> <pre data-language=\"js\">path.posix.basename('/tmp/myfile.html');\n// Returns: 'myfile.html'\n</pre> <h2 id=\"path_path_basename_path_ext\">path.basename(path[, ext])</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>Passing a non-string as the <code>path</code> argument will throw now.</p> </td>\n</tr> <tr>\n<td>v0.1.25</td> <td>\n<p><span>Added in: v0.1.25</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>ext</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> An optional file extension</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>The <code>path.basename()</code> methods returns the last portion of a <code>path</code>, similar to the Unix <code>basename</code> command. Trailing directory separators are ignored, see <a href=\"#path_path_sep\"><code>path.sep</code></a>.</p> <p>For example:</p> <pre data-language=\"js\">path.basename('/foo/bar/baz/asdf/quux.html')\n// Returns: 'quux.html'\n\npath.basename('/foo/bar/baz/asdf/quux.html', '.html')\n// Returns: 'quux'\n</pre> <p>A <a href=\"errors#errors_class_typeerror\"><code>TypeError</code></a> is thrown if <code>path</code> is not a string or if <code>ext</code> is given and is not a string.</p> <h2 id=\"path_path_delimiter\">path.delimiter</h2> <div class=\"api_metadata\"> <span>Added in: v0.9.3</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> <p>Provides the platform-specific path delimiter:</p> <ul> <li>\n<code>;</code> for Windows</li> <li>\n<code>:</code> for POSIX</li> </ul> <p>For example, on POSIX:</p> <pre data-language=\"js\">console.log(process.env.PATH)\n// Prints: '/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin'\n\nprocess.env.PATH.split(path.delimiter)\n// Returns: ['/usr/bin', '/bin', '/usr/sbin', '/sbin', '/usr/local/bin']\n</pre> <p>On Windows:</p> <pre data-language=\"js\">console.log(process.env.PATH)\n// Prints: 'C:\\Windows\\system32;C:\\Windows;C:\\Program Files\\node\\'\n\nprocess.env.PATH.split(path.delimiter)\n// Returns: ['C:\\\\Windows\\\\system32', 'C:\\\\Windows', 'C:\\\\Program Files\\\\node\\\\']\n</pre> <h2 id=\"path_path_dirname_path\">path.dirname(path)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>Passing a non-string as the <code>path</code> argument will throw now.</p> </td>\n</tr> <tr>\n<td>v0.1.16</td> <td>\n<p><span>Added in: v0.1.16</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>The <code>path.dirname()</code> method returns the directory name of a <code>path</code>, similar to the Unix <code>dirname</code> command. Trailing directory separators are ignored, see <a href=\"#path_path_sep\"><code>path.sep</code></a>.</p> <p>For example:</p> <pre data-language=\"js\">path.dirname('/foo/bar/baz/asdf/quux')\n// Returns: '/foo/bar/baz/asdf'\n</pre> <p>A <a href=\"errors#errors_class_typeerror\"><code>TypeError</code></a> is thrown if <code>path</code> is not a string.</p> <h2 id=\"path_path_extname_path\">path.extname(path)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>Passing a non-string as the <code>path</code> argument will throw now.</p> </td>\n</tr> <tr>\n<td>v0.1.25</td> <td>\n<p><span>Added in: v0.1.25</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>The <code>path.extname()</code> method returns the extension of the <code>path</code>, from the last occurrence of the <code>.</code> (period) character to end of string in the last portion of the <code>path</code>. If there is no <code>.</code> in the last portion of the <code>path</code>, or if the first character of the basename of <code>path</code> (see <code>path.basename()</code>) is <code>.</code>, then an empty string is returned.</p> <p>For example:</p> <pre data-language=\"js\">path.extname('index.html')\n// Returns: '.html'\n\npath.extname('index.coffee.md')\n// Returns: '.md'\n\npath.extname('index.')\n// Returns: '.'\n\npath.extname('index')\n// Returns: ''\n\npath.extname('.index')\n// Returns: ''\n</pre> <p>A <a href=\"errors#errors_class_typeerror\"><code>TypeError</code></a> is thrown if <code>path</code> is not a string.</p> <h2 id=\"path_path_format_pathobject\">path.format(pathObject)</h2> <div class=\"api_metadata\"> <span>Added in: v0.11.15</span> </div>\n<ul> <li>\n<code>pathObject</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>dir</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>root</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>base</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>ext</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> </li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>The <code>path.format()</code> method returns a path string from an object. This is the opposite of <a href=\"#path_path_parse_path\"><code>path.parse()</code></a>.</p> <p>When providing properties to the <code>pathObject</code> remember that there are combinations where one property has priority over another:</p> <ul> <li>\n<code>pathObject.root</code> is ignored if <code>pathObject.dir</code> is provided</li> <li>\n<code>pathObject.ext</code> and <code>pathObject.name</code> are ignored if <code>pathObject.base</code> exists</li> </ul> <p>For example, on POSIX:</p> <pre data-language=\"js\">// If `dir`, `root` and `base` are provided,\n// `${dir}${path.sep}${base}`\n// will be returned. `root` is ignored.\npath.format({\n  root: '/ignored',\n  dir: '/home/user/dir',\n  base: 'file.txt'\n});\n// Returns: '/home/user/dir/file.txt'\n\n// `root` will be used if `dir` is not specified.\n// If only `root` is provided or `dir` is equal to `root` then the\n// platform separator will not be included. `ext` will be ignored.\npath.format({\n  root: '/',\n  base: 'file.txt',\n  ext: 'ignored'\n});\n// Returns: '/file.txt'\n\n// `name` + `ext` will be used if `base` is not specified.\npath.format({\n  root: '/',\n  name: 'file',\n  ext: '.txt'\n});\n// Returns: '/file.txt'\n</pre> <p>On Windows:</p> <pre data-language=\"js\">path.format({\n  dir: 'C:\\\\path\\\\dir',\n  base: 'file.txt'\n});\n// Returns: 'C:\\\\path\\\\dir\\\\file.txt'\n</pre> <h2 id=\"path_path_isabsolute_path\">path.isAbsolute(path)</h2> <div class=\"api_metadata\"> <span>Added in: v0.11.2</span> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a>\n</li> </ul> <p>The <code>path.isAbsolute()</code> method determines if <code>path</code> is an absolute path.</p> <p>If the given <code>path</code> is a zero-length string, <code>false</code> will be returned.</p> <p>For example on POSIX:</p> <pre data-language=\"js\">path.isAbsolute('/foo/bar') // true\npath.isAbsolute('/baz/..')  // true\npath.isAbsolute('qux/')     // false\npath.isAbsolute('.')        // false\n</pre> <p>On Windows:</p> <pre data-language=\"js\">path.isAbsolute('//server')    // true\npath.isAbsolute('\\\\\\\\server')  // true\npath.isAbsolute('C:/foo/..')   // true\npath.isAbsolute('C:\\\\foo\\\\..') // true\npath.isAbsolute('bar\\\\baz')    // false\npath.isAbsolute('bar/baz')     // false\npath.isAbsolute('.')           // false\n</pre> <p>A <a href=\"errors#errors_class_typeerror\"><code>TypeError</code></a> is thrown if <code>path</code> is not a string.</p> <h2 id=\"path_path_join_paths\">path.join([...paths])</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.16</span> </div>\n<ul> <li>\n<code>...paths</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> A sequence of path segments</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>The <code>path.join()</code> method joins all given <code>path</code> segments together using the platform specific separator as a delimiter, then normalizes the resulting path.</p> <p>Zero-length <code>path</code> segments are ignored. If the joined path string is a zero-length string then <code>'.'</code> will be returned, representing the current working directory.</p> <p>For example:</p> <pre data-language=\"js\">path.join('/foo', 'bar', 'baz/asdf', 'quux', '..')\n// Returns: '/foo/bar/baz/asdf'\n\npath.join('foo', {}, 'bar')\n// throws 'TypeError: Path must be a string. Received {}'\n</pre> <p>A <a href=\"errors#errors_class_typeerror\"><code>TypeError</code></a> is thrown if any of the path segments is not a string.</p> <h2 id=\"path_path_normalize_path\">path.normalize(path)</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.23</span> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>The <code>path.normalize()</code> method normalizes the given <code>path</code>, resolving <code>'..'</code> and <code>'.'</code> segments.</p> <p>When multiple, sequential path segment separation characters are found (e.g. <code>/</code> on POSIX and <code>\\</code> on Windows), they are replaced by a single instance of the platform specific path segment separator. Trailing separators are preserved.</p> <p>If the <code>path</code> is a zero-length string, <code>'.'</code> is returned, representing the current working directory.</p> <p>For example on POSIX:</p> <pre data-language=\"js\">path.normalize('/foo/bar//baz/asdf/quux/..')\n// Returns: '/foo/bar/baz/asdf'\n</pre> <p>On Windows:</p> <pre data-language=\"js\">path.normalize('C:\\\\temp\\\\\\\\foo\\\\bar\\\\..\\\\')\n// Returns: 'C:\\\\temp\\\\foo\\\\'\n</pre> <p>A <a href=\"errors#errors_class_typeerror\"><code>TypeError</code></a> is thrown if <code>path</code> is not a string.</p> <h2 id=\"path_path_parse_path\">path.parse(path)</h2> <div class=\"api_metadata\"> <span>Added in: v0.11.15</span> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> </ul> <p>The <code>path.parse()</code> method returns an object whose properties represent significant elements of the <code>path</code>. Trailing directory separators are ignored, see <a href=\"#path_path_sep\"><code>path.sep</code></a>.</p> <p>The returned object will have the following properties:</p> <ul> <li>\n<code>root</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>dir</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>base</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>ext</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>For example on POSIX:</p> <pre data-language=\"js\">path.parse('/home/user/dir/file.txt')\n// Returns:\n// { root: '/',\n//   dir: '/home/user/dir',\n//   base: 'file.txt',\n//   ext: '.txt',\n//   name: 'file' }\n</pre> <pre data-language=\"text\">┌─────────────────────┬────────────┐\n│          dir        │    base    │\n├──────┬              ├──────┬─────┤\n│ root │              │ name │ ext │\n\"  /    home/user/dir / file  .txt \"\n└──────┴──────────────┴──────┴─────┘\n(all spaces in the \"\" line should be ignored -- they are purely for formatting)\n</pre> <p>On Windows:</p> <pre data-language=\"js\">path.parse('C:\\\\path\\\\dir\\\\file.txt')\n// Returns:\n// { root: 'C:\\\\',\n//   dir: 'C:\\\\path\\\\dir',\n//   base: 'file.txt',\n//   ext: '.txt',\n//   name: 'file' }\n</pre> <pre data-language=\"text\">┌─────────────────────┬────────────┐\n│          dir        │    base    │\n├──────┬              ├──────┬─────┤\n│ root │              │ name │ ext │\n\" C:\\      path\\dir   \\ file  .txt \"\n└──────┴──────────────┴──────┴─────┘\n(all spaces in the \"\" line should be ignored -- they are purely for formatting)\n</pre> <p>A <a href=\"errors#errors_class_typeerror\"><code>TypeError</code></a> is thrown if <code>path</code> is not a string.</p> <h2 id=\"path_path_posix\">path.posix</h2> <div class=\"api_metadata\"> <span>Added in: v0.11.15</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li> </ul> <p>The <code>path.posix</code> property provides access to POSIX specific implementations of the <code>path</code> methods.</p> <h2 id=\"path_path_relative_from_to\">path.relative(from, to)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.8.0</td> <td>\n<p>On Windows, the leading slashes for UNC paths are now included in the return value.</p> </td>\n</tr> <tr>\n<td>v0.5.0</td> <td>\n<p><span>Added in: v0.5.0</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>from</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>to</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>The <code>path.relative()</code> method returns the relative path from <code>from</code> to <code>to</code>. If <code>from</code> and <code>to</code> each resolve to the same path (after calling <code>path.resolve()</code> on each), a zero-length string is returned.</p> <p>If a zero-length string is passed as <code>from</code> or <code>to</code>, the current working directory will be used instead of the zero-length strings.</p> <p>For example on POSIX:</p> <pre data-language=\"js\">path.relative('/data/orandea/test/aaa', '/data/orandea/impl/bbb')\n// Returns: '../../impl/bbb'\n</pre> <p>On Windows:</p> <pre data-language=\"js\">path.relative('C:\\\\orandea\\\\test\\\\aaa', 'C:\\\\orandea\\\\impl\\\\bbb')\n// Returns: '..\\\\..\\\\impl\\\\bbb'\n</pre> <p>A <a href=\"errors#errors_class_typeerror\"><code>TypeError</code></a> is thrown if neither <code>from</code> nor <code>to</code> is a string.</p> <h2 id=\"path_path_resolve_paths\">path.resolve([...paths])</h2> <div class=\"api_metadata\"> <span>Added in: v0.3.4</span> </div>\n<ul> <li>\n<code>...paths</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> A sequence of paths or path segments</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>The <code>path.resolve()</code> method resolves a sequence of paths or path segments into an absolute path.</p> <p>The given sequence of paths is processed from right to left, with each subsequent <code>path</code> prepended until an absolute path is constructed. For instance, given the sequence of path segments: <code>/foo</code>, <code>/bar</code>, <code>baz</code>, calling <code>path.resolve('/foo', '/bar', 'baz')</code> would return <code>/bar/baz</code>.</p> <p>If after processing all given <code>path</code> segments an absolute path has not yet been generated, the current working directory is used.</p> <p>The resulting path is normalized and trailing slashes are removed unless the path is resolved to the root directory.</p> <p>Zero-length <code>path</code> segments are ignored.</p> <p>If no <code>path</code> segments are passed, <code>path.resolve()</code> will return the absolute path of the current working directory.</p> <p>For example:</p> <pre data-language=\"js\">path.resolve('/foo/bar', './baz')\n// Returns: '/foo/bar/baz'\n\npath.resolve('/foo/bar', '/tmp/file/')\n// Returns: '/tmp/file'\n\npath.resolve('wwwroot', 'static_files/png/', '../gif/image.gif')\n// if the current working directory is /home/myself/node,\n// this returns '/home/myself/node/wwwroot/static_files/gif/image.gif'\n</pre> <p>A <a href=\"errors#errors_class_typeerror\"><code>TypeError</code></a> is thrown if any of the arguments is not a string.</p> <h2 id=\"path_path_sep\">path.sep</h2> <div class=\"api_metadata\"> <span>Added in: v0.7.9</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> <p>Provides the platform-specific path segment separator:</p> <ul> <li>\n<code>\\</code> on Windows</li> <li>\n<code>/</code> on POSIX</li> </ul> <p>For example on POSIX:</p> <pre data-language=\"js\">'foo/bar/baz'.split(path.sep)\n// Returns: ['foo', 'bar', 'baz']\n</pre> <p>On Windows:</p> <pre data-language=\"js\">'foo\\\\bar\\\\baz'.split(path.sep)\n// Returns: ['foo', 'bar', 'baz']\n</pre> <p><em>Note</em>: On Windows, both the forward slash (<code>/</code>) and backward slash (<code>\\</code>) are accepted as path segment separators; however, the <code>path</code> methods only add backward slashes (<code>\\</code>).</p> <h2 id=\"path_path_win32\">path.win32</h2> <div class=\"api_metadata\"> <span>Added in: v0.11.15</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li> </ul> <p>The <code>path.win32</code> property provides access to Windows-specific implementations of the <code>path</code> methods.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/path.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/path.html</a>\n  </p>\n</div>\n","v8":"<h1 id=\"v8_v8\">V8</h1> <p>The <code>v8</code> module exposes APIs that are specific to the version of <a href=\"https://developers.google.com/v8/\">V8</a> built into the Node.js binary. It can be accessed using:</p> <pre data-language=\"js\">const v8 = require('v8');\n</pre> <p><em>Note</em>: The APIs and implementation are subject to change at any time.</p> <h2 id=\"v8_v8_getheapspacestatistics\">v8.getHeapSpaceStatistics()</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.5.0</td> <td>\n<p>Support values exceeding the 32-bit unsigned integer range.</p> </td>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p><span>Added in: v6.0.0</span></p> </td>\n</tr> </table> </details> </div>\n<p>Returns statistics about the V8 heap spaces, i.e. the segments which make up the V8 heap. Neither the ordering of heap spaces, nor the availability of a heap space can be guaranteed as the statistics are provided via the V8 <a href=\"https://v8docs.nodesource.com/node-5.0/d5/dda/classv8_1_1_isolate.html#ac673576f24fdc7a33378f8f57e1d13a4\"><code>GetHeapSpaceStatistics</code></a> function and may change from one V8 version to the next.</p> <p>The value returned is an array of objects containing the following properties:</p> <ul> <li>\n<code>space_name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>space_size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> <li>\n<code>space_used_size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> <li>\n<code>space_available_size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> <li>\n<code>physical_space_size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> </ul> <p>For example:</p> <pre data-language=\"json\">[\n  {\n    \"space_name\": \"new_space\",\n    \"space_size\": 2063872,\n    \"space_used_size\": 951112,\n    \"space_available_size\": 80824,\n    \"physical_space_size\": 2063872\n  },\n  {\n    \"space_name\": \"old_space\",\n    \"space_size\": 3090560,\n    \"space_used_size\": 2493792,\n    \"space_available_size\": 0,\n    \"physical_space_size\": 3090560\n  },\n  {\n    \"space_name\": \"code_space\",\n    \"space_size\": 1260160,\n    \"space_used_size\": 644256,\n    \"space_available_size\": 960,\n    \"physical_space_size\": 1260160\n  },\n  {\n    \"space_name\": \"map_space\",\n    \"space_size\": 1094160,\n    \"space_used_size\": 201608,\n    \"space_available_size\": 0,\n    \"physical_space_size\": 1094160\n  },\n  {\n    \"space_name\": \"large_object_space\",\n    \"space_size\": 0,\n    \"space_used_size\": 0,\n    \"space_available_size\": 1490980608,\n    \"physical_space_size\": 0\n  }\n]\n</pre> <h2 id=\"v8_v8_getheapstatistics\">v8.getHeapStatistics()</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.5.0</td> <td>\n<p>Support values exceeding the 32-bit unsigned integer range.</p> </td>\n</tr> <tr>\n<td>v7.2.0</td> <td>\n<p>Added <code>malloced_memory</code>, <code>peak_malloced_memory</code>, and <code>does_zap_garbage</code>.</p> </td>\n</tr> <tr>\n<td>v1.0.0</td> <td>\n<p><span>Added in: v1.0.0</span></p> </td>\n</tr> </table> </details> </div>\n<p>Returns an object with the following properties:</p> <ul> <li>\n<code>total_heap_size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> <li>\n<code>total_heap_size_executable</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> <li>\n<code>total_physical_size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> <li>\n<code>total_available_size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> <li>\n<code>used_heap_size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> <li>\n<code>heap_size_limit</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> <li>\n<code>malloced_memory</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> <li>\n<code>peak_malloced_memory</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> <li>\n<code>does_zap_garbage</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> </ul> <p><code>does_zap_garbage</code> is a 0/1 boolean, which signifies whether the <code>--zap_code_space</code> option is enabled or not. This makes V8 overwrite heap garbage with a bit pattern. The RSS footprint (resident memory set) gets bigger because it continuously touches all heap pages and that makes them less likely to get swapped out by the operating system.</p> <p>For example:</p> <pre data-language=\"js\">{\n  total_heap_size: 7326976,\n  total_heap_size_executable: 4194304,\n  total_physical_size: 7326976,\n  total_available_size: 1152656,\n  used_heap_size: 3476208,\n  heap_size_limit: 1535115264,\n  malloced_memory: 16384,\n  peak_malloced_memory: 1127496,\n  does_zap_garbage: 0\n}\n</pre> <h2 id=\"v8_v8_setflagsfromstring_string\">v8.setFlagsFromString(string)</h2> <div class=\"api_metadata\"> <span>Added in: v1.0.0</span> </div>\n<p>The <code>v8.setFlagsFromString()</code> method can be used to programmatically set V8 command line flags. This method should be used with care. Changing settings after the VM has started may result in unpredictable behavior, including crashes and data loss; or it may simply do nothing.</p> <p>The V8 options available for a version of Node.js may be determined by running <code>node --v8-options</code>. An unofficial, community-maintained list of options and their effects is available <a href=\"https://github.com/thlorenz/v8-flags/blob/master/flags-0.11.md\">here</a>.</p> <p>Usage:</p> <pre data-language=\"js\">// Print GC events to stdout for one minute.\nconst v8 = require('v8');\nv8.setFlagsFromString('--trace_gc');\nsetTimeout(function() { v8.setFlagsFromString('--notrace_gc'); }, 60e3);\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/v8.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/v8.html</a>\n  </p>\n</div>\n","repl":"<h1 id=\"repl_repl\">REPL</h1> <div class=\"api_stability api_stability_2\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</div>\n<p>The <code>repl</code> module provides a Read-Eval-Print-Loop (REPL) implementation that is available both as a standalone program or includible in other applications. It can be accessed using:</p> <pre data-language=\"js\">const repl = require('repl');\n</pre> <h2 id=\"repl_design_and_features\">Design and Features</h2> <p>The <code>repl</code> module exports the <code>repl.REPLServer</code> class. While running, instances of <code>repl.REPLServer</code> will accept individual lines of user input, evaluate those according to a user-defined evaluation function, then output the result. Input and output may be from <code>stdin</code> and <code>stdout</code>, respectively, or may be connected to any Node.js <a href=\"stream\">stream</a>.</p> <p>Instances of <code>repl.REPLServer</code> support automatic completion of inputs, simplistic Emacs-style line editing, multi-line inputs, ANSI-styled output, saving and restoring current REPL session state, error recovery, and customizable evaluation functions.</p> <h3 id=\"repl_commands_and_special_keys\">Commands and Special Keys</h3> <p>The following special commands are supported by all REPL instances:</p> <ul> <li>\n<code>.break</code> - When in the process of inputting a multi-line expression, entering the <code>.break</code> command (or pressing the <code>&lt;ctrl&gt;-C</code> key combination) will abort further input or processing of that expression.</li> <li>\n<code>.clear</code> - Resets the REPL <code>context</code> to an empty object and clears any multi-line expression currently being input.</li> <li>\n<code>.exit</code> - Close the I/O stream, causing the REPL to exit.</li> <li>\n<code>.help</code> - Show this list of special commands.</li> <li>\n<code>.save</code> - Save the current REPL session to a file: <code>&gt; .save ./file/to/save.js</code>\n</li> <li>\n<code>.load</code> - Load a file into the current REPL session. <code>&gt; .load ./file/to/load.js</code>\n</li> <li>\n<code>.editor</code> - Enter editor mode (<code>&lt;ctrl&gt;-D</code> to finish, <code>&lt;ctrl&gt;-C</code> to cancel)</li> </ul> <pre data-language=\"js\">&gt; .editor\n// Entering editor mode (^D to finish, ^C to cancel)\nfunction welcome(name) {\n  return `Hello ${name}!`;\n}\n\nwelcome('Node.js User');\n\n// ^D\n'Hello Node.js User!'\n&gt;\n</pre> <p>The following key combinations in the REPL have these special effects:</p> <ul> <li>\n<code>&lt;ctrl&gt;-C</code> - When pressed once, has the same effect as the <code>.break</code> command. When pressed twice on a blank line, has the same effect as the <code>.exit</code> command.</li> <li>\n<code>&lt;ctrl&gt;-D</code> - Has the same effect as the <code>.exit</code> command.</li> <li>\n<code>&lt;tab&gt;</code> - When pressed on a blank line, displays global and local(scope) variables. When pressed while entering other input, displays relevant autocompletion options.</li> </ul> <h3 id=\"repl_default_evaluation\">Default Evaluation</h3> <p>By default, all instances of <code>repl.REPLServer</code> use an evaluation function that evaluates JavaScript expressions and provides access to Node.js' built-in modules. This default behavior can be overridden by passing in an alternative evaluation function when the <code>repl.REPLServer</code> instance is created.</p> <h4 id=\"repl_javascript_expressions\">JavaScript Expressions</h4> <p>The default evaluator supports direct evaluation of JavaScript expressions:</p> <pre data-language=\"js\">&gt; 1 + 1\n2\n&gt; const m = 2\nundefined\n&gt; m + 1\n3\n</pre> <p>Unless otherwise scoped within blocks or functions, variables declared either implicitly or using the <code>const</code>, <code>let</code>, or <code>var</code> keywords are declared at the global scope.</p> <h4 id=\"repl_global_and_local_scope\">Global and Local Scope</h4> <p>The default evaluator provides access to any variables that exist in the global scope. It is possible to expose a variable to the REPL explicitly by assigning it to the <code>context</code> object associated with each <code>REPLServer</code>. For example:</p> <pre data-language=\"js\">const repl = require('repl');\nconst msg = 'message';\n\nrepl.start('&gt; ').context.m = msg;\n</pre> <p>Properties in the <code>context</code> object appear as local within the REPL:</p> <pre data-language=\"js\">$ node repl_test.js\n&gt; m\n'message'\n</pre> <p>It is important to note that context properties are <em>not</em> read-only by default. To specify read-only globals, context properties must be defined using <code>Object.defineProperty()</code>:</p> <pre data-language=\"js\">const repl = require('repl');\nconst msg = 'message';\n\nconst r = repl.start('&gt; ');\nObject.defineProperty(r.context, 'm', {\n  configurable: false,\n  enumerable: true,\n  value: msg\n});\n</pre> <h4 id=\"repl_accessing_core_node_js_modules\">Accessing Core Node.js Modules</h4> <p>The default evaluator will automatically load Node.js core modules into the REPL environment when used. For instance, unless otherwise declared as a global or scoped variable, the input <code>fs</code> will be evaluated on-demand as <code>global.fs = require('fs')</code>.</p> <pre data-language=\"js\">&gt; fs.createReadStream('./some/file');\n</pre> <h4 id=\"repl_assignment_of_the_underscore_variable\">Assignment of the <code>_</code> (underscore) variable</h4> <p>The default evaluator will, by default, assign the result of the most recently evaluated expression to the special variable <code>_</code> (underscore). Explicitly setting <code>_</code> to a value will disable this behavior.</p> <pre data-language=\"js\">&gt; [ 'a', 'b', 'c' ]\n[ 'a', 'b', 'c' ]\n&gt; _.length\n3\n&gt; _ += 1\nExpression assignment to _ now disabled.\n4\n&gt; 1 + 1\n2\n&gt; _\n4\n</pre> <h3 id=\"repl_custom_evaluation_functions\">Custom Evaluation Functions</h3> <p>When a new <code>repl.REPLServer</code> is created, a custom evaluation function may be provided. This can be used, for instance, to implement fully customized REPL applications.</p> <p>The following illustrates a hypothetical example of a REPL that performs translation of text from one language to another:</p> <pre data-language=\"js\">const repl = require('repl');\nconst Translator = require('translator').Translator;\n\nconst myTranslator = new Translator('en', 'fr');\n\nfunction myEval(cmd, context, filename, callback) {\n  callback(null, myTranslator.translate(cmd));\n}\n\nrepl.start({prompt: '&gt; ', eval: myEval});\n</pre> <h4 id=\"repl_recoverable_errors\">Recoverable Errors</h4> <p>As a user is typing input into the REPL prompt, pressing the <code>&lt;enter&gt;</code> key will send the current line of input to the <code>eval</code> function. In order to support multi-line input, the eval function can return an instance of <code>repl.Recoverable</code> to the provided callback function:</p> <pre data-language=\"js\">function myEval(cmd, context, filename, callback) {\n  let result;\n  try {\n    result = vm.runInThisContext(cmd);\n  } catch (e) {\n    if (isRecoverableError(e)) {\n      return callback(new repl.Recoverable(e));\n    }\n  }\n  callback(null, result);\n}\n\nfunction isRecoverableError(error) {\n  if (error.name === 'SyntaxError') {\n    return /^(Unexpected end of input|Unexpected token)/.test(error.message);\n  }\n  return false;\n}\n</pre> <h3 id=\"repl_customizing_repl_output\">Customizing REPL Output</h3> <p>By default, <code>repl.REPLServer</code> instances format output using the <a href=\"util#util_util_inspect_object_options\"><code>util.inspect()</code></a> method before writing the output to the provided Writable stream (<code>process.stdout</code> by default). The <code>useColors</code> boolean option can be specified at construction to instruct the default writer to use ANSI style codes to colorize the output from the <code>util.inspect()</code> method.</p> <p>It is possible to fully customize the output of a <code>repl.REPLServer</code> instance by passing a new function in using the <code>writer</code> option on construction. The following example, for instance, simply converts any input text to upper case:</p> <pre data-language=\"js\">const repl = require('repl');\n\nconst r = repl.start({prompt: '&gt; ', eval: myEval, writer: myWriter});\n\nfunction myEval(cmd, context, filename, callback) {\n  callback(null, cmd);\n}\n\nfunction myWriter(output) {\n  return output.toUpperCase();\n}\n</pre> <h2 id=\"repl_class_replserver\">Class: REPLServer</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.91</span> </div>\n<p>The <code>repl.REPLServer</code> class inherits from the <a href=\"readline#readline_class_interface\"><code>readline.Interface</code></a> class. Instances of <code>repl.REPLServer</code> are created using the <code>repl.start()</code> method and <em>should not</em> be created directly using the JavaScript <code>new</code> keyword.</p> <h3 id=\"repl_event_exit\">Event: 'exit'</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.7</span> </div>\n<p>The <code>'exit'</code> event is emitted when the REPL is exited either by receiving the <code>.exit</code> command as input, the user pressing <code>&lt;ctrl&gt;-C</code> twice to signal <code>SIGINT</code>, or by pressing <code>&lt;ctrl&gt;-D</code> to signal <code>'end'</code> on the input stream. The listener callback is invoked without any arguments.</p> <pre data-language=\"js\">replServer.on('exit', () =&gt; {\n  console.log('Received \"exit\" event from repl!');\n  process.exit();\n});\n</pre> <h3 id=\"repl_event_reset\">Event: 'reset'</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.0</span> </div>\n<p>The <code>'reset'</code> event is emitted when the REPL's context is reset. This occurs whenever the <code>.clear</code> command is received as input <em>unless</em> the REPL is using the default evaluator and the <code>repl.REPLServer</code> instance was created with the <code>useGlobal</code> option set to <code>true</code>. The listener callback will be called with a reference to the <code>context</code> object as the only argument.</p> <p>This can be used primarily to re-initialize REPL context to some pre-defined state as illustrated in the following simple example:</p> <pre data-language=\"js\">const repl = require('repl');\n\nfunction initializeContext(context) {\n  context.m = 'test';\n}\n\nconst r = repl.start({prompt: '&gt; '});\ninitializeContext(r.context);\n\nr.on('reset', initializeContext);\n</pre> <p>When this code is executed, the global <code>'m'</code> variable can be modified but then reset to its initial value using the <code>.clear</code> command:</p> <pre data-language=\"js\">$ ./node example.js\n&gt; m\n'test'\n&gt; m = 1\n1\n&gt; m\n1\n&gt; .clear\nClearing context...\n&gt; m\n'test'\n&gt;\n</pre> <h3 id=\"repl_replserver_definecommand_keyword_cmd\">replServer.defineCommand(keyword, cmd)</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.0</span> </div>\n<ul> <li>\n<code>keyword</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The command keyword (<em>without</em> a leading <code>.</code> character).</li> <li>\n<code>cmd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The function to invoke when the command is processed.</li> </ul> <p>The <code>replServer.defineCommand()</code> method is used to add new <code>.</code>-prefixed commands to the REPL instance. Such commands are invoked by typing a <code>.</code> followed by the <code>keyword</code>. The <code>cmd</code> is either a Function or an object with the following properties:</p> <ul> <li>\n<code>help</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Help text to be displayed when <code>.help</code> is entered (Optional).</li> <li>\n<code>action</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The function to execute, optionally accepting a single string argument.</li> </ul> <p>The following example shows two new commands added to the REPL instance:</p> <pre data-language=\"js\">const repl = require('repl');\n\nconst replServer = repl.start({prompt: '&gt; '});\nreplServer.defineCommand('sayhello', {\n  help: 'Say hello',\n  action(name) {\n    this.lineParser.reset();\n    this.bufferedCommand = '';\n    console.log(`Hello, ${name}!`);\n    this.displayPrompt();\n  }\n});\nreplServer.defineCommand('saybye', function saybye() {\n  console.log('Goodbye!');\n  this.close();\n});\n</pre> <p>The new commands can then be used from within the REPL instance:</p> <pre data-language=\"txt\">&gt; .sayhello Node.js User\nHello, Node.js User!\n&gt; .saybye\nGoodbye!\n</pre> <h3 id=\"repl_replserver_displayprompt_preservecursor\">replServer.displayPrompt([preserveCursor])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.91</span> </div>\n<ul> <li>\n<code>preserveCursor</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a>\n</li> </ul> <p>The <code>replServer.displayPrompt()</code> method readies the REPL instance for input from the user, printing the configured <code>prompt</code> to a new line in the <code>output</code> and resuming the <code>input</code> to accept new input.</p> <p>When multi-line input is being entered, an ellipsis is printed rather than the 'prompt'.</p> <p>When <code>preserveCursor</code> is <code>true</code>, the cursor placement will not be reset to <code>0</code>.</p> <p>The <code>replServer.displayPrompt</code> method is primarily intended to be called from within the action function for commands registered using the <code>replServer.defineCommand()</code> method.</p> <h2 id=\"repl_repl_start_options\">repl.start([options])</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v5.8.0</td> <td>\n<p>The <code>options</code> parameter is optional now.</p> </td>\n</tr> <tr>\n<td>v0.1.91</td> <td>\n<p><span>Added in: v0.1.91</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a><ul> <li>\n<code>prompt</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The input prompt to display. Defaults to <code>&gt;</code> (with a trailing space).</li> <li>\n<code>input</code> <span class=\"type\">&lt;Readable&gt;</span> The Readable stream from which REPL input will be read. Defaults to <code>process.stdin</code>.</li> <li>\n<code>output</code> <span class=\"type\">&lt;Writable&gt;</span> The Writable stream to which REPL output will be written. Defaults to <code>process.stdout</code>.</li> <li>\n<code>terminal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If <code>true</code>, specifies that the <code>output</code> should be treated as a a TTY terminal, and have ANSI/VT100 escape codes written to it. Defaults to checking the value of the <code>isTTY</code> property on the <code>output</code> stream upon instantiation.</li> <li>\n<code>eval</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The function to be used when evaluating each given line of input. Defaults to an async wrapper for the JavaScript <code>eval()</code> function. An <code>eval</code> function can error with <code>repl.Recoverable</code> to indicate the input was incomplete and prompt for additional lines.</li> <li>\n<code>useColors</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If <code>true</code>, specifies that the default <code>writer</code> function should include ANSI color styling to REPL output. If a custom <code>writer</code> function is provided then this has no effect. Defaults to the REPL instances <code>terminal</code> value.</li> <li>\n<code>useGlobal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If <code>true</code>, specifies that the default evaluation function will use the JavaScript <code>global</code> as the context as opposed to creating a new separate context for the REPL instance. Defaults to <code>false</code>.</li> <li>\n<code>ignoreUndefined</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If <code>true</code>, specifies that the default writer will not output the return value of a command if it evaluates to <code>undefined</code>. Defaults to <code>false</code>.</li> <li>\n<code>writer</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The function to invoke to format the output of each command before writing to <code>output</code>. Defaults to <a href=\"util#util_util_inspect_object_options\"><code>util.inspect()</code></a>.</li> <li>\n<code>completer</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> An optional function used for custom Tab auto completion. See <a href=\"readline#readline_use_of_the_completer_function\"><code>readline.InterfaceCompleter</code></a> for an example.</li> <li>\n<code>replMode</code> - A flag that specifies whether the default evaluator executes all JavaScript commands in strict mode, default mode, or a hybrid mode (\"magic\" mode.) Acceptable values are:<ul> <li>\n<code>repl.REPL_MODE_SLOPPY</code> - evaluates expressions in sloppy mode.</li> <li>\n<code>repl.REPL_MODE_STRICT</code> - evaluates expressions in strict mode. This is equivalent to prefacing every repl statement with <code>'use strict'</code>.</li> <li>\n<code>repl.REPL_MODE_MAGIC</code> - attempt to evaluates expressions in default mode. If expressions fail to parse, re-try in strict mode.</li> </ul> </li> <li>\n<code>breakEvalOnSigint</code> - Stop evaluating the current piece of code when <code>SIGINT</code> is received, i.e. <code>Ctrl+C</code> is pressed. This cannot be used together with a custom <code>eval</code> function. Defaults to <code>false</code>.</li> </ul> </li> </ul> <p>The <code>repl.start()</code> method creates and starts a <code>repl.REPLServer</code> instance.</p> <p>If <code>options</code> is a string, then it specifies the input prompt:</p> <pre data-language=\"js\">const repl = require('repl');\n\n// a Unix style prompt\nrepl.start('$ ');\n</pre> <h2 id=\"repl_the_node_js_repl\">The Node.js REPL</h2> <p>Node.js itself uses the <code>repl</code> module to provide its own interactive interface for executing JavaScript. This can be used by executing the Node.js binary without passing any arguments (or by passing the <code>-i</code> argument):</p> <pre data-language=\"js\">$ node\n&gt; const a = [1, 2, 3];\nundefined\n&gt; a\n[ 1, 2, 3 ]\n&gt; a.forEach((v) =&gt; {\n...   console.log(v);\n...   });\n1\n2\n3\n</pre> <h3 id=\"repl_environment_variable_options\">Environment Variable Options</h3> <p>Various behaviors of the Node.js REPL can be customized using the following environment variables:</p> <ul> <li>\n<code>NODE_REPL_HISTORY</code> - When a valid path is given, persistent REPL history will be saved to the specified file rather than <code>.node_repl_history</code> in the user's home directory. Setting this value to <code>\"\"</code> will disable persistent REPL history. Whitespace will be trimmed from the value.</li> <li>\n<code>NODE_REPL_HISTORY_SIZE</code> - Defaults to <code>1000</code>. Controls how many lines of history will be persisted if history is available. Must be a positive number.</li> <li>\n<code>NODE_REPL_MODE</code> - May be any of <code>sloppy</code>, <code>strict</code>, or <code>magic</code>. Defaults to <code>magic</code>, which will automatically run \"strict mode only\" statements in strict mode.</li> </ul> <h3 id=\"repl_persistent_history\">Persistent History</h3> <p>By default, the Node.js REPL will persist history between <code>node</code> REPL sessions by saving inputs to a <code>.node_repl_history</code> file located in the user's home directory. This can be disabled by setting the environment variable <code>NODE_REPL_HISTORY=\"\"</code>.</p> <h4 id=\"repl_node_repl_history_file\">NODE_REPL_HISTORY_FILE</h4> <div class=\"api_metadata\"> <span>Added in: v2.0.0</span><span>Deprecated since: v3.0.0</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated: Use <code>NODE_REPL_HISTORY</code> instead.</div>\n<p>Previously in Node.js/io.js v2.x, REPL history was controlled by using a <code>NODE_REPL_HISTORY_FILE</code> environment variable, and the history was saved in JSON format. This variable has now been deprecated, and the old JSON REPL history file will be automatically converted to a simplified plain text format. This new file will be saved to either the user's home directory, or a directory defined by the <code>NODE_REPL_HISTORY</code> variable, as documented in the <a href=\"#repl_environment_variable_options\">Environment Variable Options</a>.</p> <h3 id=\"repl_using_the_node_js_repl_with_advanced_line_editors\">Using the Node.js REPL with advanced line-editors</h3> <p>For advanced line-editors, start Node.js with the environmental variable <code>NODE_NO_READLINE=1</code>. This will start the main and debugger REPL in canonical terminal settings which will allow you to use with <code>rlwrap</code>.</p> <p>For example, you could add this to your bashrc file:</p> <pre data-language=\"text\">alias node=\"env NODE_NO_READLINE=1 rlwrap node\"\n</pre> <h3 id=\"repl_starting_multiple_repl_instances_against_a_single_running_instance\">Starting multiple REPL instances against a single running instance</h3> <p>It is possible to create and run multiple REPL instances against a single running instance of Node.js that share a single <code>global</code> object but have separate I/O interfaces.</p> <p>The following example, for instance, provides separate REPLs on <code>stdin</code>, a Unix socket, and a TCP socket:</p> <pre data-language=\"js\">const net = require('net');\nconst repl = require('repl');\nlet connections = 0;\n\nrepl.start({\n  prompt: 'Node.js via stdin&gt; ',\n  input: process.stdin,\n  output: process.stdout\n});\n\nnet.createServer((socket) =&gt; {\n  connections += 1;\n  repl.start({\n    prompt: 'Node.js via Unix socket&gt; ',\n    input: socket,\n    output: socket\n  }).on('exit', () =&gt; {\n    socket.end();\n  });\n}).listen('/tmp/node-repl-sock');\n\nnet.createServer((socket) =&gt; {\n  connections += 1;\n  repl.start({\n    prompt: 'Node.js via TCP socket&gt; ',\n    input: socket,\n    output: socket\n  }).on('exit', () =&gt; {\n    socket.end();\n  });\n}).listen(5001);\n</pre> <p>Running this application from the command line will start a REPL on stdin. Other REPL clients may connect through the Unix socket or TCP socket. <code>telnet</code>, for instance, is useful for connecting to TCP sockets, while <code>socat</code> can be used to connect to both Unix and TCP sockets.</p> <p>By starting a REPL from a Unix socket-based server instead of stdin, it is possible to connect to a long-running Node.js process without restarting it.</p> <p>For an example of running a \"full-featured\" (<code>terminal</code>) REPL over a <code>net.Server</code> and <code>net.Socket</code> instance, see: <a href=\"https://gist.github.com/2209310\">https://gist.github.com/2209310</a></p> <p>For an example of running a REPL instance over <a href=\"https://curl.haxx.se/docs/manpage.html\">curl(1)</a>, see: <a href=\"https://gist.github.com/2053342\">https://gist.github.com/2053342</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/repl.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/repl.html</a>\n  </p>\n</div>\n","child_process":"<h1 id=\"child_process_child_process\">Child Process</h1> <div class=\"api_stability api_stability_2\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</div>\n<p>The <code>child_process</code> module provides the ability to spawn child processes in a manner that is similar, but not identical, to <a href=\"http://man7.org/linux/man-pages/man3/popen.3.html\">popen(3)</a>. This capability is primarily provided by the <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a> function:</p> <pre data-language=\"js\">const spawn = require('child_process').spawn;\nconst ls = spawn('ls', ['-lh', '/usr']);\n\nls.stdout.on('data', (data) =&gt; {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on('data', (data) =&gt; {\n  console.log(`stderr: ${data}`);\n});\n\nls.on('close', (code) =&gt; {\n  console.log(`child process exited with code ${code}`);\n});\n</pre> <p>By default, pipes for <code>stdin</code>, <code>stdout</code> and <code>stderr</code> are established between the parent Node.js process and the spawned child. It is possible to stream data through these pipes in a non-blocking way. <em>Note, however, that some programs use line-buffered I/O internally. While that does not affect Node.js, it can mean that data sent to the child process may not be immediately consumed.</em></p> <p>The <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a> method spawns the child process asynchronously, without blocking the Node.js event loop. The <a href=\"#child_process_child_process_spawnsync_command_args_options\"><code>child_process.spawnSync()</code></a> function provides equivalent functionality in a synchronous manner that blocks the event loop until the spawned process either exits or is terminated.</p> <p>For convenience, the <code>child_process</code> module provides a handful of synchronous and asynchronous alternatives to <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a> and <a href=\"#child_process_child_process_spawnsync_command_args_options\"><code>child_process.spawnSync()</code></a>. <em>Note that each of these alternatives are implemented on top of <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a> or <a href=\"#child_process_child_process_spawnsync_command_args_options\"><code>child_process.spawnSync()</code></a>.</em></p> <ul> <li>\n<a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a>: spawns a shell and runs a command within that shell, passing the <code>stdout</code> and <code>stderr</code> to a callback function when complete.</li> <li>\n<a href=\"#child_process_child_process_execfile_file_args_options_callback\"><code>child_process.execFile()</code></a>: similar to <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a> except that it spawns the command directly without first spawning a shell.</li> <li>\n<a href=\"#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a>: spawns a new Node.js process and invokes a specified module with an IPC communication channel established that allows sending messages between parent and child.</li> <li>\n<a href=\"#child_process_child_process_execsync_command_options\"><code>child_process.execSync()</code></a>: a synchronous version of <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a> that <em>will</em> block the Node.js event loop.</li> <li>\n<a href=\"#child_process_child_process_execfilesync_file_args_options\"><code>child_process.execFileSync()</code></a>: a synchronous version of <a href=\"#child_process_child_process_execfile_file_args_options_callback\"><code>child_process.execFile()</code></a> that <em>will</em> block the Node.js event loop.</li> </ul> <p>For certain use cases, such as automating shell scripts, the <a href=\"#child_process_synchronous_process_creation\">synchronous counterparts</a> may be more convenient. In many cases, however, the synchronous methods can have significant impact on performance due to stalling the event loop while spawned processes complete.</p> <h2 id=\"child_process_asynchronous_process_creation\">Asynchronous Process Creation</h2> <p>The <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a>, <a href=\"#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a>, <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a>, and <a href=\"#child_process_child_process_execfile_file_args_options_callback\"><code>child_process.execFile()</code></a> methods all follow the idiomatic asynchronous programming pattern typical of other Node.js APIs.</p> <p>Each of the methods returns a <a href=\"#child_process_child_process\"><code>ChildProcess</code></a> instance. These objects implement the Node.js <a href=\"events#events_class_eventemitter\"><code>EventEmitter</code></a> API, allowing the parent process to register listener functions that are called when certain events occur during the life cycle of the child process.</p> <p>The <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a> and <a href=\"#child_process_child_process_execfile_file_args_options_callback\"><code>child_process.execFile()</code></a> methods additionally allow for an optional <code>callback</code> function to be specified that is invoked when the child process terminates.</p> <h3 id=\"child_process_spawning_bat_and_cmd_files_on_windows\">Spawning <code>.bat</code> and <code>.cmd</code> files on Windows</h3> <p>The importance of the distinction between <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a> and <a href=\"#child_process_child_process_execfile_file_args_options_callback\"><code>child_process.execFile()</code></a> can vary based on platform. On Unix-type operating systems (Unix, Linux, OSX) <a href=\"#child_process_child_process_execfile_file_args_options_callback\"><code>child_process.execFile()</code></a> can be more efficient because it does not spawn a shell. On Windows, however, <code>.bat</code> and <code>.cmd</code> files are not executable on their own without a terminal, and therefore cannot be launched using <a href=\"#child_process_child_process_execfile_file_args_options_callback\"><code>child_process.execFile()</code></a>. When running on Windows, <code>.bat</code> and <code>.cmd</code> files can be invoked using <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a> with the <code>shell</code> option set, with <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a>, or by spawning <code>cmd.exe</code> and passing the <code>.bat</code> or <code>.cmd</code> file as an argument (which is what the <code>shell</code> option and <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a> do). In any case, if the script filename contains spaces it needs to be quoted.</p> <pre data-language=\"js\">// On Windows Only ...\nconst spawn = require('child_process').spawn;\nconst bat = spawn('cmd.exe', ['/c', 'my.bat']);\n\nbat.stdout.on('data', (data) =&gt; {\n  console.log(data.toString());\n});\n\nbat.stderr.on('data', (data) =&gt; {\n  console.log(data.toString());\n});\n\nbat.on('exit', (code) =&gt; {\n  console.log(`Child exited with code ${code}`);\n});\n</pre> <pre data-language=\"js\">// OR...\nconst exec = require('child_process').exec;\nexec('my.bat', (err, stdout, stderr) =&gt; {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  console.log(stdout);\n});\n\n// Script with spaces in the filename:\nconst bat = spawn('\"my script.cmd\"', ['a', 'b'], { shell: true });\n// or:\nexec('\"my script.cmd\" a b', (err, stdout, stderr) =&gt; {\n  // ...\n});\n</pre> <h3 id=\"child_process_child_process_exec_command_options_callback\">child_process.exec(command[, options][, callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<ul> <li>\n<code>command</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The command to run, with space-separated arguments</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>cwd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Current working directory of the child process</li> <li>\n<code>env</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Environment key-value pairs</li> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> (Default: <code>'utf8'</code>)</li> <li>\n<code>shell</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Shell to execute the command with (Default: <code>'/bin/sh'</code> on UNIX, <code>'cmd.exe'</code> on Windows, The shell should understand the <code>-c</code> switch on UNIX or <code>/d /s /c</code> on Windows. On Windows, command line parsing should be compatible with <code>cmd.exe</code>.)</li> <li>\n<code>timeout</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> (Default: <code>0</code>)</li> <li>\n<code>maxBuffer</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Largest amount of data in bytes allowed on stdout or stderr. (Default: <code>200*1024</code>) If exceeded, the child process is terminated. See caveat at <a href=\"#child_process_maxbuffer_and_unicode\"><code>maxBuffer</code> and Unicode</a>.</li> <li>\n<code>killSignal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> (Default: <code>'SIGTERM'</code>)</li> <li>\n<code>uid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the user identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setuid.2.html\">setuid(2)</a>.)</li> <li>\n<code>gid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the group identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setgid.2.html\">setgid(2)</a>.)</li> </ul> </li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> called with the output when process terminates<ul> <li>\n<code>error</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a>\n</li> <li>\n<code>stdout</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>stderr</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> </ul> </li> <li>Returns: <a href=\"child_process#child_process_class_childprocess\" class=\"type\">&lt;ChildProcess&gt;</a>\n</li> </ul> <p>Spawns a shell then executes the <code>command</code> within that shell, buffering any generated output.</p> <p><strong>Note: Never pass unsanitised user input to this function. Any input containing shell metacharacters may be used to trigger arbitrary command execution.</strong></p> <pre data-language=\"js\">const exec = require('child_process').exec;\nexec('cat *.js bad_file | wc -l', (error, stdout, stderr) =&gt; {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n  console.log(`stderr: ${stderr}`);\n});\n</pre> <p>If a <code>callback</code> function is provided, it is called with the arguments <code>(error, stdout, stderr)</code>. On success, <code>error</code> will be <code>null</code>. On error, <code>error</code> will be an instance of <a href=\"errors#errors_class_error\"><code>Error</code></a>. The <code>error.code</code> property will be the exit code of the child process while <code>error.signal</code> will be set to the signal that terminated the process. Any exit code other than <code>0</code> is considered to be an error.</p> <p>The <code>stdout</code> and <code>stderr</code> arguments passed to the callback will contain the stdout and stderr output of the child process. By default, Node.js will decode the output as UTF-8 and pass strings to the callback. The <code>encoding</code> option can be used to specify the character encoding used to decode the stdout and stderr output. If <code>encoding</code> is <code>'buffer'</code>, or an unrecognized character encoding, <code>Buffer</code> objects will be passed to the callback instead.</p> <p>The <code>options</code> argument may be passed as the second argument to customize how the process is spawned. The default options are:</p> <pre data-language=\"js\">const defaults = {\n  encoding: 'utf8',\n  timeout: 0,\n  maxBuffer: 200*1024,\n  killSignal: 'SIGTERM',\n  cwd: null,\n  env: null\n};\n</pre> <p>If <code>timeout</code> is greater than <code>0</code>, the parent will send the signal identified by the <code>killSignal</code> property (the default is <code>'SIGTERM'</code>) if the child runs longer than <code>timeout</code> milliseconds.</p> <p><em>Note: Unlike the <a href=\"http://man7.org/linux/man-pages/man3/exec.3.html\">exec(3)</a> POSIX system call, <code>child_process.exec()</code> does not replace the existing process and uses a shell to execute the command.</em></p> <h3 id=\"child_process_child_process_execfile_file_args_options_callback\">child_process.execFile(file[, args][, options][, callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.91</span> </div>\n<ul> <li>\n<code>file</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The name or path of the executable file to run</li> <li>\n<code>args</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> List of string arguments</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>cwd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Current working directory of the child process</li> <li>\n<code>env</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Environment key-value pairs</li> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> (Default: <code>'utf8'</code>)</li> <li>\n<code>timeout</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> (Default: <code>0</code>)</li> <li>\n<code>maxBuffer</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Largest amount of data in bytes allowed on stdout or stderr. (Default: <code>200*1024</code>) If exceeded, the child process is terminated. See caveat at <a href=\"#child_process_maxbuffer_and_unicode\"><code>maxBuffer</code> and Unicode</a>.</li> <li>\n<code>killSignal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> (Default: <code>'SIGTERM'</code>)</li> <li>\n<code>uid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the user identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setuid.2.html\">setuid(2)</a>.)</li> <li>\n<code>gid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the group identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setgid.2.html\">setgid(2)</a>.)</li> </ul> </li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> called with the output when process terminates<ul> <li>\n<code>error</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a>\n</li> <li>\n<code>stdout</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>stderr</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> </ul> </li> <li>Returns: <a href=\"child_process#child_process_class_childprocess\" class=\"type\">&lt;ChildProcess&gt;</a>\n</li> </ul> <p>The <code>child_process.execFile()</code> function is similar to <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a> except that it does not spawn a shell. Rather, the specified executable <code>file</code> is spawned directly as a new process making it slightly more efficient than <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a>.</p> <p>The same options as <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a> are supported. Since a shell is not spawned, behaviors such as I/O redirection and file globbing are not supported.</p> <pre data-language=\"js\">const execFile = require('child_process').execFile;\nconst child = execFile('node', ['--version'], (error, stdout, stderr) =&gt; {\n  if (error) {\n    throw error;\n  }\n  console.log(stdout);\n});\n</pre> <p>The <code>stdout</code> and <code>stderr</code> arguments passed to the callback will contain the stdout and stderr output of the child process. By default, Node.js will decode the output as UTF-8 and pass strings to the callback. The <code>encoding</code> option can be used to specify the character encoding used to decode the stdout and stderr output. If <code>encoding</code> is <code>'buffer'</code>, or an unrecognized character encoding, <code>Buffer</code> objects will be passed to the callback instead.</p> <h3 id=\"child_process_child_process_fork_modulepath_args_options\">child_process.fork(modulePath[, args][, options])</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.4.0</td> <td>\n<p>The <code>stdio</code> option is supported now.</p> </td>\n</tr> <tr>\n<td>v0.5.0</td> <td>\n<p><span>Added in: v0.5.0</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>modulePath</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The module to run in the child</li> <li>\n<code>args</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> List of string arguments</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>cwd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Current working directory of the child process</li> <li>\n<code>env</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Environment key-value pairs</li> <li>\n<code>execPath</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Executable used to create the child process</li> <li>\n<code>execArgv</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> List of string arguments passed to the executable (Default: <code>process.execArgv</code>)</li> <li>\n<code>silent</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If <code>true</code>, stdin, stdout, and stderr of the child will be piped to the parent, otherwise they will be inherited from the parent, see the <code>'pipe'</code> and <code>'inherit'</code> options for <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a>'s <a href=\"#child_process_options_stdio\"><code>stdio</code></a> for more details (Default: <code>false</code>)</li> <li>\n<code>stdio</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> Supports the array version of <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a>'s <a href=\"#child_process_options_stdio\"><code>stdio</code></a> option. When this option is provided, it overrides <code>silent</code>. The array must contain exactly one item with value <code>'ipc'</code> or an error will be thrown. For instance <code>[0, 1, 2, 'ipc']</code>.</li> <li>\n<code>uid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the user identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setuid.2.html\">setuid(2)</a>.)</li> <li>\n<code>gid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the group identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setgid.2.html\">setgid(2)</a>.)</li> </ul> </li> <li>Returns: <a href=\"child_process#child_process_class_childprocess\" class=\"type\">&lt;ChildProcess&gt;</a>\n</li> </ul> <p>The <code>child_process.fork()</code> method is a special case of <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a> used specifically to spawn new Node.js processes. Like <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a>, a <a href=\"#child_process_child_process\"><code>ChildProcess</code></a> object is returned. The returned <a href=\"#child_process_child_process\"><code>ChildProcess</code></a> will have an additional communication channel built-in that allows messages to be passed back and forth between the parent and child. See <a href=\"#child_process_child_send_message_sendhandle_options_callback\"><code>child.send()</code></a> for details.</p> <p>It is important to keep in mind that spawned Node.js child processes are independent of the parent with exception of the IPC communication channel that is established between the two. Each process has its own memory, with their own V8 instances. Because of the additional resource allocations required, spawning a large number of child Node.js processes is not recommended.</p> <p>By default, <code>child_process.fork()</code> will spawn new Node.js instances using the <a href=\"process#process_process_execpath\"><code>process.execPath</code></a> of the parent process. The <code>execPath</code> property in the <code>options</code> object allows for an alternative execution path to be used.</p> <p>Node.js processes launched with a custom <code>execPath</code> will communicate with the parent process using the file descriptor (fd) identified using the environment variable <code>NODE_CHANNEL_FD</code> on the child process. The input and output on this fd is expected to be line delimited JSON objects.</p> <p><em>Note: Unlike the <a href=\"http://man7.org/linux/man-pages/man2/fork.2.html\">fork(2)</a> POSIX system call, <code>child_process.fork()</code> does not clone the current process.</em></p> <h3 id=\"child_process_child_process_spawn_command_args_options\">child_process.spawn(command[, args][, options])</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.4.0</td> <td>\n<p>The <code>argv0</code> option is supported now.</p> </td>\n</tr> <tr>\n<td>v5.7.0</td> <td>\n<p>The <code>shell</code> option is supported now.</p> </td>\n</tr> <tr>\n<td>v0.1.90</td> <td>\n<p><span>Added in: v0.1.90</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>command</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The command to run</li> <li>\n<code>args</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> List of string arguments</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>cwd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Current working directory of the child process</li> <li>\n<code>env</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Environment key-value pairs</li> <li>\n<code>argv0</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Explicitly set the value of <code>argv[0]</code> sent to the child process. This will be set to <code>command</code> if not specified.</li> <li>\n<code>stdio</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Child's stdio configuration. (See <a href=\"#child_process_options_stdio\"><code>options.stdio</code></a>)</li> <li>\n<code>detached</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Prepare child to run independently of its parent process. Specific behavior depends on the platform, see <a href=\"#child_process_options_detached\"><code>options.detached</code></a>)</li> <li>\n<code>uid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the user identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setuid.2.html\">setuid(2)</a>.)</li> <li>\n<code>gid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the group identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setgid.2.html\">setgid(2)</a>.)</li> <li>\n<code>shell</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> If <code>true</code>, runs <code>command</code> inside of a shell. Uses <code>'/bin/sh'</code> on UNIX, and <code>'cmd.exe'</code> on Windows. A different shell can be specified as a string. The shell should understand the <code>-c</code> switch on UNIX, or <code>/d /s /c</code> on Windows. Defaults to <code>false</code> (no shell).</li> </ul> </li> <li>Returns: <a href=\"child_process#child_process_class_childprocess\" class=\"type\">&lt;ChildProcess&gt;</a>\n</li> </ul> <p>The <code>child_process.spawn()</code> method spawns a new process using the given <code>command</code>, with command line arguments in <code>args</code>. If omitted, <code>args</code> defaults to an empty array.</p> <p><strong>Note: If the <code>shell</code> option is enabled, do not pass unsanitised user input to this function. Any input containing shell metacharacters may be used to trigger arbitrary command execution.</strong></p> <p>A third argument may be used to specify additional options, with these defaults:</p> <pre data-language=\"js\">const defaults = {\n  cwd: undefined,\n  env: process.env\n};\n</pre> <p>Use <code>cwd</code> to specify the working directory from which the process is spawned. If not given, the default is to inherit the current working directory.</p> <p>Use <code>env</code> to specify environment variables that will be visible to the new process, the default is <a href=\"process#process_process_env\"><code>process.env</code></a>.</p> <p>Example of running <code>ls -lh /usr</code>, capturing <code>stdout</code>, <code>stderr</code>, and the exit code:</p> <pre data-language=\"js\">const spawn = require('child_process').spawn;\nconst ls = spawn('ls', ['-lh', '/usr']);\n\nls.stdout.on('data', (data) =&gt; {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on('data', (data) =&gt; {\n  console.log(`stderr: ${data}`);\n});\n\nls.on('close', (code) =&gt; {\n  console.log(`child process exited with code ${code}`);\n});\n</pre> <p>Example: A very elaborate way to run <code>ps ax | grep ssh</code></p> <pre data-language=\"js\">const spawn = require('child_process').spawn;\nconst ps = spawn('ps', ['ax']);\nconst grep = spawn('grep', ['ssh']);\n\nps.stdout.on('data', (data) =&gt; {\n  grep.stdin.write(data);\n});\n\nps.stderr.on('data', (data) =&gt; {\n  console.log(`ps stderr: ${data}`);\n});\n\nps.on('close', (code) =&gt; {\n  if (code !== 0) {\n    console.log(`ps process exited with code ${code}`);\n  }\n  grep.stdin.end();\n});\n\ngrep.stdout.on('data', (data) =&gt; {\n  console.log(data.toString());\n});\n\ngrep.stderr.on('data', (data) =&gt; {\n  console.log(`grep stderr: ${data}`);\n});\n\ngrep.on('close', (code) =&gt; {\n  if (code !== 0) {\n    console.log(`grep process exited with code ${code}`);\n  }\n});\n</pre> <p>Example of checking for failed exec:</p> <pre data-language=\"js\">const spawn = require('child_process').spawn;\nconst child = spawn('bad_command');\n\nchild.on('error', (err) =&gt; {\n  console.log('Failed to start child process.');\n});\n</pre> <p><em>Note: Certain platforms (OS X, Linux) will use the value of <code>argv[0]</code> for the process title while others (Windows, SunOS) will use <code>command</code>.</em></p> <p><em>Note: Node.js currently overwrites <code>argv[0]</code> with <code>process.execPath</code> on startup, so <code>process.argv[0]</code> in a Node.js child process will not match the <code>argv0</code> parameter passed to <code>spawn</code> from the parent, retrieve it with the <code>process.argv0</code> property instead.</em></p> <h4 id=\"child_process_options_detached\">options.detached</h4> <div class=\"api_metadata\"> <span>Added in: v0.7.10</span> </div>\n<p>On Windows, setting <code>options.detached</code> to <code>true</code> makes it possible for the child process to continue running after the parent exits. The child will have its own console window. <em>Once enabled for a child process, it cannot be disabled</em>.</p> <p>On non-Windows platforms, if <code>options.detached</code> is set to <code>true</code>, the child process will be made the leader of a new process group and session. Note that child processes may continue running after the parent exits regardless of whether they are detached or not. See <a href=\"http://man7.org/linux/man-pages/man2/setsid.2.html\">setsid(2)</a> for more information.</p> <p>By default, the parent will wait for the detached child to exit. To prevent the parent from waiting for a given <code>child</code>, use the <code>child.unref()</code> method. Doing so will cause the parent's event loop to not include the child in its reference count, allowing the parent to exit independently of the child, unless there is an established IPC channel between the child and parent.</p> <p>When using the <code>detached</code> option to start a long-running process, the process will not stay running in the background after the parent exits unless it is provided with a <code>stdio</code> configuration that is not connected to the parent. If the parent's <code>stdio</code> is inherited, the child will remain attached to the controlling terminal.</p> <p>Example of a long-running process, by detaching and also ignoring its parent <code>stdio</code> file descriptors, in order to ignore the parent's termination:</p> <pre data-language=\"js\">const spawn = require('child_process').spawn;\n\nconst child = spawn(process.argv[0], ['child_program.js'], {\n  detached: true,\n  stdio: 'ignore'\n});\n\nchild.unref();\n</pre> <p>Alternatively one can redirect the child process' output into files:</p> <pre data-language=\"js\">const fs = require('fs');\nconst spawn = require('child_process').spawn;\nconst out = fs.openSync('./out.log', 'a');\nconst err = fs.openSync('./out.log', 'a');\n\nconst child = spawn('prg', [], {\n  detached: true,\n  stdio: [ 'ignore', out, err ]\n});\n\nchild.unref();\n</pre> <h4 id=\"child_process_options_stdio\">options.stdio</h4> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v3.3.1</td> <td>\n<p>The value <code>0</code> is now accepted as a file descriptor.</p> </td>\n</tr> <tr>\n<td>v0.7.10</td> <td>\n<p><span>Added in: v0.7.10</span></p> </td>\n</tr> </table> </details> </div>\n<p>The <code>options.stdio</code> option is used to configure the pipes that are established between the parent and child process. By default, the child's stdin, stdout, and stderr are redirected to corresponding <a href=\"#child_process_child_stdin\"><code>child.stdin</code></a>, <a href=\"#child_process_child_stdout\"><code>child.stdout</code></a>, and <a href=\"#child_process_child_stderr\"><code>child.stderr</code></a> streams on the <a href=\"#child_process_child_process\"><code>ChildProcess</code></a> object. This is equivalent to setting the <code>options.stdio</code> equal to <code>['pipe', 'pipe', 'pipe']</code>.</p> <p>For convenience, <code>options.stdio</code> may be one of the following strings:</p> <ul> <li>\n<code>'pipe'</code> - equivalent to <code>['pipe', 'pipe', 'pipe']</code> (the default)</li> <li>\n<code>'ignore'</code> - equivalent to <code>['ignore', 'ignore', 'ignore']</code>\n</li> <li>\n<code>'inherit'</code> - equivalent to <code>[process.stdin, process.stdout, process.stderr]</code> or <code>[0,1,2]</code>\n</li> </ul> <p>Otherwise, the value of <code>options.stdio</code> is an array where each index corresponds to an fd in the child. The fds 0, 1, and 2 correspond to stdin, stdout, and stderr, respectively. Additional fds can be specified to create additional pipes between the parent and child. The value is one of the following:</p> <ol> <li>\n<code>'pipe'</code> - Create a pipe between the child process and the parent process. The parent end of the pipe is exposed to the parent as a property on the <code>child_process</code> object as <a href=\"#child_process_options_stdio\"><code>child.stdio[fd]</code></a>. Pipes created for fds 0 - 2 are also available as <a href=\"#child_process_child_stdin\"><code>child.stdin</code></a>, <a href=\"#child_process_child_stdout\"><code>child.stdout</code></a> and <a href=\"#child_process_child_stderr\"><code>child.stderr</code></a>, respectively.</li> <li>\n<code>'ipc'</code> - Create an IPC channel for passing messages/file descriptors between parent and child. A <a href=\"#child_process_child_process\"><code>ChildProcess</code></a> may have at most <em>one</em> IPC stdio file descriptor. Setting this option enables the <a href=\"#child_process_child_send_message_sendhandle_options_callback\"><code>child.send()</code></a> method. If the child writes JSON messages to this file descriptor, the <a href=\"#child_process_event_message\"><code>child.on('message')</code></a> event handler will be triggered in the parent. If the child is a Node.js process, the presence of an IPC channel will enable <a href=\"process#process_process_send_message_sendhandle_options_callback\"><code>process.send()</code></a>, <a href=\"process#process_process_disconnect\"><code>process.disconnect()</code></a>, <a href=\"process#process_event_disconnect\"><code>process.on('disconnect')</code></a>, and <a href=\"process#process_event_message\"><code>process.on('message')</code></a> within the child.</li> <li>\n<code>'ignore'</code> - Instructs Node.js to ignore the fd in the child. While Node.js will always open fds 0 - 2 for the processes it spawns, setting the fd to <code>'ignore'</code> will cause Node.js to open <code>/dev/null</code> and attach it to the child's fd.</li> <li>\n<a href=\"stream#stream_stream\" class=\"type\">&lt;Stream&gt;</a> object - Share a readable or writable stream that refers to a tty, file, socket, or a pipe with the child process. The stream's underlying file descriptor is duplicated in the child process to the fd that corresponds to the index in the <code>stdio</code> array. Note that the stream must have an underlying descriptor (file streams do not until the <code>'open'</code> event has occurred).</li> <li>Positive integer - The integer value is interpreted as a file descriptor that is is currently open in the parent process. It is shared with the child process, similar to how <a href=\"stream#stream_stream\" class=\"type\">&lt;Stream&gt;</a> objects can be shared.</li> <li>\n<code>null</code>, <code>undefined</code> - Use default value. For stdio fds 0, 1 and 2 (in other words, stdin, stdout, and stderr) a pipe is created. For fd 3 and up, the default is <code>'ignore'</code>.</li> </ol> <p>Example:</p> <pre data-language=\"js\">const spawn = require('child_process').spawn;\n\n// Child will use parent's stdios\nspawn('prg', [], { stdio: 'inherit' });\n\n// Spawn child sharing only stderr\nspawn('prg', [], { stdio: ['pipe', 'pipe', process.stderr] });\n\n// Open an extra fd=4, to interact with programs presenting a\n// startd-style interface.\nspawn('prg', [], { stdio: ['pipe', null, null, null, 'pipe'] });\n</pre> <p><em>It is worth noting that when an IPC channel is established between the parent and child processes, and the child is a Node.js process, the child is launched with the IPC channel unreferenced (using <code>unref()</code>) until the child registers an event handler for the <a href=\"process#process_event_disconnect\"><code>process.on('disconnect')</code></a> event or the <a href=\"process#process_event_message\"><code>process.on('message')</code></a> event.This allows the child to exit normally without the process being held open by the open IPC channel.</em></p> <p>See also: <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a> and <a href=\"#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a></p> <h2 id=\"child_process_synchronous_process_creation\">Synchronous Process Creation</h2> <p>The <a href=\"#child_process_child_process_spawnsync_command_args_options\"><code>child_process.spawnSync()</code></a>, <a href=\"#child_process_child_process_execsync_command_options\"><code>child_process.execSync()</code></a>, and <a href=\"#child_process_child_process_execfilesync_file_args_options\"><code>child_process.execFileSync()</code></a> methods are <strong>synchronous</strong> and <strong>WILL</strong> block the Node.js event loop, pausing execution of any additional code until the spawned process exits.</p> <p>Blocking calls like these are mostly useful for simplifying general purpose scripting tasks and for simplifying the loading/processing of application configuration at startup.</p> <h3 id=\"child_process_child_process_execfilesync_file_args_options\">child_process.execFileSync(file[, args][, options])</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.2.1, v4.5.0</td> <td>\n<p>The <code>encoding</code> option can now explicitly be set to <code>buffer</code>.</p> </td>\n</tr> <tr>\n<td>v0.11.12</td> <td>\n<p><span>Added in: v0.11.12</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>file</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The name or path of the executable file to run</li> <li>\n<code>args</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> List of string arguments</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>cwd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Current working directory of the child process</li> <li>\n<code>input</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The value which will be passed as stdin to the spawned process<ul> <li>supplying this value will override <code>stdio[0]</code>\n</li> </ul> </li> <li>\n<code>stdio</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> Child's stdio configuration. (Default: <code>'pipe'</code>)<ul> <li>\n<code>stderr</code> by default will be output to the parent process' stderr unless <code>stdio</code> is specified</li> </ul> </li> <li>\n<code>env</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Environment key-value pairs</li> <li>\n<code>uid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the user identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setuid.2.html\">setuid(2)</a>.)</li> <li>\n<code>gid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the group identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setgid.2.html\">setgid(2)</a>.)</li> <li>\n<code>timeout</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> In milliseconds the maximum amount of time the process is allowed to run. (Default: <code>undefined</code>)</li> <li>\n<code>killSignal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The signal value to be used when the spawned process will be killed. (Default: <code>'SIGTERM'</code>)</li> <li>\n<code>maxBuffer</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Largest amount of data in bytes allowed on stdout or stderr. (Default: <code>200*1024</code>) If exceeded, the child process is terminated. See caveat at <a href=\"#child_process_maxbuffer_and_unicode\"><code>maxBuffer</code> and Unicode</a>.</li> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The encoding used for all stdio inputs and outputs. (Default: <code>'buffer'</code>)</li> </ul> </li> <li>Returns: <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The stdout from the command</li> </ul> <p>The <code>child_process.execFileSync()</code> method is generally identical to <a href=\"#child_process_child_process_execfile_file_args_options_callback\"><code>child_process.execFile()</code></a> with the exception that the method will not return until the child process has fully closed. When a timeout has been encountered and <code>killSignal</code> is sent, the method won't return until the process has completely exited. <em>Note that if the child process intercepts and handles the <code>SIGTERM</code> signal and does not exit, the parent process will still wait until the child process has exited.</em></p> <p>If the process times out, or has a non-zero exit code, this method <strong><em>will</em></strong> throw. The <a href=\"errors#errors_class_error\"><code>Error</code></a> object will contain the entire result from <a href=\"#child_process_child_process_spawnsync_command_args_options\"><code>child_process.spawnSync()</code></a></p> <h3 id=\"child_process_child_process_execsync_command_options\">child_process.execSync(command[, options])</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.12</span> </div>\n<ul> <li>\n<code>command</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The command to run</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>cwd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Current working directory of the child process</li> <li>\n<code>input</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The value which will be passed as stdin to the spawned process<ul> <li>supplying this value will override <code>stdio[0]</code>\n</li> </ul> </li> <li>\n<code>stdio</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> Child's stdio configuration. (Default: <code>'pipe'</code>)<ul> <li>\n<code>stderr</code> by default will be output to the parent process' stderr unless <code>stdio</code> is specified</li> </ul> </li> <li>\n<code>env</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Environment key-value pairs</li> <li>\n<code>shell</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Shell to execute the command with (Default: <code>'/bin/sh'</code> on UNIX, <code>'cmd.exe'</code> on Windows, The shell should understand the <code>-c</code> switch on UNIX or <code>/d /s /c</code> on Windows. On Windows, command line parsing should be compatible with <code>cmd.exe</code>.)</li> <li>\n<code>uid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the user identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setuid.2.html\">setuid(2)</a>.)</li> <li>\n<code>gid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the group identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setgid.2.html\">setgid(2)</a>.)</li> <li>\n<code>timeout</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> In milliseconds the maximum amount of time the process is allowed to run. (Default: <code>undefined</code>)</li> <li>\n<code>killSignal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The signal value to be used when the spawned process will be killed. (Default: <code>'SIGTERM'</code>)</li> <li>\n<code>maxBuffer</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Largest amount of data in bytes allowed on stdout or stderr. (Default: <code>200*1024</code>) If exceeded, the child process is terminated. See caveat at <a href=\"#child_process_maxbuffer_and_unicode\"><code>maxBuffer</code> and Unicode</a>.</li> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The encoding used for all stdio inputs and outputs. (Default: <code>'buffer'</code>)</li> </ul> </li> <li>Returns: <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The stdout from the command</li> </ul> <p>The <code>child_process.execSync()</code> method is generally identical to <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a> with the exception that the method will not return until the child process has fully closed. When a timeout has been encountered and <code>killSignal</code> is sent, the method won't return until the process has completely exited. <em>Note that if the child process intercepts and handles the <code>SIGTERM</code> signal and doesn't exit, the parent process will wait until the child process has exited.</em></p> <p>If the process times out, or has a non-zero exit code, this method <strong><em>will</em></strong> throw. The <a href=\"errors#errors_class_error\"><code>Error</code></a> object will contain the entire result from <a href=\"#child_process_child_process_spawnsync_command_args_options\"><code>child_process.spawnSync()</code></a></p> <p><strong>Note: Never pass unsanitised user input to this function. Any input containing shell metacharacters may be used to trigger arbitrary command execution.</strong></p> <h3 id=\"child_process_child_process_spawnsync_command_args_options\">child_process.spawnSync(command[, args][, options])</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.2.1, v4.5.0</td> <td>\n<p>The <code>encoding</code> option can now explicitly be set to <code>buffer</code>.</p> </td>\n</tr> <tr>\n<td>v5.7.0</td> <td>\n<p>The <code>shell</code> option is supported now.</p> </td>\n</tr> <tr>\n<td>v0.11.12</td> <td>\n<p><span>Added in: v0.11.12</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>command</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The command to run</li> <li>\n<code>args</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> List of string arguments</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>cwd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Current working directory of the child process</li> <li>\n<code>input</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The value which will be passed as stdin to the spawned process<ul> <li>supplying this value will override <code>stdio[0]</code>\n</li> </ul> </li> <li>\n<code>stdio</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> Child's stdio configuration.</li> <li>\n<code>env</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Environment key-value pairs</li> <li>\n<code>uid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the user identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setuid.2.html\">setuid(2)</a>.)</li> <li>\n<code>gid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the group identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setgid.2.html\">setgid(2)</a>.)</li> <li>\n<code>timeout</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> In milliseconds the maximum amount of time the process is allowed to run. (Default: <code>undefined</code>)</li> <li>\n<code>killSignal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The signal value to be used when the spawned process will be killed. (Default: <code>'SIGTERM'</code>)</li> <li>\n<code>maxBuffer</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Largest amount of data in bytes allowed on stdout or stderr. (Default: <code>200*1024</code>) If exceeded, the child process is terminated. See caveat at <a href=\"#child_process_maxbuffer_and_unicode\"><code>maxBuffer</code> and Unicode</a>.</li> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The encoding used for all stdio inputs and outputs. (Default: <code>'buffer'</code>)</li> <li>\n<code>shell</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> If <code>true</code>, runs <code>command</code> inside of a shell. Uses <code>'/bin/sh'</code> on UNIX, and <code>'cmd.exe'</code> on Windows. A different shell can be specified as a string. The shell should understand the <code>-c</code> switch on UNIX, or <code>/d /s /c</code> on Windows. Defaults to <code>false</code> (no shell).</li> </ul> </li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>pid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Pid of the child process</li> <li>\n<code>output</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> Array of results from stdio output</li> <li>\n<code>stdout</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The contents of <code>output[1]</code>\n</li> <li>\n<code>stderr</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The contents of <code>output[2]</code>\n</li> <li>\n<code>status</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The exit code of the child process</li> <li>\n<code>signal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The signal used to kill the child process</li> <li>\n<code>error</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a> The error object if the child process failed or timed out</li> </ul> </li> </ul> <p>The <code>child_process.spawnSync()</code> method is generally identical to <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a> with the exception that the function will not return until the child process has fully closed. When a timeout has been encountered and <code>killSignal</code> is sent, the method won't return until the process has completely exited. Note that if the process intercepts and handles the <code>SIGTERM</code> signal and doesn't exit, the parent process will wait until the child process has exited.</p> <p><strong>Note: If the <code>shell</code> option is enabled, do not pass unsanitised user input to this function. Any input containing shell metacharacters may be used to trigger arbitrary command execution.</strong></p> <h2 id=\"child_process_class_childprocess\">Class: ChildProcess</h2> <div class=\"api_metadata\"> <span>Added in: v2.2.0</span> </div>\n<p>Instances of the <code>ChildProcess</code> class are <a href=\"events#events_class_eventemitter\"><code>EventEmitters</code></a> that represent spawned child processes.</p> <p>Instances of <code>ChildProcess</code> are not intended to be created directly. Rather, use the <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a>, <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a>, <a href=\"#child_process_child_process_execfile_file_args_options_callback\"><code>child_process.execFile()</code></a>, or <a href=\"#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a> methods to create instances of <code>ChildProcess</code>.</p> <h3 id=\"child_process_event_close\">Event: 'close'</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.7</span> </div>\n<ul> <li>\n<code>code</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> the exit code if the child exited on its own.</li> <li>\n<code>signal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> the signal by which the child process was terminated.</li> </ul> <p>The <code>'close'</code> event is emitted when the stdio streams of a child process have been closed. This is distinct from the <a href=\"#child_process_event_exit\"><code>'exit'</code></a> event, since multiple processes might share the same stdio streams.</p> <h3 id=\"child_process_event_disconnect\">Event: 'disconnect'</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.2</span> </div>\n<p>The <code>'disconnect'</code> event is emitted after calling the <a href=\"#child_process_child_disconnect\"><code>child.disconnect()</code></a> method in parent process or <a href=\"process#process_process_disconnect\"><code>process.disconnect()</code></a> in child process. After disconnecting it is no longer possible to send or receive messages, and the <a href=\"#child_process_child_connected\"><code>child.connected</code></a> property is <code>false</code>.</p> <h3 id=\"child_process_event_error\">Event: 'error'</h3> <div class=\"signature\">\n<ul> <li>\n<code>err</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a> the error.</li> </ul> </div>\n<p>The <code>'error'</code> event is emitted whenever:</p> <ol> <li>The process could not be spawned, or</li> <li>The process could not be killed, or</li> <li>Sending a message to the child process failed.</li> </ol> <p>Note that the <code>'exit'</code> event may or may not fire after an error has occurred. If you are listening to both the <code>'exit'</code> and <code>'error'</code> events, it is important to guard against accidentally invoking handler functions multiple times.</p> <p>See also <a href=\"#child_process_child_kill_signal\"><code>child.kill()</code></a> and <a href=\"#child_process_child_send_message_sendhandle_options_callback\"><code>child.send()</code></a>.</p> <h3 id=\"child_process_event_exit\">Event: 'exit'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<ul> <li>\n<code>code</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> the exit code if the child exited on its own.</li> <li>\n<code>signal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> the signal by which the child process was terminated.</li> </ul> <p>The <code>'exit'</code> event is emitted after the child process ends. If the process exited, <code>code</code> is the final exit code of the process, otherwise <code>null</code>. If the process terminated due to receipt of a signal, <code>signal</code> is the string name of the signal, otherwise <code>null</code>. One of the two will always be non-null.</p> <p>Note that when the <code>'exit'</code> event is triggered, child process stdio streams might still be open.</p> <p>Also, note that Node.js establishes signal handlers for <code>SIGINT</code> and <code>SIGTERM</code> and Node.js processes will not terminate immediately due to receipt of those signals. Rather, Node.js will perform a sequence of cleanup actions and then will re-raise the handled signal.</p> <p>See <a href=\"http://man7.org/linux/man-pages/man2/waitpid.2.html\">waitpid(2)</a>.</p> <h3 id=\"child_process_event_message\">Event: 'message'</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.9</span> </div>\n<ul> <li>\n<code>message</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> a parsed JSON object or primitive value.</li> <li>\n<code>sendHandle</code> <a href=\"net#net_server_listen_handle_backlog_callback\" class=\"type\">&lt;Handle&gt;</a> a <a href=\"net#net_class_net_socket\"><code>net.Socket</code></a> or <a href=\"net#net_class_net_server\"><code>net.Server</code></a> object, or undefined.</li> </ul> <p>The <code>'message'</code> event is triggered when a child process uses <a href=\"process#process_process_send_message_sendhandle_options_callback\"><code>process.send()</code></a> to send messages.</p> <h3 id=\"child_process_child_channel\">child.channel</h3> <div class=\"api_metadata\"> <span>Added in: v7.1.0</span> </div>\n<ul> <li>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> A pipe representing the IPC channel to the child process.</li> </ul> <p>The <code>child.channel</code> property is a reference to the child's IPC channel. If no IPC channel currently exists, this property is <code>undefined</code>.</p> <h3 id=\"child_process_child_connected\">child.connected</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.2</span> </div>\n<ul> <li>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Set to <code>false</code> after <code>child.disconnect()</code> is called</li> </ul> <p>The <code>child.connected</code> property indicates whether it is still possible to send and receive messages from a child process. When <code>child.connected</code> is <code>false</code>, it is no longer possible to send or receive messages.</p> <h3 id=\"child_process_child_disconnect\">child.disconnect()</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.2</span> </div>\n<p>Closes the IPC channel between parent and child, allowing the child to exit gracefully once there are no other connections keeping it alive. After calling this method the <code>child.connected</code> and <code>process.connected</code> properties in both the parent and child (respectively) will be set to <code>false</code>, and it will be no longer possible to pass messages between the processes.</p> <p>The <code>'disconnect'</code> event will be emitted when there are no messages in the process of being received. This will most often be triggered immediately after calling <code>child.disconnect()</code>.</p> <p>Note that when the child process is a Node.js instance (e.g. spawned using <a href=\"#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a>), the <code>process.disconnect()</code> method can be invoked within the child process to close the IPC channel as well.</p> <h3 id=\"child_process_child_kill_signal\">child.kill([signal])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<ul> <li>\n<code>signal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>The <code>child.kill()</code> methods sends a signal to the child process. If no argument is given, the process will be sent the <code>'SIGTERM'</code> signal. See <a href=\"http://man7.org/linux/man-pages/man7/signal.7.html\">signal(7)</a> for a list of available signals.</p> <pre data-language=\"js\">const spawn = require('child_process').spawn;\nconst grep = spawn('grep', ['ssh']);\n\ngrep.on('close', (code, signal) =&gt; {\n  console.log(\n    `child process terminated due to receipt of signal ${signal}`);\n});\n\n// Send SIGHUP to process\ngrep.kill('SIGHUP');\n</pre> <p>The <a href=\"#child_process_child_process\"><code>ChildProcess</code></a> object may emit an <a href=\"#child_process_event_error\"><code>'error'</code></a> event if the signal cannot be delivered. Sending a signal to a child process that has already exited is not an error but may have unforeseen consequences. Specifically, if the process identifier (PID) has been reassigned to another process, the signal will be delivered to that process instead which can have unexpected results.</p> <p>Note that while the function is called <code>kill</code>, the signal delivered to the child process may not actually terminate the process.</p> <p>See <a href=\"http://man7.org/linux/man-pages/man2/kill.2.html\">kill(2)</a> for reference.</p> <p>Also note: on Linux, child processes of child processes will not be terminated when attempting to kill their parent. This is likely to happen when running a new process in a shell or with use of the <code>shell</code> option of <code>ChildProcess</code>, such as in this example:</p> <pre data-language=\"js\">'use strict';\nconst spawn = require('child_process').spawn;\n\nconst child = spawn('sh', ['-c',\n  `node -e \"setInterval(() =&gt; {\n      console.log(process.pid, 'is alive')\n    }, 500);\"`\n  ], {\n    stdio: ['inherit', 'inherit', 'inherit']\n  });\n\nsetTimeout(() =&gt; {\n  child.kill(); // does not terminate the node process in the shell\n}, 2000);\n</pre> <h3 id=\"child_process_child_pid\">child.pid</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<ul> <li>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Integer</li> </ul> <p>Returns the process identifier (PID) of the child process.</p> <p>Example:</p> <pre data-language=\"js\">const spawn = require('child_process').spawn;\nconst grep = spawn('grep', ['ssh']);\n\nconsole.log(`Spawned child pid: ${grep.pid}`);\ngrep.stdin.end();\n</pre> <h3 id=\"child_process_child_send_message_sendhandle_options_callback\">child.send(message[, sendHandle[, options]][, callback])</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v5.8.0</td> <td>\n<p>The <code>options</code> parameter, and the <code>keepOpen</code> option in particular, is supported now.</p> </td>\n</tr> <tr>\n<td>v5.0.0</td> <td>\n<p>This method returns a boolean for flow control now.</p> </td>\n</tr> <tr>\n<td>v4.0.0</td> <td>\n<p>The <code>callback</code> parameter is supported now.</p> </td>\n</tr> <tr>\n<td>v0.5.9</td> <td>\n<p><span>Added in: v0.5.9</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>message</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> <li>\n<code>sendHandle</code> <a href=\"net#net_server_listen_handle_backlog_callback\" class=\"type\">&lt;Handle&gt;</a>\n</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a>\n</li> </ul> <p>When an IPC channel has been established between the parent and child ( i.e. when using <a href=\"#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a>), the <code>child.send()</code> method can be used to send messages to the child process. When the child process is a Node.js instance, these messages can be received via the <a href=\"process#process_event_message\"><code>process.on('message')</code></a> event.</p> <p>For example, in the parent script:</p> <pre data-language=\"js\">const cp = require('child_process');\nconst n = cp.fork(`${__dirname}/sub.js`);\n\nn.on('message', (m) =&gt; {\n  console.log('PARENT got message:', m);\n});\n\nn.send({ hello: 'world' });\n</pre> <p>And then the child script, <code>'sub.js'</code> might look like this:</p> <pre data-language=\"js\">process.on('message', (m) =&gt; {\n  console.log('CHILD got message:', m);\n});\n\nprocess.send({ foo: 'bar' });\n</pre> <p>Child Node.js processes will have a <a href=\"process#process_process_send_message_sendhandle_options_callback\"><code>process.send()</code></a> method of their own that allows the child to send messages back to the parent.</p> <p>There is a special case when sending a <code>{cmd: 'NODE_foo'}</code> message. All messages containing a <code>NODE_</code> prefix in its <code>cmd</code> property are considered to be reserved for use within Node.js core and will not be emitted in the child's <a href=\"process#process_event_message\"><code>process.on('message')</code></a> event. Rather, such messages are emitted using the <code>process.on('internalMessage')</code> event and are consumed internally by Node.js. Applications should avoid using such messages or listening for <code>'internalMessage'</code> events as it is subject to change without notice.</p> <p>The optional <code>sendHandle</code> argument that may be passed to <code>child.send()</code> is for passing a TCP server or socket object to the child process. The child will receive the object as the second argument passed to the callback function registered on the <a href=\"process#process_event_message\"><code>process.on('message')</code></a> event. Any data that is received and buffered in the socket will not be sent to the child.</p> <p>The <code>options</code> argument, if present, is an object used to parameterize the sending of certain types of handles. <code>options</code> supports the following properties:</p> <ul> <li>\n<code>keepOpen</code> - A Boolean value that can be used when passing instances of <code>net.Socket</code>. When <code>true</code>, the socket is kept open in the sending process. Defaults to <code>false</code>.</li> </ul> <p>The optional <code>callback</code> is a function that is invoked after the message is sent but before the child may have received it. The function is called with a single argument: <code>null</code> on success, or an <a href=\"errors#errors_class_error\"><code>Error</code></a> object on failure.</p> <p>If no <code>callback</code> function is provided and the message cannot be sent, an <code>'error'</code> event will be emitted by the <a href=\"#child_process_child_process\"><code>ChildProcess</code></a> object. This can happen, for instance, when the child process has already exited.</p> <p><code>child.send()</code> will return <code>false</code> if the channel has closed or when the backlog of unsent messages exceeds a threshold that makes it unwise to send more. Otherwise, the method returns <code>true</code>. The <code>callback</code> function can be used to implement flow control.</p> <h4 id=\"child_process_example_sending_a_server_object\">Example: sending a server object</h4> <p>The <code>sendHandle</code> argument can be used, for instance, to pass the handle of a TCP server object to the child process as illustrated in the example below:</p> <pre data-language=\"js\">const child = require('child_process').fork('child.js');\n\n// Open up the server object and send the handle.\nconst server = require('net').createServer();\nserver.on('connection', (socket) =&gt; {\n  socket.end('handled by parent');\n});\nserver.listen(1337, () =&gt; {\n  child.send('server', server);\n});\n</pre> <p>The child would then receive the server object as:</p> <pre data-language=\"js\">process.on('message', (m, server) =&gt; {\n  if (m === 'server') {\n    server.on('connection', (socket) =&gt; {\n      socket.end('handled by child');\n    });\n  }\n});\n</pre> <p>Once the server is now shared between the parent and child, some connections can be handled by the parent and some by the child.</p> <p>While the example above uses a server created using the <code>net</code> module, <code>dgram</code> module servers use exactly the same workflow with the exceptions of listening on a <code>'message'</code> event instead of <code>'connection'</code> and using <code>server.bind()</code> instead of <code>server.listen()</code>. This is, however, currently only supported on UNIX platforms.</p> <h4 id=\"child_process_example_sending_a_socket_object\">Example: sending a socket object</h4> <p>Similarly, the <code>sendHandler</code> argument can be used to pass the handle of a socket to the child process. The example below spawns two children that each handle connections with \"normal\" or \"special\" priority:</p> <pre data-language=\"js\">const normal = require('child_process').fork('child.js', ['normal']);\nconst special = require('child_process').fork('child.js', ['special']);\n\n// Open up the server and send sockets to child\nconst server = require('net').createServer();\nserver.on('connection', (socket) =&gt; {\n\n  // If this is special priority\n  if (socket.remoteAddress === '74.125.127.100') {\n    special.send('socket', socket);\n    return;\n  }\n  // This is normal priority\n  normal.send('socket', socket);\n});\nserver.listen(1337);\n</pre> <p>The <code>child.js</code> would receive the socket handle as the second argument passed to the event callback function:</p> <pre data-language=\"js\">process.on('message', (m, socket) =&gt; {\n  if (m === 'socket') {\n    socket.end(`Request handled with ${process.argv[2]} priority`);\n  }\n});\n</pre> <p>Once a socket has been passed to a child, the parent is no longer capable of tracking when the socket is destroyed. To indicate this, the <code>.connections</code> property becomes <code>null</code>. It is recommended not to use <code>.maxConnections</code> when this occurs.</p> <p><em>Note: this function uses <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a> internally to serialize the <code>message</code>.</em></p> <h3 id=\"child_process_child_stderr\">child.stderr</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<ul> <li><a href=\"stream#stream_class_stream_readable\" class=\"type\">&lt;stream.Readable&gt;</a></li> </ul> <p>A <code>Readable Stream</code> that represents the child process's <code>stderr</code>.</p> <p>If the child was spawned with <code>stdio[2]</code> set to anything other than <code>'pipe'</code>, then this will be <code>null</code>.</p> <p><code>child.stderr</code> is an alias for <code>child.stdio[2]</code>. Both properties will refer to the same value.</p> <h3 id=\"child_process_child_stdin\">child.stdin</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<ul> <li><a href=\"stream#stream_class_stream_writable\" class=\"type\">&lt;stream.Writable&gt;</a></li> </ul> <p>A <code>Writable Stream</code> that represents the child process's <code>stdin</code>.</p> <p><em>Note that if a child process waits to read all of its input, the child will not continue until this stream has been closed via <code>end()</code>.</em></p> <p>If the child was spawned with <code>stdio[0]</code> set to anything other than <code>'pipe'</code>, then this will be <code>null</code>.</p> <p><code>child.stdin</code> is an alias for <code>child.stdio[0]</code>. Both properties will refer to the same value.</p> <h3 id=\"child_process_child_stdio\">child.stdio</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.10</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a></li> </ul> <p>A sparse array of pipes to the child process, corresponding with positions in the <a href=\"#child_process_options_stdio\"><code>stdio</code></a> option passed to <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a> that have been set to the value <code>'pipe'</code>. Note that <code>child.stdio[0]</code>, <code>child.stdio[1]</code>, and <code>child.stdio[2]</code> are also available as <code>child.stdin</code>, <code>child.stdout</code>, and <code>child.stderr</code>, respectively.</p> <p>In the following example, only the child's fd <code>1</code> (stdout) is configured as a pipe, so only the parent's <code>child.stdio[1]</code> is a stream, all other values in the array are <code>null</code>.</p> <pre data-language=\"js\">const assert = require('assert');\nconst fs = require('fs');\nconst child_process = require('child_process');\n\nconst child = child_process.spawn('ls', {\n  stdio: [\n    0, // Use parent's stdin for child\n    'pipe', // Pipe child's stdout to parent\n    fs.openSync('err.out', 'w') // Direct child's stderr to a file\n  ]\n});\n\nassert.strictEqual(child.stdio[0], null);\nassert.strictEqual(child.stdio[0], child.stdin);\n\nassert(child.stdout);\nassert.strictEqual(child.stdio[1], child.stdout);\n\nassert.strictEqual(child.stdio[2], null);\nassert.strictEqual(child.stdio[2], child.stderr);\n</pre> <h3 id=\"child_process_child_stdout\">child.stdout</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<ul> <li><a href=\"stream#stream_class_stream_readable\" class=\"type\">&lt;stream.Readable&gt;</a></li> </ul> <p>A <code>Readable Stream</code> that represents the child process's <code>stdout</code>.</p> <p>If the child was spawned with <code>stdio[1]</code> set to anything other than <code>'pipe'</code>, then this will be <code>null</code>.</p> <p><code>child.stdout</code> is an alias for <code>child.stdio[1]</code>. Both properties will refer to the same value.</p> <h2 id=\"child_process_maxbuffer_and_unicode\">\n<code>maxBuffer</code> and Unicode</h2> <p>The <code>maxBuffer</code> option specifies the largest number of bytes allowed on <code>stdout</code> or <code>stderr</code>. If this value is exceeded, then the child process is terminated. This impacts output that includes multibyte character encodings such as UTF-8 or UTF-16. For instance, <code>console.log('中文测试')</code> will send 13 UTF-8 encoded bytes to <code>stdout</code> although there are only 4 characters.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/child_process.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/child_process.html</a>\n  </p>\n</div>\n","readline":"<h1 id=\"readline_readline\">Readline</h1> <div class=\"api_stability api_stability_2\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</div>\n<p>The <code>readline</code> module provides an interface for reading data from a <a href=\"stream#stream_readable_streams\">Readable</a> stream (such as <a href=\"process#process_process_stdin\"><code>process.stdin</code></a>) one line at a time. It can be accessed using:</p> <pre data-language=\"js\">const readline = require('readline');\n</pre> <p>The following simple example illustrates the basic use of the <code>readline</code> module.</p> <pre data-language=\"js\">const readline = require('readline');\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nrl.question('What do you think of Node.js? ', (answer) =&gt; {\n  // TODO: Log the answer in a database\n  console.log(`Thank you for your valuable feedback: ${answer}`);\n\n  rl.close();\n});\n</pre> <p><em>Note</em> Once this code is invoked, the Node.js application will not terminate until the <code>readline.Interface</code> is closed because the interface waits for data to be received on the <code>input</code> stream.</p> <h2 id=\"readline_class_interface\">Class: Interface</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.104</span> </div>\n<p>Instances of the <code>readline.Interface</code> class are constructed using the <code>readline.createInterface()</code> method. Every instance is associated with a single <code>input</code> <a href=\"stream#stream_readable_streams\">Readable</a> stream and a single <code>output</code> <a href=\"stream#stream_writable_streams\">Writable</a> stream. The <code>output</code> stream is used to print prompts for user input that arrives on, and is read from, the <code>input</code> stream.</p> <h3 id=\"readline_event_close\">Event: 'close'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.98</span> </div>\n<p>The <code>'close'</code> event is emitted when one of the following occur:</p> <ul> <li>The <code>rl.close()</code> method is called and the <code>readline.Interface</code> instance has relinquished control over the <code>input</code> and <code>output</code> streams;</li> <li>The <code>input</code> stream receives its <code>'end'</code> event;</li> <li>The <code>input</code> stream receives <code>&lt;ctrl&gt;-D</code> to signal end-of-transmission (EOT);</li> <li>The <code>input</code> stream receives <code>&lt;ctrl&gt;-C</code> to signal <code>SIGINT</code> and there is no <code>SIGINT</code> event listener registered on the <code>readline.Interface</code> instance.</li> </ul> <p>The listener function is called without passing any arguments.</p> <p>The <code>readline.Interface</code> instance should be considered to be \"finished\" once the <code>'close'</code> event is emitted.</p> <h3 id=\"readline_event_line\">Event: 'line'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.98</span> </div>\n<p>The <code>'line'</code> event is emitted whenever the <code>input</code> stream receives an end-of-line input (<code>\\n</code>, <code>\\r</code>, or <code>\\r\\n</code>). This usually occurs when the user presses the <code>&lt;Enter&gt;</code>, or <code>&lt;Return&gt;</code> keys.</p> <p>The listener function is called with a string containing the single line of received input.</p> <p>For example:</p> <pre data-language=\"js\">rl.on('line', (input) =&gt; {\n  console.log(`Received: ${input}`);\n});\n</pre> <h3 id=\"readline_event_pause\">Event: 'pause'</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.5</span> </div>\n<p>The <code>'pause'</code> event is emitted when one of the following occur:</p> <ul> <li>The <code>input</code> stream is paused.</li> <li>The <code>input</code> stream is not paused and receives the <code>SIGCONT</code> event. (See events <a href=\"readline#readline_event_sigtstp\"><code>SIGTSTP</code></a> and <a href=\"readline#readline_event_sigcont\"><code>SIGCONT</code></a>)</li> </ul> <p>The listener function is called without passing any arguments.</p> <p>For example:</p> <pre data-language=\"js\">rl.on('pause', () =&gt; {\n  console.log('Readline paused.');\n});\n</pre> <h3 id=\"readline_event_resume\">Event: 'resume'</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.5</span> </div>\n<p>The <code>'resume'</code> event is emitted whenever the <code>input</code> stream is resumed.</p> <p>The listener function is called without passing any arguments.</p> <pre data-language=\"js\">rl.on('resume', () =&gt; {\n  console.log('Readline resumed.');\n});\n</pre> <h3 id=\"readline_event_sigcont\">Event: 'SIGCONT'</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.5</span> </div>\n<p>The <code>'SIGCONT'</code> event is emitted when a Node.js process previously moved into the background using <code>&lt;ctrl&gt;-Z</code> (i.e. <code>SIGTSTP</code>) is then brought back to the foreground using <a href=\"http://man7.org/linux/man-pages/man1/fg.1p.html\">fg(1p)</a>.</p> <p>If the <code>input</code> stream was paused <em>before</em> the <code>SIGTSTP</code> request, this event will not be emitted.</p> <p>The listener function is invoked without passing any arguments.</p> <p>For example:</p> <pre data-language=\"js\">rl.on('SIGCONT', () =&gt; {\n  // `prompt` will automatically resume the stream\n  rl.prompt();\n});\n</pre> <p><em>Note</em>: The <code>'SIGCONT'</code> event is <em>not</em> supported on Windows.</p> <h3 id=\"readline_event_sigint\">Event: 'SIGINT'</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.0</span> </div>\n<p>The <code>'SIGINT'</code> event is emitted whenever the <code>input</code> stream receives a <code>&lt;ctrl&gt;-C</code> input, known typically as <code>SIGINT</code>. If there are no <code>'SIGINT'</code> event listeners registered when the <code>input</code> stream receives a <code>SIGINT</code>, the <code>'pause'</code> event will be emitted.</p> <p>The listener function is invoked without passing any arguments.</p> <p>For example:</p> <pre data-language=\"js\">rl.on('SIGINT', () =&gt; {\n  rl.question('Are you sure you want to exit?', (answer) =&gt; {\n    if (answer.match(/^y(es)?$/i)) rl.pause();\n  });\n});\n</pre> <h3 id=\"readline_event_sigtstp\">Event: 'SIGTSTP'</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.5</span> </div>\n<p>The <code>'SIGTSTP'</code> event is emitted when the <code>input</code> stream receives a <code>&lt;ctrl&gt;-Z</code> input, typically known as <code>SIGTSTP</code>. If there are no <code>SIGTSTP</code> event listeners registered when the <code>input</code> stream receives a <code>SIGTSTP</code>, the Node.js process will be sent to the background.</p> <p>When the program is resumed using <a href=\"http://man7.org/linux/man-pages/man1/fg.1p.html\">fg(1p)</a>, the <code>'pause'</code> and <code>SIGCONT</code> events will be emitted. These can be used to resume the <code>input</code> stream.</p> <p>The <code>'pause'</code> and <code>'SIGCONT'</code> events will not be emitted if the <code>input</code> was paused before the process was sent to the background.</p> <p>The listener function is invoked without passing any arguments.</p> <p>For example:</p> <pre data-language=\"js\">rl.on('SIGTSTP', () =&gt; {\n  // This will override SIGTSTP and prevent the program from going to the\n  // background.\n  console.log('Caught SIGTSTP.');\n});\n</pre> <p><em>Note</em>: The <code>'SIGTSTP'</code> event is <em>not</em> supported on Windows.</p> <h3 id=\"readline_rl_close\">rl.close()</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.98</span> </div>\n<p>The <code>rl.close()</code> method closes the <code>readline.Interface</code> instance and relinquishes control over the <code>input</code> and <code>output</code> streams. When called, the <code>'close'</code> event will be emitted.</p> <h3 id=\"readline_rl_pause\">rl.pause()</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.4</span> </div>\n<p>The <code>rl.pause()</code> method pauses the <code>input</code> stream, allowing it to be resumed later if necessary.</p> <p>Calling <code>rl.pause()</code> does not immediately pause other events (including <code>'line'</code>) from being emitted by the <code>readline.Interface</code> instance.</p> <h3 id=\"readline_rl_prompt_preservecursor\">rl.prompt([preserveCursor])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.98</span> </div>\n<ul> <li>\n<code>preserveCursor</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If <code>true</code>, prevents the cursor placement from being reset to <code>0</code>.</li> </ul> <p>The <code>rl.prompt()</code> method writes the <code>readline.Interface</code> instances configured <code>prompt</code> to a new line in <code>output</code> in order to provide a user with a new location at which to provide input.</p> <p>When called, <code>rl.prompt()</code> will resume the <code>input</code> stream if it has been paused.</p> <p>If the <code>readline.Interface</code> was created with <code>output</code> set to <code>null</code> or <code>undefined</code> the prompt is not written.</p> <h3 id=\"readline_rl_question_query_callback\">rl.question(query, callback)</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.3</span> </div>\n<ul> <li>\n<code>query</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> A statement or query to write to <code>output</code>, prepended to the prompt.</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A callback function that is invoked with the user's input in response to the <code>query</code>.</li> </ul> <p>The <code>rl.question()</code> method displays the <code>query</code> by writing it to the <code>output</code>, waits for user input to be provided on <code>input</code>, then invokes the <code>callback</code> function passing the provided input as the first argument.</p> <p>When called, <code>rl.question()</code> will resume the <code>input</code> stream if it has been paused.</p> <p>If the <code>readline.Interface</code> was created with <code>output</code> set to <code>null</code> or <code>undefined</code> the <code>query</code> is not written.</p> <p>Example usage:</p> <pre data-language=\"js\">rl.question('What is your favorite food?', (answer) =&gt; {\n  console.log(`Oh, so your favorite food is ${answer}`);\n});\n</pre> <p><em>Note</em>: The <code>callback</code> function passed to <code>rl.question()</code> does not follow the typical pattern of accepting an <code>Error</code> object or <code>null</code> as the first argument. The <code>callback</code> is called with the provided answer as the only argument.</p> <h3 id=\"readline_rl_resume\">rl.resume()</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.4</span> </div>\n<p>The <code>rl.resume()</code> method resumes the <code>input</code> stream if it has been paused.</p> <h3 id=\"readline_rl_setprompt_prompt\">rl.setPrompt(prompt)</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.98</span> </div>\n<ul> <li>\n<code>prompt</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>The <code>rl.setPrompt()</code> method sets the prompt that will be written to <code>output</code> whenever <code>rl.prompt()</code> is called.</p> <h3 id=\"readline_rl_write_data_key\">rl.write(data[, key])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.98</span> </div>\n<ul> <li>\n<code>data</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>key</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>ctrl</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <code>true</code> to indicate the <code>&lt;ctrl&gt;</code> key.</li> <li>\n<code>meta</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <code>true</code> to indicate the <code>&lt;Meta&gt;</code> key.</li> <li>\n<code>shift</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <code>true</code> to indicate the <code>&lt;Shift&gt;</code> key.</li> <li>\n<code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The name of the a key.</li> </ul> </li> </ul> <p>The <code>rl.write()</code> method will write either <code>data</code> or a key sequence identified by <code>key</code> to the <code>output</code>. The <code>key</code> argument is supported only if <code>output</code> is a <a href=\"tty\">TTY</a> text terminal.</p> <p>If <code>key</code> is specified, <code>data</code> is ignored.</p> <p>When called, <code>rl.write()</code> will resume the <code>input</code> stream if it has been paused.</p> <p>If the <code>readline.Interface</code> was created with <code>output</code> set to <code>null</code> or <code>undefined</code> the <code>data</code> and <code>key</code> are not written.</p> <p>For example:</p> <pre data-language=\"js\">rl.write('Delete this!');\n// Simulate Ctrl+u to delete the line written previously\nrl.write(null, {ctrl: true, name: 'u'});\n</pre> <p><em>Note</em>: The <code>rl.write()</code> method will write the data to the <code>readline</code> Interface's <code>input</code> <em>as if it were provided by the user</em>.</p> <h2 id=\"readline_readline_clearline_stream_dir\">readline.clearLine(stream, dir)</h2> <div class=\"api_metadata\"> <span>Added in: v0.7.7</span> </div>\n<ul> <li>\n<code>stream</code> <span class=\"type\">&lt;Writable&gt;</span>\n</li> <li>\n<code>dir</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a><ul> <li>\n<code>-1</code> - to the left from cursor</li> <li>\n<code>1</code> - to the right from cursor</li> <li>\n<code>0</code> - the entire line</li> </ul> </li> </ul> <p>The <code>readline.clearLine()</code> method clears current line of given <a href=\"tty\">TTY</a> stream in a specified direction identified by <code>dir</code>.</p> <h2 id=\"readline_readline_clearscreendown_stream\">readline.clearScreenDown(stream)</h2> <div class=\"api_metadata\"> <span>Added in: v0.7.7</span> </div>\n<ul> <li>\n<code>stream</code> <span class=\"type\">&lt;Writable&gt;</span>\n</li> </ul> <p>The <code>readline.clearScreenDown()</code> method clears the given <a href=\"tty\">TTY</a> stream from the current position of the cursor down.</p> <h2 id=\"readline_readline_createinterface_options\">readline.createInterface(options)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.3.0</td> <td>\n<p>The <code>prompt</code> option is supported now.</p> </td>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>The <code>historySize</code> option can be <code>0</code> now.</p> </td>\n</tr> <tr>\n<td>v0.1.98</td> <td>\n<p><span>Added in: v0.1.98</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>input</code> <span class=\"type\">&lt;Readable&gt;</span> The <a href=\"stream#stream_readable_streams\">Readable</a> stream to listen to. This option is <em>required</em>.</li> <li>\n<code>output</code> <span class=\"type\">&lt;Writable&gt;</span> The <a href=\"stream#stream_writable_streams\">Writable</a> stream to write readline data to.</li> <li>\n<code>completer</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> An optional function used for Tab autocompletion.</li> <li>\n<code>terminal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <code>true</code> if the <code>input</code> and <code>output</code> streams should be treated like a TTY, and have ANSI/VT100 escape codes written to it. Defaults to checking <code>isTTY</code> on the <code>output</code> stream upon instantiation.</li> <li>\n<code>historySize</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> maximum number of history lines retained. To disable the history set this value to <code>0</code>. Defaults to <code>30</code>. This option makes sense only if <code>terminal</code> is set to <code>true</code> by the user or by an internal <code>output</code> check, otherwise the history caching mechanism is not initialized at all.</li> <li>\n<code>prompt</code> - the prompt string to use. Default: <code>'&gt; '</code>\n</li> <li>\n<code>crlfDelay</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> If the delay between <code>\\r</code> and <code>\\n</code> exceeds <code>crlfDelay</code> milliseconds, both <code>\\r</code> and <code>\\n</code> will be treated as separate end-of-line input. Default to <code>100</code> milliseconds. <code>crlfDelay</code> will be coerced to <code>[100, 2000]</code> range.</li> <li>\n<code>removeHistoryDuplicates</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If <code>true</code>, when a new input line added to the history list duplicates an older one, this removes the older line from the list. Defaults to <code>false</code>.</li> </ul> </li> </ul> <p>The <code>readline.createInterface()</code> method creates a new <code>readline.Interface</code> instance.</p> <p>For example:</p> <pre data-language=\"js\">const readline = require('readline');\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n</pre> <p>Once the <code>readline.Interface</code> instance is created, the most common case is to listen for the <code>'line'</code> event:</p> <pre data-language=\"js\">rl.on('line', (line) =&gt; {\n  console.log(`Received: ${line}`);\n});\n</pre> <p>If <code>terminal</code> is <code>true</code> for this instance then the <code>output</code> stream will get the best compatibility if it defines an <code>output.columns</code> property and emits a <code>'resize'</code> event on the <code>output</code> if or when the columns ever change (<a href=\"process#process_process_stdout\"><code>process.stdout</code></a> does this automatically when it is a TTY).</p> <h3 id=\"readline_use_of_the_completer_function\">Use of the <code>completer</code> Function</h3> <p>The <code>completer</code> function takes the current line entered by the user as an argument, and returns an Array with 2 entries:</p> <ul> <li>An Array with matching entries for the completion.</li> <li>The substring that was used for the matching.</li> </ul> <p>For instance: <code>[[substr1, substr2, ...], originalsubstring]</code>.</p> <pre data-language=\"js\">function completer(line) {\n  const completions = '.help .error .exit .quit .q'.split(' ');\n  const hits = completions.filter((c) =&gt; { return c.indexOf(line) === 0 });\n  // show all completions if none found\n  return [hits.length ? hits : completions, line];\n}\n</pre> <p>The <code>completer</code> function can be called asynchronously if it accepts two arguments:</p> <pre data-language=\"js\">function completer(linePartial, callback) {\n  callback(null, [['123'], linePartial]);\n}\n</pre> <h2 id=\"readline_readline_cursorto_stream_x_y\">readline.cursorTo(stream, x, y)</h2> <div class=\"api_metadata\"> <span>Added in: v0.7.7</span> </div>\n<ul> <li>\n<code>stream</code> <span class=\"type\">&lt;Writable&gt;</span>\n</li> <li>\n<code>x</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> <li>\n<code>y</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> </ul> <p>The <code>readline.cursorTo()</code> method moves cursor to the specified position in a given <a href=\"tty\">TTY</a> <code>stream</code>.</p> <h2 id=\"readline_readline_emitkeypressevents_stream_interface\">readline.emitKeypressEvents(stream[, interface])</h2> <div class=\"api_metadata\"> <span>Added in: v0.7.7</span> </div>\n<ul> <li>\n<code>stream</code> <span class=\"type\">&lt;Readable&gt;</span>\n</li> <li>\n<code>interface</code> <span class=\"type\">&lt;readline.Interface&gt;</span>\n</li> </ul> <p>The <code>readline.emitKeypressEvents()</code> method causes the given <a href=\"stream#stream_writable_streams\">Writable</a> <code>stream</code> to begin emitting <code>'keypress'</code> events corresponding to received input.</p> <p>Optionally, <code>interface</code> specifies a <code>readline.Interface</code> instance for which autocompletion is disabled when copy-pasted input is detected.</p> <p>If the <code>stream</code> is a <a href=\"tty\">TTY</a>, then it must be in raw mode.</p> <pre data-language=\"js\">readline.emitKeypressEvents(process.stdin);\nif (process.stdin.isTTY)\n  process.stdin.setRawMode(true);\n</pre> <h2 id=\"readline_readline_movecursor_stream_dx_dy\">readline.moveCursor(stream, dx, dy)</h2> <div class=\"api_metadata\"> <span>Added in: v0.7.7</span> </div>\n<ul> <li>\n<code>stream</code> <span class=\"type\">&lt;Writable&gt;</span>\n</li> <li>\n<code>dx</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> <li>\n<code>dy</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> </ul> <p>The <code>readline.moveCursor()</code> method moves the cursor <em>relative</em> to its current position in a given <a href=\"tty\">TTY</a> <code>stream</code>.</p> <h2 id=\"readline_example_tiny_cli\">Example: Tiny CLI</h2> <p>The following example illustrates the use of <code>readline.Interface</code> class to implement a small command-line interface:</p> <pre data-language=\"js\">const readline = require('readline');\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n  prompt: 'OHAI&gt; '\n});\n\nrl.prompt();\n\nrl.on('line', (line) =&gt; {\n  switch(line.trim()) {\n    case 'hello':\n      console.log('world!');\n      break;\n    default:\n      console.log(`Say what? I might have heard '${line.trim()}'`);\n      break;\n  }\n  rl.prompt();\n}).on('close', () =&gt; {\n  console.log('Have a great day!');\n  process.exit(0);\n});\n</pre> <h2 id=\"readline_example_read_file_stream_line_by_line\">Example: Read File Stream Line-by-Line</h2> <p>A common use case for <code>readline</code> is to consume input from a filesystem <a href=\"stream#stream_readable_streams\">Readable</a> stream one line at a time, as illustrated in the following example:</p> <pre data-language=\"js\">const readline = require('readline');\nconst fs = require('fs');\n\nconst rl = readline.createInterface({\n  input: fs.createReadStream('sample.txt')\n});\n\nrl.on('line', (line) =&gt; {\n  console.log(`Line from file: ${line}`);\n});\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/readline.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/readline.html</a>\n  </p>\n</div>\n","dgram":"<h1 id=\"dgram_udp_datagram_sockets\">UDP / Datagram Sockets</h1> <div class=\"api_stability api_stability_2\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</div> <p>The <code>dgram</code> module provides an implementation of UDP Datagram sockets.</p> <pre data-language=\"js\">const dgram = require('dgram');\nconst server = dgram.createSocket('udp4');\n\nserver.on('error', (err) =&gt; {\n  console.log(`server error:\\n${err.stack}`);\n  server.close();\n});\n\nserver.on('message', (msg, rinfo) =&gt; {\n  console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\n});\n\nserver.on('listening', () =&gt; {\n  var address = server.address();\n  console.log(`server listening ${address.address}:${address.port}`);\n});\n\nserver.bind(41234);\n// server listening 0.0.0.0:41234\n</pre> <h2 id=\"dgram_class_dgram_socket\">Class: dgram.Socket</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.99</span> </div>\n<p>The <code>dgram.Socket</code> object is an <a href=\"events\"><code>EventEmitter</code></a> that encapsulates the datagram functionality.</p> <p>New instances of <code>dgram.Socket</code> are created using <a href=\"#dgram_dgram_createsocket_options_callback\"><code>dgram.createSocket()</code></a>. The <code>new</code> keyword is not to be used to create <code>dgram.Socket</code> instances.</p> <h3 id=\"dgram_event_close\">Event: 'close'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.99</span> </div>\n<p>The <code>'close'</code> event is emitted after a socket is closed with <a href=\"#dgram_socket_close_callback\"><code>close()</code></a>. Once triggered, no new <code>'message'</code> events will be emitted on this socket.</p> <h3 id=\"dgram_event_error\">Event: 'error'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.99</span> </div>\n<ul> <li>\n<code>exception</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a>\n</li> </ul> <p>The <code>'error'</code> event is emitted whenever any error occurs. The event handler function is passed a single Error object.</p> <h3 id=\"dgram_event_listening\">Event: 'listening'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.99</span> </div>\n<p>The <code>'listening'</code> event is emitted whenever a socket begins listening for datagram messages. This occurs as soon as UDP sockets are created.</p> <h3 id=\"dgram_event_message\">Event: 'message'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.99</span> </div>\n<p>The <code>'message'</code> event is emitted when a new datagram is available on a socket. The event handler function is passed two arguments: <code>msg</code> and <code>rinfo</code>.</p> <ul> <li>\n<code>msg</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> - The message</li> <li>\n<code>rinfo</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> - Remote address information<ul> <li>\n<code>address</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The sender address</li> <li>\n<code>family</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The address family (<code>'IPv4'</code> or <code>'IPv6'</code>)</li> <li>\n<code>port</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The sender port</li> <li>\n<code>size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The message size</li> </ul> </li> </ul> <h3 id=\"dgram_socket_addmembership_multicastaddress_multicastinterface\">socket.addMembership(multicastAddress[, multicastInterface])</h3> <div class=\"api_metadata\"> <span>Added in: v0.6.9</span> </div>\n<ul> <li>\n<code>multicastAddress</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>multicastInterface</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>, Optional</li> </ul> <p>Tells the kernel to join a multicast group at the given <code>multicastAddress</code> and <code>multicastInterface</code> using the <code>IP_ADD_MEMBERSHIP</code> socket option. If the <code>multicastInterface</code> argument is not specified, the operating system will choose one interface and will add membership to it. To add membership to every available interface, call <code>addMembership</code> multiple times, once per interface.</p> <h3 id=\"dgram_socket_address\">socket.address()</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.99</span> </div>\n<p>Returns an object containing the address information for a socket. For UDP sockets, this object will contain <code>address</code>, <code>family</code> and <code>port</code> properties.</p> <h3 id=\"dgram_socket_bind_port_address_callback\">socket.bind([port][, address][, callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.99</span> </div>\n<ul> <li>\n<code>port</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> - Integer, Optional</li> <li>\n<code>address</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>, Optional</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> with no parameters, Optional. Called when binding is complete.</li> </ul> <p>For UDP sockets, causes the <code>dgram.Socket</code> to listen for datagram messages on a named <code>port</code> and optional <code>address</code>. If <code>port</code> is not specified or is <code>0</code>, the operating system will attempt to bind to a random port. If <code>address</code> is not specified, the operating system will attempt to listen on all addresses. Once binding is complete, a <code>'listening'</code> event is emitted and the optional <code>callback</code> function is called.</p> <p>Note that specifying both a <code>'listening'</code> event listener and passing a <code>callback</code> to the <code>socket.bind()</code> method is not harmful but not very useful.</p> <p>A bound datagram socket keeps the Node.js process running to receive datagram messages.</p> <p>If binding fails, an <code>'error'</code> event is generated. In rare case (e.g. attempting to bind with a closed socket), an <a href=\"errors#errors_class_error\"><code>Error</code></a> may be thrown.</p> <p>Example of a UDP server listening on port 41234:</p> <pre data-language=\"js\">const dgram = require('dgram');\nconst server = dgram.createSocket('udp4');\n\nserver.on('error', (err) =&gt; {\n  console.log(`server error:\\n${err.stack}`);\n  server.close();\n});\n\nserver.on('message', (msg, rinfo) =&gt; {\n  console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\n});\n\nserver.on('listening', () =&gt; {\n  var address = server.address();\n  console.log(`server listening ${address.address}:${address.port}`);\n});\n\nserver.bind(41234);\n// server listening 0.0.0.0:41234\n</pre> <h3 id=\"dgram_socket_bind_options_callback\">socket.bind(options[, callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.14</span> </div>\n<ul> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> - Required. Supports the following properties:<ul> <li>\n<code>port</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> - Optional.</li> <li>\n<code>address</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> - Optional.</li> <li>\n<code>exclusive</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> - Optional.</li> </ul> </li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> - Optional.</li> </ul> <p>For UDP sockets, causes the <code>dgram.Socket</code> to listen for datagram messages on a named <code>port</code> and optional <code>address</code> that are passed as properties of an <code>options</code> object passed as the first argument. If <code>port</code> is not specified or is <code>0</code>, the operating system will attempt to bind to a random port. If <code>address</code> is not specified, the operating system will attempt to listen on all addresses. Once binding is complete, a <code>'listening'</code> event is emitted and the optional <code>callback</code> function is called.</p> <p>Note that specifying both a <code>'listening'</code> event listener and passing a <code>callback</code> to the <code>socket.bind()</code> method is not harmful but not very useful.</p> <p>The <code>options</code> object may contain an additional <code>exclusive</code> property that is use when using <code>dgram.Socket</code> objects with the <a href=\"cluster\"><code>cluster</code></a> module. When <code>exclusive</code> is set to <code>false</code> (the default), cluster workers will use the same underlying socket handle allowing connection handling duties to be shared. When <code>exclusive</code> is <code>true</code>, however, the handle is not shared and attempted port sharing results in an error.</p> <p>A bound datagram socket keeps the Node.js process running to receive datagram messages.</p> <p>If binding fails, an <code>'error'</code> event is generated. In rare case (e.g. attempting to bind with a closed socket), an <a href=\"errors#errors_class_error\"><code>Error</code></a> may be thrown.</p> <p>An example socket listening on an exclusive port is shown below.</p> <pre data-language=\"js\">socket.bind({\n  address: 'localhost',\n  port: 8000,\n  exclusive: true\n});\n</pre> <h3 id=\"dgram_socket_close_callback\">socket.close([callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.99</span> </div>\n<p>Close the underlying socket and stop listening for data on it. If a callback is provided, it is added as a listener for the <a href=\"#dgram_event_close\"><code>'close'</code></a> event.</p> <h3 id=\"dgram_socket_dropmembership_multicastaddress_multicastinterface\">socket.dropMembership(multicastAddress[, multicastInterface])</h3> <div class=\"api_metadata\"> <span>Added in: v0.6.9</span> </div>\n<ul> <li>\n<code>multicastAddress</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>multicastInterface</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>, Optional</li> </ul> <p>Instructs the kernel to leave a multicast group at <code>multicastAddress</code> using the <code>IP_DROP_MEMBERSHIP</code> socket option. This method is automatically called by the kernel when the socket is closed or the process terminates, so most apps will never have reason to call this.</p> <p>If <code>multicastInterface</code> is not specified, the operating system will attempt to drop membership on all valid interfaces.</p> <h3 id=\"dgram_socket_ref\">socket.ref()</h3> <div class=\"api_metadata\"> <span>Added in: v0.9.1</span> </div>\n<p>By default, binding a socket will cause it to block the Node.js process from exiting as long as the socket is open. The <code>socket.unref()</code> method can be used to exclude the socket from the reference counting that keeps the Node.js process active. The <code>socket.ref()</code> method adds the socket back to the reference counting and restores the default behavior.</p> <p>Calling <code>socket.ref()</code> multiples times will have no additional effect.</p> <p>The <code>socket.ref()</code> method returns a reference to the socket so calls can be chained.</p> <h3 id=\"dgram_socket_send_msg_offset_length_port_address_callback\">socket.send(msg, [offset, length,] port, address[, callback])</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>On success, <code>callback</code> will now be called with an <code>error</code> argument of <code>null</code> rather than <code>0</code>.</p> </td>\n</tr> <tr>\n<td>v5.7.0</td> <td>\n<p>The <code>msg</code> parameter can be an array now. Also, the <code>offset</code> and <code>length</code> parameters are optional now.</p> </td>\n</tr> <tr>\n<td>v0.1.99</td> <td>\n<p><span>Added in: v0.1.99</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>msg</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <span class=\"type\">&lt;array&gt;</span> Message to be sent</li> <li>\n<code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Integer. Optional. Offset in the buffer where the message starts.</li> <li>\n<code>length</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Integer. Optional. Number of bytes in the message.</li> <li>\n<code>port</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Integer. Destination port.</li> <li>\n<code>address</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Destination hostname or IP address.</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Called when the message has been sent. Optional.</li> </ul> <p>Broadcasts a datagram on the socket. The destination <code>port</code> and <code>address</code> must be specified.</p> <p>The <code>msg</code> argument contains the message to be sent. Depending on its type, different behavior can apply. If <code>msg</code> is a <code>Buffer</code>, the <code>offset</code> and <code>length</code> specify the offset within the <code>Buffer</code> where the message begins and the number of bytes in the message, respectively. If <code>msg</code> is a <code>String</code>, then it is automatically converted to a <code>Buffer</code> with <code>'utf8'</code> encoding. With messages that contain multi-byte characters, <code>offset</code> and <code>length</code> will be calculated with respect to <a href=\"buffer#buffer_class_method_buffer_bytelength_string_encoding\">byte length</a> and not the character position. If <code>msg</code> is an array, <code>offset</code> and <code>length</code> must not be specified.</p> <p>The <code>address</code> argument is a string. If the value of <code>address</code> is a host name, DNS will be used to resolve the address of the host. If the <code>address</code> is not specified or is an empty string, <code>'127.0.0.1'</code> or <code>'::1'</code> will be used instead.</p> <p>If the socket has not been previously bound with a call to <code>bind</code>, the socket is assigned a random port number and is bound to the \"all interfaces\" address (<code>'0.0.0.0'</code> for <code>udp4</code> sockets, <code>'::0'</code> for <code>udp6</code> sockets.)</p> <p>An optional <code>callback</code> function may be specified to as a way of reporting DNS errors or for determining when it is safe to reuse the <code>buf</code> object. Note that DNS lookups delay the time to send for at least one tick of the Node.js event loop.</p> <p>The only way to know for sure that the datagram has been sent is by using a <code>callback</code>. If an error occurs and a <code>callback</code> is given, the error will be passed as the first argument to the <code>callback</code>. If a <code>callback</code> is not given, the error is emitted as an <code>'error'</code> event on the <code>socket</code> object.</p> <p>Offset and length are optional, but if you specify one you would need to specify the other. Also, they are supported only when the first argument is a <code>Buffer</code>.</p> <p>Example of sending a UDP packet to a random port on <code>localhost</code>;</p> <pre data-language=\"js\">const dgram = require('dgram');\nconst message = Buffer.from('Some bytes');\nconst client = dgram.createSocket('udp4');\nclient.send(message, 41234, 'localhost', (err) =&gt; {\n  client.close();\n});\n</pre> <p>Example of sending a UDP packet composed of multiple buffers to a random port on <code>localhost</code>;</p> <pre data-language=\"js\">const dgram = require('dgram');\nconst buf1 = Buffer.from('Some ');\nconst buf2 = Buffer.from('bytes');\nconst client = dgram.createSocket('udp4');\nclient.send([buf1, buf2], 41234, 'localhost', (err) =&gt; {\n  client.close();\n});\n</pre> <p>Sending multiple buffers might be faster or slower depending on your application and operating system: benchmark it. Usually it is faster.</p> <p><strong>A Note about UDP datagram size</strong></p> <p>The maximum size of an <code>IPv4/v6</code> datagram depends on the <code>MTU</code> (<em>Maximum Transmission Unit</em>) and on the <code>Payload Length</code> field size.</p> <ul> <li>\n<p>The <code>Payload Length</code> field is <code>16 bits</code> wide, which means that a normal payload exceed 64K octets <em>including</em> the internet header and data (65,507 bytes = 65,535 − 8 bytes UDP header − 20 bytes IP header); this is generally true for loopback interfaces, but such long datagram messages are impractical for most hosts and networks.</p> </li> <li>\n<p>The <code>MTU</code> is the largest size a given link layer technology can support for datagram messages. For any link, <code>IPv4</code> mandates a minimum <code>MTU</code> of <code>68</code> octets, while the recommended <code>MTU</code> for IPv4 is <code>576</code> (typically recommended as the <code>MTU</code> for dial-up type applications), whether they arrive whole or in fragments.</p> <p>For <code>IPv6</code>, the minimum <code>MTU</code> is <code>1280</code> octets, however, the mandatory minimum fragment reassembly buffer size is <code>1500</code> octets. The value of <code>68</code> octets is very small, since most current link layer technologies, like Ethernet, have a minimum <code>MTU</code> of <code>1500</code>.</p> </li> </ul> <p>It is impossible to know in advance the MTU of each link through which a packet might travel. Sending a datagram greater than the receiver <code>MTU</code> will not work because the packet will get silently dropped without informing the source that the data did not reach its intended recipient.</p> <h3 id=\"dgram_socket_setbroadcast_flag\">socket.setBroadcast(flag)</h3> <div class=\"api_metadata\"> <span>Added in: v0.6.9</span> </div>\n<ul> <li>\n<code>flag</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a>\n</li> </ul> <p>Sets or clears the <code>SO_BROADCAST</code> socket option. When set to <code>true</code>, UDP packets may be sent to a local interface's broadcast address.</p> <h3 id=\"dgram_socket_setmulticastloopback_flag\">socket.setMulticastLoopback(flag)</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.8</span> </div>\n<ul> <li>\n<code>flag</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a>\n</li> </ul> <p>Sets or clears the <code>IP_MULTICAST_LOOP</code> socket option. When set to <code>true</code>, multicast packets will also be received on the local interface.</p> <h3 id=\"dgram_socket_setmulticastttl_ttl\">socket.setMulticastTTL(ttl)</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.8</span> </div>\n<ul> <li>\n<code>ttl</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Integer</li> </ul> <p>Sets the <code>IP_MULTICAST_TTL</code> socket option. While TTL generally stands for \"Time to Live\", in this context it specifies the number of IP hops that a packet is allowed to travel through, specifically for multicast traffic. Each router or gateway that forwards a packet decrements the TTL. If the TTL is decremented to 0 by a router, it will not be forwarded.</p> <p>The argument passed to to <code>socket.setMulticastTTL()</code> is a number of hops between 0 and 255. The default on most systems is <code>1</code> but can vary.</p> <h3 id=\"dgram_socket_setttl_ttl\">socket.setTTL(ttl)</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.101</span> </div>\n<ul> <li>\n<code>ttl</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Integer</li> </ul> <p>Sets the <code>IP_TTL</code> socket option. While TTL generally stands for \"Time to Live\", in this context it specifies the number of IP hops that a packet is allowed to travel through. Each router or gateway that forwards a packet decrements the TTL. If the TTL is decremented to 0 by a router, it will not be forwarded. Changing TTL values is typically done for network probes or when multicasting.</p> <p>The argument to <code>socket.setTTL()</code> is a number of hops between 1 and 255. The default on most systems is 64 but can vary.</p> <h3 id=\"dgram_socket_unref\">socket.unref()</h3> <div class=\"api_metadata\"> <span>Added in: v0.9.1</span> </div>\n<p>By default, binding a socket will cause it to block the Node.js process from exiting as long as the socket is open. The <code>socket.unref()</code> method can be used to exclude the socket from the reference counting that keeps the Node.js process active, allowing the process to exit even if the socket is still listening.</p> <p>Calling <code>socket.unref()</code> multiple times will have no addition effect.</p> <p>The <code>socket.unref()</code> method returns a reference to the socket so calls can be chained.</p> <h3 id=\"dgram_change_to_asynchronous_socket_bind_behavior\">Change to asynchronous <code>socket.bind()</code> behavior</h3> <p>As of Node.js v0.10, <a href=\"#dgram_socket_bind_options_callback\"><code>dgram.Socket#bind()</code></a> changed to an asynchronous execution model. Legacy code that assumes synchronous behavior, as in the following example:</p> <pre data-language=\"js\">const s = dgram.createSocket('udp4');\ns.bind(1234);\ns.addMembership('224.0.0.114');\n</pre> <p>Must be changed to pass a callback function to the <a href=\"#dgram_socket_bind_options_callback\"><code>dgram.Socket#bind()</code></a> function:</p> <pre data-language=\"js\">const s = dgram.createSocket('udp4');\ns.bind(1234, () =&gt; {\n  s.addMembership('224.0.0.114');\n});\n</pre> <h2 id=\"dgram_dgram_module_functions\">\n<code>dgram</code> module functions</h2> <h3 id=\"dgram_dgram_createsocket_options_callback\">dgram.createSocket(options[, callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.13</span> </div>\n<ul> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Attached as a listener to <code>'message'</code> events.</li> <li>Returns: <a href=\"dgram#dgram_class_dgram_socket\" class=\"type\">&lt;dgram.Socket&gt;</a>\n</li> </ul> <p>Creates a <code>dgram.Socket</code> object. The <code>options</code> argument is an object that should contain a <code>type</code> field of either <code>udp4</code> or <code>udp6</code> and an optional boolean <code>reuseAddr</code> field.</p> <p>When <code>reuseAddr</code> is <code>true</code> <a href=\"#dgram_socket_bind_port_address_callback\"><code>socket.bind()</code></a> will reuse the address, even if another process has already bound a socket on it. <code>reuseAddr</code> defaults to <code>false</code>. The optional <code>callback</code> function is added as a listener for <code>'message'</code> events.</p> <p>Once the socket is created, calling <a href=\"#dgram_socket_bind_port_address_callback\"><code>socket.bind()</code></a> will instruct the socket to begin listening for datagram messages. When <code>address</code> and <code>port</code> are not passed to <a href=\"#dgram_socket_bind_port_address_callback\"><code>socket.bind()</code></a> the method will bind the socket to the \"all interfaces\" address on a random port (it does the right thing for both <code>udp4</code> and <code>udp6</code> sockets). The bound address and port can be retrieved using <a href=\"#dgram_socket_address\"><code>socket.address().address</code></a> and <a href=\"#dgram_socket_address\"><code>socket.address().port</code></a>.</p> <h3 id=\"dgram_dgram_createsocket_type_callback\">dgram.createSocket(type[, callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.99</span> </div>\n<ul> <li>\n<code>type</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> - Either 'udp4' or 'udp6'</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> - Attached as a listener to <code>'message'</code> events. Optional</li> <li>Returns: <a href=\"dgram#dgram_class_dgram_socket\" class=\"type\">&lt;dgram.Socket&gt;</a>\n</li> </ul> <p>Creates a <code>dgram.Socket</code> object of the specified <code>type</code>. The <code>type</code> argument can be either <code>udp4</code> or <code>udp6</code>. An optional <code>callback</code> function can be passed which is added as a listener for <code>'message'</code> events.</p> <p>Once the socket is created, calling <a href=\"#dgram_socket_bind_port_address_callback\"><code>socket.bind()</code></a> will instruct the socket to begin listening for datagram messages. When <code>address</code> and <code>port</code> are not passed to <a href=\"#dgram_socket_bind_port_address_callback\"><code>socket.bind()</code></a> the method will bind the socket to the \"all interfaces\" address on a random port (it does the right thing for both <code>udp4</code> and <code>udp6</code> sockets). The bound address and port can be retrieved using <a href=\"#dgram_socket_address\"><code>socket.address().address</code></a> and <a href=\"#dgram_socket_address\"><code>socket.address().port</code></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/dgram.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/dgram.html</a>\n  </p>\n</div>\n","tls":"<h1 id=\"tls_tls_ssl\">TLS (SSL)</h1> <div class=\"api_stability api_stability_2\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</div>\n<p>The <code>tls</code> module provides an implementation of the Transport Layer Security (TLS) and Secure Socket Layer (SSL) protocols that is built on top of OpenSSL. The module can be accessed using:</p> <pre data-language=\"js\">const tls = require('tls');\n</pre> <h2 id=\"tls_tls_ssl_concepts\">TLS/SSL Concepts</h2> <p>The TLS/SSL is a public/private key infrastructure (PKI). For most common cases, each client and server must have a <em>private key</em>.</p> <p>Private keys can be generated in multiple ways. The example below illustrates use of the OpenSSL command-line interface to generate a 2048-bit RSA private key:</p> <pre data-language=\"sh\">openssl genrsa -out ryans-key.pem 2048\n</pre> <p>With TLS/SSL, all servers (and some clients) must have a <em>certificate</em>. Certificates are <em>public keys</em> that correspond to a private key, and that are digitally signed either by a Certificate Authority or by the owner of the private key (such certificates are referred to as \"self-signed\"). The first step to obtaining a certificate is to create a <em>Certificate Signing Request</em> (CSR) file.</p> <p>The OpenSSL command-line interface can be used to generate a CSR for a private key:</p> <pre data-language=\"sh\">openssl req -new -sha256 -key ryans-key.pem -out ryans-csr.pem\n</pre> <p>Once the CSR file is generated, it can either be sent to a Certificate Authority for signing or used to generate a self-signed certificate.</p> <p>Creating a self-signed certificate using the OpenSSL command-line interface is illustrated in the example below:</p> <pre data-language=\"sh\">openssl x509 -req -in ryans-csr.pem -signkey ryans-key.pem -out ryans-cert.pem\n</pre> <p>Once the certificate is generated, it can be used to generate a <code>.pfx</code> or <code>.p12</code> file:</p> <pre data-language=\"sh\">openssl pkcs12 -export -in ryans-cert.pem -inkey ryans-key.pem \\\n      -certfile ca-cert.pem -out ryans.pfx\n</pre> <p>Where:</p> <ul> <li>\n<code>in</code>: is the signed certificate</li> <li>\n<code>inkey</code>: is the associated private key</li> <li>\n<code>certfile</code>: is a concatenation of all Certificate Authority (CA) certs into a single file, e.g. <code>cat ca1-cert.pem ca2-cert.pem &gt; ca-cert.pem</code>\n</li> </ul> <h3 id=\"tls_perfect_forward_secrecy\">Perfect Forward Secrecy</h3>  <p>The term \"<a href=\"https://en.wikipedia.org/wiki/Perfect_forward_secrecy\">Forward Secrecy</a>\" or \"Perfect Forward Secrecy\" describes a feature of key-agreement (i.e., key-exchange) methods. That is, the server and client keys are used to negotiate new temporary keys that are used specifically and only for the current communication session. Practically, this means that even if the server's private key is compromised, communication can only be decrypted by eavesdroppers if the attacker manages to obtain the key-pair specifically generated for the session.</p> <p>Perfect Forward Secrecy is achieved by randomly generating a key pair for key-agreement on every TLS/SSL handshake (in contrast to using the same key for all sessions). Methods implementing this technique are called \"ephemeral\".</p> <p>Currently two methods are commonly used to achieve Perfect Forward Secrecy (note the character \"E\" appended to the traditional abbreviations):</p> <ul> <li>\n<a href=\"https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange\">DHE</a> - An ephemeral version of the Diffie Hellman key-agreement protocol.</li> <li>\n<a href=\"https://en.wikipedia.org/wiki/Elliptic_curve_Diffie%E2%80%93Hellman\">ECDHE</a> - An ephemeral version of the Elliptic Curve Diffie Hellman key-agreement protocol.</li> </ul> <p>Ephemeral methods may have some performance drawbacks, because key generation is expensive.</p> <p>To use Perfect Forward Secrecy using <code>DHE</code> with the <code>tls</code> module, it is required to generate Diffie-Hellman parameters and specify them with the <code>dhparam</code> option to <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a>. The following illustrates the use of the OpenSSL command-line interface to generate such parameters:</p> <pre data-language=\"sh\">openssl dhparam -outform PEM -out dhparam.pem 2048\n</pre> <p>If using Perfect Forward Secrecy using <code>ECDHE</code>, Diffie-Hellman parameters are not required and a default ECDHE curve will be used. The <code>ecdhCurve</code> property can be used when creating a TLS Server to specify the name of an alternative curve to use, see <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a> for more info.</p> <h3 id=\"tls_alpn_npn_and_sni\">ALPN, NPN and SNI</h3>  <p>ALPN (Application-Layer Protocol Negotiation Extension), NPN (Next Protocol Negotiation) and, SNI (Server Name Indication) are TLS handshake extensions:</p> <ul> <li>ALPN/NPN - Allows the use of one TLS server for multiple protocols (HTTP, SPDY, HTTP/2)</li> <li>SNI - Allows the use of one TLS server for multiple hostnames with different SSL certificates.</li> </ul> <p><em>Note</em>: Use of ALPN is recommended over NPN. The NPN extension has never been formally defined or documented and generally not recommended for use.</p> <h3 id=\"tls_client_initiated_renegotiation_attack_mitigation\">Client-initiated renegotiation attack mitigation</h3>  <p>The TLS protocol allows clients to renegotiate certain aspects of the TLS session. Unfortunately, session renegotiation requires a disproportionate amount of server-side resources, making it a potential vector for denial-of-service attacks.</p> <p>To mitigate the risk, renegotiation is limited to three times every ten minutes. An <code>'error'</code> event is emitted on the <a href=\"#tls_class_tls_tlssocket\"><code>tls.TLSSocket</code></a> instance when this threshold is exceeded. The limits are configurable:</p> <ul> <li>\n<code>tls.CLIENT_RENEG_LIMIT</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the number of renegotiation requests. Defaults to <code>3</code>.</li> <li>\n<code>tls.CLIENT_RENEG_WINDOW</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the time renegotiation window in seconds. Defaults to <code>600</code> (10 minutes).</li> </ul> <p><em>Note</em>: The default renegotiation limits should not be modified without a full understanding of the implications and risks.</p> <p>To test the renegotiation limits on a server, connect to it using the OpenSSL command-line client (<code>openssl s_client -connect address:port</code>) then input <code>R&lt;CR&gt;</code> (i.e., the letter <code>R</code> followed by a carriage return) multiple times.</p> <h2 id=\"tls_modifying_the_default_tls_cipher_suite\">Modifying the Default TLS Cipher suite</h2> <p>Node.js is built with a default suite of enabled and disabled TLS ciphers. Currently, the default cipher suite is:</p> <pre data-language=\"txt\">ECDHE-RSA-AES128-GCM-SHA256:\nECDHE-ECDSA-AES128-GCM-SHA256:\nECDHE-RSA-AES256-GCM-SHA384:\nECDHE-ECDSA-AES256-GCM-SHA384:\nDHE-RSA-AES128-GCM-SHA256:\nECDHE-RSA-AES128-SHA256:\nDHE-RSA-AES128-SHA256:\nECDHE-RSA-AES256-SHA384:\nDHE-RSA-AES256-SHA384:\nECDHE-RSA-AES256-SHA256:\nDHE-RSA-AES256-SHA256:\nHIGH:\n!aNULL:\n!eNULL:\n!EXPORT:\n!DES:\n!RC4:\n!MD5:\n!PSK:\n!SRP:\n!CAMELLIA\n</pre> <p>This default can be replaced entirely using the <code>--tls-cipher-list</code> command line switch. For instance, the following makes <code>ECDHE-RSA-AES128-GCM-SHA256:!RC4</code> the default TLS cipher suite:</p> <pre data-language=\"sh\">node --tls-cipher-list=\"ECDHE-RSA-AES128-GCM-SHA256:!RC4\"\n</pre> <p>The default can also be replaced on a per client or server basis using the <code>ciphers</code> option from <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a>, which is also available in <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a>, <a href=\"#tls_tls_connect_options_callback\"><code>tls.connect()</code></a>, and when creating new <a href=\"#tls_class_tls_tlssocket\"><code>tls.TLSSocket</code></a>s.</p> <p>Consult <a href=\"https://www.openssl.org/docs/man1.0.2/apps/ciphers.html#CIPHER-LIST-FORMAT\">OpenSSL cipher list format documentation</a> for details on the format.</p> <p><em>Note</em>: The default cipher suite included within Node.js has been carefully selected to reflect current security best practices and risk mitigation. Changing the default cipher suite can have a significant impact on the security of an application. The <code>--tls-cipher-list</code> switch and <code>ciphers</code> option should by used only if absolutely necessary.</p> <p>The default cipher suite prefers GCM ciphers for <a href=\"https://www.chromium.org/Home/chromium-security/education/tls#TOC-Cipher-Suites\">Chrome's 'modern cryptography' setting</a> and also prefers ECDHE and DHE ciphers for Perfect Forward Secrecy, while offering <em>some</em> backward compatibility.</p> <p>128 bit AES is preferred over 192 and 256 bit AES in light of <a href=\"https://www.schneier.com/blog/archives/2009/07/another_new_aes.html\">specific attacks affecting larger AES key sizes</a>.</p> <p>Old clients that rely on insecure and deprecated RC4 or DES-based ciphers (like Internet Explorer 6) cannot complete the handshaking process with the default configuration. If these clients <em>must</em> be supported, the <a href=\"https://wiki.mozilla.org/Security/Server_Side_TLS\">TLS recommendations</a> may offer a compatible cipher suite. For more details on the format, see the <a href=\"https://www.openssl.org/docs/man1.0.2/apps/ciphers.html#CIPHER-LIST-FORMAT\">OpenSSL cipher list format documentation</a>.</p> <h2 id=\"tls_class_tls_server\">Class: tls.Server</h2> <div class=\"api_metadata\"> <span>Added in: v0.3.2</span> </div>\n<p>The <code>tls.Server</code> class is a subclass of <code>net.Server</code> that accepts encrypted connections using TLS or SSL.</p> <h3 id=\"tls_event_newsession\">Event: 'newSession'</h3> <div class=\"api_metadata\"> <span>Added in: v0.9.2</span> </div>\n<p>The <code>'newSession'</code> event is emitted upon creation of a new TLS session. This may be used to store sessions in external storage. The listener callback is passed three arguments when called:</p> <ul> <li>\n<code>sessionId</code> - The TLS session identifier</li> <li>\n<code>sessionData</code> - The TLS session data</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A callback function taking no arguments that must be invoked in order for data to be sent or received over the secure connection.</li> </ul> <p><em>Note</em>: Listening for this event will have an effect only on connections established after the addition of the event listener.</p> <h3 id=\"tls_event_ocsprequest\">Event: 'OCSPRequest'</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.13</span> </div>\n<p>The <code>'OCSPRequest'</code> event is emitted when the client sends a certificate status request. The listener callback is passed three arguments when called:</p> <ul> <li>\n<code>certificate</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The server certificate</li> <li>\n<code>issuer</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The issuer's certificate</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A callback function that must be invoked to provide the results of the OCSP request.</li> </ul> <p>The server's current certificate can be parsed to obtain the OCSP URL and certificate ID; after obtaining an OCSP response, <code>callback(null, resp)</code> is then invoked, where <code>resp</code> is a <code>Buffer</code> instance containing the OCSP response. Both <code>certificate</code> and <code>issuer</code> are <code>Buffer</code> DER-representations of the primary and issuer's certificates. These can be used to obtain the OCSP certificate ID and OCSP endpoint URL.</p> <p>Alternatively, <code>callback(null, null)</code> may be called, indicating that there was no OCSP response.</p> <p>Calling <code>callback(err)</code> will result in a <code>socket.destroy(err)</code> call.</p> <p>The typical flow of an OCSP Request is as follows:</p> <ol> <li>Client connects to the server and sends an <code>'OCSPRequest'</code> (via the status info extension in ClientHello).</li> <li>Server receives the request and emits the <code>'OCSPRequest'</code> event, calling the listener if registered.</li> <li>Server extracts the OCSP URL from either the <code>certificate</code> or <code>issuer</code> and performs an <a href=\"https://en.wikipedia.org/wiki/OCSP_stapling\">OCSP request</a> to the CA.</li> <li>Server receives <code>OCSPResponse</code> from the CA and sends it back to the client via the <code>callback</code> argument</li> <li>Client validates the response and either destroys the socket or performs a handshake.</li> </ol> <p><em>Note</em>: The <code>issuer</code> can be <code>null</code> if the certificate is either self-signed or the issuer is not in the root certificates list. (An issuer may be provided via the <code>ca</code> option when establishing the TLS connection.)</p> <p><em>Note</em>: Listening for this event will have an effect only on connections established after the addition of the event listener.</p> <p><em>Note</em>: An npm module like <a href=\"https://npmjs.org/package/asn1.js\">asn1.js</a> may be used to parse the certificates.</p> <h3 id=\"tls_event_resumesession\">Event: 'resumeSession'</h3> <div class=\"api_metadata\"> <span>Added in: v0.9.2</span> </div>\n<p>The <code>'resumeSession'</code> event is emitted when the client requests to resume a previous TLS session. The listener callback is passed two arguments when called:</p> <ul> <li>\n<code>sessionId</code> - The TLS/SSL session identifier</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A callback function to be called when the prior session has been recovered.</li> </ul> <p>When called, the event listener may perform a lookup in external storage using the given <code>sessionId</code> and invoke <code>callback(null, sessionData)</code> once finished. If the session cannot be resumed (i.e., doesn't exist in storage) the callback may be invoked as <code>callback(null, null)</code>. Calling <code>callback(err)</code> will terminate the incoming connection and destroy the socket.</p> <p><em>Note</em>: Listening for this event will have an effect only on connections established after the addition of the event listener.</p> <p>The following illustrates resuming a TLS session:</p> <pre data-language=\"js\">const tlsSessionStore = {};\nserver.on('newSession', (id, data, cb) =&gt; {\n  tlsSessionStore[id.toString('hex')] = data;\n  cb();\n});\nserver.on('resumeSession', (id, cb) =&gt; {\n  cb(null, tlsSessionStore[id.toString('hex')] || null);\n});\n</pre> <h3 id=\"tls_event_secureconnection\">Event: 'secureConnection'</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.2</span> </div>\n<p>The <code>'secureConnection'</code> event is emitted after the handshaking process for a new connection has successfully completed. The listener callback is passed a single argument when called:</p> <ul> <li>\n<code>tlsSocket</code> <a href=\"tls#tls_class_tls_tlssocket\" class=\"type\">&lt;tls.TLSSocket&gt;</a> The established TLS socket.</li> </ul> <p>The <code>tlsSocket.authorized</code> property is a <code>boolean</code> indicating whether the client has been verified by one of the supplied Certificate Authorities for the server. If <code>tlsSocket.authorized</code> is <code>false</code>, then <code>socket.authorizationError</code> is set to describe how authorization failed. Note that depending on the settings of the TLS server, unauthorized connections may still be accepted.</p> <p>The <code>tlsSocket.npnProtocol</code> and <code>tlsSocket.alpnProtocol</code> properties are strings that contain the selected NPN and ALPN protocols, respectively. When both NPN and ALPN extensions are received, ALPN takes precedence over NPN and the next protocol is selected by ALPN.</p> <p>When ALPN has no selected protocol, <code>tlsSocket.alpnProtocol</code> returns <code>false</code>.</p> <p>The <code>tlsSocket.servername</code> property is a string containing the server name requested via SNI.</p> <h3 id=\"tls_event_tlsclienterror\">Event: 'tlsClientError'</h3> <div class=\"api_metadata\"> <span>Added in: v6.0.0</span> </div>\n<p>The <code>'tlsClientError'</code> event is emitted when an error occurs before a secure connection is established. The listener callback is passed two arguments when called:</p> <ul> <li>\n<code>exception</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a> The <code>Error</code> object describing the error</li> <li>\n<code>tlsSocket</code> <a href=\"tls#tls_class_tls_tlssocket\" class=\"type\">&lt;tls.TLSSocket&gt;</a> The <code>tls.TLSSocket</code> instance from which the error originated.</li> </ul> <h3 id=\"tls_server_addcontext_hostname_context\">server.addContext(hostname, context)</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.3</span> </div>\n<ul> <li>\n<code>hostname</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> A SNI hostname or wildcard (e.g. <code>'*'</code>)</li> <li>\n<code>context</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> An object containing any of the possible properties from the <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a> <code>options</code> arguments (e.g. <code>key</code>, <code>cert</code>, <code>ca</code>, etc).</li> </ul> <p>The <code>server.addContext()</code> method adds a secure context that will be used if the client request's SNI hostname matches the supplied <code>hostname</code> (or wildcard).</p> <h3 id=\"tls_server_address\">server.address()</h3> <div class=\"api_metadata\"> <span>Added in: v0.6.0</span> </div>\n<p>Returns the bound address, the address family name, and port of the server as reported by the operating system. See <a href=\"net#net_server_address\"><code>net.Server.address()</code></a> for more information.</p> <h3 id=\"tls_server_close_callback\">server.close([callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.2</span> </div>\n<ul> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> An optional listener callback that will be registered to listen for the server instance's <code>'close'</code> event.</li> </ul> <p>The <code>server.close()</code> method stops the server from accepting new connections.</p> <p>This function operates asynchronously. The <code>'close'</code> event will be emitted when the server has no more open connections.</p> <h3 id=\"tls_server_connections\">server.connections</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.2</span> </div>\n<p>Returns the current number of concurrent connections on the server.</p> <h3 id=\"tls_server_getticketkeys\">server.getTicketKeys()</h3> <div class=\"api_metadata\"> <span>Added in: v3.0.0</span> </div>\n<p>Returns a <code>Buffer</code> instance holding the keys currently used for encryption/decryption of the <a href=\"https://www.ietf.org/rfc/rfc5077.txt\">TLS Session Tickets</a></p> <h3 id=\"tls_server_listen_port_hostname_callback\">server.listen(port[, hostname][, callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.2</span> </div>\n<ul> <li>\n<code>port</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The TCP/IP port on which to begin listening for connections. A value of <code>0</code> (zero) will assign a random port.</li> <li>\n<code>hostname</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The hostname, IPv4, or IPv6 address on which to begin listening for connections. If <code>undefined</code>, the server will accept connections on any IPv6 address (<code>::</code>) when IPv6 is available, or any IPv4 address (<code>0.0.0.0</code>) otherwise.</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A callback function to be invoked when the server has begun listening on the <code>port</code> and <code>hostname</code>.</li> </ul> <p>The <code>server.listen()</code> methods instructs the server to begin accepting connections on the specified <code>port</code> and <code>hostname</code>.</p> <p>This function operates asynchronously. If the <code>callback</code> is given, it will be called when the server has started listening.</p> <p>See <a href=\"net#net_class_net_server\"><code>net.Server</code></a> for more information.</p> <h3 id=\"tls_server_setticketkeys_keys\">server.setTicketKeys(keys)</h3> <div class=\"api_metadata\"> <span>Added in: v3.0.0</span> </div>\n<ul> <li>\n<code>keys</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The keys used for encryption/decryption of the <a href=\"https://www.ietf.org/rfc/rfc5077.txt\">TLS Session Tickets</a>.</li> </ul> <p>Updates the keys for encryption/decryption of the <a href=\"https://www.ietf.org/rfc/rfc5077.txt\">TLS Session Tickets</a>.</p> <p><em>Note</em>: The key's <code>Buffer</code> should be 48 bytes long. See <code>ticketKeys</code> option in <a href=\"#tls_tls_createserver_options_secureconnectionlistener\">tls.createServer</a> for more information on how it is used.</p> <p><em>Note</em>: Changes to the ticket keys are effective only for future server connections. Existing or currently pending server connections will use the previous keys.</p> <h2 id=\"tls_class_tls_tlssocket\">Class: tls.TLSSocket</h2> <div class=\"api_metadata\"> <span>Added in: v0.11.4</span> </div>\n<p>The <code>tls.TLSSocket</code> is a subclass of <a href=\"net#net_class_net_socket\"><code>net.Socket</code></a> that performs transparent encryption of written data and all required TLS negotiation.</p> <p>Instances of <code>tls.TLSSocket</code> implement the duplex <a href=\"stream#stream_stream\">Stream</a> interface.</p> <p><em>Note</em>: Methods that return TLS connection metadata (e.g. <a href=\"#tls_tlssocket_getpeercertificate_detailed\"><code>tls.TLSSocket.getPeerCertificate()</code></a> will only return data while the connection is open.</p> <h3 id=\"tls_new_tls_tlssocket_socket_options\">new tls.TLSSocket(socket[, options])</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v5.0.0</td> <td>\n<p>ALPN options are supported now.</p> </td>\n</tr> <tr>\n<td>v0.11.4</td> <td>\n<p><span>Added in: v0.11.4</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>socket</code> <a href=\"net#net_class_net_socket\" class=\"type\">&lt;net.Socket&gt;</a> An instance of <a href=\"net#net_class_net_socket\"><code>net.Socket</code></a>\n</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>isServer</code>: The SSL/TLS protocol is asymetrical, TLSSockets must know if they are to behave as a server or a client. If <code>true</code> the TLS socket will be instantiated as a server. Defaults to <code>false</code>.</li> <li>\n<code>server</code> <span class=\"type\">&lt;net.Server&gt;</span> An optional <a href=\"net#net_class_net_server\"><code>net.Server</code></a> instance.</li> <li>\n<code>requestCert</code>: Whether to authenticate the remote peer by requesting a certificate. Clients always request a server certificate. Servers (<code>isServer</code> is true) may optionally set <code>requestCert</code> to true to request a client certificate.</li> <li>\n<code>rejectUnauthorized</code>: Optional, see <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a>\n</li> <li>\n<code>NPNProtocols</code>: Optional, see <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a>\n</li> <li>\n<code>ALPNProtocols</code>: Optional, see <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a>\n</li> <li>\n<code>SNICallback</code>: Optional, see <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a>\n</li> <li>\n<code>session</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> An optional <code>Buffer</code> instance containing a TLS session.</li> <li>\n<code>requestOCSP</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If <code>true</code>, specifies that the OCSP status request extension will be added to the client hello and an <code>'OCSPResponse'</code> event will be emitted on the socket before establishing a secure communication</li> <li>\n<code>secureContext</code>: Optional TLS context object created with <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a>. If a <code>secureContext</code> is <em>not</em> provided, one will be created by passing the entire <code>options</code> object to <code>tls.createSecureContext()</code>. <em>Note</em>: In effect, all <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a> options can be provided, but they will be <em>completely ignored</em> unless the <code>secureContext</code> option is missing.</li> <li>...: Optional <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a> options can be provided, see the <code>secureContext</code> option for more information.</li> </ul> </li> </ul> <p>Construct a new <code>tls.TLSSocket</code> object from an existing TCP socket.</p> <h3 id=\"tls_event_ocspresponse\">Event: 'OCSPResponse'</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.13</span> </div>\n<p>The <code>'OCSPResponse'</code> event is emitted if the <code>requestOCSP</code> option was set when the <code>tls.TLSSocket</code> was created and an OCSP response has been received. The listener callback is passed a single argument when called:</p> <ul> <li>\n<code>response</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The server's OCSP response</li> </ul> <p>Typically, the <code>response</code> is a digitally signed object from the server's CA that contains information about server's certificate revocation status.</p> <h3 id=\"tls_event_secureconnect\">Event: 'secureConnect'</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.4</span> </div>\n<p>The <code>'secureConnect'</code> event is emitted after the handshaking process for a new connection has successfully completed. The listener callback will be called regardless of whether or not the server's certificate has been authorized. It is the client's responsibility to check the <code>tlsSocket.authorized</code> property to determine if the server certificate was signed by one of the specified CAs. If <code>tlsSocket.authorized === false</code>, then the error can be found by examining the <code>tlsSocket.authorizationError</code> property. If either ALPN or NPN was used, the <code>tlsSocket.alpnProtocol</code> or <code>tlsSocket.npnProtocol</code> properties can be checked to determine the negotiated protocol.</p> <h3 id=\"tls_tlssocket_address\">tlsSocket.address()</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.4</span> </div>\n<p>Returns the bound address, the address family name, and port of the underlying socket as reported by the operating system. Returns an object with three properties, e.g., <code>{ port: 12346, family: 'IPv4', address: '127.0.0.1' }</code></p> <h3 id=\"tls_tlssocket_authorizationerror\">tlsSocket.authorizationError</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.4</span> </div>\n<p>Returns the reason why the peer's certificate was not been verified. This property is set only when <code>tlsSocket.authorized === false</code>.</p> <h3 id=\"tls_tlssocket_authorized\">tlsSocket.authorized</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.4</span> </div>\n<p>Returns <code>true</code> if the peer certificate was signed by one of the CAs specified when creating the <code>tls.TLSSocket</code> instance, otherwise <code>false</code>.</p> <h3 id=\"tls_tlssocket_encrypted\">tlsSocket.encrypted</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.4</span> </div>\n<p>Always returns <code>true</code>. This may be used to distinguish TLS sockets from regular <code>net.Socket</code> instances.</p> <h3 id=\"tls_tlssocket_getcipher\">tlsSocket.getCipher()</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.4</span> </div>\n<p>Returns an object representing the cipher name and the SSL/TLS protocol version that first defined the cipher.</p> <p>For example: <code>{ name: 'AES256-SHA', version: 'TLSv1/SSLv3' }</code></p> <p>See <code>SSL_CIPHER_get_name()</code> and <code>SSL_CIPHER_get_version()</code> in <a href=\"https://www.openssl.org/docs/man1.0.2/ssl/SSL_CIPHER_get_name.html\">https://www.openssl.org/docs/man1.0.2/ssl/SSL_CIPHER_get_name.html</a> for more information.</p> <h3 id=\"tls_tlssocket_getephemeralkeyinfo\">tlsSocket.getEphemeralKeyInfo()</h3> <div class=\"api_metadata\"> <span>Added in: v5.0.0</span> </div>\n<p>Returns an object representing the type, name, and size of parameter of an ephemeral key exchange in <a href=\"#tls_perfect_forward_secrecy\">Perfect Forward Secrecy</a> on a client connection. It returns an empty object when the key exchange is not ephemeral. As this is only supported on a client socket; <code>null</code> is returned if called on a server socket. The supported types are <code>'DH'</code> and <code>'ECDH'</code>. The <code>name</code> property is available only when type is 'ECDH'.</p> <p>For Example: <code>{ type: 'ECDH', name: 'prime256v1', size: 256 }</code></p> <h3 id=\"tls_tlssocket_getpeercertificate_detailed\">tlsSocket.getPeerCertificate([ detailed ])</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.4</span> </div>\n<ul> <li>\n<code>detailed</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Include the full certificate chain if <code>true</code>, otherwise include just the peer's certificate.</li> </ul> <p>Returns an object representing the peer's certificate. The returned object has some properties corresponding to the fields of the certificate.</p> <p>If the full certificate chain was requested, each certificate will include a <code>issuerCertificate</code> property containing an object representing its issuer's certificate.</p> <p>For example:</p> <pre data-language=\"text\">{ subject:\n   { C: 'UK',\n     ST: 'Acknack Ltd',\n     L: 'Rhys Jones',\n     O: 'node.js',\n     OU: 'Test TLS Certificate',\n     CN: 'localhost' },\n  issuer:\n   { C: 'UK',\n     ST: 'Acknack Ltd',\n     L: 'Rhys Jones',\n     O: 'node.js',\n     OU: 'Test TLS Certificate',\n     CN: 'localhost' },\n  issuerCertificate:\n   { ... another certificate, possibly with a .issuerCertificate ... },\n  raw: &lt; RAW DER buffer &gt;,\n  valid_from: 'Nov 11 09:52:22 2009 GMT',\n  valid_to: 'Nov  6 09:52:22 2029 GMT',\n  fingerprint: '2A:7A:C2:DD:E5:F9:CC:53:72:35:99:7A:02:5A:71:38:52:EC:8A:DF',\n  serialNumber: 'B9B0D332A1AA5635' }\n</pre> <p>If the peer does not provide a certificate, an empty object will be returned.</p> <h3 id=\"tls_tlssocket_getprotocol\">tlsSocket.getProtocol()</h3> <div class=\"api_metadata\"> <span>Added in: v5.7.0</span> </div>\n<p>Returns a string containing the negotiated SSL/TLS protocol version of the current connection. The value <code>'unknown'</code> will be returned for connected sockets that have not completed the handshaking process. The value <code>null</code> will be returned for server sockets or disconnected client sockets.</p> <p>Example responses include:</p> <ul> <li><code>SSLv3</code></li> <li><code>TLSv1</code></li> <li><code>TLSv1.1</code></li> <li><code>TLSv1.2</code></li> <li><code>unknown</code></li> </ul> <p>See <a href=\"https://www.openssl.org/docs/man1.0.2/ssl/SSL_get_version.html\">https://www.openssl.org/docs/man1.0.2/ssl/SSL_get_version.html</a> for more information.</p> <h3 id=\"tls_tlssocket_getsession\">tlsSocket.getSession()</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.4</span> </div>\n<p>Returns the ASN.1 encoded TLS session or <code>undefined</code> if no session was negotiated. Can be used to speed up handshake establishment when reconnecting to the server.</p> <h3 id=\"tls_tlssocket_gettlsticket\">tlsSocket.getTLSTicket()</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.4</span> </div>\n<p>Returns the TLS session ticket or <code>undefined</code> if no session was negotiated.</p> <p><em>Note</em>: This only works with client TLS sockets. Useful only for debugging, for session reuse provide <code>session</code> option to <a href=\"#tls_tls_connect_options_callback\"><code>tls.connect()</code></a>.</p> <h3 id=\"tls_tlssocket_localaddress\">tlsSocket.localAddress</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.4</span> </div>\n<p>Returns the string representation of the local IP address.</p> <h3 id=\"tls_tlssocket_localport\">tlsSocket.localPort</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.4</span> </div>\n<p>Returns the numeric representation of the local port.</p> <h3 id=\"tls_tlssocket_remoteaddress\">tlsSocket.remoteAddress</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.4</span> </div>\n<p>Returns the string representation of the remote IP address. For example, <code>'74.125.127.100'</code> or <code>'2001:4860:a005::68'</code>.</p> <h3 id=\"tls_tlssocket_remotefamily\">tlsSocket.remoteFamily</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.4</span> </div>\n<p>Returns the string representation of the remote IP family. <code>'IPv4'</code> or <code>'IPv6'</code>.</p> <h3 id=\"tls_tlssocket_remoteport\">tlsSocket.remotePort</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.4</span> </div>\n<p>Returns the numeric representation of the remote port. For example, <code>443</code>.</p> <h3 id=\"tls_tlssocket_renegotiate_options_callback\">tlsSocket.renegotiate(options, callback)</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.8</span> </div>\n<ul> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>rejectUnauthorized</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a>\n</li> <li><code>requestCert</code></li> </ul> </li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A function that will be called when the renegotiation request has been completed.</li> </ul> <p>The <code>tlsSocket.renegotiate()</code> method initiates a TLS renegotiation process. Upon completion, the <code>callback</code> function will be passed a single argument that is either an <code>Error</code> (if the request failed) or <code>null</code>.</p> <p><em>Note</em>: This method can be used to request a peer's certificate after the secure connection has been established.</p> <p><em>Note</em>: When running as the server, the socket will be destroyed with an error after <code>handshakeTimeout</code> timeout.</p> <h3 id=\"tls_tlssocket_setmaxsendfragment_size\">tlsSocket.setMaxSendFragment(size)</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.11</span> </div>\n<ul> <li>\n<code>size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The maximum TLS fragment size. Defaults to <code>16384</code>. The maximum value is <code>16384</code>.</li> </ul> <p>The <code>tlsSocket.setMaxSendFragment()</code> method sets the maximum TLS fragment size. Returns <code>true</code> if setting the limit succeeded; <code>false</code> otherwise.</p> <p>Smaller fragment sizes decrease the buffering latency on the client: larger fragments are buffered by the TLS layer until the entire fragment is received and its integrity is verified; large fragments can span multiple roundtrips and their processing can be delayed due to packet loss or reordering. However, smaller fragments add extra TLS framing bytes and CPU overhead, which may decrease overall server throughput.</p> <h2 id=\"tls_tls_connect_options_callback\">tls.connect(options[, callback])</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v5.3.0, v4.7.0</td> <td>\n<p>The <code>secureContext</code> option is supported now.</p> </td>\n</tr> <tr>\n<td>v5.0.0</td> <td>\n<p>ALPN options are supported now.</p> </td>\n</tr> <tr>\n<td>v0.11.3</td> <td>\n<p><span>Added in: v0.11.3</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>host</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Host the client should connect to, defaults to 'localhost'.</li> <li>\n<code>port</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Port the client should connect to.</li> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Creates unix socket connection to path. If this option is specified, <code>host</code> and <code>port</code> are ignored.</li> <li>\n<code>socket</code> <a href=\"net#net_class_net_socket\" class=\"type\">&lt;net.Socket&gt;</a> Establish secure connection on a given socket rather than creating a new socket. If this option is specified, <code>path</code>, <code>host</code> and <code>port</code> are ignored. Usually, a socket is already connected when passed to <code>tls.connect()</code>, but it can be connected later. Note that connection/disconnection/destruction of <code>socket</code> is the user's responsibility, calling <code>tls.connect()</code> will not cause <code>net.connect()</code> to be called.</li> <li>\n<code>rejectUnauthorized</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If <code>true</code>, the server certificate is verified against the list of supplied CAs. An <code>'error'</code> event is emitted if verification fails; <code>err.code</code> contains the OpenSSL error code. Defaults to <code>true</code>.</li> <li>\n<code>NPNProtocols</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer[]&gt;</a> An array of strings or <code>Buffer</code>s containing supported NPN protocols. <code>Buffer</code>s should have the format <code>[len][name][len][name]...</code> e.g. <code>0x05hello0x05world</code>, where the first byte is the length of the next protocol name. Passing an array is usually much simpler, e.g. <code>['hello', 'world']</code>.</li> <li>\n<code>ALPNProtocols</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer[]&gt;</a> An array of strings or <code>Buffer</code>s containing the supported ALPN protocols. <code>Buffer</code>s should have the format <code>[len][name][len][name]...</code> e.g. <code>0x05hello0x05world</code>, where the first byte is the length of the next protocol name. Passing an array is usually much simpler: <code>['hello', 'world']</code>.)</li> <li>\n<code>servername</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Server name for the SNI (Server Name Indication) TLS extension.</li> <li>\n<code>checkServerIdentity(servername, cert)</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A callback function to be used when checking the server's hostname against the certificate. This should throw an error if verification fails. The method should return <code>undefined</code> if the <code>servername</code> and <code>cert</code> are verified.</li> <li>\n<code>session</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> A <code>Buffer</code> instance, containing TLS session.</li> <li>\n<code>minDHSize</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Minimum size of the DH parameter in bits to accept a TLS connection. When a server offers a DH parameter with a size less than <code>minDHSize</code>, the TLS connection is destroyed and an error is thrown. Defaults to <code>1024</code>.</li> <li>\n<code>secureContext</code>: Optional TLS context object created with <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a>. If a <code>secureContext</code> is <em>not</em> provided, one will be created by passing the entire <code>options</code> object to <code>tls.createSecureContext()</code>. <em>Note</em>: In effect, all <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a> options can be provided, but they will be <em>completely ignored</em> unless the <code>secureContext</code> option is missing.</li> <li>...: Optional <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a> options can be provided, see the <code>secureContext</code> option for more information.</li> </ul> </li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>The <code>callback</code> function, if specified, will be added as a listener for the <a href=\"#tls_event_secureconnect\"><code>'secureConnect'</code></a> event.</p> <p><code>tls.connect()</code> returns a <a href=\"#tls_class_tls_tlssocket\"><code>tls.TLSSocket</code></a> object.</p> <p>The following implements a simple \"echo server\" example:</p> <pre data-language=\"js\">const tls = require('tls');\nconst fs = require('fs');\n\nconst options = {\n  // Necessary only if using the client certificate authentication\n  key: fs.readFileSync('client-key.pem'),\n  cert: fs.readFileSync('client-cert.pem'),\n\n  // Necessary only if the server uses the self-signed certificate\n  ca: [ fs.readFileSync('server-cert.pem') ]\n};\n\nconst socket = tls.connect(8000, options, () =&gt; {\n  console.log('client connected',\n              socket.authorized ? 'authorized' : 'unauthorized');\n  process.stdin.pipe(socket);\n  process.stdin.resume();\n});\nsocket.setEncoding('utf8');\nsocket.on('data', (data) =&gt; {\n  console.log(data);\n});\nsocket.on('end', () =&gt; {\n  server.close();\n});\n</pre> <p>Or</p> <pre data-language=\"js\">const tls = require('tls');\nconst fs = require('fs');\n\nconst options = {\n  pfx: fs.readFileSync('client.pfx')\n};\n\nconst socket = tls.connect(8000, options, () =&gt; {\n  console.log('client connected',\n              socket.authorized ? 'authorized' : 'unauthorized');\n  process.stdin.pipe(socket);\n  process.stdin.resume();\n});\nsocket.setEncoding('utf8');\nsocket.on('data', (data) =&gt; {\n  console.log(data);\n});\nsocket.on('end', () =&gt; {\n  server.close();\n});\n</pre> <h2 id=\"tls_tls_connect_path_options_callback\">tls.connect(path[, options][, callback])</h2> <div class=\"api_metadata\"> <span>Added in: v0.11.3</span> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Default value for <code>options.path</code>.</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> See <a href=\"#tls_tls_connect_options_callback\"><code>tls.connect()</code></a>.</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> See <a href=\"#tls_tls_connect_options_callback\"><code>tls.connect()</code></a>.</li> </ul> <p>Same as <a href=\"#tls_tls_connect_options_callback\"><code>tls.connect()</code></a> except that <code>path</code> can be provided as an argument instead of an option.</p> <p><em>Note</em>: A path option, if specified, will take precedence over the path argument.</p> <h2 id=\"tls_tls_connect_port_host_options_callback\">tls.connect(port[, host][, options][, callback])</h2> <div class=\"api_metadata\"> <span>Added in: v0.11.3</span> </div>\n<ul> <li>\n<code>port</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Default value for <code>options.port</code>.</li> <li>\n<code>host</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Optional default value for <code>options.host</code>.</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> See <a href=\"#tls_tls_connect_options_callback\"><code>tls.connect()</code></a>.</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> See <a href=\"#tls_tls_connect_options_callback\"><code>tls.connect()</code></a>.</li> </ul> <p>Same as <a href=\"#tls_tls_connect_options_callback\"><code>tls.connect()</code></a> except that <code>port</code> and <code>host</code> can be provided as arguments instead of options.</p> <p><em>Note</em>: A port or host option, if specified, will take precedence over any port or host argument.</p> <h2 id=\"tls_tls_createsecurecontext_options\">tls.createSecureContext(options)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.3.0</td> <td>\n<p>If the <code>key</code> option is an array, individual entries do not need a <code>passphrase</code> property anymore. Array entries can also just be <code>string</code>s or <code>Buffer</code>s now.</p> </td>\n</tr> <tr>\n<td>v5.2.0</td> <td>\n<p>The <code>ca</code> option can now be a single string containing multiple CA certificates.</p> </td>\n</tr> <tr>\n<td>v0.11.13</td> <td>\n<p><span>Added in: v0.11.13</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>pfx</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> Optional PFX or PKCS12 encoded private key and certificate chain. <code>pfx</code> is an alternative to providing <code>key</code> and <code>cert</code> individually. PFX is usually encrypted, if it is, <code>passphrase</code> will be used to decrypt it.</li> <li>\n<code>key</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer[]&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object[]&gt;</a> Optional private keys in PEM format. PEM allows the option of private keys being encrypted. Encrypted keys will be decrypted with <code>options.passphrase</code>. Multiple keys using different algorithms can be provided either as an array of unencrypted key strings or buffers, or an array of objects in the form <code>{pem:\n&lt;string|buffer&gt;[, passphrase: &lt;string&gt;]}</code>. The object form can only occur in an array. <code>object.passphrase</code> is optional. Encrypted keys will be decrypted with <code>object.passphrase</code> if provided, or <code>options.passphrase</code> if it is not.</li> <li>\n<code>passphrase</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Optional shared passphrase used for a single private key and/or a PFX.</li> <li>\n<code>cert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer[]&gt;</a> Optional cert chains in PEM format. One cert chain should be provided per private key. Each cert chain should consist of the PEM formatted certificate for a provided private <code>key</code>, followed by the PEM formatted intermediate certificates (if any), in order, and not including the root CA (the root CA must be pre-known to the peer, see <code>ca</code>). When providing multiple cert chains, they do not have to be in the same order as their private keys in <code>key</code>. If the intermediate certificates are not provided, the peer will not be able to validate the certificate, and the handshake will fail.</li> <li>\n<code>ca</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer[]&gt;</a> Optionally override the trusted CA certificates. Default is to trust the well-known CAs curated by Mozilla. Mozilla's CAs are completely replaced when CAs are explicitly specified using this option. The value can be a string or Buffer, or an Array of strings and/or Buffers. Any string or Buffer can contain multiple PEM CAs concatenated together. The peer's certificate must be chainable to a CA trusted by the server for the connection to be authenticated. When using certificates that are not chainable to a well-known CA, the certificate's CA must be explicitly specified as a trusted or the connection will fail to authenticate. If the peer uses a certificate that doesn't match or chain to one of the default CAs, use the <code>ca</code> option to provide a CA certificate that the peer's certificate can match or chain to. For self-signed certificates, the certificate is its own CA, and must be provided.</li> <li>\n<code>crl</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer[]&gt;</a> Optional PEM formatted CRLs (Certificate Revocation Lists).</li> <li>\n<code>ciphers</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Optional cipher suite specification, replacing the default. For more information, see <a href=\"#tls_modifying_the_default_tls_cipher_suite\">modifying the default cipher suite</a>.</li> <li>\n<code>honorCipherOrder</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Attempt to use the server's cipher suite preferences instead of the client's. When <code>true</code>, causes <code>SSL_OP_CIPHER_SERVER_PREFERENCE</code> to be set in <code>secureOptions</code>, see <a href=\"crypto#crypto_openssl_options\">OpenSSL Options</a> for more information. <em>Note</em>: <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a> sets the default value to <code>true</code>, other APIs that create secure contexts leave it unset.</li> <li>\n<code>ecdhCurve</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> A string describing a named curve to use for ECDH key agreement or <code>false</code> to disable ECDH. Defaults to <a href=\"#tls_tls_default_ecdh_curve\"><code>tls.DEFAULT_ECDH_CURVE</code></a>. Use <a href=\"crypto#crypto_crypto_getcurves\"><code>crypto.getCurves()</code></a> to obtain a list of available curve names. On recent releases, <code>openssl ecparam -list_curves</code> will also display the name and description of each available elliptic curve.</li> <li>\n<code>dhparam</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> Diffie Hellman parameters, required for <a href=\"#tls_perfect_forward_secrecy\">Perfect Forward Secrecy</a>. Use <code>openssl dhparam</code> to create the parameters. The key length must be greater than or equal to 1024 bits, otherwise an error will be thrown. It is strongly recommended to use 2048 bits or larger for stronger security. If omitted or invalid, the parameters are silently discarded and DHE ciphers will not be available.</li> <li>\n<code>secureProtocol</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Optional SSL method to use, default is <code>\"SSLv23_method\"</code>. The possible values are listed as <a href=\"https://www.openssl.org/docs/man1.0.2/ssl/ssl.html#DEALING-WITH-PROTOCOL-METHODS\">SSL_METHODS</a>, use the function names as strings. For example, <code>\"SSLv3_method\"</code> to force SSL version 3.</li> <li>\n<code>secureOptions</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Optionally affect the OpenSSL protocol behaviour, which is not usually necessary. This should be used carefully if at all! Value is a numeric bitmask of the <code>SSL_OP_*</code> options from <a href=\"crypto#crypto_openssl_options\">OpenSSL Options</a>.</li> <li>\n<code>sessionIdContext</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Optional opaque identifier used by servers to ensure session state is not shared between applications. Unused by clients. <em>Note</em>: <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a> uses a 128 bit truncated SHA1 hash value generated from <code>process.argv</code>, other APIs that create secure contexts have no default value.</li> </ul> </li> </ul> <p>The <code>tls.createSecureContext()</code> method creates a credentials object.</p> <p>A key is <em>required</em> for ciphers that make use of certificates. Either <code>key</code> or <code>pfx</code> can be used to provide it.</p> <p>If the 'ca' option is not given, then Node.js will use the default publicly trusted list of CAs as given in <a href=\"http://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt\">http://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt</a>.</p> <h2 id=\"tls_tls_createserver_options_secureconnectionlistener\">tls.createServer([options][, secureConnectionListener])</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v5.0.0</td> <td>\n<p>ALPN options are supported now.</p> </td>\n</tr> <tr>\n<td>v0.3.2</td> <td>\n<p><span>Added in: v0.3.2</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>handshakeTimeout</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Abort the connection if the SSL/TLS handshake does not finish in the specified number of milliseconds. Defaults to <code>120</code> seconds. A <code>'clientError'</code> is emitted on the <code>tls.Server</code> object whenever a handshake times out.</li> <li>\n<code>requestCert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If <code>true</code> the server will request a certificate from clients that connect and attempt to verify that certificate. Defaults to <code>false</code>.</li> <li>\n<code>rejectUnauthorized</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If <code>true</code> the server will reject any connection which is not authorized with the list of supplied CAs. This option only has an effect if <code>requestCert</code> is <code>true</code>. Defaults to <code>false</code>.</li> <li>\n<code>NPNProtocols</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> An array of strings or a <code>Buffer</code> naming possible NPN protocols. (Protocols should be ordered by their priority.)</li> <li>\n<code>ALPNProtocols</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> An array of strings or a <code>Buffer</code> naming possible ALPN protocols. (Protocols should be ordered by their priority.) When the server receives both NPN and ALPN extensions from the client, ALPN takes precedence over NPN and the server does not send an NPN extension to the client.</li> <li>\n<code>SNICallback(servername, cb)</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A function that will be called if the client supports SNI TLS extension. Two arguments will be passed when called: <code>servername</code> and <code>cb</code>. <code>SNICallback</code> should invoke <code>cb(null, ctx)</code>, where <code>ctx</code> is a SecureContext instance. (<code>tls.createSecureContext(...)</code> can be used to get a proper SecureContext.) If <code>SNICallback</code> wasn't provided the default callback with high-level API will be used (see below).</li> <li>\n<code>sessionTimeout</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> An integer specifying the number of seconds after which the TLS session identifiers and TLS session tickets created by the server will time out. See <a href=\"https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_timeout.html\">SSL_CTX_set_timeout</a> for more details.</li> <li>\n<code>ticketKeys</code>: A 48-byte <code>Buffer</code> instance consisting of a 16-byte prefix, a 16-byte HMAC key, and a 16-byte AES key. This can be used to accept TLS session tickets on multiple instances of the TLS server. <em>Note</em> that this is automatically shared between <code>cluster</code> module workers.</li> <li>...: Any <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a> options can be provided. For servers, the identity options (<code>pfx</code> or <code>key</code>/<code>cert</code>) are usually required.</li> </ul> </li> <li>\n<code>secureConnectionListener</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Creates a new <a href=\"#tls_class_tls_server\">tls.Server</a>. The <code>secureConnectionListener</code>, if provided, is automatically set as a listener for the <a href=\"#tls_event_secureconnection\"><code>'secureConnection'</code></a> event.</p> <p>The following illustrates a simple echo server:</p> <pre data-language=\"js\">const tls = require('tls');\nconst fs = require('fs');\n\nconst options = {\n  key: fs.readFileSync('server-key.pem'),\n  cert: fs.readFileSync('server-cert.pem'),\n\n  // This is necessary only if using the client certificate authentication.\n  requestCert: true,\n\n  // This is necessary only if the client uses the self-signed certificate.\n  ca: [ fs.readFileSync('client-cert.pem') ]\n};\n\nconst server = tls.createServer(options, (socket) =&gt; {\n  console.log('server connected',\n              socket.authorized ? 'authorized' : 'unauthorized');\n  socket.write('welcome!\\n');\n  socket.setEncoding('utf8');\n  socket.pipe(socket);\n});\nserver.listen(8000, () =&gt; {\n  console.log('server bound');\n});\n</pre> <p>Or</p> <pre data-language=\"js\">const tls = require('tls');\nconst fs = require('fs');\n\nconst options = {\n  pfx: fs.readFileSync('server.pfx'),\n\n  // This is necessary only if using the client certificate authentication.\n  requestCert: true,\n\n};\n\nconst server = tls.createServer(options, (socket) =&gt; {\n  console.log('server connected',\n              socket.authorized ? 'authorized' : 'unauthorized');\n  socket.write('welcome!\\n');\n  socket.setEncoding('utf8');\n  socket.pipe(socket);\n});\nserver.listen(8000, () =&gt; {\n  console.log('server bound');\n});\n</pre> <p>This server can be tested by connecting to it using <code>openssl s_client</code>:</p> <pre data-language=\"sh\">openssl s_client -connect 127.0.0.1:8000\n</pre> <h2 id=\"tls_tls_getciphers\">tls.getCiphers()</h2> <div class=\"api_metadata\"> <span>Added in: v0.10.2</span> </div>\n<p>Returns an array with the names of the supported SSL ciphers.</p> <p>For example:</p> <pre data-language=\"js\">console.log(tls.getCiphers()); // ['AES128-SHA', 'AES256-SHA', ...]\n</pre> <h2 id=\"tls_tls_default_ecdh_curve\">tls.DEFAULT_ECDH_CURVE</h2> <div class=\"api_metadata\"> <span>Added in: v0.11.13</span> </div>\n<p>The default curve name to use for ECDH key agreement in a tls server. The default value is <code>'prime256v1'</code> (NIST P-256). Consult <a href=\"https://www.rfc-editor.org/rfc/rfc4492.txt\">RFC 4492</a> and <a href=\"http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf\">FIPS.186-4</a> for more details.</p> <h2 id=\"tls_deprecated_apis\">Deprecated APIs</h2> <h3 id=\"tls_class_cryptostream\">Class: CryptoStream</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.4</span><span>Deprecated since: v0.11.3</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated: Use <a href=\"#tls_class_tls_tlssocket\"><code>tls.TLSSocket</code></a> instead.</div>\n<p>The <code>tls.CryptoStream</code> class represents a stream of encrypted data. This class has been deprecated and should no longer be used.</p> <h4 id=\"tls_cryptostream_byteswritten\">cryptoStream.bytesWritten</h4> <div class=\"api_metadata\"> <span>Added in: v0.3.4</span><span>Deprecated since: v0.11.3</span> </div>\n<p>The <code>cryptoStream.bytesWritten</code> property returns the total number of bytes written to the underlying socket <em>including</em> the bytes required for the implementation of the TLS protocol.</p> <h3 id=\"tls_class_securepair\">Class: SecurePair</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.2</span><span>Deprecated since: v0.11.3</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated: Use <a href=\"#tls_class_tls_tlssocket\"><code>tls.TLSSocket</code></a> instead.</div>\n<p>Returned by <a href=\"#tls_tls_createsecurepair_context_isserver_requestcert_rejectunauthorized_options\"><code>tls.createSecurePair()</code></a>.</p> <h4 id=\"tls_event_secure\">Event: 'secure'</h4> <div class=\"api_metadata\"> <span>Added in: v0.3.2</span><span>Deprecated since: v0.11.3</span> </div>\n<p>The <code>'secure'</code> event is emitted by the <code>SecurePair</code> object once a secure connection has been established.</p> <p>As with checking for the server <a href=\"#tls_event_secureconnection\"><code>secureConnection</code></a> event, <code>pair.cleartext.authorized</code> should be inspected to confirm whether the certificate used is properly authorized.</p> <h3 id=\"tls_tls_createsecurepair_context_isserver_requestcert_rejectunauthorized_options\">tls.createSecurePair([context][, isServer][, requestCert][, rejectUnauthorized][, options])</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v5.0.0</td> <td>\n<p>ALPN options are supported now.</p> </td>\n</tr> <tr>\n<td>v0.11.3</td> <td>\n<p><span>Deprecated since: v0.11.3</span></p> </td>\n</tr> <tr>\n<td>v0.3.2</td> <td>\n<p><span>Added in: v0.3.2</span></p> </td>\n</tr> </table> </details> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated: Use <a href=\"#tls_class_tls_tlssocket\"><code>tls.TLSSocket</code></a> instead.</div>\n<ul> <li>\n<code>context</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> A secure context object as returned by <code>tls.createSecureContext()</code>\n</li> <li>\n<code>isServer</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <code>true</code> to specify that this TLS connection should be opened as a server.</li> <li>\n<code>requestCert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <code>true</code> to specify whether a server should request a certificate from a connecting client. Only applies when <code>isServer</code> is <code>true</code>.</li> <li>\n<code>rejectUnauthorized</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <code>true</code> to specify whether a server should automatically reject clients with invalid certificates. Only applies when <code>isServer</code> is <code>true</code>.</li> <li>\n<code>options</code><ul> <li>\n<code>secureContext</code>: An optional TLS context object from <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a>\n</li> <li>\n<code>isServer</code>: If <code>true</code> the TLS socket will be instantiated in server-mode. Defaults to <code>false</code>.</li> <li>\n<code>server</code> <span class=\"type\">&lt;net.Server&gt;</span> An optional <a href=\"net#net_class_net_server\"><code>net.Server</code></a> instance</li> <li>\n<code>requestCert</code>: Optional, see <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a>\n</li> <li>\n<code>rejectUnauthorized</code>: Optional, see <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a>\n</li> <li>\n<code>NPNProtocols</code>: Optional, see <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a>\n</li> <li>\n<code>ALPNProtocols</code>: Optional, see <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a>\n</li> <li>\n<code>SNICallback</code>: Optional, see <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a>\n</li> <li>\n<code>session</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> An optional <code>Buffer</code> instance containing a TLS session.</li> <li>\n<code>requestOCSP</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If <code>true</code>, specifies that the OCSP status request extension will be added to the client hello and an <code>'OCSPResponse'</code> event will be emitted on the socket before establishing a secure communication</li> </ul> </li> </ul> <p>Creates a new secure pair object with two streams, one of which reads and writes the encrypted data and the other of which reads and writes the cleartext data. Generally, the encrypted stream is piped to/from an incoming encrypted data stream and the cleartext one is used as a replacement for the initial encrypted stream.</p> <p><code>tls.createSecurePair()</code> returns a <code>tls.SecurePair</code> object with <code>cleartext</code> and <code>encrypted</code> stream properties.</p> <p><em>Note</em>: <code>cleartext</code> has the same API as <a href=\"#tls_class_tls_tlssocket\"><code>tls.TLSSocket</code></a>.</p> <p><em>Note</em>: The <code>tls.createSecurePair()</code> method is now deprecated in favor of <code>tls.TLSSocket()</code>. For example, the code:</p> <pre data-language=\"js\">pair = tls.createSecurePair(/* ... */);\npair.encrypted.pipe(socket);\nsocket.pipe(pair.encrypted);\n</pre> <p>can be replaced by:</p> <pre data-language=\"js\">secure_socket = tls.TLSSocket(socket, options);\n</pre> <p>where <code>secure_socket</code> has the same API as <code>pair.cleartext</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/tls.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/tls.html</a>\n  </p>\n</div>\n","http":"<h1 id=\"http_http\">HTTP</h1> <div class=\"api_stability api_stability_2\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</div>\n<p>To use the HTTP server and client one must <code>require('http')</code>.</p> <p>The HTTP interfaces in Node.js are designed to support many features of the protocol which have been traditionally difficult to use. In particular, large, possibly chunk-encoded, messages. The interface is careful to never buffer entire requests or responses--the user is able to stream data.</p> <p>HTTP message headers are represented by an object like this:</p> <pre data-language=\"js\">{ 'content-length': '123',\n  'content-type': 'text/plain',\n  'connection': 'keep-alive',\n  'host': 'mysite.com',\n  'accept': '*/*' }\n</pre> <p>Keys are lowercased. Values are not modified.</p> <p>In order to support the full spectrum of possible HTTP applications, Node.js's HTTP API is very low-level. It deals with stream handling and message parsing only. It parses a message into headers and body but it does not parse the actual headers or the body.</p> <p>See <a href=\"#http_message_headers\"><code>message.headers</code></a> for details on how duplicate headers are handled.</p> <p>The raw headers as they were received are retained in the <code>rawHeaders</code> property, which is an array of <code>[key, value, key2, value2, ...]</code>. For example, the previous message header object might have a <code>rawHeaders</code> list like the following:</p> <pre data-language=\"js\">[ 'ConTent-Length', '123456',\n  'content-LENGTH', '123',\n  'content-type', 'text/plain',\n  'CONNECTION', 'keep-alive',\n  'Host', 'mysite.com',\n  'accepT', '*/*' ]\n</pre> <h2 id=\"http_class_http_agent\">Class: http.Agent</h2> <div class=\"api_metadata\"> <span>Added in: v0.3.4</span> </div>\n<p>An <code>Agent</code> is responsible for managing connection persistence and reuse for HTTP clients. It maintains a queue of pending requests for a given host and port, reusing a single socket connection for each until the queue is empty, at which time the socket is either destroyed or put into a pool where it is kept to be used again for requests to the same host and port. Whether it is destroyed or pooled depends on the <code>keepAlive</code> <a href=\"#http_new_agent_options\">option</a>.</p> <p>Pooled connections have TCP Keep-Alive enabled for them, but servers may still close idle connections, in which case they will be removed from the pool and a new connection will be made when a new HTTP request is made for that host and port. Servers may also refuse to allow multiple requests over the same connection, in which case the connection will have to be remade for every request and cannot be pooled. The <code>Agent</code> will still make the requests to that server, but each one will occur over a new connection.</p> <p>When a connection is closed by the client or the server, it is removed from the pool. Any unused sockets in the pool will be unrefed so as not to keep the Node.js process running when there are no outstanding requests. (see <a href=\"net#net_socket_unref\">socket.unref()</a>).</p> <p>It is good practice, to <a href=\"#http_agent_destroy\"><code>destroy()</code></a> an <code>Agent</code> instance when it is no longer in use, because unused sockets consume OS resources.</p> <p>Sockets are removed from an agent's pool when the socket emits either a <code>'close'</code> event or an <code>'agentRemove'</code> event. When intending to keep one HTTP request open for a long time without keeping it in the pool, something like the following may be done:</p> <pre data-language=\"js\">http.get(options, (res) =&gt; {\n  // Do stuff\n}).on('socket', (socket) =&gt; {\n  socket.emit('agentRemove');\n});\n</pre> <p>An agent may also be used for an individual request. By providing <code>{agent: false}</code> as an option to the <code>http.get()</code> or <code>http.request()</code> functions, a one-time use <code>Agent</code> with default options will be used for the client connection.</p> <p><code>agent:false</code>:</p> <pre data-language=\"js\">http.get({\n  hostname: 'localhost',\n  port: 80,\n  path: '/',\n  agent: false  // create a new agent just for this one request\n}, (res) =&gt; {\n  // Do stuff with response\n});\n</pre> <h3 id=\"http_new_agent_options\">new Agent([options])</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.4</span> </div>\n<ul> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Set of configurable options to set on the agent. Can have the following fields:<ul> <li>\n<code>keepAlive</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Keep sockets around even when there are no outstanding requests, so they can be used for future requests without having to reestablish a TCP connection. Defaults to <code>false</code>\n</li> <li>\n<code>keepAliveMsecs</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> When using the <code>keepAlive</code> option, specifies the <a href=\"net#net_socket_setkeepalive_enable_initialdelay\">initial delay</a> for TCP Keep-Alive packets. Ignored when the <code>keepAlive</code> option is <code>false</code> or <code>undefined</code>. Defaults to <code>1000</code>.</li> <li>\n<code>maxSockets</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Maximum number of sockets to allow per host. Defaults to <code>Infinity</code>.</li> <li>\n<code>maxFreeSockets</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Maximum number of sockets to leave open in a free state. Only relevant if <code>keepAlive</code> is set to <code>true</code>. Defaults to <code>256</code>.</li> </ul> </li> </ul> <p>The default <a href=\"#http_http_globalagent\"><code>http.globalAgent</code></a> that is used by <a href=\"#http_http_request_options_callback\"><code>http.request()</code></a> has all of these values set to their respective defaults.</p> <p>To configure any of them, a custom <a href=\"#http_class_http_agent\"><code>http.Agent</code></a> instance must be created.</p> <pre data-language=\"js\">const http = require('http');\nconst keepAliveAgent = new http.Agent({ keepAlive: true });\noptions.agent = keepAliveAgent;\nhttp.request(options, onResponseCallback);\n</pre> <h3 id=\"http_agent_createconnection_options_callback\">agent.createConnection(options[, callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.4</span> </div>\n<ul> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Options containing connection details. Check <a href=\"net#net_net_createconnection_options_connectlistener\"><code>net.createConnection()</code></a> for the format of the options</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Callback function that receives the created socket</li> <li>Returns: <a href=\"net#net_class_net_socket\" class=\"type\">&lt;net.Socket&gt;</a>\n</li> </ul> <p>Produces a socket/stream to be used for HTTP requests.</p> <p>By default, this function is the same as <a href=\"net#net_net_createconnection_options_connectlistener\"><code>net.createConnection()</code></a>. However, custom agents may override this method in case greater flexibility is desired.</p> <p>A socket/stream can be supplied in one of two ways: by returning the socket/stream from this function, or by passing the socket/stream to <code>callback</code>.</p> <p><code>callback</code> has a signature of <code>(err, stream)</code>.</p> <h3 id=\"http_agent_destroy\">agent.destroy()</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.4</span> </div>\n<p>Destroy any sockets that are currently in use by the agent.</p> <p>It is usually not necessary to do this. However, if using an agent with <code>keepAlive</code> enabled, then it is best to explicitly shut down the agent when it will no longer be used. Otherwise, sockets may hang open for quite a long time before the server terminates them.</p> <h3 id=\"http_agent_freesockets\">agent.freeSockets</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.4</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li> </ul> <p>An object which contains arrays of sockets currently awaiting use by the agent when <code>keepAlive</code> is enabled. Do not modify.</p> <h3 id=\"http_agent_getname_options\">agent.getName(options)</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.4</span> </div>\n<ul> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> A set of options providing information for name generation<ul> <li>\n<code>host</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> A domain name or IP address of the server to issue the request to</li> <li>\n<code>port</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Port of remote server</li> <li>\n<code>localAddress</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Local interface to bind for network connections when issuing the request</li> </ul> </li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>Get a unique name for a set of request options, to determine whether a connection can be reused. For an HTTP agent, this returns <code>host:port:localAddress</code>. For an HTTPS agent, the name includes the CA, cert, ciphers, and other HTTPS/TLS-specific options that determine socket reusability.</p> <h3 id=\"http_agent_maxfreesockets\">agent.maxFreeSockets</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.7</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li> </ul> <p>By default set to 256. For agents with <code>keepAlive</code> enabled, this sets the maximum number of sockets that will be left open in the free state.</p> <h3 id=\"http_agent_maxsockets\">agent.maxSockets</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.6</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li> </ul> <p>By default set to Infinity. Determines how many concurrent sockets the agent can have open per origin. Origin is either a 'host:port' or 'host:port:localAddress' combination.</p> <h3 id=\"http_agent_requests\">agent.requests</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.9</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li> </ul> <p>An object which contains queues of requests that have not yet been assigned to sockets. Do not modify.</p> <h3 id=\"http_agent_sockets\">agent.sockets</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.6</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li> </ul> <p>An object which contains arrays of sockets currently in use by the agent. Do not modify.</p> <h2 id=\"http_class_http_clientrequest\">Class: http.ClientRequest</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.17</span> </div>\n<p>This object is created internally and returned from <a href=\"#http_http_request_options_callback\"><code>http.request()</code></a>. It represents an <em>in-progress</em> request whose header has already been queued. The header is still mutable using the <code>setHeader(name, value)</code>, <code>getHeader(name)</code>, <code>removeHeader(name)</code> API. The actual header will be sent along with the first data chunk or when closing the connection.</p> <p>To get the response, add a listener for <a href=\"#http_event_response\"><code>'response'</code></a> to the request object. <a href=\"#http_event_response\"><code>'response'</code></a> will be emitted from the request object when the response headers have been received. The <a href=\"#http_event_response\"><code>'response'</code></a> event is executed with one argument which is an instance of <a href=\"#http_class_http_incomingmessage\"><code>http.IncomingMessage</code></a>.</p> <p>During the <a href=\"#http_event_response\"><code>'response'</code></a> event, one can add listeners to the response object; particularly to listen for the <code>'data'</code> event.</p> <p>If no <a href=\"#http_event_response\"><code>'response'</code></a> handler is added, then the response will be entirely discarded. However, if a <a href=\"#http_event_response\"><code>'response'</code></a> event handler is added, then the data from the response object <strong>must</strong> be consumed, either by calling <code>response.read()</code> whenever there is a <code>'readable'</code> event, or by adding a <code>'data'</code> handler, or by calling the <code>.resume()</code> method. Until the data is consumed, the <code>'end'</code> event will not fire. Also, until the data is read it will consume memory that can eventually lead to a 'process out of memory' error.</p> <p>Note: Node.js does not check whether Content-Length and the length of the body which has been transmitted are equal or not.</p> <p>The request implements the <a href=\"stream#stream_class_stream_writable\">Writable Stream</a> interface. This is an <a href=\"events#events_class_eventemitter\"><code>EventEmitter</code></a> with the following events:</p> <h3 id=\"http_event_abort\">Event: 'abort'</h3> <div class=\"api_metadata\"> <span>Added in: v1.4.1</span> </div>\n<p>Emitted when the request has been aborted by the client. This event is only emitted on the first call to <code>abort()</code>.</p> <h3 id=\"http_event_aborted\">Event: 'aborted'</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.8</span> </div>\n<p>Emitted when the request has been aborted by the server and the network socket has closed.</p> <h3 id=\"http_event_connect\">Event: 'connect'</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.0</span> </div>\n<ul> <li>\n<code>response</code> <a href=\"http#http_class_http_incomingmessage\" class=\"type\">&lt;http.IncomingMessage&gt;</a>\n</li> <li>\n<code>socket</code> <a href=\"net#net_class_net_socket\" class=\"type\">&lt;net.Socket&gt;</a>\n</li> <li>\n<code>head</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> </ul> <p>Emitted each time a server responds to a request with a <code>CONNECT</code> method. If this event is not being listened for, clients receiving a <code>CONNECT</code> method will have their connections closed.</p> <p>A client and server pair demonstrating how to listen for the <code>'connect'</code> event:</p> <pre data-language=\"js\">const http = require('http');\nconst net = require('net');\nconst url = require('url');\n\n// Create an HTTP tunneling proxy\nconst proxy = http.createServer( (req, res) =&gt; {\n  res.writeHead(200, {'Content-Type': 'text/plain'});\n  res.end('okay');\n});\nproxy.on('connect', (req, cltSocket, head) =&gt; {\n  // connect to an origin server\n  const srvUrl = url.parse(`http://${req.url}`);\n  const srvSocket = net.connect(srvUrl.port, srvUrl.hostname, () =&gt; {\n    cltSocket.write('HTTP/1.1 200 Connection Established\\r\\n' +\n                    'Proxy-agent: Node.js-Proxy\\r\\n' +\n                    '\\r\\n');\n    srvSocket.write(head);\n    srvSocket.pipe(cltSocket);\n    cltSocket.pipe(srvSocket);\n  });\n});\n\n// now that proxy is running\nproxy.listen(1337, '127.0.0.1', () =&gt; {\n\n  // make a request to a tunneling proxy\n  const options = {\n    port: 1337,\n    hostname: '127.0.0.1',\n    method: 'CONNECT',\n    path: 'www.google.com:80'\n  };\n\n  const req = http.request(options);\n  req.end();\n\n  req.on('connect', (res, socket, head) =&gt; {\n    console.log('got connected!');\n\n    // make a request over an HTTP tunnel\n    socket.write('GET / HTTP/1.1\\r\\n' +\n                 'Host: www.google.com:80\\r\\n' +\n                 'Connection: close\\r\\n' +\n                 '\\r\\n');\n    socket.on('data', (chunk) =&gt; {\n      console.log(chunk.toString());\n    });\n    socket.on('end', () =&gt; {\n      proxy.close();\n    });\n  });\n});\n</pre> <h3 id=\"http_event_continue\">Event: 'continue'</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.2</span> </div>\n<p>Emitted when the server sends a '100 Continue' HTTP response, usually because the request contained 'Expect: 100-continue'. This is an instruction that the client should send the request body.</p> <h3 id=\"http_event_response\">Event: 'response'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.0</span> </div>\n<ul> <li>\n<code>response</code> <a href=\"http#http_class_http_incomingmessage\" class=\"type\">&lt;http.IncomingMessage&gt;</a>\n</li> </ul> <p>Emitted when a response is received to this request. This event is emitted only once.</p> <h3 id=\"http_event_socket\">Event: 'socket'</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.3</span> </div>\n<ul> <li>\n<code>socket</code> <a href=\"net#net_class_net_socket\" class=\"type\">&lt;net.Socket&gt;</a>\n</li> </ul> <p>Emitted after a socket is assigned to this request.</p> <h3 id=\"http_event_upgrade\">Event: 'upgrade'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.94</span> </div>\n<ul> <li>\n<code>response</code> <a href=\"http#http_class_http_incomingmessage\" class=\"type\">&lt;http.IncomingMessage&gt;</a>\n</li> <li>\n<code>socket</code> <a href=\"net#net_class_net_socket\" class=\"type\">&lt;net.Socket&gt;</a>\n</li> <li>\n<code>head</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> </ul> <p>Emitted each time a server responds to a request with an upgrade. If this event is not being listened for, clients receiving an upgrade header will have their connections closed.</p> <p>A client server pair demonstrating how to listen for the <code>'upgrade'</code> event.</p> <pre data-language=\"js\">const http = require('http');\n\n// Create an HTTP server\nconst srv = http.createServer( (req, res) =&gt; {\n  res.writeHead(200, {'Content-Type': 'text/plain'});\n  res.end('okay');\n});\nsrv.on('upgrade', (req, socket, head) =&gt; {\n  socket.write('HTTP/1.1 101 Web Socket Protocol Handshake\\r\\n' +\n               'Upgrade: WebSocket\\r\\n' +\n               'Connection: Upgrade\\r\\n' +\n               '\\r\\n');\n\n  socket.pipe(socket); // echo back\n});\n\n// now that server is running\nsrv.listen(1337, '127.0.0.1', () =&gt; {\n\n  // make a request\n  const options = {\n    port: 1337,\n    hostname: '127.0.0.1',\n    headers: {\n      'Connection': 'Upgrade',\n      'Upgrade': 'websocket'\n    }\n  };\n\n  const req = http.request(options);\n  req.end();\n\n  req.on('upgrade', (res, socket, upgradeHead) =&gt; {\n    console.log('got upgraded!');\n    socket.end();\n    process.exit(0);\n  });\n});\n</pre> <h3 id=\"http_request_abort\">request.abort()</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.8</span> </div>\n<p>Marks the request as aborting. Calling this will cause remaining data in the response to be dropped and the socket to be destroyed.</p> <h3 id=\"http_request_aborted\">request.aborted</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.14</span> </div>\n<p>If a request has been aborted, this value is the time when the request was aborted, in milliseconds since 1 January 1970 00:00:00 UTC.</p> <h3 id=\"http_request_end_data_encoding_callback\">request.end([data][, encoding][, callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<ul> <li>\n<code>data</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Finishes sending the request. If any parts of the body are unsent, it will flush them to the stream. If the request is chunked, this will send the terminating <code>'0\\r\\n\\r\\n'</code>.</p> <p>If <code>data</code> is specified, it is equivalent to calling <a href=\"#http_response_write_chunk_encoding_callback\"><code>response.write(data, encoding)</code></a> followed by <code>request.end(callback)</code>.</p> <p>If <code>callback</code> is specified, it will be called when the request stream is finished.</p> <h3 id=\"http_request_flushheaders\">request.flushHeaders()</h3> <div class=\"api_metadata\"> <span>Added in: v1.6.0</span> </div>\n<p>Flush the request headers.</p> <p>For efficiency reasons, Node.js normally buffers the request headers until <code>request.end()</code> is called or the first chunk of request data is written. It then tries to pack the request headers and data into a single TCP packet.</p> <p>That's usually desired (it saves a TCP round-trip), but not when the first data is not sent until possibly much later. <code>request.flushHeaders()</code> bypasses the optimization and kickstarts the request.</p> <h3 id=\"http_request_setnodelay_nodelay\">request.setNoDelay([noDelay])</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.9</span> </div>\n<ul> <li>\n<code>noDelay</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a>\n</li> </ul> <p>Once a socket is assigned to this request and is connected <a href=\"net#net_socket_setnodelay_nodelay\"><code>socket.setNoDelay()</code></a> will be called.</p> <h3 id=\"http_request_setsocketkeepalive_enable_initialdelay\">request.setSocketKeepAlive([enable][, initialDelay])</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.9</span> </div>\n<ul> <li>\n<code>enable</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a>\n</li> <li>\n<code>initialDelay</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> </ul> <p>Once a socket is assigned to this request and is connected <a href=\"net#net_socket_setkeepalive_enable_initialdelay\"><code>socket.setKeepAlive()</code></a> will be called.</p> <h3 id=\"http_request_settimeout_timeout_callback\">request.setTimeout(timeout[, callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.9</span> </div>\n<ul> <li>\n<code>timeout</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Milliseconds before a request is considered to be timed out.</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Optional function to be called when a timeout occurs. Same as binding to the <code>timeout</code> event.</li> </ul> <p>Once a socket is assigned to this request and is connected <a href=\"net#net_socket_settimeout_timeout_callback\"><code>socket.setTimeout()</code></a> will be called.</p> <p>Returns <code>request</code>.</p> <h3 id=\"http_request_write_chunk_encoding_callback\">request.write(chunk[, encoding][, callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.29</span> </div>\n<ul> <li>\n<code>chunk</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Sends a chunk of the body. By calling this method many times, a request body can be sent to a server--in that case it is suggested to use the <code>['Transfer-Encoding', 'chunked']</code> header line when creating the request.</p> <p>The <code>encoding</code> argument is optional and only applies when <code>chunk</code> is a string. Defaults to <code>'utf8'</code>.</p> <p>The <code>callback</code> argument is optional and will be called when this chunk of data is flushed.</p> <p>Returns <code>request</code>.</p> <h2 id=\"http_class_http_server\">Class: http.Server</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.17</span> </div>\n<p>This class inherits from <a href=\"net#net_class_net_server\"><code>net.Server</code></a> and has the following additional events:</p> <h3 id=\"http_event_checkcontinue\">Event: 'checkContinue'</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.0</span> </div>\n<ul> <li>\n<code>request</code> <a href=\"http#http_class_http_incomingmessage\" class=\"type\">&lt;http.IncomingMessage&gt;</a>\n</li> <li>\n<code>response</code> <a href=\"http#http_class_http_serverresponse\" class=\"type\">&lt;http.ServerResponse&gt;</a>\n</li> </ul> <p>Emitted each time a request with an HTTP <code>Expect: 100-continue</code> is received. If this event is not listened for, the server will automatically respond with a <code>100 Continue</code> as appropriate.</p> <p>Handling this event involves calling <a href=\"#http_response_writecontinue\"><code>response.writeContinue()</code></a> if the client should continue to send the request body, or generating an appropriate HTTP response (e.g. 400 Bad Request) if the client should not continue to send the request body.</p> <p>Note that when this event is emitted and handled, the <a href=\"#http_event_request\"><code>'request'</code></a> event will not be emitted.</p> <h3 id=\"http_event_checkexpectation\">Event: 'checkExpectation'</h3> <div class=\"api_metadata\"> <span>Added in: v5.5.0</span> </div>\n<ul> <li>\n<code>request</code> <a href=\"http#http_class_http_clientrequest\" class=\"type\">&lt;http.ClientRequest&gt;</a>\n</li> <li>\n<code>response</code> <a href=\"http#http_class_http_serverresponse\" class=\"type\">&lt;http.ServerResponse&gt;</a>\n</li> </ul> <p>Emitted each time a request with an HTTP <code>Expect</code> header is received, where the value is not <code>100-continue</code>. If this event is not listened for, the server will automatically respond with a <code>417 Expectation Failed</code> as appropriate.</p> <p>Note that when this event is emitted and handled, the <a href=\"#http_event_request\"><code>'request'</code></a> event will not be emitted.</p> <h3 id=\"http_event_clienterror\">Event: 'clientError'</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>The default action of calling <code>.destroy()</code> on the <code>socket</code> will no longer take place if there are listeners attached for <code>clientError</code>.</p> </td>\n</tr> <tr>\n<td>v0.1.94</td> <td>\n<p><span>Added in: v0.1.94</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>exception</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a>\n</li> <li>\n<code>socket</code> <a href=\"net#net_class_net_socket\" class=\"type\">&lt;net.Socket&gt;</a>\n</li> </ul> <p>If a client connection emits an <code>'error'</code> event, it will be forwarded here. Listener of this event is responsible for closing/destroying the underlying socket. For example, one may wish to more gracefully close the socket with an HTTP '400 Bad Request' response instead of abruptly severing the connection.</p> <p>Default behavior is to destroy the socket immediately on malformed request.</p> <p><code>socket</code> is the <a href=\"net#net_class_net_socket\"><code>net.Socket</code></a> object that the error originated from.</p> <pre data-language=\"js\">const http = require('http');\n\nconst server = http.createServer((req, res) =&gt; {\n  res.end();\n});\nserver.on('clientError', (err, socket) =&gt; {\n  socket.end('HTTP/1.1 400 Bad Request\\r\\n\\r\\n');\n});\nserver.listen(8000);\n</pre> <p>When the <code>'clientError'</code> event occurs, there is no <code>request</code> or <code>response</code> object, so any HTTP response sent, including response headers and payload, <em>must</em> be written directly to the <code>socket</code> object. Care must be taken to ensure the response is a properly formatted HTTP response message.</p> <h3 id=\"http_event_close\">Event: 'close'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.4</span> </div>\n<p>Emitted when the server closes.</p> <h3 id=\"http_event_connect_1\">Event: 'connect'</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.0</span> </div>\n<ul> <li>\n<code>request</code> <a href=\"http#http_class_http_incomingmessage\" class=\"type\">&lt;http.IncomingMessage&gt;</a> Arguments for the HTTP request, as it is in the <a href=\"#http_event_request\"><code>'request'</code></a> event</li> <li>\n<code>socket</code> <a href=\"net#net_class_net_socket\" class=\"type\">&lt;net.Socket&gt;</a> Network socket between the server and client</li> <li>\n<code>head</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The first packet of the tunneling stream (may be empty)</li> </ul> <p>Emitted each time a client requests an HTTP <code>CONNECT</code> method. If this event is not listened for, then clients requesting a <code>CONNECT</code> method will have their connections closed.</p> <p>After this event is emitted, the request's socket will not have a <code>'data'</code> event listener, meaning it will need to be bound in order to handle data sent to the server on that socket.</p> <h3 id=\"http_event_connection\">Event: 'connection'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.0</span> </div>\n<ul> <li>\n<code>socket</code> <a href=\"net#net_class_net_socket\" class=\"type\">&lt;net.Socket&gt;</a>\n</li> </ul> <p>When a new TCP stream is established. <code>socket</code> is an object of type <a href=\"net#net_class_net_socket\"><code>net.Socket</code></a>. Usually users will not want to access this event. In particular, the socket will not emit <code>'readable'</code> events because of how the protocol parser attaches to the socket. The <code>socket</code> can also be accessed at <code>request.connection</code>.</p> <h3 id=\"http_event_request\">Event: 'request'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.0</span> </div>\n<ul> <li>\n<code>request</code> <a href=\"http#http_class_http_incomingmessage\" class=\"type\">&lt;http.IncomingMessage&gt;</a>\n</li> <li>\n<code>response</code> <a href=\"http#http_class_http_serverresponse\" class=\"type\">&lt;http.ServerResponse&gt;</a>\n</li> </ul> <p>Emitted each time there is a request. Note that there may be multiple requests per connection (in the case of HTTP Keep-Alive connections).</p> <h3 id=\"http_event_upgrade_1\">Event: 'upgrade'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.94</span> </div>\n<ul> <li>\n<code>request</code> <a href=\"http#http_class_http_incomingmessage\" class=\"type\">&lt;http.IncomingMessage&gt;</a> Arguments for the HTTP request, as it is in the <a href=\"#http_event_request\"><code>'request'</code></a> event</li> <li>\n<code>socket</code> <a href=\"net#net_class_net_socket\" class=\"type\">&lt;net.Socket&gt;</a> Network socket between the server and client</li> <li>\n<code>head</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The first packet of the upgraded stream (may be empty)</li> </ul> <p>Emitted each time a client requests an HTTP upgrade. If this event is not listened for, then clients requesting an upgrade will have their connections closed.</p> <p>After this event is emitted, the request's socket will not have a <code>'data'</code> event listener, meaning it will need to be bound in order to handle data sent to the server on that socket.</p> <h3 id=\"http_server_close_callback\">server.close([callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<ul> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Stops the server from accepting new connections. See <a href=\"net#net_server_close_callback\"><code>net.Server.close()</code></a>.</p> <h3 id=\"http_server_listen_handle_callback\">server.listen(handle[, callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.10</span> </div>\n<ul> <li>\n<code>handle</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>The <code>handle</code> object can be set to either a server or socket (anything with an underlying <code>_handle</code> member), or a <code>{fd: &lt;n&gt;}</code> object.</p> <p>This will cause the server to accept connections on the specified handle, but it is presumed that the file descriptor or handle has already been bound to a port or domain socket.</p> <p>Listening on a file descriptor is not supported on Windows.</p> <p>This function is asynchronous. <code>callback</code> will be added as a listener for the <a href=\"net#net_event_listening\"><code>'listening'</code></a> event. See also <a href=\"net#net_server_listen_handle_backlog_callback\"><code>net.Server.listen()</code></a>.</p> <p>Returns <code>server</code>.</p> <p><em>Note</em>: The <code>server.listen()</code> method may be called multiple times. Each subsequent call will <em>re-open</em> the server using the provided options.</p> <h3 id=\"http_server_listen_path_callback\">server.listen(path[, callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Start a UNIX socket server listening for connections on the given <code>path</code>.</p> <p>This function is asynchronous. <code>callback</code> will be added as a listener for the <a href=\"net#net_event_listening\"><code>'listening'</code></a> event. See also <a href=\"net#net_server_listen_path_backlog_callback\"><code>net.Server.listen(path)</code></a>.</p> <p><em>Note</em>: The <code>server.listen()</code> method may be called multiple times. Each subsequent call will <em>re-open</em> the server using the provided options.</p> <h3 id=\"http_server_listen_port_hostname_backlog_callback\">server.listen([port][, hostname][, backlog][, callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<ul> <li>\n<code>port</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> <li>\n<code>hostname</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>backlog</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Begin accepting connections on the specified <code>port</code> and <code>hostname</code>. If the <code>hostname</code> is omitted, the server will accept connections on the <a href=\"https://en.wikipedia.org/wiki/IPv6_address#Unspecified_address\">unspecified IPv6 address</a> (<code>::</code>) when IPv6 is available, or the <a href=\"https://en.wikipedia.org/wiki/0.0.0.0\">unspecified IPv4 address</a> (<code>0.0.0.0</code>) otherwise.</p> <p><em>Note</em>: in most operating systems, listening to the <a href=\"https://en.wikipedia.org/wiki/IPv6_address#Unspecified_address\">unspecified IPv6 address</a> (<code>::</code>) may cause the <code>net.Server</code> to also listen on the <a href=\"https://en.wikipedia.org/wiki/0.0.0.0\">unspecified IPv4 address</a> (<code>0.0.0.0</code>).</p> <p>Omit the port argument, or use a port value of <code>0</code>, to have the operating system assign a random port, which can be retrieved by using <code>server.address().port</code> after the <code>'listening'</code> event has been emitted.</p> <p>To listen to a unix socket, supply a filename instead of port and hostname.</p> <p><code>backlog</code> is the maximum length of the queue of pending connections. The actual length will be determined by the OS through sysctl settings such as <code>tcp_max_syn_backlog</code> and <code>somaxconn</code> on linux. The default value of this parameter is 511 (not 512).</p> <p>This function is asynchronous. <code>callback</code> will be added as a listener for the <a href=\"net#net_event_listening\"><code>'listening'</code></a> event. See also <a href=\"net#net_server_listen_port_hostname_backlog_callback\"><code>net.Server.listen(port)</code></a>.</p> <p><em>Note</em>: The <code>server.listen()</code> method may be called multiple times. Each subsequent call will <em>re-open</em> the server using the provided options.</p> <h3 id=\"http_server_listening\">server.listening</h3> <div class=\"api_metadata\"> <span>Added in: v5.7.0</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li> </ul> <p>A Boolean indicating whether or not the server is listening for connections.</p> <h3 id=\"http_server_maxheaderscount\">server.maxHeadersCount</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.0</span> </div>\n<ul> <li>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Defaults to 2000.</li> </ul> <p>Limits maximum incoming headers count, equal to 2000 by default. If set to 0 - no limit will be applied.</p> <h3 id=\"http_server_settimeout_msecs_callback\">server.setTimeout([msecs][, callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.9.12</span> </div>\n<ul> <li>\n<code>msecs</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Defaults to 120000 (2 minutes).</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Sets the timeout value for sockets, and emits a <code>'timeout'</code> event on the Server object, passing the socket as an argument, if a timeout occurs.</p> <p>If there is a <code>'timeout'</code> event listener on the Server object, then it will be called with the timed-out socket as an argument.</p> <p>By default, the Server's timeout value is 2 minutes, and sockets are destroyed automatically if they time out. However, if a callback is assigned to the Server's <code>'timeout'</code> event, timeouts must be handled explicitly.</p> <p>Returns <code>server</code>.</p> <h3 id=\"http_server_timeout\">server.timeout</h3> <div class=\"api_metadata\"> <span>Added in: v0.9.12</span> </div>\n<ul> <li>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Defaults to 120000 (2 minutes).</li> </ul> <p>The number of milliseconds of inactivity before a socket is presumed to have timed out.</p> <p>Note that the socket timeout logic is set up on connection, so changing this value only affects <em>new</em> connections to the server, not any existing connections.</p> <p>Set to 0 to disable any kind of automatic timeout behavior on incoming connections.</p> <h2 id=\"http_class_http_serverresponse\">Class: http.ServerResponse</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.17</span> </div>\n<p>This object is created internally by an HTTP server--not by the user. It is passed as the second parameter to the <a href=\"#http_event_request\"><code>'request'</code></a> event.</p> <p>The response implements, but does not inherit from, the <a href=\"stream#stream_class_stream_writable\">Writable Stream</a> interface. This is an <a href=\"events#events_class_eventemitter\"><code>EventEmitter</code></a> with the following events:</p> <h3 id=\"http_event_close_1\">Event: 'close'</h3> <div class=\"api_metadata\"> <span>Added in: v0.6.7</span> </div>\n<p>Indicates that the underlying connection was terminated before <a href=\"#http_response_end_data_encoding_callback\"><code>response.end()</code></a> was called or able to flush.</p> <h3 id=\"http_event_finish\">Event: 'finish'</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.6</span> </div>\n<p>Emitted when the response has been sent. More specifically, this event is emitted when the last segment of the response headers and body have been handed off to the operating system for transmission over the network. It does not imply that the client has received anything yet.</p> <p>After this event, no more events will be emitted on the response object.</p> <h3 id=\"http_response_addtrailers_headers\">response.addTrailers(headers)</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.0</span> </div>\n<ul> <li>\n<code>headers</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> </ul> <p>This method adds HTTP trailing headers (a header but at the end of the message) to the response.</p> <p>Trailers will <strong>only</strong> be emitted if chunked encoding is used for the response; if it is not (e.g. if the request was HTTP/1.0), they will be silently discarded.</p> <p>Note that HTTP requires the <code>Trailer</code> header to be sent in order to emit trailers, with a list of the header fields in its value. E.g.,</p> <pre data-language=\"js\">response.writeHead(200, { 'Content-Type': 'text/plain',\n                          'Trailer': 'Content-MD5' });\nresponse.write(fileData);\nresponse.addTrailers({'Content-MD5': '7895bf4b8828b55ceaf47747b4bca667'});\nresponse.end();\n</pre> <p>Attempting to set a header field name or value that contains invalid characters will result in a <a href=\"errors#errors_class_typeerror\"><code>TypeError</code></a> being thrown.</p> <h3 id=\"http_response_end_data_encoding_callback\">response.end([data][, encoding][, callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<ul> <li>\n<code>data</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>This method signals to the server that all of the response headers and body have been sent; that server should consider this message complete. The method, <code>response.end()</code>, MUST be called on each response.</p> <p>If <code>data</code> is specified, it is equivalent to calling <a href=\"#http_response_write_chunk_encoding_callback\"><code>response.write(data, encoding)</code></a> followed by <code>response.end(callback)</code>.</p> <p>If <code>callback</code> is specified, it will be called when the response stream is finished.</p> <h3 id=\"http_response_finished\">response.finished</h3> <div class=\"api_metadata\"> <span>Added in: v0.0.2</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li> </ul> <p>Boolean value that indicates whether the response has completed. Starts as <code>false</code>. After <a href=\"#http_response_end_data_encoding_callback\"><code>response.end()</code></a> executes, the value will be <code>true</code>.</p> <h3 id=\"http_response_getheader_name\">response.getHeader(name)</h3> <div class=\"api_metadata\"> <span>Added in: v0.4.0</span> </div>\n<ul> <li>\n<code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>Reads out a header that's already been queued but not sent to the client. Note that the name is case insensitive.</p> <p>Example:</p> <pre data-language=\"js\">const contentType = response.getHeader('content-type');\n</pre> <h3 id=\"http_response_getheadernames\">response.getHeaderNames()</h3> <div class=\"api_metadata\"> <span>Added in: v7.7.0</span> </div>\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a>\n</li> </ul> <p>Returns an array containing the unique names of the current outgoing headers. All header names are lowercase.</p> <p>Example:</p> <pre data-language=\"js\">response.setHeader('Foo', 'bar');\nresponse.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);\n\nconst headerNames = response.getHeaderNames();\n// headerNames === ['foo', 'set-cookie']\n</pre> <h3 id=\"http_response_getheaders\">response.getHeaders()</h3> <div class=\"api_metadata\"> <span>Added in: v7.7.0</span> </div>\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> </ul> <p>Returns a shallow copy of the current outgoing headers. Since a shallow copy is used, array values may be mutated without additional calls to various header-related http module methods. The keys of the returned object are the header names and the values are the respective header values. All header names are lowercase.</p> <p>Example:</p> <pre data-language=\"js\">response.setHeader('Foo', 'bar');\nresponse.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);\n\nconst headers = response.getHeaders();\n// headers === { foo: 'bar', 'set-cookie': ['foo=bar', 'bar=baz'] }\n</pre> <h3 id=\"http_response_hasheader_name\">response.hasHeader(name)</h3> <div class=\"api_metadata\"> <span>Added in: v7.7.0</span> </div>\n<ul> <li>\n<code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a>\n</li> </ul> <p>Returns <code>true</code> if the header identified by <code>name</code> is currently set in the outgoing headers. Note that the header name matching is case-insensitive.</p> <p>Example:</p> <pre data-language=\"js\">const hasContentType = response.hasHeader('content-type');\n</pre> <h3 id=\"http_response_headerssent\">response.headersSent</h3> <div class=\"api_metadata\"> <span>Added in: v0.9.3</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li> </ul> <p>Boolean (read-only). True if headers were sent, false otherwise.</p> <h3 id=\"http_response_removeheader_name\">response.removeHeader(name)</h3> <div class=\"api_metadata\"> <span>Added in: v0.4.0</span> </div>\n<ul> <li>\n<code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>Removes a header that's queued for implicit sending.</p> <p>Example:</p> <pre data-language=\"js\">response.removeHeader('Content-Encoding');\n</pre> <h3 id=\"http_response_senddate\">response.sendDate</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.5</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li> </ul> <p>When true, the Date header will be automatically generated and sent in the response if it is not already present in the headers. Defaults to true.</p> <p>This should only be disabled for testing; HTTP requires the Date header in responses.</p> <h3 id=\"http_response_setheader_name_value\">response.setHeader(name, value)</h3> <div class=\"api_metadata\"> <span>Added in: v0.4.0</span> </div>\n<ul> <li>\n<code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a>\n</li> </ul> <p>Sets a single header value for implicit headers. If this header already exists in the to-be-sent headers, its value will be replaced. Use an array of strings here to send multiple headers with the same name.</p> <p>Example:</p> <pre data-language=\"js\">response.setHeader('Content-Type', 'text/html');\n</pre> <p>or</p> <pre data-language=\"js\">response.setHeader('Set-Cookie', ['type=ninja', 'language=javascript']);\n</pre> <p>Attempting to set a header field name or value that contains invalid characters will result in a <a href=\"errors#errors_class_typeerror\"><code>TypeError</code></a> being thrown.</p> <p>When headers have been set with <a href=\"#http_response_setheader_name_value\"><code>response.setHeader()</code></a>, they will be merged with any headers passed to <a href=\"#http_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a>, with the headers passed to <a href=\"#http_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a> given precedence.</p> <pre data-language=\"js\">// returns content-type = text/plain\nconst server = http.createServer((req, res) =&gt; {\n  res.setHeader('Content-Type', 'text/html');\n  res.setHeader('X-Foo', 'bar');\n  res.writeHead(200, {'Content-Type': 'text/plain'});\n  res.end('ok');\n});\n</pre> <h3 id=\"http_response_settimeout_msecs_callback\">response.setTimeout(msecs[, callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.9.12</span> </div>\n<ul> <li>\n<code>msecs</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Sets the Socket's timeout value to <code>msecs</code>. If a callback is provided, then it is added as a listener on the <code>'timeout'</code> event on the response object.</p> <p>If no <code>'timeout'</code> listener is added to the request, the response, or the server, then sockets are destroyed when they time out. If a handler is assigned to the request, the response, or the server's <code>'timeout'</code> events, timed out sockets must be handled explicitly.</p> <p>Returns <code>response</code>.</p> <h3 id=\"http_response_statuscode\">response.statusCode</h3> <div class=\"api_metadata\"> <span>Added in: v0.4.0</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li> </ul> <p>When using implicit headers (not calling <a href=\"#http_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a> explicitly), this property controls the status code that will be sent to the client when the headers get flushed.</p> <p>Example:</p> <pre data-language=\"js\">response.statusCode = 404;\n</pre> <p>After response header was sent to the client, this property indicates the status code which was sent out.</p> <h3 id=\"http_response_statusmessage\">response.statusMessage</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.8</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> <p>When using implicit headers (not calling <a href=\"#http_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a> explicitly), this property controls the status message that will be sent to the client when the headers get flushed. If this is left as <code>undefined</code> then the standard message for the status code will be used.</p> <p>Example:</p> <pre data-language=\"js\">response.statusMessage = 'Not found';\n</pre> <p>After response header was sent to the client, this property indicates the status message which was sent out.</p> <h3 id=\"http_response_write_chunk_encoding_callback\">response.write(chunk[, encoding][, callback])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.29</span> </div>\n<ul> <li>\n<code>chunk</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a>\n</li> </ul> <p>If this method is called and <a href=\"#http_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a> has not been called, it will switch to implicit header mode and flush the implicit headers.</p> <p>This sends a chunk of the response body. This method may be called multiple times to provide successive parts of the body.</p> <p>Note that in the <code>http</code> module, the response body is omitted when the request is a HEAD request. Similarly, the <code>204</code> and <code>304</code> responses <em>must not</em> include a message body.</p> <p><code>chunk</code> can be a string or a buffer. If <code>chunk</code> is a string, the second parameter specifies how to encode it into a byte stream. By default the <code>encoding</code> is <code>'utf8'</code>. <code>callback</code> will be called when this chunk of data is flushed.</p> <p><strong>Note</strong>: This is the raw HTTP body and has nothing to do with higher-level multi-part body encodings that may be used.</p> <p>The first time <a href=\"#http_response_write_chunk_encoding_callback\"><code>response.write()</code></a> is called, it will send the buffered header information and the first chunk of the body to the client. The second time <a href=\"#http_response_write_chunk_encoding_callback\"><code>response.write()</code></a> is called, Node.js assumes data will be streamed, and sends the new data separately. That is, the response is buffered up to the first chunk of the body.</p> <p>Returns <code>true</code> if the entire data was flushed successfully to the kernel buffer. Returns <code>false</code> if all or part of the data was queued in user memory. <code>'drain'</code> will be emitted when the buffer is free again.</p> <h3 id=\"http_response_writecontinue\">response.writeContinue()</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.0</span> </div>\n<p>Sends a HTTP/1.1 100 Continue message to the client, indicating that the request body should be sent. See the <a href=\"#http_event_checkcontinue\"><code>'checkContinue'</code></a> event on <code>Server</code>.</p> <h3 id=\"http_response_writehead_statuscode_statusmessage_headers\">response.writeHead(statusCode[, statusMessage][, headers])</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v5.11.0, v4.4.5</td> <td>\n<p>A <code>RangeError</code> is thrown if <code>statusCode</code> is not a number in the range <code>[100, 999]</code>.</p> </td>\n</tr> <tr>\n<td>v0.1.30</td> <td>\n<p><span>Added in: v0.1.30</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>statusCode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> <li>\n<code>statusMessage</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>headers</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> </ul> <p>Sends a response header to the request. The status code is a 3-digit HTTP status code, like <code>404</code>. The last argument, <code>headers</code>, are the response headers. Optionally one can give a human-readable <code>statusMessage</code> as the second argument.</p> <p>Example:</p> <pre data-language=\"js\">const body = 'hello world';\nresponse.writeHead(200, {\n  'Content-Length': Buffer.byteLength(body),\n  'Content-Type': 'text/plain' });\n</pre> <p>This method must only be called once on a message and it must be called before <a href=\"#http_response_end_data_encoding_callback\"><code>response.end()</code></a> is called.</p> <p>If <a href=\"#http_response_write_chunk_encoding_callback\"><code>response.write()</code></a> or <a href=\"#http_response_end_data_encoding_callback\"><code>response.end()</code></a> are called before calling this, the implicit/mutable headers will be calculated and call this function.</p> <p>When headers have been set with <a href=\"#http_response_setheader_name_value\"><code>response.setHeader()</code></a>, they will be merged with any headers passed to <a href=\"#http_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a>, with the headers passed to <a href=\"#http_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a> given precedence.</p> <pre data-language=\"js\">// returns content-type = text/plain\nconst server = http.createServer((req, res) =&gt; {\n  res.setHeader('Content-Type', 'text/html');\n  res.setHeader('X-Foo', 'bar');\n  res.writeHead(200, {'Content-Type': 'text/plain'});\n  res.end('ok');\n});\n</pre> <p>Note that Content-Length is given in bytes not characters. The above example works because the string <code>'hello world'</code> contains only single byte characters. If the body contains higher coded characters then <code>Buffer.byteLength()</code> should be used to determine the number of bytes in a given encoding. And Node.js does not check whether Content-Length and the length of the body which has been transmitted are equal or not.</p> <p>Attempting to set a header field name or value that contains invalid characters will result in a <a href=\"errors#errors_class_typeerror\"><code>TypeError</code></a> being thrown.</p> <h2 id=\"http_class_http_incomingmessage\">Class: http.IncomingMessage</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.17</span> </div>\n<p>An <code>IncomingMessage</code> object is created by <a href=\"#http_class_http_server\"><code>http.Server</code></a> or <a href=\"#http_class_http_clientrequest\"><code>http.ClientRequest</code></a> and passed as the first argument to the <a href=\"#http_event_request\"><code>'request'</code></a> and <a href=\"#http_event_response\"><code>'response'</code></a> event respectively. It may be used to access response status, headers and data.</p> <p>It implements the <a href=\"stream#stream_class_stream_readable\">Readable Stream</a> interface, as well as the following additional events, methods, and properties.</p> <h3 id=\"http_event_aborted_1\">Event: 'aborted'</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.8</span> </div>\n<p>Emitted when the request has been aborted by the client and the network socket has closed.</p> <h3 id=\"http_event_close_2\">Event: 'close'</h3> <div class=\"api_metadata\"> <span>Added in: v0.4.2</span> </div>\n<p>Indicates that the underlying connection was closed. Just like <code>'end'</code>, this event occurs only once per response.</p> <h3 id=\"http_message_destroy_error\">message.destroy([error])</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.0</span> </div>\n<ul> <li>\n<code>error</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a>\n</li> </ul> <p>Calls <code>destroy()</code> on the socket that received the <code>IncomingMessage</code>. If <code>error</code> is provided, an <code>'error'</code> event is emitted and <code>error</code> is passed as an argument to any listeners on the event.</p> <h3 id=\"http_message_headers\">message.headers</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.5</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li> </ul> <p>The request/response headers object.</p> <p>Key-value pairs of header names and values. Header names are lower-cased. Example:</p> <pre data-language=\"js\">// Prints something like:\n//\n// { 'user-agent': 'curl/7.22.0',\n//   host: '127.0.0.1:8000',\n//   accept: '*/*' }\nconsole.log(request.headers);\n</pre> <p>Duplicates in raw headers are handled in the following ways, depending on the header name:</p> <ul> <li>Duplicates of <code>age</code>, <code>authorization</code>, <code>content-length</code>, <code>content-type</code>, <code>etag</code>, <code>expires</code>, <code>from</code>, <code>host</code>, <code>if-modified-since</code>, <code>if-unmodified-since</code>, <code>last-modified</code>, <code>location</code>, <code>max-forwards</code>, <code>proxy-authorization</code>, <code>referer</code>, <code>retry-after</code>, or <code>user-agent</code> are discarded.</li> <li>\n<code>set-cookie</code> is always an array. Duplicates are added to the array.</li> <li>For all other headers, the values are joined together with ', '.</li> </ul> <h3 id=\"http_message_httpversion\">message.httpVersion</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.1</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> <p>In case of server request, the HTTP version sent by the client. In the case of client response, the HTTP version of the connected-to server. Probably either <code>'1.1'</code> or <code>'1.0'</code>.</p> <p>Also <code>message.httpVersionMajor</code> is the first integer and <code>message.httpVersionMinor</code> is the second.</p> <h3 id=\"http_message_method\">message.method</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.1</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> <p><strong>Only valid for request obtained from <a href=\"#http_class_http_server\"><code>http.Server</code></a>.</strong></p> <p>The request method as a string. Read only. Example: <code>'GET'</code>, <code>'DELETE'</code>.</p> <h3 id=\"http_message_rawheaders\">message.rawHeaders</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.6</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a></li> </ul> <p>The raw request/response headers list exactly as they were received.</p> <p>Note that the keys and values are in the same list. It is <em>not</em> a list of tuples. So, the even-numbered offsets are key values, and the odd-numbered offsets are the associated values.</p> <p>Header names are not lowercased, and duplicates are not merged.</p> <pre data-language=\"js\">// Prints something like:\n//\n// [ 'user-agent',\n//   'this is invalid because there can be only one',\n//   'User-Agent',\n//   'curl/7.22.0',\n//   'Host',\n//   '127.0.0.1:8000',\n//   'ACCEPT',\n//   '*/*' ]\nconsole.log(request.rawHeaders);\n</pre> <h3 id=\"http_message_rawtrailers\">message.rawTrailers</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.6</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a></li> </ul> <p>The raw request/response trailer keys and values exactly as they were received. Only populated at the <code>'end'</code> event.</p> <h3 id=\"http_message_settimeout_msecs_callback\">message.setTimeout(msecs, callback)</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.9</span> </div>\n<ul> <li>\n<code>msecs</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Calls <code>message.connection.setTimeout(msecs, callback)</code>.</p> <p>Returns <code>message</code>.</p> <h3 id=\"http_message_socket\">message.socket</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.0</span> </div>\n<ul> <li><a href=\"net#net_class_net_socket\" class=\"type\">&lt;net.Socket&gt;</a></li> </ul> <p>The <a href=\"net#net_class_net_socket\"><code>net.Socket</code></a> object associated with the connection.</p> <p>With HTTPS support, use <a href=\"tls#tls_tlssocket_getpeercertificate_detailed\"><code>request.socket.getPeerCertificate()</code></a> to obtain the client's authentication details.</p> <h3 id=\"http_message_statuscode\">message.statusCode</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.1</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li> </ul> <p><strong>Only valid for response obtained from <a href=\"#http_class_http_clientrequest\"><code>http.ClientRequest</code></a>.</strong></p> <p>The 3-digit HTTP response status code. E.G. <code>404</code>.</p> <h3 id=\"http_message_statusmessage\">message.statusMessage</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.10</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> <p><strong>Only valid for response obtained from <a href=\"#http_class_http_clientrequest\"><code>http.ClientRequest</code></a>.</strong></p> <p>The HTTP response status message (reason phrase). E.G. <code>OK</code> or <code>Internal Server Error</code>.</p> <h3 id=\"http_message_trailers\">message.trailers</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.0</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li> </ul> <p>The request/response trailers object. Only populated at the <code>'end'</code> event.</p> <h3 id=\"http_message_url\">message.url</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> <p><strong>Only valid for request obtained from <a href=\"#http_class_http_server\"><code>http.Server</code></a>.</strong></p> <p>Request URL string. This contains only the URL that is present in the actual HTTP request. If the request is:</p> <pre data-language=\"txt\">GET /status?name=ryan HTTP/1.1\\r\\n\nAccept: text/plain\\r\\n\n\\r\\n\n</pre> <p>Then <code>request.url</code> will be:</p> <pre data-language=\"js\">'/status?name=ryan'\n</pre> <p>To parse the url into its parts <code>require('url').parse(request.url)</code> can be used. Example:</p> <pre data-language=\"txt\">$ node\n&gt; require('url').parse('/status?name=ryan')\nUrl {\n  protocol: null,\n  slashes: null,\n  auth: null,\n  host: null,\n  port: null,\n  hostname: null,\n  hash: null,\n  search: '?name=ryan',\n  query: 'name=ryan',\n  pathname: '/status',\n  path: '/status?name=ryan',\n  href: '/status?name=ryan' }\n</pre> <p>To extract the parameters from the query string, the <code>require('querystring').parse</code> function can be used, or <code>true</code> can be passed as the second argument to <code>require('url').parse</code>. Example:</p> <pre data-language=\"txt\">$ node\n&gt; require('url').parse('/status?name=ryan', true)\nUrl {\n  protocol: null,\n  slashes: null,\n  auth: null,\n  host: null,\n  port: null,\n  hostname: null,\n  hash: null,\n  search: '?name=ryan',\n  query: { name: 'ryan' },\n  pathname: '/status',\n  path: '/status?name=ryan',\n  href: '/status?name=ryan' }\n</pre> <h2 id=\"http_http_methods\">http.METHODS</h2> <div class=\"api_metadata\"> <span>Added in: v0.11.8</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a></li> </ul> <p>A list of the HTTP methods that are supported by the parser.</p> <h2 id=\"http_http_status_codes\">http.STATUS_CODES</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.22</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li> </ul> <p>A collection of all the standard HTTP response status codes, and the short description of each. For example, <code>http.STATUS_CODES[404] === 'Not\nFound'</code>.</p> <h2 id=\"http_http_createserver_requestlistener\">http.createServer([requestListener])</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.13</span> </div>\n<ul> <li>\n<p><code>requestListener</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></p> </li> <li>\n<p>Returns: <a href=\"http#http_class_http_server\" class=\"type\">&lt;http.Server&gt;</a></p> </li> </ul> <p>Returns a new instance of <a href=\"#http_class_http_server\"><code>http.Server</code></a>.</p> <p>The <code>requestListener</code> is a function which is automatically added to the <a href=\"#http_event_request\"><code>'request'</code></a> event.</p> <h2 id=\"http_http_get_options_callback\">http.get(options[, callback])</h2> <div class=\"api_metadata\"> <span>Added in: v0.3.6</span> </div>\n<ul> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Accepts the same <code>options</code> as <a href=\"#http_http_request_options_callback\"><code>http.request()</code></a>, with the <code>method</code> always set to <code>GET</code>. Properties that are inherited from the prototype are ignored.</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> <li>Returns: <a href=\"http#http_class_http_clientrequest\" class=\"type\">&lt;http.ClientRequest&gt;</a>\n</li> </ul> <p>Since most requests are GET requests without bodies, Node.js provides this convenience method. The only difference between this method and <a href=\"#http_http_request_options_callback\"><code>http.request()</code></a> is that it sets the method to GET and calls <code>req.end()</code> automatically. Note that response data must be consumed in the callback for reasons stated in <a href=\"#http_class_http_clientrequest\"><code>http.ClientRequest</code></a> section.</p> <p>The <code>callback</code> is invoked with a single argument that is an instance of <a href=\"#http_class_http_incomingmessage\"><code>http.IncomingMessage</code></a></p> <p>JSON Fetching Example:</p> <pre data-language=\"js\">http.get('http://nodejs.org/dist/index.json', (res) =&gt; {\n  const { statusCode } = res;\n  const contentType = res.headers['content-type'];\n\n  let error;\n  if (statusCode !== 200) {\n    error = new Error(`Request Failed.\\n` +\n                      `Status Code: ${statusCode}`);\n  } else if (!/^application\\/json/.test(contentType)) {\n    error = new Error(`Invalid content-type.\\n` +\n                      `Expected application/json but received ${contentType}`);\n  }\n  if (error) {\n    console.error(error.message);\n    // consume response data to free up memory\n    res.resume();\n    return;\n  }\n\n  res.setEncoding('utf8');\n  let rawData = '';\n  res.on('data', (chunk) =&gt; { rawData += chunk; });\n  res.on('end', () =&gt; {\n    try {\n      const parsedData = JSON.parse(rawData);\n      console.log(parsedData);\n    } catch (e) {\n      console.error(e.message);\n    }\n  });\n}).on('error', (e) =&gt; {\n  console.error(`Got error: ${e.message}`);\n});\n</pre> <h2 id=\"http_http_globalagent\">http.globalAgent</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.9</span> </div>\n<ul> <li><a href=\"http#http_class_http_agent\" class=\"type\">&lt;http.Agent&gt;</a></li> </ul> <p>Global instance of <code>Agent</code> which is used as the default for all HTTP client requests.</p> <h2 id=\"http_http_request_options_callback\">http.request(options[, callback])</h2> <div class=\"api_metadata\"> <span>Added in: v0.3.6</span> </div>\n<ul> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a><ul> <li>\n<code>protocol</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Protocol to use. Defaults to <code>http:</code>.</li> <li>\n<code>host</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> A domain name or IP address of the server to issue the request to. Defaults to <code>localhost</code>.</li> <li>\n<code>hostname</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Alias for <code>host</code>. To support <a href=\"url#url_url_parse_urlstring_parsequerystring_slashesdenotehost\"><code>url.parse()</code></a>, <code>hostname</code> is preferred over <code>host</code>.</li> <li>\n<code>family</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> IP address family to use when resolving <code>host</code> and <code>hostname</code>. Valid values are <code>4</code> or <code>6</code>. When unspecified, both IP v4 and v6 will be used.</li> <li>\n<code>port</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Port of remote server. Defaults to 80.</li> <li>\n<code>localAddress</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Local interface to bind for network connections.</li> <li>\n<code>socketPath</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Unix Domain Socket (use one of host:port or socketPath).</li> <li>\n<code>method</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> A string specifying the HTTP request method. Defaults to <code>'GET'</code>.</li> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Request path. Defaults to <code>'/'</code>. Should include query string if any. E.G. <code>'/index.html?page=12'</code>. An exception is thrown when the request path contains illegal characters. Currently, only spaces are rejected but that may change in the future.</li> <li>\n<code>headers</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> An object containing request headers.</li> <li>\n<code>auth</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Basic authentication i.e. <code>'user:password'</code> to compute an Authorization header.</li> <li>\n<code>agent</code> <a href=\"http#http_class_http_agent\" class=\"type\">&lt;http.Agent&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Controls <a href=\"#http_class_http_agent\"><code>Agent</code></a> behavior. Possible values:<ul> <li>\n<code>undefined</code> (default): use <a href=\"#http_http_globalagent\"><code>http.globalAgent</code></a> for this host and port.</li> <li>\n<code>Agent</code> object: explicitly use the passed in <code>Agent</code>.</li> <li>\n<code>false</code>: causes a new <code>Agent</code> with default values to be used.</li> </ul> </li> <li>\n<code>createConnection</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A function that produces a socket/stream to use for the request when the <code>agent</code> option is not used. This can be used to avoid creating a custom <code>Agent</code> class just to override the default <code>createConnection</code> function. See <a href=\"#http_agent_createconnection_options_callback\"><code>agent.createConnection()</code></a> for more details.</li> <li>\n<code>timeout</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>: A number specifying the socket timeout in milliseconds. This will set the timeout before the socket is connected.</li> </ul> </li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> <li>Returns: <a href=\"http#http_class_http_clientrequest\" class=\"type\">&lt;http.ClientRequest&gt;</a>\n</li> </ul> <p>Node.js maintains several connections per server to make HTTP requests. This function allows one to transparently issue requests.</p> <p><code>options</code> can be an object or a string. If <code>options</code> is a string, it is automatically parsed with <a href=\"url#url_url_parse_urlstring_parsequerystring_slashesdenotehost\"><code>url.parse()</code></a>.</p> <p>The optional <code>callback</code> parameter will be added as a one time listener for the <a href=\"#http_event_response\"><code>'response'</code></a> event.</p> <p><code>http.request()</code> returns an instance of the <a href=\"#http_class_http_clientrequest\"><code>http.ClientRequest</code></a> class. The <code>ClientRequest</code> instance is a writable stream. If one needs to upload a file with a POST request, then write to the <code>ClientRequest</code> object.</p> <p>Example:</p> <pre data-language=\"js\">const postData = querystring.stringify({\n  'msg': 'Hello World!'\n});\n\nconst options = {\n  hostname: 'www.google.com',\n  port: 80,\n  path: '/upload',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded',\n    'Content-Length': Buffer.byteLength(postData)\n  }\n};\n\nconst req = http.request(options, (res) =&gt; {\n  console.log(`STATUS: ${res.statusCode}`);\n  console.log(`HEADERS: ${JSON.stringify(res.headers)}`);\n  res.setEncoding('utf8');\n  res.on('data', (chunk) =&gt; {\n    console.log(`BODY: ${chunk}`);\n  });\n  res.on('end', () =&gt; {\n    console.log('No more data in response.');\n  });\n});\n\nreq.on('error', (e) =&gt; {\n  console.error(`problem with request: ${e.message}`);\n});\n\n// write data to request body\nreq.write(postData);\nreq.end();\n</pre> <p>Note that in the example <code>req.end()</code> was called. With <code>http.request()</code> one must always call <code>req.end()</code> to signify the end of the request - even if there is no data being written to the request body.</p> <p>If any error is encountered during the request (be that with DNS resolution, TCP level errors, or actual HTTP parse errors) an <code>'error'</code> event is emitted on the returned request object. As with all <code>'error'</code> events, if no listeners are registered the error will be thrown.</p> <p>There are a few special headers that should be noted.</p> <ul> <li>\n<p>Sending a 'Connection: keep-alive' will notify Node.js that the connection to the server should be persisted until the next request.</p> </li> <li>\n<p>Sending a 'Content-Length' header will disable the default chunked encoding.</p> </li> <li>\n<p>Sending an 'Expect' header will immediately send the request headers. Usually, when sending 'Expect: 100-continue', both a timeout and a listener for the <code>continue</code> event should be set. See RFC2616 Section 8.2.3 for more information.</p> </li> <li>\n<p>Sending an Authorization header will override using the <code>auth</code> option to compute basic authentication.</p> </li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/http.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/http.html</a>\n  </p>\n</div>\n","n-api":"<h1 id=\"n_api_n_api\">N-API</h1> <div class=\"api_stability api_stability_1\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 1</a> - Experimental</div>\n<p>N-API (pronounced N as in the letter, followed by API) is an API for building native Addons. It is independent from the underlying JavaScript runtime (ex V8) and is maintained as part of Node.js itself. This API will be Application Binary Interface (ABI) stable across versions of Node.js. It is intended to insulate Addons from changes in the underlying JavaScript engine and allow modules compiled for one version to run on later versions of Node.js without recompilation.</p> <p>Addons are built/packaged with the same approach/tools outlined in the section titled <a href=\"addons\">C/C++ Addons</a>. The only difference is the set of APIs that are used by the native code. Instead of using the V8 or <a href=\"https://github.com/nodejs/nan\">Native Abstractions for Node.js</a> APIs, the functions available in the N-API are used.</p> <p>APIs exposed by N-API are generally used to create and manipulate JavaScript values. Concepts and operations generally map to ideas specified in the ECMA262 Language Specification. The APIs have the following properties:</p> <ul> <li>All N-API calls return a status code of type <code>napi_status</code>. This status indicates whether the API call succeeded or failed.</li> <li>The API's return value is passed via an out parameter.</li> <li>All JavaScript values are abstracted behind an opaque type named <code>napi_value</code>.</li> <li>In case of an error status code, additional information can be obtained using <code>napi_get_last_error_info</code>. More information can be found in the error handling section <a href=\"#n_api_error_handling\">Error Handling</a>.</li> </ul> <p>The documentation for N-API is structured as follows:</p> <ul> <li><a href=\"#n_api_basic_n_api_data_types\">Basic N-API Data Types</a></li> <li><a href=\"#n_api_error_handling\">Error Handling</a></li> <li><a href=\"#n_api_object_lifetime_management\">Object Lifetime Management</a></li> <li><a href=\"#n_api_module_registration\">Module Registration</a></li> <li><a href=\"#n_api_working_with_javascript_values\">Working with JavaScript Values</a></li> <li><a href=\"#n_api_working_with_javascript_values_abstract_operations\">Working with JavaScript Values - Abstract Operations</a></li> <li><a href=\"#n_api_working_with_javascript_properties\">Working with JavaScript Properties</a></li> <li><a href=\"#n_api_working_with_javascript_functions\">Working with JavaScript Functions</a></li> <li><a href=\"#n_api_object_wrap\">Object Wrap</a></li> <li><a href=\"#n_api_asynchronous_operations\">Aynchronous Operations</a></li> </ul> <p>The N-API is a C API that ensures ABI stability across Node.js versions and different compiler levels. However, we also understand that a C++ API can be easier to use in many cases. To support these cases we expect there to be one or more C++ wrapper modules that provide an inlineable C++ API. Binaries built with these wrapper modules will depend on the symbols for the N-API C based functions exported by Node.js. These wrappers are not part of N-API, nor will they be maintained as part of Node.js. One such example is: <a href=\"https://github.com/nodejs/node-api\">node-api</a>.</p> <h2 id=\"n_api_basic_n_api_data_types\">Basic N-API Data Types</h2> <p>N-API exposes the following fundamental datatypes as abstractions that are consumed by the various APIs. These APIs should be treated as opaque, introspectable only with other N-API calls.</p> <h3 id=\"n_api_napi_status\"><em>napi_status</em></h3> <p>Integral status code indicating the success or failure of a N-API call. Currently, the following status codes are supported.</p> <pre data-language=\"C\">typedef enum {\n  napi_ok,\n  napi_invalid_arg,\n  napi_object_expected,\n  napi_string_expected,\n  napi_name_expected,\n  napi_function_expected,\n  napi_number_expected,\n  napi_boolean_expected,\n  napi_array_expected,\n  napi_generic_failure,\n  napi_pending_exception,\n  napi_cancelled,\n  napi_status_last\n} napi_status;\n</pre> <p>If additional information is required upon an API returning a failed status, it can be obtained by calling <code>napi_get_last_error_info</code>.</p> <h3 id=\"n_api_napi_extended_error_info\"><em>napi_extended_error_info</em></h3> <pre data-language=\"C\">typedef struct {\n  const char* error_message;\n  void* engine_reserved;\n  uint32_t engine_error_code;\n  napi_status error_code;\n} napi_extended_error_info;\n</pre> <ul> <li>\n<code>error_message</code>: UTF8-encoded string containing a VM-neutral description of the error.</li> <li>\n<code>engine_reserved</code>: Reserved for VM-specific error details. This is currently not implemented for any VM.</li> <li>\n<code>engine_error_code</code>: VM-specific error code. This is currently not implemented for any VM.</li> <li>\n<code>error_code</code>: The N-API status code that originated with the last error.</li> </ul> <p>See the <a href=\"#n_api_error_handling\">Error Handling</a> section for additional information.</p> <h3 id=\"n_api_napi_env\"><em>napi_env</em></h3> <p><code>napi_env</code> is used to represent a context that the underlying N-API implementation can use to persist VM-specific state. This structure is passed to native functions when they're invoked, and it must be passed back when making N-API calls. Specifically, the same <code>napi_env</code> that was passed in when the initial native function was called must be passed to any subsequent nested N-API calls. Caching the <code>napi_env</code> for the purpose of general reuse is not allowed.</p> <h3 id=\"n_api_napi_value\"><em>napi_value</em></h3> <p>This is an opaque pointer that is used to represent a JavaScript value.</p> <h3 id=\"n_api_n_api_memory_management_types\">N-API Memory Management types</h3> <h4 id=\"n_api_napi_handle_scope\"><em>napi_handle_scope</em></h4> <p>This is an abstraction used to control and modify the lifetime of objects created within a particular scope. In general, N-API values are created within the context of a handle scope. When a native method is called from JavaScript, a default handle scope will exist. If the user does not explicitly create a new handle scope, N-API values will be created in the default handle scope. For any invocations of code outside the execution of a native method (for instance, during a libuv callback invocation), the module is required to create a scope before invoking any functions that can result in the creation of JavaScript values.</p> <p>Handle scopes are created using <a href=\"#n_api_napi_open_handle_scope\"><code>napi_open_handle_scope</code></a> and are destroyed using <a href=\"#n_api_napi_close_handle_scope\"><code>napi_close_handle_scope</code></a>. Closing the scope can indicate to the GC that all <code>napi_value</code>s created during the lifetime of the handle scope are no longer referenced from the current stack frame.</p> <p>For more details, review the <a href=\"#n_api_object_lifetime_management\">Object Lifetime Management</a>.</p> <h4 id=\"n_api_napi_escapable_handle_scope\"><em>napi_escapable_handle_scope</em></h4> <p>Escapable handle scopes are a special type of handle scope to return values created within a particular handle scope to a parent scope.</p> <h4 id=\"n_api_napi_ref\"><em>napi_ref</em></h4> <p>This is the abstraction to use to reference a <code>napi_value</code>. This allows for users to manage the lifetimes of JavaScript values, including defining their minimum lifetimes explicitly.</p> <p>For more details, review the <a href=\"#n_api_object_lifetime_management\">Object Lifetime Management</a>.</p> <h3 id=\"n_api_n_api_callback_types\">N-API Callback types</h3> <h4 id=\"n_api_napi_callback_info\"><em>napi_callback_info</em></h4> <p>Opaque datatype that is passed to a callback function. It can be used for two purposes:</p> <ul> <li>Get additional information about the context in which the callback was invoked.</li> <li>Set the return value of the callback.</li> </ul> <h4 id=\"n_api_napi_callback\"><em>napi_callback</em></h4> <p>Function pointer type for user-provided native functions which are to be exposed to JavaScript via N-API. Callback functions should satisfy the following signature:</p> <pre data-language=\"C\">typedef void (*napi_callback)(napi_env, napi_callback_info);\n</pre> <h4 id=\"n_api_napi_finalize\"><em>napi_finalize</em></h4> <p>Function pointer type for add-on provided functions that allow the user to be notified when externally-owned data is ready to be cleaned up because the object with which it was associated with, has been garbage-collected. The user must provide a function satisfying the following signature which would get called upon the object's collection. Currently, <code>napi_finalize</code> can be used for finding out when objects that have external data are collected.</p> <h4 id=\"n_api_napi_async_execute_callback\">napi_async_execute_callback</h4> <p>Function pointer used with functions that support asynchronous operations. Callback functions must statisfy the following signature:</p> <pre data-language=\"C\">typedef void (*napi_async_execute_callback)(napi_env env, void* data);\n</pre> <h4 id=\"n_api_napi_async_complete_callback\">napi_async_complete_callback</h4> <p>Function pointer used with functions that support asynchronous operations. Callback functions must statisfy the following signature:</p> <pre data-language=\"C\">typedef void (*napi_async_complete_callback)(napi_env env,\n                                             napi_status status,\n                                             void* data);\n</pre> <h2 id=\"n_api_error_handling\">Error Handling</h2> <p>N-API uses both return values and Javascript exceptions for error handling. The following sections explain the approach for each case.</p> <h3 id=\"n_api_return_values\">Return values</h3> <p>All of the N-API functions share the same error handling pattern. The return type of all API functions is <code>napi_status</code>.</p> <p>The return value will be <code>napi_ok</code> if the request was successful and no uncaught JavaScript exception was thrown. If an error occurred AND an exception was thrown, the <code>napi_status</code> value for the error will be returned. If an exception was thrown, and no error occurred, <code>napi_pending_exception</code> will be returned.</p> <p>In cases where a return value other than <code>napi_ok</code> or <code>napi_pending_exception</code> is returned, <a href=\"#n_api_napi_is_exception_pending\"><code>napi_is_exception_pending</code></a> must be called to check if an exception is pending. See the section on exceptions for more details.</p> <p>The full set of possible napi_status values is defined in <code>napi_api_types.h</code>.</p> <p>The <code>napi_status</code> return value provides a VM-independent representation of the error which occurred. In some cases it is useful to be able to get more detailed information, including a string representing the error as well as VM (engine)-specific information.</p> <p>In order to retrieve this information <a href=\"#n_api_napi_get_last_error_info\"><code>napi_get_last_error_info</code></a> is provided which returns a <code>napi_extended_error_info</code> structure. The format of the <code>napi_extended_error_info</code> structure is as follows:</p> <pre data-language=\"C\">typedef struct napi_extended_error_info {\n  const char* error_message;\n  void* engine_reserved;\n  uint32_t engine_error_code;\n  napi_status error_code;\n};\n</pre> <ul> <li>\n<code>error_message</code>: Textual representation of the error that occured.</li> <li>\n<code>engine_reserved</code>: Opaque handle reserved for engine use only.</li> <li>\n<code>engine_error_code</code>: VM specific error code.</li> <li>\n<code>error_code</code>: n-api status code for the last error.</li> </ul> <p><a href=\"#n_api_napi_get_last_error_info\"><code>napi_get_last_error_info</code></a> returns the information for the last N-API call that was made.</p> <p><strong>Note:</strong> Do not rely on the content or format of any of the extended information as it is not subject to SemVer and may change at any time. It is intended only for logging purposes.</p> <h4 id=\"n_api_napi_get_last_error_info\">napi_get_last_error_info</h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">NAPI_EXTERN napi_status\nnapi_get_last_error_info(napi_env env,\n                         const napi_extended_error_info** result);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[out] result</code>: The <code>napi_extended_error_info</code> structure with more information about the error.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API retrieves a <code>napi_extended_error_info</code> structure with information about the last error that occured.</p> <p><strong>Note:</strong> Do not rely on the content or format of any of the extended information as it is not subject to SemVer and may change at any time. It is intended only for logging purposes.</p> <h3 id=\"n_api_exceptions\">Exceptions</h3> <p>Any N-API function call may result in a pending JavaScript exception. This is obviously the case for any function that may cause the execution of JavaScript, but N-API specifies that an exception may be pending on return from any of the API functions.</p> <p>If the <code>napi_status</code> returned by a function is <code>napi_ok</code> then no exception is pending and no additional action is required. If the <code>napi_status</code> returned is anything other than <code>napi_ok</code> or <code>napi_pending_exception</code>, in order to try to recover and continue instead of simply returning immediately, <a href=\"#n_api_napi_is_exception_pending\"><code>napi_is_exception_pending</code></a> must be called in order to determine if an exception is pending or not.</p> <p>When an exception is pending one of two approaches can be employed.</p> <p>The first appoach is to do any appropriate cleanup and then return so that execution will return to JavaScript. As part of the transition back to JavaScript the exception will be thrown at the point in the JavaScript code where the native method was invoked. The behavior of most N-API calls is unspecified while an exception is pending, and many will simply return <code>napi_pending_exception</code>, so it is important to do as little as possible and then return to JavaScript where the exception can be handled.</p> <p>The second approach is to try to handle the exception. There will be cases where the native code can catch the exception, take the appropriate action, and then continue. This is only recommended in specific cases where it is known that the exception can be safely handled. In these cases <a href=\"#n_api_napi_get_and_clear_last_exception\"><code>napi_get_and_clear_last_exception</code></a> can be used to get and clear the exception. On success, result will contain the handle to the last JavaScript Object thrown. If it is determined, after retrieving the exception, the exception cannot be handled after all it can be re-thrown it with [<code>napi_throw</code>][] where error is the JavaScript Error object to be thrown.</p> <p>The following utility functions are also available in case native code needs to throw an exception or determine if a <code>napi_value</code> is an instance of a JavaScript <code>Error</code> object: <a href=\"#n_api_napi_throw_error\"><code>napi_throw_error</code></a>, <a href=\"#n_api_napi_throw_type_error\"><code>napi_throw_type_error</code></a>, <a href=\"#n_api_napi_throw_range_error\"><code>napi_throw_range_error</code></a> and <a href=\"#n_api_napi_is_error\"><code>napi_is_error</code></a>.</p> <p>The following utility functions are also available in case native code needs to create an Error object: <a href=\"#n_api_napi_create_error\"><code>napi_create_error</code></a>, <a href=\"#n_api_napi_create_type_error\"><code>napi_create_type_error</code></a>, and <a href=\"#n_api_napi_create_range_error\"><code>napi_create_range_error</code></a>. where result is the napi_value that refers to the newly created JavaScript Error object.</p> <h4 id=\"n_api_napi_throw\">napi_throw</h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">NODE_EXTERN napi_status napi_throw(napi_env env, napi_value error);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] error</code>: The <code>napi_value</code> for the Error to be thrown.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API throws the JavaScript Error provided.</p> <h4 id=\"n_api_napi_throw_error\">napi_throw_error</h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">NODE_EXTERN napi_status napi_throw_error(napi_env env, const char* msg);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] msg</code>: C string representing the text to be associated with the error.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API throws a JavaScript Error with the text provided.</p> <h4 id=\"n_api_napi_throw_type_error\">napi_throw_type_error</h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">NODE_EXTERN napi_status napi_throw_type_error(napi_env env, const char* msg);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] msg</code>: C string representing the text to be associated with the error.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API throws a JavaScript TypeError with the text provided.</p> <h4 id=\"n_api_napi_throw_range_error\">napi_throw_range_error</h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">NODE_EXTERN napi_status napi_throw_range_error(napi_env env, const char* msg);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] msg</code>: C string representing the text to be associated with the error.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API throws a JavaScript RangeError with the text provided.</p> <h4 id=\"n_api_napi_is_error\">napi_is_error</h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">NODE_EXTERN napi_status napi_is_error(napi_env env,\n                                      napi_value value,\n                                      bool* result);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] msg</code>: The <code>napi_value</code> to be checked.</li> <li>\n<code>[out] result</code>: Boolean value that is set to true if <code>napi_value</code> represents an error, false otherwise.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API queries a <code>napi_value</code> to check if it represents an error object.</p> <h4 id=\"n_api_napi_create_error\">napi_create_error</h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">NODE_EXTERN napi_status napi_create_error(napi_env env, const char* msg);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] msg</code>: C string representing the text to be associated with.</li> <li>\n<code>[out] result</code>: <code>napi_value</code> representing the error created.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API returns a JavaScript Error with the text provided.</p> <h4 id=\"n_api_napi_create_type_error\">napi_create_type_error</h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">NODE_EXTERN napi_status napi_create_type_error(napi_env env, const char* msg);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] msg</code>: C string representing the text to be associated with.</li> <li>\n<code>[out] result</code>: <code>napi_value</code> representing the error created.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API returns a JavaScript TypeError with the text provided.</p> <h4 id=\"n_api_napi_create_range_error\">napi_create_range_error</h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">NODE_EXTERN napi_status napi_create_range_error(napi_env env, const char* msg);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] msg</code>: C string representing the text to be associated with.</li> <li>\n<code>[out] result</code>: <code>napi_value</code> representing the error created.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API returns a JavaScript RangeError with the text provided.</p> <h4 id=\"n_api_napi_get_and_clear_last_exception\">napi_get_and_clear_last_exception</h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">NAPI_EXTERN napi_status napi_get_and_clear_last_exception(napi_env env,\n                                                          napi_value* result);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[out] result</code>: The exception if one is pending, NULL otherwise.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API returns true if an exception is pending.</p> <h4 id=\"n_api_napi_is_exception_pending\">napi_is_exception_pending</h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">NAPI_EXTERN napi_status napi_is_exception_pending(napi_env env, bool* result);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[out] result</code>: Boolean value that is set to true if an exception is pending.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API returns true if an exception is pending.</p> <h2 id=\"n_api_object_lifetime_management\">Object Lifetime management</h2> <p>As N-API calls are made, handles to objects in the heap for the underlying VM may be returned as <code>napi_values</code>. These handles must hold the objects 'live' until they are no longer required by the native code, otherwise the objects could be collected before the native code was finished using them.</p> <p>As object handles are returned they are associated with a 'scope'. The lifespan for the default scope is tied to the lifespan of the native method call. The result is that, by default, handles remain valid and the objects associated with these handles will be held live for the lifespan of the native method call.</p> <p>In many cases, however, it is necessary that the handles remain valid for either a shorter or longer lifespan than that of the native method. The sections which follow describe the N-API functions than can be used to change the handle lifespan from the default.</p> <h3 id=\"n_api_making_handle_lifespan_shorter_than_that_of_the_native_method\">Making handle lifespan shorter than that of the native method</h3> <p>It is often necessary to make the lifespan of handles shorter than the lifespan of a native method. For example, consider a native method that has a loop which iterates through the elements in a large array:</p> <pre data-language=\"C\">for (int i = 0; i &lt; 1000000; i++) {\n  napi_value result;\n  napi_status status = napi_get_element(e object, i, &amp;result);\n  if (status != napi_ok) {\n    break;\n  }\n  // do something with element\n}\n</pre> <p>This would result in a large number of handles being created, consuming substantial resources. In addition, even though the native code could only use the most recent handle, all of the associated objects would also be kept alive since they all share the same scope.</p> <p>To handle this case, N-API provides the ability to establish a new 'scope' to which newly created handles will be associated. Once those handles are no longer required, the scope can be 'closed' and any handles associated with the scope are invalidated. The methods available to open/close scopes are <a href=\"#n_api_napi_open_handle_scope\"><code>napi_open_handle_scope</code></a> and <a href=\"#n_api_napi_close_handle_scope\"><code>napi_close_handle_scope</code></a>.</p> <p>N-API only supports a single nested hiearchy of scopes. There is only one active scope at any time, and all new handles will be associated with that scope while it is active. Scopes must be closed in the reverse order from which they are opened. In addition, all scopes created within a native method must be closed before returning from that method.</p> <p>Taking the earlier example, adding calls to <a href=\"#n_api_napi_open_handle_scope\"><code>napi_open_handle_scope</code></a> and <a href=\"#n_api_napi_close_handle_scope\"><code>napi_close_handle_scope</code></a> would ensure that at most a single handle is valid throughout the execution of the loop:</p> <pre data-language=\"C\">for (int i = 0; i &lt; 1000000; i++) {napi_\n  napi_handle_scope scope;\n  napi_status status = napi_open_handle_scope(env, &amp;scope);\n  if (status != napi_ok) {\n    break;\n  }\n  napi_value result;\n  status = napi_get_element(e object, i, &amp;result);\n  if (status != napi_ok) {\n    break;\n  }\n  // do something with element\n  status = napi_close_handle_scope(env, scope);\n  if (status != napi_ok) {\n    break;\n  }\n}\n</pre> <p>When nesting scopes, there are cases where a handle from an inner scope needs to live beyond the lifespan of that scope. N-API supports an 'escapable scope' in order to support this case. An escapable scope allows one or more handles to be 'promoted' so that they 'escape' the current scope and the lifespan of the handle(s) changes from the current scope to that of the outer scope.</p> <p>The methods available to open/close escapable scopes are <a href=\"#n_api_napi_open_escapable_handle_scope\"><code>napi_open_escapable_handle_scope</code></a> and <a href=\"#n_api_napi_close_escapable_handle_scope\"><code>napi_close_escapable_handle_scope</code></a>.</p> <p>The request to promote a handle is made through the <a href=\"#n_api_napi_escape_handle\"><code>napi_escape_handle</code></a>.</p> <h4 id=\"n_api_napi_open_handle_scope\">napi_open_handle_scope</h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">NODE_EXTERN napi_status napi_open_handle_scope(napi_env env,\n                                               napi_handle_scope* result);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[out] result</code>: <code>napi_value</code> representing the new scope.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API open a new scope.</p> <h4 id=\"n_api_napi_close_handle_scope\">napi_close_handle_scope</h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">NODE_EXTERN napi_status napi_close_handle_scope(napi_env env,\n                                                napi_handle_scope scope);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] scope</code>: <code>napi_value</code> representing the scope to be closed.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API closes the scope passed in. Scopes must be closed in the reverse order from which they were created.</p> <h4 id=\"n_api_napi_open_escapable_handle_scope\">napi_open_escapable_handle_scope</h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">NODE_EXTERN napi_status\n    napi_open_escapable_handle_scope(napi_env env,\n                                     napi_handle_scope* result);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[out] result</code>: <code>napi_value</code> representing the new scope.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API open a new scope from which objects can be promoted to the outer scope.</p> <h4 id=\"n_api_napi_close_escapable_handle_scope\">napi_close_escapable_handle_scope</h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">NODE_EXTERN napi_status\n    napi_close_escapable_handle_scope(napi_env env,\n                                      napi_handle_scope scope);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] scope</code>: <code>napi_value</code> representing the scope to be closed.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API closes the scope passed in. Scopes must be closed in the reverse order from which they were created.</p> <h4 id=\"n_api_napi_escape_handle\">napi_escape_handle</h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">NAPI_EXTERN napi_status napi_escape_handle(napi_env env,\n                                           napi_escapable_handle_scope scope,\n                                           napi_value escapee,\n                                           napi_value* result);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] scope</code>: <code>napi_value</code> representing the current scope.</li> <li>\n<code>[in] escapee</code>: <code>napi_value</code> representing the JavaScript Object to be escaped.</li> <li>\n<code>[out] result</code>: <code>napi_value</code> representing the handle to the escaped Object in the outer scope.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API promotes the handle to the JavaScript object so that it valid for the lifetime of the outer scope.</p> <h3 id=\"n_api_references_to_objects_with_a_lifespan_longer_than_that_of_the_native_method\">References to objects with a lifespan longer than that of the native method</h3> <p>In some cases an addon will need to be able to create and reference objects with a lifespan longer than that of a single native method invocation. For example, to create a constructor and later use that constructor in a request to creates instances, it must be possible to reference the constructor object across many different instance creation requests. This would not be possible with a normal handle returned as a <code>napi_value</code> as described in the earlier section. The lifespan of a normal handle is managed by scopes and all scopes must be closed before the end of a native method.</p> <p>N-API provides methods to create persistent references to an object. Each persistent reference has an associated count with a value of 0 or higher. The count determines if the reference will keep the corresponding object live. References with a count of 0 do not prevent the object from being collected and are often called 'weak' references. Any count greater than 0 will prevent the object from being collected.</p> <p>References can be created with an initial reference count. The count can then be modified through <a href=\"#n_api_napi_reference_ref\"><code>napi_reference_ref</code></a> and <a href=\"#n_api_napi_reference_unref\"><code>napi_reference_unref</code></a>. If an object is collected while the count for a reference is 0, all subsequent calls to get the object associated with the reference <a href=\"#n_api_napi_get_reference_value\"><code>napi_get_reference_value</code></a> will return NULL for the returned <code>napi_value</code>. An attempt to call <a href=\"#n_api_napi_reference_ref\"><code>napi_reference_ref</code></a> for a reference whose object has been collected will result in an error.</p> <p>References must be deleted once they are no longer required by the addon. When a reference is deleted it will no longer prevent the corresponding object from being collected. Failure to delete a persistent reference will result in a 'memory leak' with both the native memory for the persistent reference and the corresponding object on the heap being retained forever.</p> <p>There can be multiple persistent references created which refer to the same object, each of which will either keep the object live or not based on its individual count.</p> <h4 id=\"n_api_napi_create_reference\">napi_create_reference</h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">NODE_EXTERN napi_status napi_create_reference(napi_env env,\n                                              napi_value value,\n                                              int initial_refcount,\n                                              ndapi_ref* result);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] value</code>: <code>napi_value</code> representing the Object to which we want a reference to.</li> <li>\n<code>[in] initial_refcount</code>: Initial reference count for the new reference.</li> <li>\n<code>[out] result</code>: <code>napi_ref</code> pointing to the new reference.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API create a new reference with the specified reference count to the Object passed in.</p> <h4 id=\"n_api_napi_delete_reference\">napi_delete_reference</h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">NODE_EXTERN napi_status napi_delete_reference(napi_env env, napi_ref ref);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] ref</code>: <code>napi_ref</code> to be deleted.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API deletes the reference passed in.</p> <h4 id=\"n_api_napi_reference_ref\">napi_reference_ref</h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">NODE_EXTERN napi_status napi_reference_ref(napi_env env,\n                                           napi_ref ref,\n                                           int* result);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] ref</code>: <code>napi_ref</code> for which the reference count will be incremented.</li> <li>\n<code>[out] result</code>: The new reference count.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API increments the reference count for the reference passed in and returns the resulting reference count.</p> <h4 id=\"n_api_napi_reference_unref\">napi_reference_unref</h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">NODE_EXTERN napi_status napi_reference_unref(napi_env env,\n                                             napi_ref ref,\n                                             int* result);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] ref</code>: <code>napi_ref</code> for which the reference count will be decremented.</li> <li>\n<code>[out] result</code>: The new reference count.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API decrements the reference count for the reference passed in and returns the resulting reference count.</p> <h4 id=\"n_api_napi_get_reference_value\">napi_get_reference_value</h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">NODE_EXTERN napi_status napi_get_reference_value(napi_env env,\n                                                 napi_ref ref,\n                                                 napi_value* result);\n</pre> <p>the <code>napi_value passed</code> in or out of these methods is a handle to the object to which the reference is related.</p> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] ref</code>: <code>napi_ref</code> for which we requesting the corresponding Object.</li> <li>\n<code>[out] result</code>: The <code>napi_value</code> for the Object referenced by the <code>napi_ref</code>.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>If still valid, this API returns the <code>napi_value</code> representing the JavaScript Object associated with the <code>napi_ref</code>. Otherise, result will be NULL.</p> <h2 id=\"n_api_module_registration\">Module registration</h2> <p>N-API modules are registered in the same manner as other modules except that instead of using the <code>NODE_MODULE</code> macro the following is used:</p> <pre data-language=\"C\">NAPI_MODULE(addon, Init)\n</pre> <p>The next difference is the signature for the <code>Init</code> method. For a N-API module it is as follows:</p> <pre data-language=\"C\">void Init(napi_env env, napi_value exports, napi_value module, void* priv);\n</pre> <p>As with any other module, functions are exported by either adding them to the <code>exports</code> or <code>module</code> objects passed to the <code>Init</code> method.</p> <p>For example, to add the method <code>hello</code> as a function so that it can be called as a method provided by the addon:</p> <pre data-language=\"C\">void Init(napi_env env, napi_value exports, napi_value module, void* priv) {\n  napi_status status;\n  napi_property_descriptor desc =\n    {\"hello\", Method, 0, 0, 0, napi_default, 0};\n  status = napi_define_properties(env, exports, 1, &amp;desc);\n}\n</pre> <p>For example, to set a function to be returned by the <code>require()</code> for the addon:</p> <pre data-language=\"C\">void Init(napi_env env, napi_value exports, napi_value module, void* priv) {\n  napi_status status;\n  napi_property_descriptor desc =\n    {\"exports\", Method, 0, 0, 0, napi_default, 0};\n  status = napi_define_properties(env, module, 1, &amp;desc);\n}\n</pre> <p>For example, to define a class so that new instances can be created (often used with <a href=\"#n_api_object_wrap\">Object Wrap</a>):</p> <pre data-language=\"C\">// NOTE: partial example, not all referenced code is included\n\nnapi_status status;\nnapi_property_descriptor properties[] = {\n    { \"value\", nullptr, GetValue, SetValue, 0, napi_default, 0 },\n    DECLARE_NAPI_METHOD(\"plusOne\", PlusOne),\n    DECLARE_NAPI_METHOD(\"multiply\", Multiply),\n};\n\nnapi_value cons;\nstatus =\n    napi_define_class(env, \"MyObject\", New, nullptr, 3, properties, &amp;cons);\nif (status != napi_ok) return;\n\nstatus = napi_create_reference(env, cons, 1, &amp;constructor);\nif (status != napi_ok) return;\n\nstatus = napi_set_named_property(env, exports, \"MyObject\", cons);\nif (status != napi_ok) return;\n</pre> <p>For more details on setting properties on either the <code>exports</code> or <code>module</code> objects, see the section on <a href=\"#n_api_working_with_javascript_properties\">Working with JavaScript Properties</a>.</p> <p>For more details on building addon modules in general, refer to the existing API</p> <h2 id=\"n_api_working_with_javascript_values\">Working with JavaScript Values</h2> <p>N-API exposes a set of APIs to create all types of JavaScript values. Some of these types are documented under <a href=\"https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\">Section 6</a> of the <a href=\"https://tc39.github.io/ecma262/\">ECMAScript Language Specification</a>.</p> <p>Fundamentally, these APIs are used to do one of the following:</p> <ol> <li>Create a new JavaScript object</li> <li>Convert from a primitive C type to an N-API value</li> <li>Convert from N-API value to a primitive C type</li> <li>Get global instances including <code>undefined</code> and <code>null</code>\n</li> </ol> <p>N-API values are represented by the type <code>napi_value</code>. Any N-API call that requires a JavaScript value takes in a <code>napi_value</code>. In some cases, the API does check the type of the <code>napi_value</code> up-front. However, for better performance, it's better for the caller to make sure that the <code>napi_value</code> in question is of the JavaScript type expected by the API.</p> <h3 id=\"n_api_enum_types\">Enum types</h3> <h4 id=\"n_api_napi_valuetype\"><em>napi_valuetype</em></h4> <pre data-language=\"C\">typedef enum {\n  // ES6 types (corresponds to typeof)\n  napi_undefined,\n  napi_null,\n  napi_boolean,\n  napi_number,\n  napi_string,\n  napi_symbol,\n  napi_object,\n  napi_function,\n  napi_external,\n} napi_valuetype;\n</pre> <p>Describes the type of a <code>napi_value</code>. This generally corresponds to the types described in <a href=\"https://tc39.github.io/ecma262/#sec-ecmascript-language-types\">Section 6.1</a> of the ECMAScript Language Specification. In addition to types in that section, <code>napi_valuetype</code> can also represent Functions and Objects with external data.</p> <h4 id=\"n_api_napi_typedarray_type\"><em>napi_typedarray_type</em></h4> <pre data-language=\"C\">typedef enum {\n  napi_int8_array,\n  napi_uint8_array,\n  napi_uint8_clamped_array,\n  napi_int16_array,\n  napi_uint16_array,\n  napi_int32_array,\n  napi_uint32_array,\n  napi_float32_array,\n  napi_float64_array,\n} napi_typedarray_type;\n</pre> <p>This represents the underlying binary scalar datatype of the TypedArray. Elements of this enum correspond to <a href=\"https://tc39.github.io/ecma262/#sec-typedarray-objects\">Section 22.2</a> of the <a href=\"https://tc39.github.io/ecma262/\">ECMAScript Language Specification</a>.</p> <h3 id=\"n_api_object_creation_functions\">Object Creation Functions</h3> <h4 id=\"n_api_napi_create_array\"><em>napi_create_array</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_create_array(napi_env env, napi_value* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the N-API call is invoked under.</li> <li>\n<code>[out] result</code>: A <code>napi_value</code> representing a JavaScript Array.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API returns an N-API value corresponding to a JavaScript Array type. JavaScript arrays are described in <a href=\"https://tc39.github.io/ecma262/#sec-array-objects\">Section 22.1</a> of the ECMAScript Language Specification.</p> <h4 id=\"n_api_napi_create_array_with_length\"><em>napi_create_array_with_length</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_create_array_with_length(napi_env env,\n                                          size_t length,\n                                          napi_value* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] length</code>: The initial length of the Array.</li> <li>\n<code>[out] result</code>: A <code>napi_value</code> representing a JavaScript Array.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API returns an N-API value corresponding to a JavaScript Array type. The Array's length property is set to the passed-in length parameter. However, the underlying buffer is not guaranteed to be pre-allocated by the VM when the array is created - that behavior is left to the underlying VM implementation. if the buffer must be a contiguous block of memory that can be directly read and/or written via C, consider using [<code>napi_create_external_arraybuffer</code>][].</p> <p>JavaScript arrays are described in <a href=\"https://tc39.github.io/ecma262/#sec-array-objects\">Section 22.1</a> of the ECMAScript Language Specification.</p> <h4 id=\"n_api_napi_create_arraybuffer\"><em>napi_create_arraybuffer</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_create_arraybuffer(napi_env env,\n                                    size_t byte_length,\n                                    void** data,\n                                    napi_value* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] length</code>: The length in bytes of the array buffer to create.</li> <li>\n<code>[out] data</code>: Pointer to the underlying byte buffer of the ArrayBuffer.</li> <li>\n<code>[out] result</code>: A <code>napi_value</code> representing a JavaScript ArrayBuffer.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API returns an N-API value corresponding to a JavaScript ArrayBuffer. ArrayBuffers are used to represent fixed-length binary data buffers. They are normally used as a backing-buffer for TypedArray objects. The ArrayBuffer allocated will have an underlying byte buffer whose size is determined by the <code>length</code> parameter that's passed in. The underlying buffer is optionally returned back to the caller in case the caller wants to directly manipulate the buffer. This buffer can only be written to directly from native code. To write to this buffer from JavaScript, a typed array or DataView object would need to be created.</p> <p>JavaScript ArrayBuffer objects are described in <a href=\"https://tc39.github.io/ecma262/#sec-arraybuffer-objects\">Section 24.1</a> of the ECMAScript Language Specification.</p> <h4 id=\"n_api_napi_create_buffer\"><em>napi_create_buffer</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_create_buffer(napi_env env,\n                               size_t size,\n                               void** data,\n                               napi_value* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] size</code>: Size in bytes of the underlying buffer.</li> <li>\n<code>[out] data</code>: Raw pointer to the underlying buffer.</li> <li>\n<code>[out] result</code>: A <code>napi_value</code> representing a <code>node::Buffer</code>.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API allocates a <code>node::Buffer</code> object. While this is still a fully-supported data structure, in most cases using a TypedArray will suffice.</p> <h4 id=\"n_api_napi_create_buffer_copy\"><em>napi_create_buffer_copy</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_create_buffer_copy(napi_env env,\n                                    size_t length,\n                                    const void* data,\n                                    void** result_data,\n                                    napi_value* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] size</code>: Size in bytes of the input buffer (should be the same as the size of the new buffer).</li> <li>\n<code>[in] data</code>: Raw pointer to the underlying buffer to copy from.</li> <li>\n<code>[out] result_data</code>: Pointer to the new Buffer's underlying data buffer.</li> <li>\n<code>[out] result</code>: A <code>napi_value</code> representing a <code>node::Buffer</code>.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API allocates a <code>node::Buffer</code> object and initializes it with data copied from the passed-in buffer. While this is still a fully-supported data structure, in most cases using a TypedArray will suffice.</p> <h4 id=\"n_api_napi_create_external\"><em>napi_create_external</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_create_external(napi_env env,\n                                 void* data,\n                                 napi_finalize finalize_cb,\n                                 void* finalize_hint,\n                                 napi_value* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] data</code>: Raw pointer to the external data being wrapped.</li> <li>\n<code>[in] finalize_cb</code>: Optional callback to call when the wrapped object is being collected.</li> <li>\n<code>[in] finalize_hint</code>: Optional hint to pass to the finalize callback during collection.</li> <li>\n<code>[out] result</code>: A <code>napi_value</code> representing an external object.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API allocates a JavaScript object with external data attached to it. This is used to wrap native objects and project them into JavaScript. The API allows the caller to pass in a finalize callback, in case the underlying native resource needs to be cleaned up when the wrapper JavaScript object gets collected.</p> <h4 id=\"n_api_napi_create_external_arraybuffer\">napi_create_external_arraybuffer</h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status\nnapi_create_external_arraybuffer(napi_env env,\n                                 void* external_data,\n                                 size_t byte_length,\n                                 napi_finalize finalize_cb,\n                                 void* finalize_hint,\n                                 napi_value* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] external_data</code>: Pointer to the underlying byte buffer of the ArrayBuffer.</li> <li>\n<code>[in] byte_length</code>: The length in bytes of the underlying buffer.</li> <li>\n<code>[in] finalize_cb</code>: Optional callback to call when the ArrayBuffer is being collected.</li> <li>\n<code>[in] finalize_hint</code>: Optional hint to pass to the finalize callback during collection.</li> <li>\n<code>[out] result</code>: A <code>napi_value</code> representing a JavaScript ArrayBuffer.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API returns an N-API value corresponding to a JavaScript ArrayBuffer. The underlying byte buffer of the ArrayBuffer is externally allocated and managed. The caller must ensure that the byte buffer remains valid until the finalize callback is called.</p> <p>JavaScript ArrayBuffers are described in <a href=\"https://tc39.github.io/ecma262/#sec-arraybuffer-objects\">Section 24.1</a> of the ECMAScript Language Specification.</p> <h4 id=\"n_api_napi_create_external_buffer\"><em>napi_create_external_buffer</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_create_external_buffer(napi_env env,\n                                        size_t length,\n                                        void* data,\n                                        napi_finalize finalize_cb,\n                                        void* finalize_hint,\n                                        napi_value* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] length</code>: Size in bytes of the input buffer (should be the same as the size of the new buffer).</li> <li>\n<code>[in] data</code>: Raw pointer to the underlying buffer to copy from.</li> <li>\n<code>[in] finalize_cb</code>: Optional callback to call when the ArrayBuffer is being collected.</li> <li>\n<code>[in] finalize_hint</code>: Optional hint to pass to the finalize callback during collection.</li> <li>\n<code>[out] result</code>: A <code>napi_value</code> representing a <code>node::Buffer</code>.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API allocates a <code>node::Buffer</code> object and initializes it with data backed by the passed in buffer. While this is still a fully-supported data structure, in most cases using a TypedArray will suffice.</p> <p><strong>Note:</strong> For Node.js &gt;=4 <code>Buffers</code> are Uint8Arrays.</p> <h4 id=\"n_api_napi_create_function\"><em>napi_create_function</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_create_function(napi_env env,\n                                 const char* utf8name,\n                                 napi_callback cb,\n                                 void* data,\n                                 napi_value* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] utf8name</code>: A string representing the name of the function encoded as UTF8.</li> <li>\n<code>[in] cb</code>: A function pointer to the native function to be invoked when the created function is invoked from JavaScript.</li> <li>\n<code>[in] data</code>: Optional arbitrary context data to be passed into the native function when it is invoked.</li> <li>\n<code>[out] result</code>: A <code>napi_value</code> representing a JavaScript function.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API returns an N-API value corresponding to a JavaScript Function object. It's used to wrap native functions so that they can be invoked from JavaScript.</p> <p>JavaScript Functions are described in <a href=\"https://tc39.github.io/ecma262/#sec-function-objects\">Section 19.2</a> of the ECMAScript Language Specification.</p> <h4 id=\"n_api_napi_create_object\"><em>napi_create_object</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_create_object(napi_env env, napi_value* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[out] result</code>: A <code>napi_value</code> representing a JavaScript Object.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API allocates a default JavaScript Object. It is the equivalent of doing <code>new Object()</code> in JavaScript.</p> <p>The JavaScript Object type is described in <a href=\"https://tc39.github.io/ecma262/#sec-object-type\">Section 6.1.7</a> of the ECMAScript Language Specification.</p> <h4 id=\"n_api_napi_create_symbol\"><em>napi_create_symbol</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_create_symbol(napi_env env,\n                               const char* description,\n                               napi_value* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] description</code>: Null-terminated character buffer representing a UTF8-encoded string to describe the symbol.</li> <li>\n<code>[out] result</code>: A <code>napi_value</code> representing a JavaScript Symbol.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API creates a JavaScript Symbol object from a UTF8-encoded C string</p> <p>The JavaScript Symbol type is described in <a href=\"https://tc39.github.io/ecma262/#sec-symbol-objects\">Section 19.4</a> of the ECMAScript Language Specification.</p> <h4 id=\"n_api_napi_create_typedarray\"><em>napi_create_typedarray</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_create_typedarray(napi_env env,\n                                   napi_typedarray_type type,\n                                   size_t length,\n                                   napi_value arraybuffer,\n                                   size_t byte_offset,\n                                   napi_value* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] type</code>: Scalar datatype of the elements within the TypedArray.</li> <li>\n<code>[in] length</code>: Number of elements in the TypedArray.</li> <li>\n<code>[in] arraybuffer</code>: ArrayBuffer underlying the typed array.</li> <li>\n<code>[in] byte_offset</code>: The byte offset within the ArrayBuffer from which to start projecting the TypedArray.</li> <li>\n<code>[out] result</code>: A <code>napi_value</code> representing a JavaScript TypedArray.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API creates a JavaScript TypedArray object over an existing ArrayBuffer. TypedArray objects provide an array-like view over an underlying data buffer where each element has the same underlying binary scalar datatype.</p> <p>It's required that (length * size_of_element) + byte_offset should be &lt;= the size in bytes of the array passed in. If not, a RangeError exception is raised.</p> <p>JavaScript TypedArray Objects are described in <a href=\"https://tc39.github.io/ecma262/#sec-typedarray-objects\">Section 22.2</a> of the ECMAScript Language Specification.</p> <h3 id=\"n_api_functions_to_convert_from_c_types_to_n_api\">Functions to convert from C types to N-API</h3> <h4 id=\"n_api_napi_create_number\"><em>napi_create_number</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_create_number(napi_env env, double value, napi_value* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] value</code>: Double-precision value to be represented in JavaScript.</li> <li>\n<code>[out] result</code>: A <code>napi_value</code> representing a JavaScript Number.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API is used to convert from the C double type to the JavaScript Number type.</p> <p>The JavaScript Number type is described in <a href=\"https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type\">Section 6.1.6</a> of the ECMAScript Language Specification.</p> <h4 id=\"n_api_napi_create_string_utf16\"><em>napi_create_string_utf16</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_create_string_utf16(napi_env env,\n                                     const char16_t* str,\n                                     size_t length,\n                                     napi_value* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] str</code>: Character buffer representing a UTF16-LE-encoded string.</li> <li>\n<code>[in] length</code>: The length of the string in characters, or -1 if it is null-terminated.</li> <li>\n<code>[out] result</code>: A <code>napi_value</code> representing a JavaScript String.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API creates a JavaScript String object from a UTF16-LE-encoded C string</p> <p>The JavaScript String type is described in <a href=\"https://tc39.github.io/ecma262/#sec-ecmascript-language-types-string-type\">Section 6.1.4</a> of the ECMAScript Language Specification.</p> <h4 id=\"n_api_napi_create_string_utf8\"><em>napi_create_string_utf8</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_create_string_utf8(napi_env env,\n                                    const char* str,\n                                    size_t length,\n                                    napi_value* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] s</code>: Character buffer representing a UTF8-encoded string.</li> <li>\n<code>[in] length</code>: The length of the string in characters, or -1 if it is null-terminated.</li> <li>\n<code>[out] result</code>: A <code>napi_value</code> representing a JavaScript String.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API creates a JavaScript String object from a UTF8-encoded C string</p> <p>The JavaScript String type is described in <a href=\"https://tc39.github.io/ecma262/#sec-ecmascript-language-types-string-type\">Section 6.1.4</a> of the ECMAScript Language Specification.</p> <h3 id=\"n_api_functions_to_convert_from_n_api_to_c_types\">Functions to convert from N-API to C types</h3> <h4 id=\"n_api_napi_get_array_length\"><em>napi_get_array_length</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_get_array_length(napi_env env,\n                                  napi_value value,\n                                  uint32_t* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] value</code>: <code>napi_value</code> representing the JavaScript Array whose length is being queried.</li> <li>\n<code>[out] result</code>: <code>uint32</code> representing length of the array.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API returns the length of an array.</p> <p>Array length is described in <a href=\"https://tc39.github.io/ecma262/#sec-properties-of-array-instances-length\">Section 22.1.4.1</a> of the ECMAScript Language Specification.</p> <h4 id=\"n_api_napi_get_arraybuffer_info\"><em>napi_get_arraybuffer_info</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_get_arraybuffer_info(napi_env env,\n                                      napi_value arraybuffer,\n                                      void** data,\n                                      size_t* byte_length)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] arraybuffer</code>: <code>napi_value</code> representing the ArrayBuffer being queried.</li> <li>\n<code>[out] data</code>: The underlying data buffer of the ArrayBuffer.</li> <li>\n<code>[out] byte_length</code>: Length in bytes of the underlying data buffer.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API is used to retrieve the underlying data buffer of an ArrayBuffer and its length. WARNING: Use caution while using this API. The lifetime of the underlying data buffer is managed by the ArrayBuffer even after it's returned. A possible safe way to use this API is in conjunction with <a href=\"#n_api_napi_create_reference\"><code>napi_create_reference</code></a>, which can be used to guarantee control over the lifetime of the ArrayBuffer. It's also safe to use the returned data buffer within the same callback as long as there are no calls to other APIs that might trigger a GC.</p> <h4 id=\"n_api_napi_get_buffer_info\"><em>napi_get_buffer_info</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_get_buffer_info(napi_env env,\n                                 napi_value value,\n                                 void** data,\n                                 size_t* length)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] value</code>: <code>napi_value</code> representing the <code>node::Buffer</code> being queried.</li> <li>\n<code>[out] data</code>: The underlying data buffer of the <code>node::Buffer</code>.</li> <li>\n<code>[out] length</code>: Length in bytes of the underlying data buffer.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API is used to retrieve the underlying data buffer of a <code>node::Buffer</code> and it's length. Warning: Use caution while using this API since the underlying data buffer's lifetime is not guaranteed if it's managed by the VM.</p> <h4 id=\"n_api_napi_get_prototype\"><em>napi_get_prototype</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_get_prototype(napi_env env,\n                               napi_value object,\n                               napi_value* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] object</code>: <code>napi_value</code> representing JavaScript Object whose prototype to return. This returns the equivalent of <code>Object.getPrototypeOf</code> (which is not the same as the function's <code>prototype</code> property).</li> <li>\n<code>[out] result</code>: <code>napi_value</code> representing prototype of the given object.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <h4 id=\"n_api_napi_get_typedarray_info\"><em>napi_get_typedarray_info</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_get_typedarray_info(napi_env env,\n                                     napi_value typedarray,\n                                     napi_typedarray_type* type,\n                                     size_t* length,\n                                     void** data,\n                                     napi_value* arraybuffer,\n                                     size_t* byte_offset)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] typedarray</code>: <code>napi_value</code> representing the TypedArray whose properties to query.</li> <li>\n<code>[out] type</code>: Scalar datatype of the elements within the TypedArray.</li> <li>\n<code>[out] length</code>: Number of elements in the TypedArray.</li> <li>\n<code>[out] data</code>: The data buffer underlying the typed array.</li> <li>\n<code>[out] byte_offset</code>: The byte offset within the data buffer from which to start projecting the TypedArray.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API returns various properties of a typed array. Warning: Use caution while using this API since the underlying data buffer is managed by the VM</p> <h4 id=\"n_api_napi_get_value_bool\"><em>napi_get_value_bool</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_get_value_bool(napi_env env, napi_value value, bool* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] value</code>: <code>napi_value</code> representing JavaScript Boolean.</li> <li>\n<code>[out] result</code>: C boolean primitive equivalent of the given JavaScript Boolean.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded. If a non-boolean <code>napi_value</code> is passed in it returns <code>napi_boolean_expected</code>.</p> <p>This API returns C boolean primitive equivalent of the given JavaScript Boolea</p> <h4 id=\"n_api_napi_get_value_double\"><em>napi_get_value_double</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_get_value_double(napi_env env,\n                                  napi_value value,\n                                  double* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] value</code>: <code>napi_value</code> representing JavaScript Number.</li> <li>\n<code>[out] result</code>: C double primitive equivalent of the given JavaScript Number.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded. If a non-number <code>napi_value</code> is passed in it returns <code>napi_number_expected</code>.</p> <p>This API returns the C double primitive equivalent of the given JavaScript Number.</p> <h4 id=\"n_api_napi_get_value_external\"><em>napi_get_value_external</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_get_value_external(napi_env env,\n                                    napi_value value,\n                                    void** result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] value</code>: <code>napi_value</code> representing JavaScript External value.</li> <li>\n<code>[out] result</code>: Pointer to the data wrapped by the JavaScript External value.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded. If a non-external <code>napi_value</code> is passed in it returns <code>napi_invalid_arg</code>.</p> <p>This API returns the pointer to the data wrapped by the JavaScript External value</p> <h4 id=\"n_api_napi_get_value_int32\"><em>napi_get_value_int32</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_get_value_int32(napi_env env,\n                                 napi_value value,\n                                 int32_t* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] value</code>: <code>napi_value</code> representing JavaScript Number.</li> <li>\n<code>[out] result</code>: C int32 primitive equivalent of the given JavaScript Number.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded. If a non-number <code>napi_value</code> is passed in `napi_number_expected .</p> <p>This API returns the C int32 primitive equivalent of the given JavaScript Number. If the number exceeds the range of the 32 bit integer, then the result is truncated to the equivalent of the bottom 32 bits. This can result in a large positive number becoming a negative number if the the value is &gt; 2^31 -1.</p> <h4 id=\"n_api_napi_get_value_int64\"><em>napi_get_value_int64</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_get_value_int64(napi_env env,\n                                 napi_value value,\n                                 int64_t* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] value</code>: <code>napi_value</code> representing JavaScript Number.</li> <li>\n<code>[out] result</code>: C int64 primitive equivalent of the given JavaScript Number.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded. If a non-number <code>napi_value</code> is passed in it returns <code>napi_number_expected</code>.</p> <p>This API returns the C int64 primitive equivalent of the given JavaScript Number</p> <h4 id=\"n_api_napi_get_value_string_length\"><em>napi_get_value_string_length</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_get_value_string_length(napi_env env,\n                                         napi_value value,\n                                         int* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] value</code>: <code>napi_value</code> representing JavaScript string.</li> <li>\n<code>[out] result</code>: Number of characters in the given JavaScript string.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded. If a non-String <code>napi_value</code> is passed in it returns <code>napi_string_expected</code>.</p> <p>This API returns the number of characters in the given JavaScript string.</p> <h4 id=\"n_api_napi_get_value_string_utf8\"><em>napi_get_value_string_utf8</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_get_value_string_utf8(napi_env env,\n                                       napi_value value,\n                                       char* buf,\n                                       size_t bufsize,\n                                       size_t* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] value</code>: <code>napi_value</code> representing JavaScript string.</li> <li>\n<code>[in] buf</code>: Buffer to write the UTF8-encoded string into. If NULL is passed in, the length of the string (in bytes) is returned.</li> <li>\n<code>[in] bufsize</code>: Size of the destination buffer.</li> <li>\n<code>[out] result</code>: Number of bytes copied into the buffer including the null. terminator. If the buffer size is insufficient, the string will be truncated including a null terminator.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded. Ifa non-String <code>napi_value</code> x is passed in it returns <code>napi_string_expected</code>.</p> <p>This API returns the UTF8-encoded string corresponding the value passed in.</p> <h4 id=\"n_api_napi_get_value_string_utf16_length\"><em>napi_get_value_string_utf16_length</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_get_value_string_utf16(napi_env env,\n                                        napi_value value,\n                                        char16_t* buf,\n                                        size_t bufsize,\n                                        size_t* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] value</code>: <code>napi_value</code> representing JavaScript string.</li> <li>\n<code>[in] buf</code>: Buffer to write the UTF16-LE-encoded string into. If NULL is passed in, the length of the string (in 2-byte code units) is returned.</li> <li>\n<code>[in] bufsize</code>: Size of the destination buffer.</li> <li>\n<code>[out] result</code>: Number of 2-byte code units copied into the buffer including the null terminateor. If the buffer size is insufficient, the string will be truncated including a null terminator.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded. If a non-String <code>napi_value</code> is passed in it returns <code>napi_string_expected</code>.</p> <p>This API returns the UTF16-encoded string corresponding the value passed in.</p> <h4 id=\"n_api_napi_get_value_uint32\"><em>napi_get_value_uint32</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_get_value_uint32(napi_env env,\n                                  napi_value value,\n                                  uint32_t* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] value</code>: <code>napi_value</code> representing JavaScript Number.</li> <li>\n<code>[out] result</code>: C primitive equivalent of the given <code>napi_value</code> as a <code>uint32_t</code>.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded. If a non-number <code>napi_value</code> is passed in it returns <code>napi_number_expected</code>.</p> <p>This API returns the C primitive equivalent of the given <code>napi_value</code> as a <code>uint32_t</code>.</p> <h3 id=\"n_api_functions_to_get_global_instances\">Functions to get global instances</h3> <h4 id=\"n_api_napi_get_boolean\"><em>napi_get_boolean</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_get_boolean(napi_env env, bool value, napi_value* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] value</code>: The value of the boolean to retrieve.</li> <li>\n<code>[out] result</code>: <code>napi_value</code> representing JavaScript Boolean singleton to retrieve.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API is used to return the JavaScript singleton object that is used to represent the given boolean value</p> <h4 id=\"n_api_napi_get_global\"><em>napi_get_global</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_get_global(napi_env env, napi_value* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[out] result</code>: <code>napi_value</code> representing JavaScript Global Object.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API returns the global Object.</p> <h4 id=\"n_api_napi_get_null\"><em>napi_get_null</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_get_null(napi_env env, napi_value* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[out] result</code>: <code>napi_value</code> representing JavaScript Null Object.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API returns the null Object.</p> <h4 id=\"n_api_napi_get_undefined\"><em>napi_get_undefined</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_get_undefined(napi_env env, napi_value* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[out] result</code>: <code>napi_value</code> representing JavaScript Undefined value.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API returns the Undefined object.</p> <h2 id=\"n_api_working_with_javascript_values_abstract_operations\">Working with JavaScript Values - Abstract Operations</h2> <p>N-API exposes a set of APIs to perform some abstract operations on JavaScript values. Some of these operations are documented under <a href=\"https://tc39.github.io/ecma262/#sec-abstract-operations\">Section 7</a> of the <a href=\"https://tc39.github.io/ecma262/\">ECMAScript Language Specification</a>.</p> <p>These APIs support doing one of the following:</p> <ol> <li>Coerce JavaScript values to specific JavaScript types (such as Number or String)</li> <li>Check the type of a JavaScript value</li> <li>Check for equality between two JavaScript values</li> </ol> <h3 id=\"n_api_napi_coerce_to_bool\"><em>napi_coerce_to_bool</em></h3> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_coerce_to_bool(napi_env env,\n                                napi_value value,\n                                napi_value* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] value</code>: The JavaScript value to coerce.</li> <li>\n<code>[out] result</code>: <code>napi_value</code> representing the coerced JavaScript Boolean.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API implements the abstract operation ToBoolean as defined in <a href=\"https://tc39.github.io/ecma262/#sec-toboolean\">Section 7.1.2</a> of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in Object.</p> <h3 id=\"n_api_napi_coerce_to_number\"><em>napi_coerce_to_number</em></h3> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_coerce_to_number(napi_env env,\n                                  napi_value value,\n                                  napi_value* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] value</code>: The JavaScript value to coerce.</li> <li>\n<code>[out] result</code>: <code>napi_value</code> representing the coerced JavaScript Number.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API implements the abstract operation ToNumber as defined in <a href=\"https://tc39.github.io/ecma262/#sec-tonumber\">Section 7.1.3</a> of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in Object.</p> <h3 id=\"n_api_napi_coerce_to_object\"><em>napi_coerce_to_object</em></h3> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_coerce_to_object(napi_env env,\n                                  napi_value value,\n                                  napi_value* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] value</code>: The JavaScript value to coerce.</li> <li>\n<code>[out] result</code>: <code>napi_value</code> representing the coerced JavaScript Object.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API implements the abstract operation ToObject as defined in <a href=\"https://tc39.github.io/ecma262/#sec-toobject\">Section 7.1.13</a> of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in Object.</p> <h3 id=\"n_api_napi_coerce_to_string\"><em>napi_coerce_to_string</em></h3> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_coerce_to_string(napi_env env,\n                                  napi_value value,\n                                  napi_value* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] value</code>: The JavaScript value to coerce.</li> <li>\n<code>[out] result</code>: <code>napi_value</code> representing the coerced JavaScript String.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API implements the abstract operation ToString as defined in <a href=\"https://tc39.github.io/ecma262/#sec-tostring\">Section 7.1.13</a> of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in Object.</p> <h3 id=\"n_api_napi_typeof\"><em>napi_typeof</em></h3> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_typeof(napi_env env, napi_value value, napi_valuetype* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] value</code>: The JavaScript value whose type to query.</li> <li>\n<code>[out] result</code>: The type of the JavaScript value.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <ul> <li>\n<code>napi_invalid_arg</code> if the type of <code>value</code> is not a known ECMAScript type and <code>value</code> is not an External value.</li> </ul> <p>This API represents behavior similar to invoking the <code>typeof</code> Operator on the object as defined in <a href=\"https://tc39.github.io/ecma262/#sec-typeof-operator\">Section 12.5.5</a> of the ECMAScript Language Specification. However, it has support for detecting an External value. If <code>value</code> has a type that is invalid, an error is returned.</p> <h3 id=\"n_api_napi_instanceof\"><em>napi_instanceof</em></h3> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_instanceof(napi_env env,\n                            napi_value object,\n                            napi_value constructor,\n                            bool* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] object</code>: The JavaScript value to check.</li> <li>\n<code>[in] constructor</code>: The JavaScript function object of the constructor function to check against.</li> <li>\n<code>[out] result</code>: Boolean that is set to true if <code>object instanceof constructor</code> is true.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API represents invoking the <code>instanceof</code> Operator on the object as defined in <a href=\"https://tc39.github.io/ecma262/#sec-instanceofoperator\">Section 12.10.4</a> of the ECMAScript Language Specification.</p> <h3 id=\"n_api_napi_is_array\"><em>napi_is_array</em></h3> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_is_array(napi_env env, napi_value value, bool* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] value</code>: The JavaScript value to check.</li> <li>\n<code>[out] result</code>: Whether the given object is an array.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API represents invoking the <code>IsArray</code> operation on the object as defined in <a href=\"https://tc39.github.io/ecma262/#sec-isarray\">Section 7.2.2</a> of the ECMAScript Language Specification.</p> <h3 id=\"n_api_napi_is_arraybuffer\"><em>napi_is_arraybuffer</em></h3> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_is_arraybuffer(napi_env env, napi_value value, bool* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] value</code>: The JavaScript value to check.</li> <li>\n<code>[out] result</code>: Whether the given object is an ArrayBuffer.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API checks if the Object passsed in is an array buffer.</p> <h3 id=\"n_api_napi_is_buffer\"><em>napi_is_buffer</em></h3> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_is_buffer(napi_env env, napi_value value, bool* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] value</code>: The JavaScript value to check.</li> <li>\n<code>[out] result</code>: Whether the given <code>napi_value</code> represents a <code>node::Buffer</code> object.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API checks if the Object passsed in is a buffer.</p> <h3 id=\"n_api_napi_is_error_1\"><em>napi_is_error</em></h3> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_is_error(napi_env env, napi_value value, bool* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] value</code>: The JavaScript value to check.</li> <li>\n<code>[out] result</code>: Whether the given <code>napi_value</code> represents an Error object.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API checks if the Object passsed in is an Error.</p> <h3 id=\"n_api_napi_is_typedarray\"><em>napi_is_typedarray</em></h3> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_is_typedarray(napi_env env, napi_value value, bool* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] value</code>: The JavaScript value to check.</li> <li>\n<code>[out] result</code>: Whether the given <code>napi_value</code> represents a TypedArray.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API checks if the Object passsed in is a typed array.</p> <h3 id=\"n_api_napi_strict_equals\"><em>napi_strict_equals</em></h3> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_strict_equals(napi_env env,\n                               napi_value lhs,\n                               napi_value rhs,\n                               bool* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] lhs</code>: The JavaScript value to check.</li> <li>\n<code>[in] rhs</code>: The JavaScript value to check against.</li> <li>\n<code>[out] result</code>: Whether the two <code>napi_value</code> objects are equal.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API represents the invocation of the Strict Equality algorithm as defined in <a href=\"https://tc39.github.io/ecma262/#sec-strict-equality-comparison\">Section 7.2.14</a> of the ECMAScript Language Specification.</p> <h2 id=\"n_api_working_with_javascript_properties\">Working with JavaScript Properties</h2> <p>N-API exposes a set of APIs to get and set properties on JavaScript objects. Some of these types are documented under <a href=\"https://tc39.github.io/ecma262/#sec-operations-on-objects\">Section 7</a> of the <a href=\"https://tc39.github.io/ecma262/\">ECMAScript Language Specification</a>.</p> <p>Properties in JavaScript are represented as a tuple of a key and a value. Fundamentally, all property keys in N-API can be represented in one of the following forms:</p> <ul> <li>Named: a simple UTF8-encoded string</li> <li>Integer-Indexed: an index value represented by <code>uint32_t</code>\n</li> <li>JavaScript value: these are represented in N-API by <code>napi_value</code>. This can be a <code>napi_value</code> representing a String, Number or Symbol.</li> </ul> <p>N-API values are represented by the type <code>napi_value</code>. Any N-API call that requires a JavaScript value takes in a <code>napi_value</code>. However, it's the caller's responsibility to make sure that the <code>napi_value</code> in question is of the JavaScript type expected by the API.</p> <p>The APIs documented in this section provide a simple interface to get and set properties on arbitrary JavaScript objects represented by <code>napi_value</code>.</p> <p>For instance, consider the following JavaScript code snippet:</p> <pre data-language=\"js\">const obj = {};\nobj.myProp = 123;\n</pre> <p>The equivalent can be done using N-API values with the following snippet:</p> <pre data-language=\"C\">napi_status status = napi_generic_failure;\n\n// const obj = {}\nnapi_value obj, value;\nstatus = napi_create_object(env, &amp;obj);\nif (status != napi_ok) return status;\n\n// Create a napi_value for 123\nstatus = napi_create_number(env, 123, &amp;value);\nif (status != napi_ok) return status;\n\n// obj.myProp = 123\nstatus = napi_set_named_property(env, obj, \"myProp\", value);\nif (status != napi_ok) return status;\n</pre> <p>Indexed properties can be set in a similar manner. Consider the following JavaScript snippet:</p> <pre data-language=\"js\">const arr = [];\narr[123] = 'hello';\n</pre> <p>The equivalent can be done using N-API values with the following snippet:</p> <pre data-language=\"C\">napi_status status = napi_generic_failure;\n\n// const arr = [];\nnapi_value arr, value;\nstatus = napi_create_array(env, &amp;arr);\nif (status != napi_ok) return status;\n\n// Create a napi_value for 'hello'\nstatus = napi_create_string_utf8(env, \"hello\", -1, &amp;value);\nif (status != napi_ok) return status;\n\n// arr[123] = 'hello';\nstatus = napi_set_element(env, arr, 123, value);\nif (status != napi_ok) return status;\n</pre> <p>Properties can be retrieved using the APIs described in this section. Consider the following JavaScript snippet:</p> <pre data-language=\"js\">const arr = [];\nconst value = arr[123];\n</pre> <p>The following is the approximate equivalent of the N-API counterpart:</p> <pre data-language=\"C\">napi_status status = napi_generic_failure;\n\n// const arr = []\nnapi_value arr, value;\nstatus = napi_create_array(env, &amp;arr);\nif (status != napi_ok) return status;\n\n// const value = arr[123]\nstatus = napi_get_element(env, arr, 123, &amp;value);\nif (status != napi_ok) return status;\n</pre> <p>Finally, multiple properties can also be defined on an object for performance reasons. Consider the following JavaScript:</p> <pre data-language=\"js\">const obj = {};\nObject.defineProperties(obj, {\n  'foo': { value: 123, writable: true, configurable: true, enumerable: true },\n  'bar': { value: 456, writable: true, configurable: true, enumerable: true }\n});\n</pre> <p>The following is the approximate equivalent of the N-API counterpart:</p> <pre data-language=\"C\">napi_status status = napi_status_generic_failure;\n\n// const obj = {};\nnapi_value obj;\nstatus = napi_create_obj(env, &amp;obj);\nif (status != napi_ok) return status;\n\n// Create napi_values for 123 and 456\nnapi_value fooValue, barValue;\nstatus = napi_create_number(env, 123, &amp;fooValue);\nif (status != napi_ok) return status;\nstatus = napi_create_number(env, 456, &amp;barValue);\nif (status != napi_ok) return status;\n\n// Set the properties\nnapi_property_descriptors descriptors[] = {\n  { \"foo\", fooValue, 0, 0, 0, napi_default, 0 },\n  { \"bar\", barValue, 0, 0, 0, napi_default, 0 }\n}\nstatus = napi_define_properties(env,\n                                obj,\n                                sizeof(descriptors) / sizeof(descriptors[0]),\n                                descriptors);\nif (status != napi_ok) return status;\n</pre> <h3 id=\"n_api_structures\">Structures</h3> <h4 id=\"n_api_napi_property_attributes\"><em>napi_property_attributes</em></h4> <pre data-language=\"C\">typedef enum {\n  napi_default = 0,\n  napi_read_only = 1 &lt;&lt; 0,\n  napi_dont_enum = 1 &lt;&lt; 1,\n  napi_dont_delete = 1 &lt;&lt; 2,\n  napi_static_property = 1 &lt;&lt; 10,\n} napi_property_attributes;\n</pre> <p><code>napi_property_attributes</code> are flags used to control the behavior of properties set on a JavaScript object. They roughly correspond to the attributes listed in <a href=\"https://tc39.github.io/ecma262/#table-2\">Section 6.1.7.1</a> of the <a href=\"https://tc39.github.io/ecma262/\">ECMAScript Language Specification</a>. They can be one or more of the following bitflags:</p> <ul> <li>\n<code>napi_default</code> - Used to indicate that no explicit attributes are set on the given property. By default, a property is Writable, Enumerable, and Configurable. This is a deviation from the ECMAScript specification, where generally the values for a property descriptor attribute default to false if they're not provided.</li> <li>\n<code>napi_read_only</code> - Used to indicate that a given property is not Writable.</li> <li>\n<code>napi_dont_enum</code> - Used to indicate that a given property is not Enumerable.</li> <li>\n<code>napi_dont_delete</code> - Used to indicate that a given property is not. Configurable, as defined in <a href=\"https://tc39.github.io/ecma262/#table-2\">Section 6.1.7.1</a> of the <a href=\"https://tc39.github.io/ecma262/\">ECMAScript Language Specification</a>.</li> <li>\n<code>napi_static_property</code> - Used to indicate that the property will be defined as a static property on a class as opposed to an instance property, which is the default. This is used only by <a href=\"#n_api_napi_define_class\"><code>napi_define_class</code></a>. It is ignored by <code>napi_define_properties</code>.</li> </ul> <h4 id=\"n_api_napi_property_descriptor\"><em>napi_property_descriptor</em></h4> <pre data-language=\"C\">typedef struct {\n  const char* utf8name;\n\n  napi_callback method;\n  napi_callback getter;\n  napi_callback setter;\n  napi_value value;\n\n  napi_property_attributes attributes;\n  void* data;\n} napi_property_descriptor;\n</pre> <ul> <li>\n<code>utf8name</code>: String describing the key for the property, encoded as UTF8.</li> <li>\n<code>value</code>: The value that's retrieved by a get access of the property if the property is a data property. If this is passed in, set <code>getter</code>, <code>setter</code>, <code>method</code> and <code>data</code> to <code>NULL</code> (since these members won't be used).</li> <li>\n<code>getter</code>: A function to call when a get access of the property is performed. If this is passed in, set <code>value</code> and <code>method</code> to <code>NULL</code> (since these members won't be used). The given function is called implicitly by the runtime when the property is accessed from JavaScript code (or if a get on the property is performed using a N-API call).</li> <li>\n<code>setter</code>: A function to call when a set access of the property is performed. If this is passed in, set <code>value</code> and <code>method</code> to <code>NULL</code> (since these members won't be used). The given function is called implicitly by the runtime when the property is set from JavaScript code (or if a set on the property is performed using a N-API call).</li> <li>\n<code>method</code>: Set this to make the property descriptor object's <code>value</code> property to be a JavaScript function represented by <code>method</code>. If this is passed in, set <code>value</code>, <code>getter</code> and <code>setter</code> to <code>NULL</code> (since these members won't be used).</li> <li>\n<code>data</code>: The callback data passed into <code>method</code>, <code>getter</code> and <code>setter</code> if this function is invoked.</li> <li>\n<code>attributes</code>: The attributes associated with the particular property. See <a href=\"#napi_property_attributes\"><code>napi_property_attributes</code></a>.</li> </ul> <h3 id=\"n_api_functions\">Functions</h3> <h4 id=\"n_api_napi_get_property_names\"><em>napi_get_property_names</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_get_property_names(napi_env env,\n                                    napi_value object,\n                                    napi_value* result);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the N-API call is invoked under.</li> <li>\n<code>[in] object</code>: The object from which to retrieve the properties.</li> <li>\n<code>[out] result</code>: A <code>napi_value</code> representing an array of JavaScript values that represent the property names of the object. The API can be used to iterate over <code>result</code> using <a href=\"#n_api_napi_get_array_length\"><code>napi_get_array_length</code></a> and <a href=\"#n_api_napi_get_element\"><code>napi_get_element</code></a>.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API returns the array of propertys for the Object passed in</p> <h4 id=\"n_api_napi_set_property\"><em>napi_set_property</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_set_property(napi_env env,\n                              napi_value object,\n                              napi_value key,\n                              napi_value value);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the N-API call is invoked under.</li> <li>\n<code>[in] object</code>: The object on which to set the property.</li> <li>\n<code>[in] key</code>: The name of the property to set.</li> <li>\n<code>[in] value</code>: The property value.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API set a property on the Object passed in.</p> <h4 id=\"n_api_napi_get_property\"><em>napi_get_property</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_get_property(napi_env env,\n                              napi_value object,\n                              napi_value key,\n                              napi_value* result);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the N-API call is invoked under.</li> <li>\n<code>[in] object</code>: The object from which to retrieve the property.</li> <li>\n<code>[in] key</code>: The name of the property to retrieve.</li> <li>\n<code>[out] result</code>: The value of the property.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API gets the requested property from the Object passed in.</p> <h4 id=\"n_api_napi_has_property\"><em>napi_has_property</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_has_property(napi_env env,\n                              napi_value object,\n                              napi_value key,\n                              bool* result);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the N-API call is invoked under.</li> <li>\n<code>[in] object</code>: The object to query.</li> <li>\n<code>[in] key</code>: The name of the property whose existence to check.</li> <li>\n<code>[out] result</code>: Whether the property exists on the object or not.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API checks if the Object passed in has the named property.</p> <h4 id=\"n_api_napi_set_named_property\"><em>napi_set_named_property</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_set_named_property(napi_env env,\n                                    napi_value object,\n                                    const char* utf8Name,\n                                    napi_value value);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the N-API call is invoked under.</li> <li>\n<code>[in] object</code>: The object on which to set the property.</li> <li>\n<code>[in] utf8Name</code>: The name of the property to set.</li> <li>\n<code>[in] value</code>: The property value.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This method is equivalent to calling <a href=\"#n_api_napi_set_property\"><code>napi_set_property</code></a> with a <code>napi_value</code> created from the string passed in as <code>utf8Name</code></p> <h4 id=\"n_api_napi_get_named_property\"><em>napi_get_named_property</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_get_named_property(napi_env env,\n                                    napi_value object,\n                                    const char* utf8Name,\n                                    napi_value* result);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the N-API call is invoked under.</li> <li>\n<code>[in] object</code>: The object from which to retrieve the property.</li> <li>\n<code>[in] utf8Name</code>: The name of the property to get.</li> <li>\n<code>[out] result</code>: The value of the property.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This method is equivalent to calling <a href=\"#n_api_napi_get_property\"><code>napi_get_property</code></a> with a <code>napi_value</code> created from the string passed in as <code>utf8Name</code></p> <h4 id=\"n_api_napi_has_named_property\"><em>napi_has_named_property</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_has_named_property(napi_env env,\n                                    napi_value object,\n                                    const char* utf8Name,\n                                    bool* result);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the N-API call is invoked under.</li> <li>\n<code>[in] object</code>: The object to query.</li> <li>\n<code>[in] utf8Name</code>: The name of the property whose existence to check.</li> <li>\n<code>[out] result</code>: Whether the property exists on the object or not.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This method is equivalent to calling <a href=\"#n_api_napi_has_property\"><code>napi_has_property</code></a> with a <code>napi_value</code> created from the string passed in as <code>utf8Name</code></p> <h4 id=\"n_api_napi_set_element\"><em>napi_set_element</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_set_element(napi_env env,\n                             napi_value object,\n                             uint32_t index,\n                             napi_value value);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the N-API call is invoked under.</li> <li>\n<code>[in] object</code>: The object from which to set the properties.</li> <li>\n<code>[in] index</code>: The index of the property to set.</li> <li>\n<code>[in] value</code>: The property value.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API sets and element on the Object passed in.</p> <h4 id=\"n_api_napi_get_element\"><em>napi_get_element</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_get_element(napi_env env,\n                             napi_value object,\n                             uint32_t index,\n                             napi_value* result);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the N-API call is invoked under.</li> <li>\n<code>[in] object</code>: The object from which to retrieve the property.</li> <li>\n<code>[in] index</code>: The index of the property to get.</li> <li>\n<code>[out] result</code>: The value of the property.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API gets the element at the requested index.</p> <h4 id=\"n_api_napi_has_element\"><em>napi_has_element</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_has_element(napi_env env,\n                             napi_value object,\n                             uint32_t index,\n                             bool* result);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the N-API call is invoked under.</li> <li>\n<code>[in] object</code>: The object to query.</li> <li>\n<code>[in] index</code>: The index of the property whose existence to check.</li> <li>\n<code>[out] result</code>: Whether the property exists on the object or not.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API returns if the Object passed in has an element at the requested index.</p> <h4 id=\"n_api_napi_define_properties\"><em>napi_define_properties</em></h4> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_define_properties(napi_env env,\n                                   napi_value object,\n                                   size_t property_count,\n                                   const napi_property_descriptor* properties);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the N-API call is invoked under.</li> <li>\n<code>[in] object</code>: The object from which to retrieve the properties.</li> <li>\n<code>[in] property_count</code>: The number of elements in the <code>properties</code> array.</li> <li>\n<code>[in] properties</code>: The array of property descriptors.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This method allows the efficient definition of multiple properties on a given object. The properties are defined using property descriptors (See <a href=\"#n_api_napi_property_descriptor\"><code>napi_property_descriptor</code></a>). Given an array of such property descriptors, this API will set the properties on the object one at a time, as defined by DefineOwnProperty (described in <a href=\"https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-defineownproperty-p-desc\">Section 9.1.6</a> of the ECMA262 specification).</p> <h2 id=\"n_api_working_with_javascript_functions\">Working with JavaScript Functions</h2> <p>N-API provides a set of APIs that allow JavaScript code to call back into native code. N-API APIs that support calling back into native code take in a callback functions represented by the <code>napi_callback</code> type. When the JavaScript VM calls back to native code, the <code>napi_callback</code> function provided is invoked. The APIs documented in this section allow the callback function to do the following:</p> <ul> <li>Get information about the context in which the callback was invoked.</li> <li>Get the arguments passed into the callback.</li> <li>Return a <code>napi_value</code> back from the callback.</li> </ul> <p>Additionally, N-API provides a set of functions which allow calling JavaScript functions from native code. One can either call a function like a regular JavaScript function call, or as a constructor function.</p> <h3 id=\"n_api_napi_call_function\"><em>napi_call_function</em></h3> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_call_function(napi_env env,\n                               napi_value recv,\n                               napi_value func,\n                               int argc,\n                               const napi_value* argv,\n                               napi_value* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] recv</code>: The <code>this</code> object passed to the called function.</li> <li>\n<code>[in] func</code>: <code>napi_value</code> representing the JavaScript function to be invoked.</li> <li>\n<code>[in] argc</code>: The count of elements in the <code>argv</code> array.</li> <li>\n<code>[in] argv</code>: Array of <code>napi_values</code> representing JavaScript values passed in as arguments to the function.</li> <li>\n<code>[out] result</code>: <code>napi_value</code> representing the JavaScript object returned.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This method allows a JavaScript function object to be called from a native add-on. This is an primary mechanism of calling back <em>from</em> the add-on's native code <em>into</em> JavaScript. For special cases like calling into JavaScript after an async operation, see <a href=\"#n_api_napi_make_callback\"><code>napi_make_callback</code></a>.</p> <p>A sample use case might look as follows. Consider the following JavaScript snippet:</p> <pre data-language=\"js\">function AddTwo(num) {\n  return num + 2;\n}\n</pre> <p>Then, the above function can be invoked from a native add-on using the following code:</p> <pre data-language=\"C\">// Get the function named \"AddTwo\" on the global object\nnapi_value global, add_two, arg;\nnapi_status status = napi_get_global(env, &amp;global);\nif (status != napi_ok) return;\n\nstatus = napi_get_named_property(env, global, \"AddTwo\", &amp;add_two);\nif (status != napi_ok) return;\n\n// const arg = 1337\nstatus = napi_create_number(env, 1337, &amp;arg);\nif (status != napi_ok) return;\n\nnapi_value* argv = &amp;arg;\nsize_t argc = 1;\n\n// AddTwo(arg);\nnapi_value return_val;\nstatus = napi_call_function(env, global, add_two, argc, argv, &amp;return_val);\nif (status != napi_ok) return;\n\n// Convert the result back to a native type\nint32_t result;\nstatus = napi_get_value_int32(env, return_val, &amp;result);\nif (status != napi_ok) return;\n</pre> <h3 id=\"n_api_napi_create_function_1\"><em>napi_create_function</em></h3> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_create_function(napi_env env,\n                                 const char* utf8name,\n                                 napi_callback cb,\n                                 void* data,\n                                 napi_value* result);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] utf8Name</code>: The name of the function encoded as UTF8. This is visible within JavaScript as the new function object's <code>name</code> property.</li> <li>\n<code>[in] cb</code>: The native function which should be called when this function object is invoked.</li> <li>\n<code>[in] data</code>: User-provided data context. This will be passed back into the function when invoked later.</li> <li>\n<code>[out] result</code>: <code>napi_value</code> representing the JavaScript function object for the newly created function.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API allows an add-on author to create a function object in native code. This is the primary mechanism to allow calling <em>into</em> the add-on's native code <em>from</em> Javascript.</p> <p><strong>Note:</strong> The newly created function is not automatically visible from script after this call. Instead, a property must be explicitly set on any object that is visible to JavaScript, in order for the function to be accessible from script.</p> <p>In order to expose a function as part of the add-on's module exports, set the newly created function on the exports object. A sample module might look as follows:</p> <pre data-language=\"C\">void SayHello(napi_env env, napi_callback_info info) {\n  printf(\"Hello\\n\");\n}\n\nvoid Init(napi_env env, napi_value exports, napi_value module, void* priv) {\n  napi_status status;\n\n  napi_value fn;\n  status =  napi_create_function(env, NULL, SayHello, NULL, &amp;fn);\n  if (status != napi_ok) return;\n\n  status = napi_set_named_property(env, exports, \"sayHello\", fn);\n  if (status != napi_ok) return;\n}\n\nNAPI_MODULE(addon, Init)\n</pre> <p>Given the above code, the add-on can be used from JavaScript as follows:</p> <pre data-language=\"js\">const myaddon = require('./addon');\nmyaddon.sayHello();\n</pre> <p><strong>Note:</strong> The string passed to require is not necessarily the name passed into <code>NAPI_MODULE</code> in the earlier snippet but the name of the target in <code>binding.gyp</code> responsible for creating the <code>.node</code> file.</p> <h3 id=\"n_api_napi_get_cb_info\"><em>napi_get_cb_info</em></h3> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_get_cb_info(napi_env env,\n                             napi_callback_info cbinfo,\n                             size_t* argc,\n                             napi_value* argv,\n                             napi_value* thisArg,\n                             void** data)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] cbinfo</code>: The callback info passed into the callback function.</li> <li>\n<code>[in-out] argc</code>: Specifies the size of the provided <code>argv</code> array and receives the actual count of arguments.</li> <li>\n<code>[out] argv</code>: Buffer to which the <code>napi_value</code> representing the arguments are copied. If there are more arguments than the provided count, only the requested number of arguments are copied. If there are fewer arguments provided than claimed, the rest of <code>argv</code> is filled with <code>napi_value</code> values that represent <code>undefined</code>.</li> <li>\n<code>[out] this</code>: Receives the JavaScript <code>this</code> argument for the call.</li> <li>\n<code>[out] data</code>: Receives the data pointer for the callback.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This method is used within a callback function to retrieve details about the call like the arguments and the <code>this</code> pointer from a given callback info.</p> <h3 id=\"n_api_napi_is_construct_call\"><em>napi_is_construct_call</em></h3> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_is_construct_call(napi_env env,\n                                   napi_callback_info cbinfo,\n                                   bool* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] cbinfo</code>: The callback info passed into the callback function.</li> <li>\n<code>[out] result</code>: Whether the native function is being invoked as a constructor call.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API checks if the the current callback was due to a consructor call.</p> <h3 id=\"n_api_napi_new_instance\"><em>napi_new_instance</em></h3> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_new_instance(napi_env env,\n                              napi_value cons,\n                              size_t argc,\n                              napi_value* argv,\n                              napi_value* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] cons</code>: <code>napi_value</code> representing the JavaScript function to be invoked as a constructor.</li> <li>\n<code>[in] argc</code>: The count of elements in the <code>argv</code> array.</li> <li>\n<code>[in] argv</code>: Array of JavaScript values as <code>napi_value</code> representing the arguments to the constructor.</li> <li>\n<code>[out] result</code>: <code>napi_value</code> representing the JavaScript object returned, which in this case is the constructed object.</li> </ul> <p>This method is used to instantiate a new JavaScript value using a given <code>napi_value</code> that represents the constructor for the object. For example, consider the following snippet:</p> <pre data-language=\"js\">function MyObject(param) {\n  this.param = param;\n}\n\nconst arg = 'hello';\nconst value = new MyObject(arg);\n</pre> <p>The following can be approximated in N-API using the following snippet:</p> <pre data-language=\"C\">// Get the constructor function MyObject\nnapi_value global, constructor, arg, value;\nnapi_status status = napi_get_global(env, &amp;global);\nif (status != napi_ok) return;\n\nstatus = napi_get_named_property(env, global, \"MyObject\", &amp;constructor);\nif (status != napi_ok) return;\n\n// const arg = \"hello\"\nstatus = napi_create_string_utf8(env, \"hello\", -1, &amp;arg);\nif (status != napi_ok) return;\n\nnapi_value* argv = &amp;arg;\nsize_t argc = 1;\n\n// const value = new MyObject(arg)\nstatus = napi_new_instance(env, constructor, argc, argv, &amp;value);\n</pre> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <h3 id=\"n_api_napi_make_callback\"><em>napi_make_callback</em></h3> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_make_callback(napi_env env,\n                               napi_value recv,\n                               napi_value func,\n                               int argc,\n                               const napi_value* argv,\n                               napi_value* result)\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] recv</code>: The <code>this</code> object passed to the called function.</li> <li>\n<code>[in] func</code>: <code>napi_value</code> representing the JavaScript function to be invoked.</li> <li>\n<code>[in] argc</code>: The count of elements in the <code>argv</code> array.</li> <li>\n<code>[in] argv</code>: Array of JavaScript values as <code>napi_value</code> representing the arguments to the function.</li> <li>\n<code>[out] result</code>: <code>napi_value</code> representing the JavaScript object returned.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This method allows a JavaScript function object to be called from a native add-on. This API is similar to <code>napi_call_function</code>. However, it is used to call <em>from</em> native code back <em>into</em> JavaScript <em>after</em> returning from an async operation (when there is no other script on the stack). It is a fairly simple wrapper around <code>node::MakeCallback</code>.</p> <p>For an example on how to use <code>napi_make_callback</code>, see the section on [Asynchronous Operations][].</p> <h2 id=\"n_api_object_wrap\">Object Wrap</h2> <p>N-API offers a way to \"wrap\" C++ classes and instances so that the class constructor and methods can be called from JavaScript.</p> <ol> <li>The <a href=\"#n_api_napi_define_class\"><code>napi_define_class</code></a> API defines a JavaScript class with constructor, static properties and methods, and instance properties and methods that correspond to the The C++ class.</li> <li>When JavaScript code invokes the constructor, the constructor callback uses <a href=\"#n_api_napi_wrap\"><code>napi_wrap</code></a> to wrap a new C++ instance in a JavaScript object, then returns the wrapper object.</li> <li>When JavaScript code invokes a method or property accessor on the class, the corresponding <code>napi_callback</code> C++ function is invoked. For an instance callback, <a href=\"#n_api_napi_unwrap\"><code>napi_unwrap</code></a> obtains the C++ instance that is the target of the call.</li> </ol> <h3 id=\"n_api_napi_define_class\"><em>napi_define_class</em></h3> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_define_class(napi_env env,\n                              const char* utf8name,\n                              napi_callback constructor,\n                              void* data,\n                              size_t property_count,\n                              const napi_property_descriptor* properties,\n                              napi_value* result);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] utf8name</code>: Name of the JavaScript constructor function; this is not required to be the same as the C++ class name, though it is recommended for clarity.</li> <li>\n<code>[in] constructor</code>: Callback function that handles constructing instances of the class. (This should be a static method on the class, not an actual C++ constructor function.)</li> <li>\n<code>[in] data</code>: Optional data to be passed to the constructor callback as the <code>data</code> property of the callback info.</li> <li>\n<code>[in] property_count</code>: Number of items in the <code>properties</code> array argument.</li> <li>\n<code>[in] properties</code>: Array of property descriptors describing static and instance data properties, accessors, and methods on the class See <code>napi_property_descriptor</code>.</li> <li>\n<code>[out] result</code>: A <code>napi_value</code> representing the constructor function for the class.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>Defines a JavaScript class that corresponds to a C++ class, including:</p> <ul> <li>A JavaScript constructor function that has the class name and invokes the provided C++ constructor callback.</li> <li>Properties on the constructor function corresponding to <em>static</em> data properties, accessors, and methods of the C++ class (defined by property descriptors with the <code>napi_static</code> attribute).</li> <li>Properties on the constructor function's <code>prototype</code> object corresponding to <em>non-static</em> data properties, accessors, and methods of the C++ class (defined by property descriptors without the <code>napi_static</code> attribute).</li> </ul> <p>The C++ constructor callback should be a static method on the class that calls the actual class constructor, then wraps the new C++ instance in a JavaScript object, and returns the wrapper object. See <code>napi_wrap()</code> for details.</p> <p>The JavaScript constructor function returned from <a href=\"#n_api_napi_define_class\"><code>napi_define_class</code></a> is often saved and used later, to construct new instances of the class from native code, and/or check whether provided values are instances of the class. In that case, to prevent the function value from being garbage-collected, create a persistent reference to it using <a href=\"#n_api_napi_create_reference\"><code>napi_create_reference</code></a> and ensure the reference count is kept &gt;= 1.</p> <h3 id=\"n_api_napi_wrap\"><em>napi_wrap</em></h3> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_wrap(napi_env env,\n                      napi_value js_object,\n                      void* native_object,\n                      napi_finalize finalize_cb,\n                      void* finalize_hint,\n                      napi_ref* result);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] js_object</code>: The JavaScript object that will be the wrapper for the native object. This object <em>must</em> have been created from the <code>prototype</code> of a constructor that was created using <code>napi_define_class()</code>.</li> <li>\n<code>[in] native_object</code>: The native instance that will be wrapped in the JavaScript object.</li> <li>\n<code>[in] finalize_cb</code>: Optional native callback that can be used to free the native instance when the JavaScript object is ready for garbage-collection.</li> <li>\n<code>[in] finalize_hint</code>: Optional contextual hint that is passed to the finalize callback.</li> <li>\n<code>[out] result</code>: Optional reference to the wrapped object.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>Wraps a native instance in JavaScript object of the corresponding type.</p> <p>When JavaScript code invokes a constructor for a class that was defined using <code>napi_define_class()</code>, the <code>napi_callback</code> for the constructor is invoked. After constructing an instance of the native class, the callback must then call <code>napi_wrap()</code> to wrap the newly constructed instance in the already-created JavaScript object that is the <code>this</code> argument to the constructor callback. (That <code>this</code> object was created from the constructor function's <code>prototype</code>, so it already has definitions of all the instance properties and methods.)</p> <p>Typically when wrapping a class instance, a finalize callback should be provided that simply deletes the native instance that is received as the <code>data</code> argument to the finalize callback.</p> <p>The optional returned reference is initially a weak reference, meaning it has a reference count of 0. Typically this reference count would be incremented temporarily during async operations that require the instance to remain valid.</p> <p>Caution: The optional returned reference (if obtained) should be deleted via <a href=\"#n_api_napi_delete_reference\"><code>napi_delete_reference</code></a> ONLY in response to the finalize callback invocation. (If it is deleted before then, then the finalize callback may never be invoked.) Therefore when obtaining a reference a finalize callback is also required in order to enable correct proper of the reference.</p> <h3 id=\"n_api_napi_unwrap\"><em>napi_unwrap</em></h3> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">napi_status napi_unwrap(napi_env env,\n                        napi_value js_object,\n                        void** result);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] js_object</code>: The object associated with the C++ class instance.</li> <li>\n<code>[out] result</code>: Pointer to the wrapped C++ class instance.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>When JavaScript code invokes a method or property accessor on the class, the corresponding <code>napi_callback</code> is invoked. If the callback is for an instance method or accessor, then the <code>this</code> argument to the callback is the wrapper object; the wrapped C++ instance that is the target of the call can be obtained then by calling <code>napi_unwrap()</code> on the wrapper object.</p> <h2 id=\"n_api_asynchronous_operations\">Asynchronous Operations</h2> <p>Addon modules often need to leverage async helpers from libuv as part of their implementation. This allows them to schedule work to be executed asynchronously so that their methods can return in advance of the work being completed. This is important in order to allow them to avoid blocking overall execution of the Node.js application.</p> <p>N-API provides an ABI-stable interface for these supporting functions which covers the most common asynchronous use cases.</p> <p>N-API defines the <code>napi_work</code> structure which is used to manage asynchronous workers. Instances are created/deleted with <a href=\"#n_api_napi_create_async_work\"><code>napi_create_async_work</code></a> and <a href=\"#n_api_napi_delete_async_work\"><code>napi_delete_async_work</code></a>.</p> <p>The <code>execute</code> and <code>complete</code> callbacks are functions that will be invoked when the executor is ready to execute and when it completes its task respectively. These functions implement the following interfaces:</p> <pre data-language=\"C\">typedef void (*napi_async_execute_callback)(napi_env env,\n                                            void* data);\ntypedef void (*napi_async_complete_callback)(napi_env env,\n                                             napi_status status,\n                                             void* data);\n</pre> <p>When these methods are invoked, the <code>data</code> parameter passed will be the addon-provided void* data that was passed into the <code>napi_create_async_work</code> call.</p> <p>Once created the async worker can be queued for execution using the <a href=\"#n_api_napi_queue_async_work\"><code>napi_queue_async_work</code></a> function:</p> <pre data-language=\"C\">NAPI_EXTERN napi_status napi_queue_async_work(napi_env env,\n                                              napi_async_work work);\n</pre> <p><a href=\"#n_api_napi_cancel_async_work\"><code>napi_cancel_async_work</code></a> can be used if the work needs to be cancelled before the work has started execution.</p> <p>After calling <a href=\"#n_api_napi_cancel_async_work\"><code>napi_cancel_async_work</code></a>, the <code>complete</code> callback will be invoked with a status value of <code>napi_cancelled</code>. The work should not be deleted before the <code>complete</code> callback invocation, even when it was cancelled.</p> <p><strong>Note:</strong> As mentioned in the section on memory management, if the code to be run in the callbacks will create N-API values, then N-API handle scope functions must be used to create/destroy a <code>napi_handle_scope</code> such that the scope is active when objects can be created.</p> <h3 id=\"n_api_napi_create_async_work\">napi_create_async_work</h3> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">NAPI_EXTERN\nnapi_status napi_create_async_work(napi_env env,\n                                   napi_async_execute_callback execute,\n                                   napi_async_complete_callback complete,\n                                   void* data,\n                                   napi_async_work* result);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] execute</code>: The native function which should be called to excute the logic asynchronously.</li> <li>\n<code>[in] complete</code>: The native function which will be called when the asynchronous logic is comple or is cancelled.</li> <li>\n<code>[in] data</code>: User-provided data context. This will be passed back into the execute and complete functions.</li> <li>\n<code>[out] result</code>: <code>napi_async_work*</code> which is the handle to the newly created async work.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API allocates a work object that is used to execute logic asynchronously. It should be freed using <a href=\"#n_api_napi_delete_async_work\"><code>napi_delete_async_work</code></a> once the work is no longer required.</p> <h3 id=\"n_api_napi_delete_async_work\">napi_delete_async_work</h3> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">NAPI_EXTERN napi_status napi_delete_async_work(napi_env env,\n                                               napi_async_work work);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] work</code>: The handle returned by the call to <code>napi_create_async_work</code>.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API frees a previously allocated work object.</p> <h3 id=\"n_api_napi_queue_async_work\">napi_queue_async_work</h3> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">NAPI_EXTERN napi_status napi_queue_async_work(napi_env env,\n                                              napi_async_work work);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] work</code>: The handle returned by the call to <code>napi_create_async_work</code>.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API requests that the previously allocated work be scheduled for execution.</p> <h3 id=\"n_api_napi_cancel_async_work\">napi_cancel_async_work</h3> <div class=\"api_metadata\"> <span>Added in: v8.0.0</span> </div>\n<pre data-language=\"C\">NAPI_EXTERN napi_status napi_cancel_async_work(napi_env env,\n                                               napi_async_work work);\n</pre> <ul> <li>\n<code>[in] env</code>: The environment that the API is invoked under.</li> <li>\n<code>[in] work</code>: The handle returned by the call to <code>napi_create_async_work</code>.</li> </ul> <p>Returns <code>napi_ok</code> if the API succeeded.</p> <p>This API cancels a previously allocated work, provided it has not yet been queued for execution. After this function is called the <code>complete</code> callback will be invoked with a status value of <code>napi_cancelled</code>. The work should not be deleted before the <code>complete</code> callback invocation, even when it was cancelled.</p> <p>[<code>napi_create_external_arraybuffer</code>][]: #n_api_napi_create_external_arraybuffer</p> <p><a href=\"#n_api_napi_define_class\"><code>napi_define_class</code></a>: #n_api_napi_define_class</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/n-api.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/n-api.html</a>\n  </p>\n</div>\n","url":"<h1 id=\"url_url\">URL</h1> <div class=\"api_stability api_stability_2\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</div>\n<p>The <code>url</code> module provides utilities for URL resolution and parsing. It can be accessed using:</p> <pre data-language=\"js\">const url = require('url');\n</pre> <h2 id=\"url_url_strings_and_url_objects\">URL Strings and URL Objects</h2> <p>A URL string is a structured string containing multiple meaningful components. When parsed, a URL object is returned containing properties for each of these components.</p> <p>The following details each of the components of a parsed URL. The example <code>'http://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash'</code> is used to illustrate each.</p> <pre data-language=\"txt\">┌─────────────────────────────────────────────────────────────────────────────────┐\n│                                      href                                       │\n├──────────┬┬───────────┬─────────────────────┬───────────────────────────┬───────┤\n│ protocol ││   auth    │        host         │           path            │ hash  │\n│          ││           ├──────────────┬──────┼──────────┬────────────────┤       │\n│          ││           │   hostname   │ port │ pathname │     search     │       │\n│          ││           │              │      │          ├─┬──────────────┤       │\n│          ││           │              │      │          │ │    query     │       │\n\"  http:   // user:pass @ sub.host.com : 8080   /p/a/t/h  ?  query=string   #hash \"\n│          ││           │              │      │          │ │              │       │\n└──────────┴┴───────────┴──────────────┴──────┴──────────┴─┴──────────────┴───────┘\n(all spaces in the \"\" line should be ignored -- they are purely for formatting)\n</pre> <h3 id=\"url_urlobject_auth\">urlObject.auth</h3> <p>The <code>auth</code> property is the username and password portion of the URL, also referred to as \"userinfo\". This string subset follows the <code>protocol</code> and double slashes (if present) and precedes the <code>host</code> component, delimited by an ASCII \"at sign\" (<code>@</code>). The format of the string is <code>{username}[:{password}]</code>, with the <code>[:{password}]</code> portion being optional.</p> <p>For example: <code>'user:pass'</code></p> <h3 id=\"url_urlobject_hash\">urlObject.hash</h3> <p>The <code>hash</code> property consists of the \"fragment\" portion of the URL including the leading ASCII hash (<code>#</code>) character.</p> <p>For example: <code>'#hash'</code></p> <h3 id=\"url_urlobject_host\">urlObject.host</h3> <p>The <code>host</code> property is the full lower-cased host portion of the URL, including the <code>port</code> if specified.</p> <p>For example: <code>'sub.host.com:8080'</code></p> <h3 id=\"url_urlobject_hostname\">urlObject.hostname</h3> <p>The <code>hostname</code> property is the lower-cased host name portion of the <code>host</code> component <em>without</em> the <code>port</code> included.</p> <p>For example: <code>'sub.host.com'</code></p> <h3 id=\"url_urlobject_href\">urlObject.href</h3> <p>The <code>href</code> property is the full URL string that was parsed with both the <code>protocol</code> and <code>host</code> components converted to lower-case.</p> <p>For example: <code>'http://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash'</code></p> <h3 id=\"url_urlobject_path\">urlObject.path</h3> <p>The <code>path</code> property is a concatenation of the <code>pathname</code> and <code>search</code> components.</p> <p>For example: <code>'/p/a/t/h?query=string'</code></p> <p>No decoding of the <code>path</code> is performed.</p> <h3 id=\"url_urlobject_pathname\">urlObject.pathname</h3> <p>The <code>pathname</code> property consists of the entire path section of the URL. This is everything following the <code>host</code> (including the <code>port</code>) and before the start of the <code>query</code> or <code>hash</code> components, delimited by either the ASCII question mark (<code>?</code>) or hash (<code>#</code>) characters.</p> <p>For example <code>'/p/a/t/h'</code></p> <p>No decoding of the path string is performed.</p> <h3 id=\"url_urlobject_port\">urlObject.port</h3> <p>The <code>port</code> property is the numeric port portion of the <code>host</code> component.</p> <p>For example: <code>'8080'</code></p> <h3 id=\"url_urlobject_protocol\">urlObject.protocol</h3> <p>The <code>protocol</code> property identifies the URL's lower-cased protocol scheme.</p> <p>For example: <code>'http:'</code></p> <h3 id=\"url_urlobject_query\">urlObject.query</h3> <p>The <code>query</code> property is either the query string without the leading ASCII question mark (<code>?</code>), or an object returned by the <a href=\"querystring\"><code>querystring</code></a> module's <code>parse()</code> method. Whether the <code>query</code> property is a string or object is determined by the <code>parseQueryString</code> argument passed to <code>url.parse()</code>.</p> <p>For example: <code>'query=string'</code> or <code>{'query': 'string'}</code></p> <p>If returned as a string, no decoding of the query string is performed. If returned as an object, both keys and values are decoded.</p> <h3 id=\"url_urlobject_search\">urlObject.search</h3> <p>The <code>search</code> property consists of the entire \"query string\" portion of the URL, including the leading ASCII question mark (<code>?</code>) character.</p> <p>For example: <code>'?query=string'</code></p> <p>No decoding of the query string is performed.</p> <h3 id=\"url_urlobject_slashes\">urlObject.slashes</h3> <p>The <code>slashes</code> property is a <code>boolean</code> with a value of <code>true</code> if two ASCII forward-slash characters (<code>/</code>) are required following the colon in the <code>protocol</code>.</p> <h2 id=\"url_url_domaintoascii_domain\">url.domainToASCII(domain)</h2> <div class=\"api_metadata\"> <span>Added in: v7.4.0</span> </div>\n<div class=\"api_stability api_stability_1\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 1</a> - Experimental</div>\n<ul> <li>\n<code>domain</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>Returns the <a href=\"https://tools.ietf.org/html/rfc5891#section-4.4\">Punycode</a> ASCII serialization of the <code>domain</code>. If <code>domain</code> is an invalid domain, the empty string is returned.</p> <p>It performs the inverse operation to <a href=\"#url_url_domaintounicode_domain\"><code>url.domainToUnicode()</code></a>.</p> <pre data-language=\"js\">const url = require('url');\nconsole.log(url.domainToASCII('español.com'));\n  // Prints xn--espaol-zwa.com\nconsole.log(url.domainToASCII('中文.com'));\n  // Prints xn--fiq228c.com\nconsole.log(url.domainToASCII('xn--iñvalid.com'));\n  // Prints an empty string\n</pre> <h2 id=\"url_url_domaintounicode_domain\">url.domainToUnicode(domain)</h2> <div class=\"api_metadata\"> <span>Added in: v7.4.0</span> </div>\n<div class=\"api_stability api_stability_1\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 1</a> - Experimental</div>\n<ul> <li>\n<code>domain</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>Returns the Unicode serialization of the <code>domain</code>. If <code>domain</code> is an invalid domain, the empty string is returned.</p> <p>It performs the inverse operation to <a href=\"#url_url_domaintoascii_domain\"><code>url.domainToASCII()</code></a>.</p> <pre data-language=\"js\">const url = require('url');\nconsole.log(url.domainToUnicode('xn--espaol-zwa.com'));\n  // Prints español.com\nconsole.log(url.domainToUnicode('xn--fiq228c.com'));\n  // Prints 中文.com\nconsole.log(url.domainToUnicode('xn--iñvalid.com'));\n  // Prints an empty string\n</pre> <h2 id=\"url_url_format_urlobject\">url.format(urlObject)</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.25</span> </div>\n<ul> <li>\n<code>urlObject</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> A URL object (as returned by <code>url.parse()</code> or constructed otherwise). If a string, it is converted to an object by passing it to <code>url.parse()</code>.</li> </ul> <p>The <code>url.format()</code> method returns a formatted URL string derived from <code>urlObject</code>.</p> <p>If <code>urlObject</code> is not an object or a string, <code>url.parse()</code> will throw a <a href=\"errors#errors_class_typeerror\"><code>TypeError</code></a>.</p> <p>The formatting process operates as follows:</p> <ul> <li>A new empty string <code>result</code> is created.</li> <li>If <code>urlObject.protocol</code> is a string, it is appended as-is to <code>result</code>.</li> <li>Otherwise, if <code>urlObject.protocol</code> is not <code>undefined</code> and is not a string, an <a href=\"errors#errors_class_error\"><code>Error</code></a> is thrown.</li> <li>For all string values of <code>urlObject.protocol</code> that <em>do not end</em> with an ASCII colon (<code>:</code>) character, the literal string <code>:</code> will be appended to <code>result</code>.</li> <li>If either of the following conditions is true, then the literal string <code>//</code> will be appended to <code>result</code>:<ul> <li>\n<code>urlObject.slashes</code> property is true;</li> <li>\n<code>urlObject.protocol</code> begins with <code>http</code>, <code>https</code>, <code>ftp</code>, <code>gopher</code>, or <code>file</code>;</li> </ul> </li> <li>If the value of the <code>urlObject.auth</code> property is truthy, and either <code>urlObject.host</code> or <code>urlObject.hostname</code> are not <code>undefined</code>, the value of <code>urlObject.auth</code> will be coerced into a string and appended to <code>result</code> followed by the literal string <code>@</code>.</li> <li>If the <code>urlObject.host</code> property is <code>undefined</code> then:<ul> <li>If the <code>urlObject.hostname</code> is a string, it is appended to <code>result</code>.</li> <li>Otherwise, if <code>urlObject.hostname</code> is not <code>undefined</code> and is not a string, an <a href=\"errors#errors_class_error\"><code>Error</code></a> is thrown.</li> <li>If the <code>urlObject.port</code> property value is truthy, and <code>urlObject.hostname</code> is not <code>undefined</code>:<ul> <li>The literal string <code>:</code> is appended to <code>result</code>, and</li> <li>The value of <code>urlObject.port</code> is coerced to a string and appended to <code>result</code>.</li> </ul> </li> </ul> </li> <li>Otherwise, if the <code>urlObject.host</code> property value is truthy, the value of <code>urlObject.host</code> is coerced to a string and appended to <code>result</code>.</li> <li>If the <code>urlObject.pathname</code> property is a string that is not an empty string:<ul> <li>If the <code>urlObject.pathname</code> <em>does not start</em> with an ASCII forward slash (<code>/</code>), then the literal string '/' is appended to <code>result</code>.</li> <li>The value of <code>urlObject.pathname</code> is appended to <code>result</code>.</li> </ul> </li> <li>Otherwise, if <code>urlObject.pathname</code> is not <code>undefined</code> and is not a string, an <a href=\"errors#errors_class_error\"><code>Error</code></a> is thrown.</li> <li>If the <code>urlObject.search</code> property is <code>undefined</code> and if the <code>urlObject.query</code> property is an <code>Object</code>, the literal string <code>?</code> is appended to <code>result</code> followed by the output of calling the <a href=\"querystring\"><code>querystring</code></a> module's <code>stringify()</code> method passing the value of <code>urlObject.query</code>.</li> <li>Otherwise, if <code>urlObject.search</code> is a string:<ul> <li>If the value of <code>urlObject.search</code> <em>does not start</em> with the ASCII question mark (<code>?</code>) character, the literal string <code>?</code> is appended to <code>result</code>.</li> <li>The value of <code>urlObject.search</code> is appended to <code>result</code>.</li> </ul> </li> <li>Otherwise, if <code>urlObject.search</code> is not <code>undefined</code> and is not a string, an <a href=\"errors#errors_class_error\"><code>Error</code></a> is thrown.</li> <li>If the <code>urlObject.hash</code> property is a string:<ul> <li>If the value of <code>urlObject.hash</code> <em>does not start</em> with the ASCII hash (<code>#</code>) character, the literal string <code>#</code> is appended to <code>result</code>.</li> <li>The value of <code>urlObject.hash</code> is appended to <code>result</code>.</li> </ul> </li> <li>Otherwise, if the <code>urlObject.hash</code> property is not <code>undefined</code> and is not a string, an <a href=\"errors#errors_class_error\"><code>Error</code></a> is thrown.</li> <li>\n<code>result</code> is returned.</li> </ul> <h2 id=\"url_url_format_url_options\">url.format(URL[, options])</h2> <div class=\"api_metadata\"> <span>Added in: v7.6.0</span> </div>\n<div class=\"api_stability api_stability_1\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 1</a> - Experimental</div>\n<ul> <li>\n<code>URL</code> <a href=\"url#url_the_whatwg_url_api\" class=\"type\">&lt;URL&gt;</a> A <a href=\"#url_the_whatwg_url_api\">WHATWG URL</a> object</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>auth</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <code>true</code> if the serialized URL string should include the username and password, <code>false</code> otherwise. Defaults to <code>true</code>.</li> <li>\n<code>fragment</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <code>true</code> if the serialized URL string should include the fragment, <code>false</code> otherwise. Defaults to <code>true</code>.</li> <li>\n<code>search</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <code>true</code> if the serialized URL string should include the search query, <code>false</code> otherwise. Defaults to <code>true</code>.</li> <li>\n<code>unicode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <code>true</code> if Unicode characters appearing in the host component of the URL string should be encoded directly as opposed to being Punycode encoded. Defaults to <code>false</code>.</li> </ul> </li> </ul> <p>Returns a customizable serialization of a URL String representation of a <a href=\"#url_the_whatwg_url_api\">WHATWG URL</a> object.</p> <p>The URL object has both a <code>toString()</code> method and <code>href</code> property that return string serializations of the URL. These are not, however, customizable in any way. The <code>url.format(URL[, options])</code> method allows for basic customization of the output.</p> <p>For example:</p> <pre data-language=\"js\">const myURL = new URL('https://a:[email protected]?abc#foo');\n\nconsole.log(myURL.href);\n  // Prints https://a:[email protected]/?abc#foo\n\nconsole.log(myURL.toString());\n  // Prints https://a:[email protected]/?abc#foo\n\nconsole.log(url.format(myURL, {fragment: false, unicode: true, auth: false}));\n  // Prints 'https://你好你好?abc'\n</pre> <p><em>Note</em>: This variation of the <code>url.format()</code> method is currently considered to be experimental.</p> <h2 id=\"url_url_parse_urlstring_parsequerystring_slashesdenotehost\">url.parse(urlString[, parseQueryString[, slashesDenoteHost]])</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.25</span> </div>\n<ul> <li>\n<code>urlString</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The URL string to parse.</li> <li>\n<code>parseQueryString</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If <code>true</code>, the <code>query</code> property will always be set to an object returned by the <a href=\"querystring\"><code>querystring</code></a> module's <code>parse()</code> method. If <code>false</code>, the <code>query</code> property on the returned URL object will be an unparsed, undecoded string. Defaults to <code>false</code>.</li> <li>\n<code>slashesDenoteHost</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If <code>true</code>, the first token after the literal string <code>//</code> and preceding the next <code>/</code> will be interpreted as the <code>host</code>. For instance, given <code>//foo/bar</code>, the result would be <code>{host: 'foo', pathname: '/bar'}</code> rather than <code>{pathname: '//foo/bar'}</code>. Defaults to <code>false</code>.</li> </ul> <p>The <code>url.parse()</code> method takes a URL string, parses it, and returns a URL object.</p> <h2 id=\"url_url_resolve_from_to\">url.resolve(from, to)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.6.0</td> <td>\n<p>The <code>auth</code> fields are now kept intact when <code>from</code> and <code>to</code> refer to the same host.</p> </td>\n</tr> <tr>\n<td>v6.5.0, v4.6.2</td> <td>\n<p>The <code>port</code> field is copied correctly now.</p> </td>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>The <code>auth</code> fields is cleared now the <code>to</code> parameter contains a hostname.</p> </td>\n</tr> <tr>\n<td>v0.1.25</td> <td>\n<p><span>Added in: v0.1.25</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>from</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The Base URL being resolved against.</li> <li>\n<code>to</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The HREF URL being resolved.</li> </ul> <p>The <code>url.resolve()</code> method resolves a target URL relative to a base URL in a manner similar to that of a Web browser resolving an anchor tag HREF.</p> <p>For example:</p> <pre data-language=\"js\">url.resolve('/one/two/three', 'four')         // '/one/two/four'\nurl.resolve('http://example.com/', '/one')    // 'http://example.com/one'\nurl.resolve('http://example.com/one', '/two') // 'http://example.com/two'\n</pre> <h2 id=\"url_escaped_characters\">Escaped Characters</h2> <p>URLs are only permitted to contain a certain range of characters. Spaces (<code>' '</code>) and the following characters will be automatically escaped in the properties of URL objects:</p> <pre data-language=\"txt\">&lt; &gt; \" ` \\r \\n \\t { } | \\ ^ '\n</pre> <p>For example, the ASCII space character (<code>' '</code>) is encoded as <code>%20</code>. The ASCII forward slash (<code>/</code>) character is encoded as <code>%3C</code>.</p> <h2 id=\"url_the_whatwg_url_api\">The WHATWG URL API</h2> <div class=\"api_metadata\"> <span>Added in: v7.0.0</span> </div>\n<div class=\"api_stability api_stability_1\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 1</a> - Experimental</div>\n<p>The <code>url</code> module provides an <em>experimental</em> implementation of the <a href=\"https://url.spec.whatwg.org/\">WHATWG URL Standard</a> as an alternative to the existing <code>url.parse()</code> API.</p> <pre data-language=\"js\">const URL = require('url').URL;\nconst myURL = new URL('https://example.org/foo');\n\nconsole.log(myURL.href);     // https://example.org/foo\nconsole.log(myURL.protocol); // https:\nconsole.log(myURL.hostname); // example.org\nconsole.log(myURL.pathname); // /foo\n</pre> <p><em>Note</em>: Using the <code>delete</code> keyword (e.g. <code>delete myURL.protocol</code>, <code>delete myURL.pathname</code>, etc) has no effect but will still return <code>true</code>.</p> <p>A comparison between this API and <code>url.parse()</code> is given below. Above the URL <code>'http://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash'</code>, properties of an object returned by <code>url.parse()</code> are shown. Below it are properties of a WHATWG <code>URL</code> object.</p> <p><em>Note</em>: WHATWG URL's <code>origin</code> property includes <code>protocol</code> and <code>host</code>, but not <code>username</code> or <code>password</code>.</p> <pre data-language=\"txt\">┌─────────────────────────────────────────────────────────────────────────────────────────────┐\n│                                            href                                             │\n├──────────┬──┬─────────────────────┬─────────────────────┬───────���───────────────────┬───────┤\n│ protocol │  │        auth         │        host         │           path            │ hash  │\n│          │  │                     ├──────────────┬──────┼──────────┬────────────────┤       │\n│          │  │                     │   hostname   │ port │ pathname │     search     │       │\n│          │  │                     │              │      │          ├─┬──────────────┤       │\n│          │  │                     │              │      │          │ │    query     │       │\n\"  http:    //    user   :   pass   @ sub.host.com : 8080   /p/a/t/h  ?  query=string   #hash \"\n│          │  │          │          │   hostname   │ port │          │                │       │\n│          │  │          │          ├──────────────┴──────┤          │                │       │\n│ protocol │  │ username │ password │        host         │          │                │       │\n├──────────┴──┼──────────┴──────────┼─────────────────────┤          │                │       │\n│   origin    │                     │       origin        │ pathname │     search     │ hash  │\n├─────────────┴─────────────────────┴─────────────────────┴──────────┴────────────────┴───────┤\n│                                            href                                             │\n└─────────────────────────────────────────────────────────────────────────────────────────────┘\n(all spaces in the \"\" line should be ignored -- they are purely for formatting)\n</pre> <h3 id=\"url_class_url\">Class: URL</h3> <h4 id=\"url_constructor_new_url_input_base\">Constructor: new URL(input[, base])</h4> <div class=\"signature\">\n<ul> <li>\n<code>input</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The input URL to parse</li> <li>\n<code>base</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"url#url_the_whatwg_url_api\" class=\"type\">&lt;URL&gt;</a> The base URL to resolve against if the <code>input</code> is not absolute.</li> </ul> </div>\n<p>Creates a new <code>URL</code> object by parsing the <code>input</code> relative to the <code>base</code>. If <code>base</code> is passed as a string, it will be parsed equivalent to <code>new URL(base)</code>.</p> <pre data-language=\"js\">const myURL = new URL('/foo', 'https://example.org/');\n  // https://example.org/foo\n</pre> <p>A <code>TypeError</code> will be thrown if the <code>input</code> or <code>base</code> are not valid URLs. Note that an effort will be made to coerce the given values into strings. For instance:</p> <pre data-language=\"js\">const myURL = new URL({toString: () =&gt; 'https://example.org/'});\n  // https://example.org/\n</pre> <p>Unicode characters appearing within the hostname of <code>input</code> will be automatically converted to ASCII using the <a href=\"https://tools.ietf.org/html/rfc5891#section-4.4\">Punycode</a> algorithm.</p> <pre data-language=\"js\">const myURL = new URL('https://你好你好');\n  // https://xn--6qqa088eba/\n</pre> <p>Additional <a href=\"https://url.spec.whatwg.org/#example-url-parsing\">examples of parsed URLs</a> may be found in the WHATWG URL Standard.</p> <h4 id=\"url_url_hash\">url.hash</h4> <div class=\"signature\">\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> </div>\n<p>Gets and sets the fragment portion of the URL.</p> <pre data-language=\"js\">const myURL = new URL('https://example.org/foo#bar');\nconsole.log(myURL.hash);\n  // Prints #bar\n\nmyURL.hash = 'baz';\nconsole.log(myURL.href);\n  // Prints https://example.org/foo#baz\n</pre> <p>Invalid URL characters included in the value assigned to the <code>hash</code> property are <a href=\"#whatwg-percent-encoding\">percent-encoded</a>. Note that the selection of which characters to percent-encode may vary somewhat from what the <a href=\"#url_url_parse_urlstring_parsequerystring_slashesdenotehost\"><code>url.parse()</code></a> and <a href=\"#url_url_format_urlobject\"><code>url.format()</code></a> methods would produce.</p> <h4 id=\"url_url_host\">url.host</h4> <div class=\"signature\">\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> </div>\n<p>Gets and sets the host portion of the URL.</p> <pre data-language=\"js\">const myURL = new URL('https://example.org:81/foo');\nconsole.log(myURL.host);\n  // Prints example.org:81\n\nmyURL.host = 'example.com:82';\nconsole.log(myURL.href);\n  // Prints https://example.com:82/foo\n</pre> <p>Invalid host values assigned to the <code>host</code> property are ignored.</p> <h4 id=\"url_url_hostname\">url.hostname</h4> <div class=\"signature\">\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> </div>\n<p>Gets and sets the hostname portion of the URL. The key difference between <code>url.host</code> and <code>url.hostname</code> is that <code>url.hostname</code> does <em>not</em> include the port.</p> <pre data-language=\"js\">const myURL = new URL('https://example.org:81/foo');\nconsole.log(myURL.hostname);\n  // Prints example.org\n\nmyURL.hostname = 'example.com:82';\nconsole.log(myURL.href);\n  // Prints https://example.com:81/foo\n</pre> <p>Invalid hostname values assigned to the <code>hostname</code> property are ignored.</p> <h4 id=\"url_url_href\">url.href</h4> <div class=\"signature\">\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> </div>\n<p>Gets and sets the serialized URL.</p> <pre data-language=\"js\">const myURL = new URL('https://example.org/foo');\nconsole.log(myURL.href);\n  // Prints https://example.org/foo\n\nmyURL.href = 'https://example.com/bar'\n  // Prints https://example.com/bar\n</pre> <p>Getting the value of the <code>href</code> property is equivalent to calling <a href=\"#url_url_tostring\"><code>url.toString()</code></a>.</p> <p>Setting the value of this property to a new value is equivalent to creating a new <code>URL</code> object using <a href=\"#url_constructor_new_url_input_base\"><code>new URL(value)</code></a>. Each of the <code>URL</code> object's properties will be modified.</p> <p>If the value assigned to the <code>href</code> property is not a valid URL, a <code>TypeError</code> will be thrown.</p> <h4 id=\"url_url_origin\">url.origin</h4> <div class=\"signature\">\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> </div>\n<p>Gets the read-only serialization of the URL's origin. Unicode characters that may be contained within the hostname will be encoded as-is without <a href=\"https://tools.ietf.org/html/rfc5891#section-4.4\">Punycode</a> encoding.</p> <pre data-language=\"js\">const myURL = new URL('https://example.org/foo/bar?baz');\nconsole.log(myURL.origin);\n  // Prints https://example.org\n</pre> <pre data-language=\"js\">const idnURL = new URL('https://你好你好');\nconsole.log(idnURL.origin);\n  // Prints https://你好你好\n\nconsole.log(idnURL.hostname);\n  // Prints xn--6qqa088eba\n</pre> <h4 id=\"url_url_password\">url.password</h4> <div class=\"signature\">\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> </div>\n<p>Gets and sets the password portion of the URL.</p> <pre data-language=\"js\">const myURL = new URL('https://abc:[email protected]');\nconsole.log(myURL.password);\n  // Prints xyz\n\nmyURL.password = '123';\nconsole.log(myURL.href);\n  // Prints https://abc:[email protected]\n</pre> <p>Invalid URL characters included in the value assigned to the <code>password</code> property are <a href=\"#whatwg-percent-encoding\">percent-encoded</a>. Note that the selection of which characters to percent-encode may vary somewhat from what the <a href=\"#url_url_parse_urlstring_parsequerystring_slashesdenotehost\"><code>url.parse()</code></a> and <a href=\"#url_url_format_urlobject\"><code>url.format()</code></a> methods would produce.</p> <h4 id=\"url_url_pathname\">url.pathname</h4> <div class=\"signature\">\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> </div>\n<p>Gets and sets the path portion of the URL.</p> <pre data-language=\"js\">const myURL = new URL('https://example.org/abc/xyz?123');\nconsole.log(myURL.pathname);\n  // Prints /abc/xyz\n\nmyURL.pathname = '/abcdef';\nconsole.log(myURL.href);\n  // Prints https://example.org/abcdef?123\n</pre> <p>Invalid URL characters included in the value assigned to the <code>pathname</code> property are <a href=\"#whatwg-percent-encoding\">percent-encoded</a>. Note that the selection of which characters to percent-encode may vary somewhat from what the <a href=\"#url_url_parse_urlstring_parsequerystring_slashesdenotehost\"><code>url.parse()</code></a> and <a href=\"#url_url_format_urlobject\"><code>url.format()</code></a> methods would produce.</p> <h4 id=\"url_url_port\">url.port</h4> <div class=\"signature\">\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> </div>\n<p>Gets and sets the port portion of the URL.</p> <pre data-language=\"js\">const myURL = new URL('https://example.org:8888');\nconsole.log(myURL.port);\n  // Prints 8888\n\n// Default ports are automatically transformed to the empty string\n// (HTTPS protocol's default port is 443)\nmyURL.port = '443';\nconsole.log(myURL.port);\n  // Prints the empty string\nconsole.log(myURL.href);\n  // Prints https://example.org/\n\nmyURL.port = 1234;\nconsole.log(myURL.port);\n  // Prints 1234\nconsole.log(myURL.href);\n  // Prints https://example.org:1234/\n\n// Completely invalid port strings are ignored\nmyURL.port = 'abcd';\nconsole.log(myURL.port);\n  // Prints 1234\n\n// Leading numbers are treated as a port number\nmyURL.port = '5678abcd';\nconsole.log(myURL.port);\n  // Prints 5678\n\n// Non-integers are truncated\nmyURL.port = 1234.5678;\nconsole.log(myURL.port);\n  // Prints 1234\n\n// Out-of-range numbers are ignored\nmyURL.port = 1e10;\nconsole.log(myURL.port);\n  // Prints 1234\n</pre> <p>The port value may be set as either a number or as a String containing a number in the range <code>0</code> to <code>65535</code> (inclusive). Setting the value to the default port of the <code>URL</code> objects given <code>protocol</code> will result in the <code>port</code> value becoming the empty string (<code>''</code>).</p> <p>If an invalid string is assigned to the <code>port</code> property, but it begins with a number, the leading number is assigned to <code>port</code>. Otherwise, or if the number lies outside the range denoted above, it is ignored.</p> <h4 id=\"url_url_protocol\">url.protocol</h4> <div class=\"signature\">\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> </div>\n<p>Gets and sets the protocol portion of the URL.</p> <pre data-language=\"js\">const myURL = new URL('https://example.org');\nconsole.log(myURL.protocol);\n  // Prints https:\n\nmyURL.protocol = 'ftp';\nconsole.log(myURL.href);\n  // Prints ftp://example.org\n</pre> <p>Invalid URL protocol values assigned to the <code>protocol</code> property are ignored.</p> <h4 id=\"url_url_search\">url.search</h4> <div class=\"signature\">\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> </div>\n<p>Gets and sets the serialized query portion of the URL.</p> <pre data-language=\"js\">const myURL = new URL('https://example.org/abc?123');\nconsole.log(myURL.search);\n  // Prints ?123\n\nmyURL.search = 'abc=xyz';\nconsole.log(myURL.href);\n  // Prints https://example.org/abc?abc=xyz\n</pre> <p>Any invalid URL characters appearing in the value assigned the <code>search</code> property will be <a href=\"#whatwg-percent-encoding\">percent-encoded</a>. Note that the selection of which characters to percent-encode may vary somewhat from what the <a href=\"#url_url_parse_urlstring_parsequerystring_slashesdenotehost\"><code>url.parse()</code></a> and <a href=\"#url_url_format_urlobject\"><code>url.format()</code></a> methods would produce.</p> <h4 id=\"url_url_searchparams\">url.searchParams</h4> <div class=\"signature\">\n<ul> <li><a href=\"url#url_class_urlsearchparams\" class=\"type\">&lt;URLSearchParams&gt;</a></li> </ul> </div>\n<p>Gets the <a href=\"#url_class_urlsearchparams\"><code>URLSearchParams</code></a> object representing the query parameters of the URL. This property is read-only; to replace the entirety of query parameters of the URL, use the <a href=\"#url_url_search\"><code>url.search</code></a> setter. See <a href=\"#url_class_urlsearchparams\"><code>URLSearchParams</code></a> documentation for details.</p> <h4 id=\"url_url_username\">url.username</h4> <div class=\"signature\">\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> </div>\n<p>Gets and sets the username portion of the URL.</p> <pre data-language=\"js\">const myURL = new URL('https://abc:[email protected]');\nconsole.log(myURL.username);\n  // Prints abc\n\nmyURL.username = '123';\nconsole.log(myURL.href);\n  // Prints https://123:[email protected]\n</pre> <p>Any invalid URL characters appearing in the value assigned the <code>username</code> property will be <a href=\"#whatwg-percent-encoding\">percent-encoded</a>. Note that the selection of which characters to percent-encode may vary somewhat from what the <a href=\"#url_url_parse_urlstring_parsequerystring_slashesdenotehost\"><code>url.parse()</code></a> and <a href=\"#url_url_format_urlobject\"><code>url.format()</code></a> methods would produce.</p> <h4 id=\"url_url_tostring\">url.toString()</h4> <div class=\"signature\">\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> </div>\n<p>The <code>toString()</code> method on the <code>URL</code> object returns the serialized URL. The value returned is equivalent to that of <a href=\"#url_url_href\"><code>url.href</code></a> and <a href=\"#url_url_tojson\"><code>url.toJSON()</code></a>.</p> <p>Because of the need for standard compliance, this method does not allow users to customize the serialization process of the URL. For more flexibility, <a href=\"#url_url_format_url_options\"><code>require('url').format()</code></a> method might be of interest.</p> <h4 id=\"url_url_tojson\">url.toJSON()</h4> <div class=\"signature\">\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> </div>\n<p>The <code>toJSON()</code> method on the <code>URL</code> object returns the serialized URL. The value returned is equivalent to that of <a href=\"#url_url_href\"><code>url.href</code></a> and <a href=\"#url_url_tostring\"><code>url.toString()</code></a>.</p> <p>This method is automatically called when an <code>URL</code> object is serialized with <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a>.</p> <pre data-language=\"js\">const myURLs = [\n  new URL('https://www.example.com'),\n  new URL('https://test.example.org')\n];\nconsole.log(JSON.stringify(myURLs));\n  // Prints [\"https://www.example.com/\",\"https://test.example.org/\"]\n</pre> <h3 id=\"url_class_urlsearchparams\">Class: URLSearchParams</h3> <div class=\"api_metadata\"> <span>Added in: v7.5.0</span> </div>\n<p>The <code>URLSearchParams</code> API provides read and write access to the query of a <code>URL</code>. The <code>URLSearchParams</code> class can also be used standalone with one of the four following constructors.</p> <p>The WHATWG <code>URLSearchParams</code> interface and the <a href=\"querystring\"><code>querystring</code></a> module have similar purpose, but the purpose of the <a href=\"querystring\"><code>querystring</code></a> module is more general, as it allows the customization of delimiter characters (<code>&amp;</code> and <code>=</code>). On the other hand, this API is designed purely for URL query strings.</p> <pre data-language=\"js\">const { URL, URLSearchParams } = require('url');\n\nconst myURL = new URL('https://example.org/?abc=123');\nconsole.log(myURL.searchParams.get('abc'));\n  // Prints 123\n\nmyURL.searchParams.append('abc', 'xyz');\nconsole.log(myURL.href);\n  // Prints https://example.org/?abc=123&amp;abc=xyz\n\nmyURL.searchParams.delete('abc');\nmyURL.searchParams.set('a', 'b');\nconsole.log(myURL.href);\n  // Prints https://example.org/?a=b\n\nconst newSearchParams = new URLSearchParams(myURL.searchParams);\n// The above is equivalent to\n// const newSearchParams = new URLSearchParams(myURL.search);\n\nnewSearchParams.append('a', 'c');\nconsole.log(myURL.href);\n  // Prints https://example.org/?a=b\nconsole.log(newSearchParams.toString());\n  // Prints a=b&amp;a=c\n\n// newSearchParams.toString() is implicitly called\nmyURL.search = newSearchParams;\nconsole.log(myURL.href);\n  // Prints https://example.org/?a=b&amp;a=c\nnewSearchParams.delete('a');\nconsole.log(myURL.href);\n  // Prints https://example.org/?a=b&amp;a=c\n</pre> <h4 id=\"url_constructor_new_urlsearchparams\">Constructor: new URLSearchParams()</h4> <p>Instantiate a new empty <code>URLSearchParams</code> object.</p> <h4 id=\"url_constructor_new_urlsearchparams_string\">Constructor: new URLSearchParams(string)</h4> <div class=\"signature\">\n<ul> <li>\n<code>string</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> A query string</li> </ul> </div>\n<p>Parse the <code>string</code> as a query string, and use it to instantiate a new <code>URLSearchParams</code> object. A leading <code>'?'</code>, if present, is ignored.</p> <pre data-language=\"js\">const { URLSearchParams } = require('url');\nlet params;\n\nparams = new URLSearchParams('user=abc&amp;query=xyz');\nconsole.log(params.get('user'));\n  // Prints 'abc'\nconsole.log(params.toString());\n  // Prints 'user=abc&amp;query=xyz'\n\nparams = new URLSearchParams('?user=abc&amp;query=xyz');\nconsole.log(params.toString());\n  // Prints 'user=abc&amp;query=xyz'\n</pre> <h4 id=\"url_constructor_new_urlsearchparams_obj\">Constructor: new URLSearchParams(obj)</h4> <div class=\"api_metadata\"> <span>Added in: v7.10.0</span> </div>\n<ul> <li>\n<code>obj</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> An object representing a collection of key-value pairs</li> </ul> <p>Instantiate a new <code>URLSearchParams</code> object with a query hash map. The key and value of each property of <code>obj</code> are always coerced to strings.</p> <p><em>Note</em>: Unlike <a href=\"querystring\"><code>querystring</code></a> module, duplicate keys in the form of array values are not allowed. Arrays are stringified using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString\"><code>array.toString()</code></a>, which simply joins all array elements with commas.</p> <pre data-language=\"js\">const { URLSearchParams } = require('url');\nconst params = new URLSearchParams({\n  user: 'abc',\n  query: ['first', 'second']\n});\nconsole.log(params.getAll('query'));\n  // Prints ['first,second']\nconsole.log(params.toString());\n  // Prints 'user=abc&amp;query=first%2Csecond'\n</pre> <h4 id=\"url_constructor_new_urlsearchparams_iterable\">Constructor: new URLSearchParams(iterable)</h4> <div class=\"api_metadata\"> <span>Added in: v7.10.0</span> </div>\n<ul> <li>\n<code>iterable</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol\" class=\"type\">&lt;Iterable&gt;</a> An iterable object whose elements are key-value pairs</li> </ul> <p>Instantiate a new <code>URLSearchParams</code> object with an iterable map in a way that is similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a>'s constructor. <code>iterable</code> can be an Array or any iterable object. That means <code>iterable</code> can be another <code>URLSearchParams</code>, in which case the constructor will simply create a clone of the provided <code>URLSearchParams</code>. Elements of <code>iterable</code> are key-value pairs, and can themselves be any iterable object.</p> <p>Duplicate keys are allowed.</p> <pre data-language=\"js\">const { URLSearchParams } = require('url');\nlet params;\n\n// Using an array\nparams = new URLSearchParams([\n  ['user', 'abc'],\n  ['query', 'first'],\n  ['query', 'second']\n]);\nconsole.log(params.toString());\n  // Prints 'user=abc&amp;query=first&amp;query=second'\n\n// Using a Map object\nconst map = new Map();\nmap.set('user', 'abc');\nmap.set('query', 'xyz');\nparams = new URLSearchParams(map);\nconsole.log(params.toString());\n  // Prints 'user=abc&amp;query=xyz'\n\n// Using a generator function\nfunction* getQueryPairs() {\n  yield ['user', 'abc'];\n  yield ['query', 'first'];\n  yield ['query', 'second'];\n}\nparams = new URLSearchParams(getQueryPairs());\nconsole.log(params.toString());\n  // Prints 'user=abc&amp;query=first&amp;query=second'\n\n// Each key-value pair must have exactly two elements\nnew URLSearchParams([\n  ['user', 'abc', 'error']\n]);\n  // Throws TypeError: Each query pair must be a name/value tuple\n</pre> <h4 id=\"url_urlsearchparams_append_name_value\">urlSearchParams.append(name, value)</h4> <div class=\"signature\">\n<ul> <li>\n<code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> </div>\n<p>Append a new name-value pair to the query string.</p> <h4 id=\"url_urlsearchparams_delete_name\">urlSearchParams.delete(name)</h4> <div class=\"signature\">\n<ul> <li>\n<code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> </div>\n<p>Remove all name-value pairs whose name is <code>name</code>.</p> <h4 id=\"url_urlsearchparams_entries\">urlSearchParams.entries()</h4> <div class=\"signature\">\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol\" class=\"type\">&lt;Iterator&gt;</a>\n</li> </ul> </div>\n<p>Returns an ES6 Iterator over each of the name-value pairs in the query. Each item of the iterator is a JavaScript Array. The first item of the Array is the <code>name</code>, the second item of the Array is the <code>value</code>.</p> <p>Alias for <a href=\"#url_urlsearchparams_iterator\"><code>urlSearchParams[@@iterator]()</code></a>.</p> <h4 id=\"url_urlsearchparams_foreach_fn_thisarg\">urlSearchParams.forEach(fn[, thisArg])</h4> <div class=\"signature\">\n<ul> <li>\n<code>fn</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Function invoked for each name-value pair in the query.</li> <li>\n<code>thisArg</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Object to be used as <code>this</code> value for when <code>fn</code> is called</li> </ul> </div>\n<p>Iterates over each name-value pair in the query and invokes the given function.</p> <pre data-language=\"js\">const URL = require('url').URL;\nconst myURL = new URL('https://example.org/?a=b&amp;c=d');\nmyURL.searchParams.forEach((value, name, searchParams) =&gt; {\n  console.log(name, value, myURL.searchParams === searchParams);\n});\n  // Prints:\n  // a b true\n  // c d true\n</pre> <h4 id=\"url_urlsearchparams_get_name\">urlSearchParams.get(name)</h4> <div class=\"signature\">\n<ul> <li>\n<code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> or <code>null</code> if there is no name-value pair with the given <code>name</code>.</li> </ul> </div>\n<p>Returns the value of the first name-value pair whose name is <code>name</code>. If there are no such pairs, <code>null</code> is returned.</p> <h4 id=\"url_urlsearchparams_getall_name\">urlSearchParams.getAll(name)</h4> <div class=\"signature\">\n<ul> <li>\n<code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a>\n</li> </ul> </div>\n<p>Returns the values of all name-value pairs whose name is <code>name</code>. If there are no such pairs, an empty array is returned.</p> <h4 id=\"url_urlsearchparams_has_name\">urlSearchParams.has(name)</h4> <div class=\"signature\">\n<ul> <li>\n<code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a>\n</li> </ul> </div>\n<p>Returns <code>true</code> if there is at least one name-value pair whose name is <code>name</code>.</p> <h4 id=\"url_urlsearchparams_keys\">urlSearchParams.keys()</h4> <div class=\"signature\">\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol\" class=\"type\">&lt;Iterator&gt;</a>\n</li> </ul> </div>\n<p>Returns an ES6 Iterator over the names of each name-value pair.</p> <pre data-language=\"js\">const { URLSearchParams } = require('url');\nconst params = new URLSearchParams('foo=bar&amp;foo=baz');\nfor (const name of params.keys()) {\n  console.log(name);\n}\n  // Prints:\n  // foo\n  // foo\n</pre> <h4 id=\"url_urlsearchparams_set_name_value\">urlSearchParams.set(name, value)</h4> <div class=\"signature\">\n<ul> <li>\n<code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> </div>\n<p>Sets the value in the <code>URLSearchParams</code> object associated with <code>name</code> to <code>value</code>. If there are any pre-existing name-value pairs whose names are <code>name</code>, set the first such pair's value to <code>value</code> and remove all others. If not, append the name-value pair to the query string.</p> <pre data-language=\"js\">const { URLSearchParams } = require('url');\n\nconst params = new URLSearchParams();\nparams.append('foo', 'bar');\nparams.append('foo', 'baz');\nparams.append('abc', 'def');\nconsole.log(params.toString());\n  // Prints foo=bar&amp;foo=baz&amp;abc=def\n\nparams.set('foo', 'def');\nparams.set('xyz', 'opq');\nconsole.log(params.toString());\n  // Prints foo=def&amp;abc=def&amp;xyz=opq\n</pre> <h4 id=\"url_urlsearchparams_sort\">urlSearchParams.sort()</h4> <div class=\"api_metadata\"> <span>Added in: v7.7.0</span> </div>\n<p>Sort all existing name-value pairs in-place by their names. Sorting is done with a <a href=\"https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\">stable sorting algorithm</a>, so relative order between name-value pairs with the same name is preserved.</p> <p>This method can be used, in particular, to increase cache hits.</p> <pre data-language=\"js\">const params = new URLSearchParams('query[]=abc&amp;type=search&amp;query[]=123');\nparams.sort();\nconsole.log(params.toString());\n  // Prints query%5B%5D=abc&amp;query%5B%5D=123&amp;type=search\n</pre> <h4 id=\"url_urlsearchparams_tostring\">urlSearchParams.toString()</h4> <div class=\"signature\">\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> </div>\n<p>Returns the search parameters serialized as a string, with characters percent-encoded where necessary.</p> <h4 id=\"url_urlsearchparams_values\">urlSearchParams.values()</h4> <div class=\"signature\">\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol\" class=\"type\">&lt;Iterator&gt;</a>\n</li> </ul> </div>\n<p>Returns an ES6 Iterator over the values of each name-value pair.</p> <h4 id=\"url_urlsearchparams_iterator\">urlSearchParams[@@iterator]()</h4> <div class=\"signature\">\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol\" class=\"type\">&lt;Iterator&gt;</a>\n</li> </ul> </div>\n<p>Returns an ES6 Iterator over each of the name-value pairs in the query string. Each item of the iterator is a JavaScript Array. The first item of the Array is the <code>name</code>, the second item of the Array is the <code>value</code>.</p> <p>Alias for <a href=\"#url_urlsearchparams_entries\"><code>urlSearchParams.entries()</code></a>.</p> <pre data-language=\"js\">const { URLSearchParams } = require('url');\nconst params = new URLSearchParams('foo=bar&amp;xyz=baz');\nfor (const [name, value] of params) {\n  console.log(name, value);\n}\n  // Prints:\n  // foo bar\n  // xyz baz\n</pre>  <h3 id=\"url_percent_encoding_in_the_whatwg_url_standard\">Percent-Encoding in the WHATWG URL Standard</h3> <p>URLs are permitted to only contain a certain range of characters. Any character falling outside of that range must be encoded. How such characters are encoded, and which characters to encode depends entirely on where the character is located within the structure of the URL. The WHATWG URL Standard uses a more selective and fine grained approach to selecting encoded characters than that used by the older <a href=\"#url_url_parse_urlstring_parsequerystring_slashesdenotehost\"><code>url.parse()</code></a> and <a href=\"#url_url_format_urlobject\"><code>url.format()</code></a> methods.</p> <p>The WHATWG algorithm defines three \"percent-encode sets\" that describe ranges of characters that must be percent-encoded:</p> <ul> <li>\n<p>The <em>C0 control percent-encode set</em> includes code points in range U+0000 to U+001F (inclusive) and all code points greater than U+007E.</p> </li> <li>\n<p>The <em>path percent-encode set</em> includes the <em>C0 control percent-encode set</em> and code points U+0020, U+0022, U+0023, U+003C, U+003E, U+003F, U+0060, U+007B, and U+007D.</p> </li> <li>\n<p>The <em>userinfo encode set</em> includes the <em>path percent-encode set</em> and code points U+002F, U+003A, U+003B, U+003D, U+0040, U+005B, U+005C, U+005D, U+005E, and U+007C.</p> </li> </ul> <p>The <em>userinfo percent-encode set</em> is used exclusively for username and passwords encoded within the URL. The <em>path percent-encode set</em> is used for the path of most URLs. The <em>C0 control percent-encode set</em> is used for all other cases, including URL fragments in particular, but also host and path under certain specific conditions.</p> <p>When non-ASCII characters appear within a hostname, the hostname is encoded using the <a href=\"https://tools.ietf.org/html/rfc5891#section-4.4\">Punycode</a> algorithm. Note, however, that a hostname <em>may</em> contain <em>both</em> Punycode encoded and percent-encoded characters. For example:</p> <pre data-language=\"js\">const URL = require('url').URL;\nconst myURL = new URL('https://%CF%80.com/foo');\nconsole.log(myURL.href);\n  // Prints https://xn--1xa.com/foo\nconsole.log(myURL.origin);\n  // Prints https://π.com\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/url.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/url.html</a>\n  </p>\n</div>\n","util":"<h1 id=\"util_util\">Util</h1> <div class=\"api_stability api_stability_2\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</div>\n<p>The <code>util</code> module is primarily designed to support the needs of Node.js' own internal APIs. However, many of the utilities are useful for application and module developers as well. It can be accessed using:</p> <pre data-language=\"js\">const util = require('util');\n</pre> <h2 id=\"util_util_debuglog_section\">util.debuglog(section)</h2> <div class=\"api_metadata\"> <span>Added in: v0.11.3</span> </div>\n<ul> <li>\n<code>section</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> A string identifying the portion of the application for which the <code>debuglog</code> function is being created.</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> The logging function</li> </ul> <p>The <code>util.debuglog()</code> method is used to create a function that conditionally writes debug messages to <code>stderr</code> based on the existence of the <code>NODE_DEBUG</code> environment variable. If the <code>section</code> name appears within the value of that environment variable, then the returned function operates similar to <a href=\"console#console_console_error_data_args\"><code>console.error()</code></a>. If not, then the returned function is a no-op.</p> <p>For example:</p> <pre data-language=\"js\">const util = require('util');\nconst debuglog = util.debuglog('foo');\n\ndebuglog('hello from foo [%d]', 123);\n</pre> <p>If this program is run with <code>NODE_DEBUG=foo</code> in the environment, then it will output something like:</p> <pre data-language=\"txt\">FOO 3245: hello from foo [123]\n</pre> <p>where <code>3245</code> is the process id. If it is not run with that environment variable set, then it will not print anything.</p> <p>Multiple comma-separated <code>section</code> names may be specified in the <code>NODE_DEBUG</code> environment variable. For example: <code>NODE_DEBUG=fs,net,tls</code>.</p> <h2 id=\"util_util_deprecate_function_string\">util.deprecate(function, string)</h2> <div class=\"api_metadata\"> <span>Added in: v0.8.0</span> </div>\n<p>The <code>util.deprecate()</code> method wraps the given <code>function</code> or class in such a way that it is marked as deprecated.</p> <pre data-language=\"js\">const util = require('util');\n\nexports.puts = util.deprecate(function() {\n  for (var i = 0, len = arguments.length; i &lt; len; ++i) {\n    process.stdout.write(arguments[i] + '\\n');\n  }\n}, 'util.puts: Use console.log instead');\n</pre> <p>When called, <code>util.deprecate()</code> will return a function that will emit a <code>DeprecationWarning</code> using the <code>process.on('warning')</code> event. By default, this warning will be emitted and printed to <code>stderr</code> exactly once, the first time it is called. After the warning is emitted, the wrapped <code>function</code> is called.</p> <p>If either the <code>--no-deprecation</code> or <code>--no-warnings</code> command line flags are used, or if the <code>process.noDeprecation</code> property is set to <code>true</code> <em>prior</em> to the first deprecation warning, the <code>util.deprecate()</code> method does nothing.</p> <p>If the <code>--trace-deprecation</code> or <code>--trace-warnings</code> command line flags are set, or the <code>process.traceDeprecation</code> property is set to <code>true</code>, a warning and a stack trace are printed to <code>stderr</code> the first time the deprecated function is called.</p> <p>If the <code>--throw-deprecation</code> command line flag is set, or the <code>process.throwDeprecation</code> property is set to <code>true</code>, then an exception will be thrown when the deprecated function is called.</p> <p>The <code>--throw-deprecation</code> command line flag and <code>process.throwDeprecation</code> property take precedence over <code>--trace-deprecation</code> and <code>process.traceDeprecation</code>.</p> <h2 id=\"util_util_format_format_args\">util.format(format[, ...args])</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.3</span> </div>\n<ul> <li>\n<code>format</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> A <code>printf</code>-like format string.</li> </ul> <p>The <code>util.format()</code> method returns a formatted string using the first argument as a <code>printf</code>-like format.</p> <p>The first argument is a string containing zero or more <em>placeholder</em> tokens. Each placeholder token is replaced with the converted value from the corresponding argument. Supported placeholders are:</p> <ul> <li>\n<code>%s</code> - String.</li> <li>\n<code>%d</code> - Number (integer or floating point value).</li> <li>\n<code>%i</code> - Integer.</li> <li>\n<code>%f</code> - Floating point value.</li> <li>\n<code>%j</code> - JSON. Replaced with the string <code>'[Circular]'</code> if the argument contains circular references.</li> <li>\n<code>%%</code> - single percent sign (<code>'%'</code>). This does not consume an argument.</li> </ul> <p>If the placeholder does not have a corresponding argument, the placeholder is not replaced.</p> <pre data-language=\"js\">util.format('%s:%s', 'foo');\n// Returns: 'foo:%s'\n</pre> <p>If there are more arguments passed to the <code>util.format()</code> method than the number of placeholders, the extra arguments are coerced into strings (for objects and symbols, <code>util.inspect()</code> is used) then concatenated to the returned string, each delimited by a space.</p> <pre data-language=\"js\">util.format('%s:%s', 'foo', 'bar', 'baz'); // 'foo:bar baz'\n</pre> <p>If the first argument is not a format string then <code>util.format()</code> returns a string that is the concatenation of all arguments separated by spaces. Each argument is converted to a string using <code>util.inspect()</code>.</p> <pre data-language=\"js\">util.format(1, 2, 3); // '1 2 3'\n</pre> <p>If only one argument is passed to <code>util.format()</code>, it is returned as it is without any formatting.</p> <pre data-language=\"js\">util.format('%% %s'); // '%% %s'\n</pre> <h2 id=\"util_util_inherits_constructor_superconstructor\">util.inherits(constructor, superConstructor)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v5.0.0</td> <td>\n<p>The <code>constructor</code> parameter can refer to an ES6 class now.</p> </td>\n</tr> <tr>\n<td>v0.3.0</td> <td>\n<p><span>Added in: v0.3.0</span></p> </td>\n</tr> </table> </details> </div>\n<p><em>Note: usage of <code>util.inherits()</code> is discouraged. Please use the ES6 <code>class</code> and <code>extends</code> keywords to get language level inheritance support. Also note that the two styles are <a href=\"https://github.com/nodejs/node/issues/4179\">semantically incompatible</a>.</em></p> <ul> <li>\n<code>constructor</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> <li>\n<code>superConstructor</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Inherit the prototype methods from one <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/constructor\">constructor</a> into another. The prototype of <code>constructor</code> will be set to a new object created from <code>superConstructor</code>.</p> <p>As an additional convenience, <code>superConstructor</code> will be accessible through the <code>constructor.super_</code> property.</p> <pre data-language=\"js\">const util = require('util');\nconst EventEmitter = require('events');\n\nfunction MyStream() {\n  EventEmitter.call(this);\n}\n\nutil.inherits(MyStream, EventEmitter);\n\nMyStream.prototype.write = function(data) {\n  this.emit('data', data);\n};\n\nconst stream = new MyStream();\n\nconsole.log(stream instanceof EventEmitter); // true\nconsole.log(MyStream.super_ === EventEmitter); // true\n\nstream.on('data', (data) =&gt; {\n  console.log(`Received data: \"${data}\"`);\n});\nstream.write('It works!'); // Received data: \"It works!\"\n</pre> <p>ES6 example using <code>class</code> and <code>extends</code></p> <pre data-language=\"js\">const EventEmitter = require('events');\n\nclass MyStream extends EventEmitter {\n  constructor() {\n    super();\n  }\n  write(data) {\n    this.emit('data', data);\n  }\n}\n\nconst stream = new MyStream();\n\nstream.on('data', (data) =&gt; {\n  console.log(`Received data: \"${data}\"`);\n});\nstream.write('With ES6');\n</pre> <h2 id=\"util_util_inspect_object_options\">util.inspect(object[, options])</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.6.0</td> <td>\n<p>Custom inspection functions can now return <code>this</code>.</p> </td>\n</tr> <tr>\n<td>v6.3.0</td> <td>\n<p>The <code>breakLength</code> option is supported now.</p> </td>\n</tr> <tr>\n<td>v6.1.0</td> <td>\n<p>The <code>maxArrayLength</code> option is supported now; in particular, long arrays are truncated by default.</p> </td>\n</tr> <tr>\n<td>v6.1.0</td> <td>\n<p>The <code>showProxy</code> option is supported now.</p> </td>\n</tr> <tr>\n<td>v0.3.0</td> <td>\n<p><span>Added in: v0.3.0</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>object</code> <span class=\"type\">&lt;any&gt;</span> Any JavaScript primitive or Object.</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>showHidden</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If <code>true</code>, the <code>object</code>'s non-enumerable symbols and properties will be included in the formatted result. Defaults to <code>false</code>.</li> <li>\n<code>depth</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the number of times to recurse while formatting the <code>object</code>. This is useful for inspecting large complicated objects. Defaults to <code>2</code>. To make it recurse indefinitely pass <code>null</code>.</li> <li>\n<code>colors</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If <code>true</code>, the output will be styled with ANSI color codes. Defaults to <code>false</code>. Colors are customizable, see <a href=\"#util_customizing_util_inspect_colors\">Customizing <code>util.inspect</code> colors</a>.</li> <li>\n<code>customInspect</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If <code>false</code>, then custom <code>inspect(depth, opts)</code> functions exported on the <code>object</code> being inspected will not be called. Defaults to <code>true</code>.</li> <li>\n<code>showProxy</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If <code>true</code>, then objects and functions that are <code>Proxy</code> objects will be introspected to show their <code>target</code> and <code>handler</code> objects. Defaults to <code>false</code>.</li> <li>\n<code>maxArrayLength</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the maximum number of array and <code>TypedArray</code> elements to include when formatting. Defaults to <code>100</code>. Set to <code>null</code> to show all array elements. Set to <code>0</code> or negative to show no array elements.</li> <li>\n<code>breakLength</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The length at which an object's keys are split across multiple lines. Set to <code>Infinity</code> to format an object as a single line. Defaults to 60 for legacy compatibility.</li> </ul> </li> </ul> <p>The <code>util.inspect()</code> method returns a string representation of <code>object</code> that is primarily useful for debugging. Additional <code>options</code> may be passed that alter certain aspects of the formatted string.</p> <p>The following example inspects all properties of the <code>util</code> object:</p> <pre data-language=\"js\">const util = require('util');\n\nconsole.log(util.inspect(util, { showHidden: true, depth: null }));\n</pre> <p>Values may supply their own custom <code>inspect(depth, opts)</code> functions, when called these receive the current <code>depth</code> in the recursive inspection, as well as the options object passed to <code>util.inspect()</code>.</p> <h3 id=\"util_customizing_util_inspect_colors\">Customizing <code>util.inspect</code> colors</h3>  <p>Color output (if enabled) of <code>util.inspect</code> is customizable globally via the <code>util.inspect.styles</code> and <code>util.inspect.colors</code> properties.</p> <p><code>util.inspect.styles</code> is a map associating a style name to a color from <code>util.inspect.colors</code>.</p> <p>The default styles and associated colors are:</p> <ul> <li>\n<code>number</code> - <code>yellow</code>\n</li> <li>\n<code>boolean</code> - <code>yellow</code>\n</li> <li>\n<code>string</code> - <code>green</code>\n</li> <li>\n<code>date</code> - <code>magenta</code>\n</li> <li>\n<code>regexp</code> - <code>red</code>\n</li> <li>\n<code>null</code> - <code>bold</code>\n</li> <li>\n<code>undefined</code> - <code>grey</code>\n</li> <li>\n<code>special</code> - <code>cyan</code> (only applied to functions at this time)</li> <li>\n<code>name</code> - (no styling)</li> </ul> <p>The predefined color codes are: <code>white</code>, <code>grey</code>, <code>black</code>, <code>blue</code>, <code>cyan</code>, <code>green</code>, <code>magenta</code>, <code>red</code> and <code>yellow</code>. There are also <code>bold</code>, <code>italic</code>, <code>underline</code> and <code>inverse</code> codes.</p> <p>Color styling uses ANSI control codes that may not be supported on all terminals.</p> <h3 id=\"util_custom_inspection_functions_on_objects\">Custom inspection functions on Objects</h3>  <p>Objects may also define their own <code>[util.inspect.custom](depth, opts)</code> (or, equivalently <code>inspect(depth, opts)</code>) function that <code>util.inspect()</code> will invoke and use the result of when inspecting the object:</p> <pre data-language=\"js\">const util = require('util');\n\nclass Box {\n  constructor(value) {\n    this.value = value;\n  }\n\n  inspect(depth, options) {\n    if (depth &lt; 0) {\n      return options.stylize('[Box]', 'special');\n    }\n\n    const newOptions = Object.assign({}, options, {\n      depth: options.depth === null ? null : options.depth - 1\n    });\n\n    // Five space padding because that's the size of \"Box&lt; \".\n    const padding = ' '.repeat(5);\n    const inner = util.inspect(this.value, newOptions).replace(/\\n/g, '\\n' + padding);\n    return options.stylize('Box', 'special') + '&lt; ' + inner + ' &gt;';\n  }\n}\n\nconst box = new Box(true);\n\nutil.inspect(box);\n// Returns: \"Box&lt; true &gt;\"\n</pre> <p>Custom <code>[util.inspect.custom](depth, opts)</code> functions typically return a string but may return a value of any type that will be formatted accordingly by <code>util.inspect()</code>.</p> <pre data-language=\"js\">const util = require('util');\n\nconst obj = { foo: 'this will not show up in the inspect() output' };\nobj[util.inspect.custom] = function(depth) {\n  return { bar: 'baz' };\n};\n\nutil.inspect(obj);\n// Returns: \"{ bar: 'baz' }\"\n</pre> <p>A custom inspection method can alternatively be provided by exposing an <code>inspect(depth, opts)</code> method on the object:</p> <pre data-language=\"js\">const util = require('util');\n\nconst obj = { foo: 'this will not show up in the inspect() output' };\nobj.inspect = function(depth) {\n  return { bar: 'baz' };\n};\n\nutil.inspect(obj);\n// Returns: \"{ bar: 'baz' }\"\n</pre> <h3 id=\"util_util_inspect_custom\">util.inspect.custom</h3> <div class=\"api_metadata\"> <span>Added in: v6.6.0</span> </div>\n<p>A Symbol that can be used to declare custom inspect functions, see <a href=\"#util_custom_inspection_functions_on_objects\">Custom inspection functions on Objects</a>.</p> <h3 id=\"util_util_inspect_defaultoptions\">util.inspect.defaultOptions</h3> <div class=\"api_metadata\"> <span>Added in: v6.4.0</span> </div>\n<p>The <code>defaultOptions</code> value allows customization of the default options used by <code>util.inspect</code>. This is useful for functions like <code>console.log</code> or <code>util.format</code> which implicitly call into <code>util.inspect</code>. It shall be set to an object containing one or more valid <a href=\"#util_util_inspect_object_options\"><code>util.inspect()</code></a> options. Setting option properties directly is also supported.</p> <pre data-language=\"js\">const util = require('util');\nconst arr = Array(101);\n\nconsole.log(arr); // logs the truncated array\nutil.inspect.defaultOptions.maxArrayLength = null;\nconsole.log(arr); // logs the full array\n</pre> <h2 id=\"util_deprecated_apis\">Deprecated APIs</h2> <p>The following APIs have been deprecated and should no longer be used. Existing applications and modules should be updated to find alternative approaches.</p> <h3 id=\"util_util_extend_target_source\">util._extend(target, source)</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.5</span><span>Deprecated since: v6.0.0</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated: Use <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"><code>Object.assign()</code></a> instead.</div>\n<p>The <code>util._extend()</code> method was never intended to be used outside of internal Node.js modules. The community found and used it anyway.</p> <p>It is deprecated and should not be used in new code. JavaScript comes with very similar built-in functionality through <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"><code>Object.assign()</code></a>.</p> <h3 id=\"util_util_debug_string\">util.debug(string)</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.0</span><span>Deprecated since: v0.11.3</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated: Use <a href=\"console#console_console_error_data_args\"><code>console.error()</code></a> instead.</div>\n<ul> <li>\n<code>string</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The message to print to <code>stderr</code>\n</li> </ul> <p>Deprecated predecessor of <code>console.error</code>.</p> <h3 id=\"util_util_error_strings\">util.error([...strings])</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.0</span><span>Deprecated since: v0.11.3</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated: Use <a href=\"console#console_console_error_data_args\"><code>console.error()</code></a> instead.</div>\n<ul> <li>\n<code>...strings</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The message to print to <code>stderr</code>\n</li> </ul> <p>Deprecated predecessor of <code>console.error</code>.</p> <h3 id=\"util_util_isarray_object\">util.isArray(object)</h3> <div class=\"api_metadata\"> <span>Added in: v0.6.0</span><span>Deprecated since: v4.0.0</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated</div>\n<ul> <li>\n<code>object</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Internal alias for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\"><code>Array.isArray</code></a>.</p> <p>Returns <code>true</code> if the given <code>object</code> is an <code>Array</code>. Otherwise, returns <code>false</code>.</p> <pre data-language=\"js\">const util = require('util');\n\nutil.isArray([]);\n// Returns: true\nutil.isArray(new Array);\n// Returns: true\nutil.isArray({});\n// Returns: false\n</pre> <h3 id=\"util_util_isboolean_object\">util.isBoolean(object)</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.5</span><span>Deprecated since: v4.0.0</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated</div>\n<ul> <li>\n<code>object</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Returns <code>true</code> if the given <code>object</code> is a <code>Boolean</code>. Otherwise, returns <code>false</code>.</p> <pre data-language=\"js\">const util = require('util');\n\nutil.isBoolean(1);\n// Returns: false\nutil.isBoolean(0);\n// Returns: false\nutil.isBoolean(false);\n// Returns: true\n</pre> <h3 id=\"util_util_isbuffer_object\">util.isBuffer(object)</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.5</span><span>Deprecated since: v4.0.0</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated: Use <a href=\"buffer#buffer_class_method_buffer_isbuffer_obj\"><code>Buffer.isBuffer()</code></a> instead.</div>\n<ul> <li>\n<code>object</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Returns <code>true</code> if the given <code>object</code> is a <code>Buffer</code>. Otherwise, returns <code>false</code>.</p> <pre data-language=\"js\">const util = require('util');\n\nutil.isBuffer({ length: 0 });\n// Returns: false\nutil.isBuffer([]);\n// Returns: false\nutil.isBuffer(Buffer.from('hello world'));\n// Returns: true\n</pre> <h3 id=\"util_util_isdate_object\">util.isDate(object)</h3> <div class=\"api_metadata\"> <span>Added in: v0.6.0</span><span>Deprecated since: v4.0.0</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated</div>\n<ul> <li>\n<code>object</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Returns <code>true</code> if the given <code>object</code> is a <code>Date</code>. Otherwise, returns <code>false</code>.</p> <pre data-language=\"js\">const util = require('util');\n\nutil.isDate(new Date());\n// Returns: true\nutil.isDate(Date());\n// false (without 'new' returns a String)\nutil.isDate({});\n// Returns: false\n</pre> <h3 id=\"util_util_iserror_object\">util.isError(object)</h3> <div class=\"api_metadata\"> <span>Added in: v0.6.0</span><span>Deprecated since: v4.0.0</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated</div>\n<ul> <li>\n<code>object</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Returns <code>true</code> if the given <code>object</code> is an <a href=\"errors#errors_class_error\"><code>Error</code></a>. Otherwise, returns <code>false</code>.</p> <pre data-language=\"js\">const util = require('util');\n\nutil.isError(new Error());\n// Returns: true\nutil.isError(new TypeError());\n// Returns: true\nutil.isError({ name: 'Error', message: 'an error occurred' });\n// Returns: false\n</pre> <p>Note that this method relies on <code>Object.prototype.toString()</code> behavior. It is possible to obtain an incorrect result when the <code>object</code> argument manipulates <code>@@toStringTag</code>.</p> <pre data-language=\"js\">const util = require('util');\nconst obj = { name: 'Error', message: 'an error occurred' };\n\nutil.isError(obj);\n// Returns: false\nobj[Symbol.toStringTag] = 'Error';\nutil.isError(obj);\n// Returns: true\n</pre> <h3 id=\"util_util_isfunction_object\">util.isFunction(object)</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.5</span><span>Deprecated since: v4.0.0</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated</div>\n<ul> <li>\n<code>object</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Returns <code>true</code> if the given <code>object</code> is a <code>Function</code>. Otherwise, returns <code>false</code>.</p> <pre data-language=\"js\">const util = require('util');\n\nfunction Foo() {}\nconst Bar = function() {};\n\nutil.isFunction({});\n// Returns: false\nutil.isFunction(Foo);\n// Returns: true\nutil.isFunction(Bar);\n// Returns: true\n</pre> <h3 id=\"util_util_isnull_object\">util.isNull(object)</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.5</span><span>Deprecated since: v4.0.0</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated</div>\n<ul> <li>\n<code>object</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Returns <code>true</code> if the given <code>object</code> is strictly <code>null</code>. Otherwise, returns <code>false</code>.</p> <pre data-language=\"js\">const util = require('util');\n\nutil.isNull(0);\n// Returns: false\nutil.isNull(undefined);\n// Returns: false\nutil.isNull(null);\n// Returns: true\n</pre> <h3 id=\"util_util_isnullorundefined_object\">util.isNullOrUndefined(object)</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.5</span><span>Deprecated since: v4.0.0</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated</div>\n<ul> <li>\n<code>object</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Returns <code>true</code> if the given <code>object</code> is <code>null</code> or <code>undefined</code>. Otherwise, returns <code>false</code>.</p> <pre data-language=\"js\">const util = require('util');\n\nutil.isNullOrUndefined(0);\n// Returns: false\nutil.isNullOrUndefined(undefined);\n// Returns: true\nutil.isNullOrUndefined(null);\n// Returns: true\n</pre> <h3 id=\"util_util_isnumber_object\">util.isNumber(object)</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.5</span><span>Deprecated since: v4.0.0</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated</div>\n<ul> <li>\n<code>object</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Returns <code>true</code> if the given <code>object</code> is a <code>Number</code>. Otherwise, returns <code>false</code>.</p> <pre data-language=\"js\">const util = require('util');\n\nutil.isNumber(false);\n// Returns: false\nutil.isNumber(Infinity);\n// Returns: true\nutil.isNumber(0);\n// Returns: true\nutil.isNumber(NaN);\n// Returns: true\n</pre> <h3 id=\"util_util_isobject_object\">util.isObject(object)</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.5</span><span>Deprecated since: v4.0.0</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated</div>\n<ul> <li>\n<code>object</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Returns <code>true</code> if the given <code>object</code> is strictly an <code>Object</code> <strong>and</strong> not a <code>Function</code>. Otherwise, returns <code>false</code>.</p> <pre data-language=\"js\">const util = require('util');\n\nutil.isObject(5);\n// Returns: false\nutil.isObject(null);\n// Returns: false\nutil.isObject({});\n// Returns: true\nutil.isObject(function(){});\n// Returns: false\n</pre> <h3 id=\"util_util_isprimitive_object\">util.isPrimitive(object)</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.5</span><span>Deprecated since: v4.0.0</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated</div>\n<ul> <li>\n<code>object</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Returns <code>true</code> if the given <code>object</code> is a primitive type. Otherwise, returns <code>false</code>.</p> <pre data-language=\"js\">const util = require('util');\n\nutil.isPrimitive(5);\n// Returns: true\nutil.isPrimitive('foo');\n// Returns: true\nutil.isPrimitive(false);\n// Returns: true\nutil.isPrimitive(null);\n// Returns: true\nutil.isPrimitive(undefined);\n// Returns: true\nutil.isPrimitive({});\n// Returns: false\nutil.isPrimitive(function() {});\n// Returns: false\nutil.isPrimitive(/^$/);\n// Returns: false\nutil.isPrimitive(new Date());\n// Returns: false\n</pre> <h3 id=\"util_util_isregexp_object\">util.isRegExp(object)</h3> <div class=\"api_metadata\"> <span>Added in: v0.6.0</span><span>Deprecated since: v4.0.0</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated</div>\n<ul> <li>\n<code>object</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Returns <code>true</code> if the given <code>object</code> is a <code>RegExp</code>. Otherwise, returns <code>false</code>.</p> <pre data-language=\"js\">const util = require('util');\n\nutil.isRegExp(/some regexp/);\n// Returns: true\nutil.isRegExp(new RegExp('another regexp'));\n// Returns: true\nutil.isRegExp({});\n// Returns: false\n</pre> <h3 id=\"util_util_isstring_object\">util.isString(object)</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.5</span><span>Deprecated since: v4.0.0</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated</div>\n<ul> <li>\n<code>object</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Returns <code>true</code> if the given <code>object</code> is a <code>string</code>. Otherwise, returns <code>false</code>.</p> <pre data-language=\"js\">const util = require('util');\n\nutil.isString('');\n// Returns: true\nutil.isString('foo');\n// Returns: true\nutil.isString(String('foo'));\n// Returns: true\nutil.isString(5);\n// Returns: false\n</pre> <h3 id=\"util_util_issymbol_object\">util.isSymbol(object)</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.5</span><span>Deprecated since: v4.0.0</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated</div>\n<ul> <li>\n<code>object</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Returns <code>true</code> if the given <code>object</code> is a <code>Symbol</code>. Otherwise, returns <code>false</code>.</p> <pre data-language=\"js\">const util = require('util');\n\nutil.isSymbol(5);\n// Returns: false\nutil.isSymbol('foo');\n// Returns: false\nutil.isSymbol(Symbol('foo'));\n// Returns: true\n</pre> <h3 id=\"util_util_isundefined_object\">util.isUndefined(object)</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.5</span><span>Deprecated since: v4.0.0</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated</div>\n<ul> <li>\n<code>object</code> <span class=\"type\">&lt;any&gt;</span>\n</li> </ul> <p>Returns <code>true</code> if the given <code>object</code> is <code>undefined</code>. Otherwise, returns <code>false</code>.</p> <pre data-language=\"js\">const util = require('util');\n\nconst foo = undefined;\nutil.isUndefined(5);\n// Returns: false\nutil.isUndefined(foo);\n// Returns: true\nutil.isUndefined(null);\n// Returns: false\n</pre> <h3 id=\"util_util_log_string\">util.log(string)</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.0</span><span>Deprecated since: v6.0.0</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated: Use a third party module instead.</div>\n<ul> <li>\n<code>string</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>The <code>util.log()</code> method prints the given <code>string</code> to <code>stdout</code> with an included timestamp.</p> <pre data-language=\"js\">const util = require('util');\n\nutil.log('Timestamped message.');\n</pre> <h3 id=\"util_util_print_strings\">util.print([...strings])</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.0</span><span>Deprecated since: v0.11.3</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated: Use <a href=\"console#console_console_log_data_args\"><code>console.log()</code></a> instead.</div>\n<p>Deprecated predecessor of <code>console.log</code>.</p> <h3 id=\"util_util_puts_strings\">util.puts([...strings])</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.0</span><span>Deprecated since: v0.11.3</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated: Use <a href=\"console#console_console_log_data_args\"><code>console.log()</code></a> instead.</div>\n<p>Deprecated predecessor of <code>console.log</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/util.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/util.html</a>\n  </p>\n</div>\n","buffer":"<h1 id=\"buffer_buffer\">Buffer</h1> <div class=\"api_stability api_stability_2\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</div>\n<p>Prior to the introduction of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> in ECMAScript 2015 (ES6), the JavaScript language had no mechanism for reading or manipulating streams of binary data. The <code>Buffer</code> class was introduced as part of the Node.js API to make it possible to interact with octet streams in the context of things like TCP streams and file system operations.</p> <p>Now that <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> has been added in ES6, the <code>Buffer</code> class implements the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a> API in a manner that is more optimized and suitable for Node.js' use cases.</p> <p>Instances of the <code>Buffer</code> class are similar to arrays of integers but correspond to fixed-sized, raw memory allocations outside the V8 heap. The size of the <code>Buffer</code> is established when it is created and cannot be resized.</p> <p>The <code>Buffer</code> class is a global within Node.js, making it unlikely that one would need to ever use <code>require('buffer').Buffer</code>.</p> <p>Examples:</p> <pre data-language=\"js\">// Creates a zero-filled Buffer of length 10.\nconst buf1 = Buffer.alloc(10);\n\n// Creates a Buffer of length 10, filled with 0x1.\nconst buf2 = Buffer.alloc(10, 1);\n\n// Creates an uninitialized buffer of length 10.\n// This is faster than calling Buffer.alloc() but the returned\n// Buffer instance might contain old data that needs to be\n// overwritten using either fill() or write().\nconst buf3 = Buffer.allocUnsafe(10);\n\n// Creates a Buffer containing [0x1, 0x2, 0x3].\nconst buf4 = Buffer.from([1, 2, 3]);\n\n// Creates a Buffer containing UTF-8 bytes [0x74, 0xc3, 0xa9, 0x73, 0x74].\nconst buf5 = Buffer.from('tést');\n\n// Creates a Buffer containing Latin-1 bytes [0x74, 0xe9, 0x73, 0x74].\nconst buf6 = Buffer.from('tést', 'latin1');\n</pre> <h2 id=\"buffer_buffer_from_buffer_alloc_and_buffer_allocunsafe\">\n<code>Buffer.from()</code>, <code>Buffer.alloc()</code>, and <code>Buffer.allocUnsafe()</code>\n</h2> <p>In versions of Node.js prior to v6, <code>Buffer</code> instances were created using the <code>Buffer</code> constructor function, which allocates the returned <code>Buffer</code> differently based on what arguments are provided:</p> <ul> <li>Passing a number as the first argument to <code>Buffer()</code> (e.g. <code>new Buffer(10)</code>), allocates a new <code>Buffer</code> object of the specified size. The memory allocated for such <code>Buffer</code> instances is <em>not</em> initialized and <em>can contain sensitive data</em>. Such <code>Buffer</code> instances <em>must</em> be initialized <em>manually</em> by using either <a href=\"#buffer_buf_fill_value_offset_end_encoding\"><code>buf.fill(0)</code></a> or by writing to the <code>Buffer</code> completely. While this behavior is <em>intentional</em> to improve performance, development experience has demonstrated that a more explicit distinction is required between creating a fast-but-uninitialized <code>Buffer</code> versus creating a slower-but-safer <code>Buffer</code>.</li> <li>Passing a string, array, or <code>Buffer</code> as the first argument copies the passed object's data into the <code>Buffer</code>.</li> <li>Passing an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> returns a <code>Buffer</code> that shares allocated memory with the given <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>.</li> </ul> <p>Because the behavior of <code>new Buffer()</code> changes significantly based on the type of value passed as the first argument, applications that do not properly validate the input arguments passed to <code>new Buffer()</code>, or that fail to appropriately initialize newly allocated <code>Buffer</code> content, can inadvertently introduce security and reliability issues into their code.</p> <p>To make the creation of <code>Buffer</code> instances more reliable and less error prone, the various forms of the <code>new Buffer()</code> constructor have been <strong>deprecated</strong> and replaced by separate <code>Buffer.from()</code>, <a href=\"#buffer_class_method_buffer_alloc_size_fill_encoding\"><code>Buffer.alloc()</code></a>, and <a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe()</code></a> methods.</p> <p><em>Developers should migrate all existing uses of the <code>new Buffer()</code> constructors to one of these new APIs.</em></p> <ul> <li>\n<a href=\"#buffer_class_method_buffer_from_array\"><code>Buffer.from(array)</code></a> returns a new <code>Buffer</code> containing a <em>copy</em> of the provided octets.</li> <li>\n<a href=\"#buffer_class_method_buffer_from_arraybuffer_byteoffset_length\"><code>Buffer.from(arrayBuffer[, byteOffset [, length]])</code></a> returns a new <code>Buffer</code> that <em>shares</em> the same allocated memory as the given <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>.</li> <li>\n<a href=\"#buffer_class_method_buffer_from_buffer\"><code>Buffer.from(buffer)</code></a> returns a new <code>Buffer</code> containing a <em>copy</em> of the contents of the given <code>Buffer</code>.</li> <li>\n<a href=\"#buffer_class_method_buffer_from_string_encoding\"><code>Buffer.from(string[, encoding])</code></a> returns a new <code>Buffer</code> containing a <em>copy</em> of the provided string.</li> <li>\n<a href=\"#buffer_class_method_buffer_alloc_size_fill_encoding\"><code>Buffer.alloc(size[, fill[, encoding]])</code></a> returns a \"filled\" <code>Buffer</code> instance of the specified size. This method can be significantly slower than <a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe(size)</code></a> but ensures that newly created <code>Buffer</code> instances never contain old and potentially sensitive data.</li> <li>\n<a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe(size)</code></a> and <a href=\"#buffer_class_method_buffer_allocunsafeslow_size\"><code>Buffer.allocUnsafeSlow(size)</code></a> each return a new <code>Buffer</code> of the specified <code>size</code> whose content <em>must</em> be initialized using either <a href=\"#buffer_buf_fill_value_offset_end_encoding\"><code>buf.fill(0)</code></a> or written to completely.</li> </ul> <p><code>Buffer</code> instances returned by <a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe()</code></a> <em>may</em> be allocated off a shared internal memory pool if <code>size</code> is less than or equal to half <a href=\"#buffer_class_property_buffer_poolsize\"><code>Buffer.poolSize</code></a>. Instances returned by <a href=\"#buffer_class_method_buffer_allocunsafeslow_size\"><code>Buffer.allocUnsafeSlow()</code></a> <em>never</em> use the shared internal memory pool.</p> <h3 id=\"buffer_the_zero_fill_buffers_command_line_option\">The <code>--zero-fill-buffers</code> command line option</h3> <div class=\"api_metadata\"> <span>Added in: v5.10.0</span> </div>\n<p>Node.js can be started using the <code>--zero-fill-buffers</code> command line option to force all newly allocated <code>Buffer</code> instances created using either <code>new Buffer(size)</code>, <a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe()</code></a>, <a href=\"#buffer_class_method_buffer_allocunsafeslow_size\"><code>Buffer.allocUnsafeSlow()</code></a> or <code>new SlowBuffer(size)</code> to be <em>automatically zero-filled</em> upon creation. Use of this flag <em>changes the default behavior</em> of these methods and <em>can have a significant impact</em> on performance. Use of the <code>--zero-fill-buffers</code> option is recommended only when necessary to enforce that newly allocated <code>Buffer</code> instances cannot contain potentially sensitive data.</p> <p>Example:</p> <pre data-language=\"txt\">$ node --zero-fill-buffers\n&gt; Buffer.allocUnsafe(5);\n&lt;Buffer 00 00 00 00 00&gt;\n</pre> <h3 id=\"buffer_what_makes_buffer_allocunsafe_and_buffer_allocunsafeslow_unsafe\">What makes <code>Buffer.allocUnsafe()</code> and <code>Buffer.allocUnsafeSlow()</code> \"unsafe\"?</h3> <p>When calling <a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe()</code></a> and <a href=\"#buffer_class_method_buffer_allocunsafeslow_size\"><code>Buffer.allocUnsafeSlow()</code></a>, the segment of allocated memory is <em>uninitialized</em> (it is not zeroed-out). While this design makes the allocation of memory quite fast, the allocated segment of memory might contain old data that is potentially sensitive. Using a <code>Buffer</code> created by <a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe()</code></a> without <em>completely</em> overwriting the memory can allow this old data to be leaked when the <code>Buffer</code> memory is read.</p> <p>While there are clear performance advantages to using <a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe()</code></a>, extra care <em>must</em> be taken in order to avoid introducing security vulnerabilities into an application.</p> <h2 id=\"buffer_buffers_and_character_encodings\">Buffers and Character Encodings</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.4.0</td> <td>\n<p>Introduced <code>latin1</code> as an alias for <code>binary</code>.</p> </td>\n</tr> <tr>\n<td>v5.0.0</td> <td>\n<p>Removed the deprecated <code>raw</code> and <code>raws</code> encodings.</p> </td>\n</tr> </table> </details> </div>\n<p><code>Buffer</code> instances are commonly used to represent sequences of encoded characters such as UTF-8, UCS2, Base64 or even Hex-encoded data. It is possible to convert back and forth between <code>Buffer</code> instances and ordinary JavaScript strings by using an explicit character encoding.</p> <p>Example:</p> <pre data-language=\"js\">const buf = Buffer.from('hello world', 'ascii');\n\n// Prints: 68656c6c6f20776f726c64\nconsole.log(buf.toString('hex'));\n\n// Prints: aGVsbG8gd29ybGQ=\nconsole.log(buf.toString('base64'));\n</pre> <p>The character encodings currently supported by Node.js include:</p> <ul> <li>\n<p><code>'ascii'</code> - for 7-bit ASCII data only. This encoding is fast and will strip the high bit if set.</p> </li> <li>\n<p><code>'utf8'</code> - Multibyte encoded Unicode characters. Many web pages and other document formats use UTF-8.</p> </li> <li>\n<p><code>'utf16le'</code> - 2 or 4 bytes, little-endian encoded Unicode characters. Surrogate pairs (U+10000 to U+10FFFF) are supported.</p> </li> <li>\n<p><code>'ucs2'</code> - Alias of <code>'utf16le'</code>.</p> </li> <li>\n<p><code>'base64'</code> - Base64 encoding. When creating a <code>Buffer</code> from a string, this encoding will also correctly accept \"URL and Filename Safe Alphabet\" as specified in <a href=\"https://tools.ietf.org/html/rfc4648#section-5\">RFC4648, Section 5</a>.</p> </li> <li>\n<p><code>'latin1'</code> - A way of encoding the <code>Buffer</code> into a one-byte encoded string (as defined by the IANA in <a href=\"https://tools.ietf.org/html/rfc1345\">RFC1345</a>, page 63, to be the Latin-1 supplement block and C0/C1 control codes).</p> </li> <li>\n<p><code>'binary'</code> - Alias for <code>'latin1'</code>.</p> </li> <li>\n<p><code>'hex'</code> - Encode each byte as two hexadecimal characters.</p> </li> </ul> <p><em>Note</em>: Today's browsers follow the <a href=\"https://encoding.spec.whatwg.org/\">WHATWG spec</a> which aliases both 'latin1' and ISO-8859-1 to win-1252. This means that while doing something like <code>http.get()</code>, if the returned charset is one of those listed in the WHATWG spec it's possible that the server actually returned win-1252-encoded data, and using <code>'latin1'</code> encoding may incorrectly decode the characters.</p> <h2 id=\"buffer_buffers_and_typedarray\">Buffers and TypedArray</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v3.0.0</td> <td>\n<p>The <code>Buffer</code>s class now inherits from <code>Uint8Array</code>.</p> </td>\n</tr> </table> </details> </div>\n<p><code>Buffer</code> instances are also <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a> instances. However, there are subtle incompatibilities with the TypedArray specification in ECMAScript 2015. For example, while <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/slice\"><code>ArrayBuffer#slice()</code></a> creates a copy of the slice, the implementation of <a href=\"#buffer_buf_slice_start_end\"><code>Buffer#slice()</code></a> creates a view over the existing <code>Buffer</code> without copying, making <a href=\"#buffer_buf_slice_start_end\"><code>Buffer#slice()</code></a> far more efficient.</p> <p>It is also possible to create new <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances from a <code>Buffer</code> with the following caveats:</p> <ol> <li>\n<p>The <code>Buffer</code> object's memory is copied to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a>, not shared.</p> </li> <li>\n<p>The <code>Buffer</code> object's memory is interpreted as an array of distinct elements, and not as a byte array of the target type. That is, <code>new Uint32Array(Buffer.from([1, 2, 3, 4]))</code> creates a 4-element <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a> with elements <code>[1, 2, 3, 4]</code>, not a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a> with a single element <code>[0x1020304]</code> or <code>[0x4030201]</code>.</p> </li> </ol> <p>It is possible to create a new <code>Buffer</code> that shares the same allocated memory as a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instance by using the TypeArray object's <code>.buffer</code> property.</p> <p>Example:</p> <pre data-language=\"js\">const arr = new Uint16Array(2);\n\narr[0] = 5000;\narr[1] = 4000;\n\n// Copies the contents of `arr`\nconst buf1 = Buffer.from(arr);\n\n// Shares memory with `arr`\nconst buf2 = Buffer.from(arr.buffer);\n\n// Prints: &lt;Buffer 88 a0&gt;\nconsole.log(buf1);\n\n// Prints: &lt;Buffer 88 13 a0 0f&gt;\nconsole.log(buf2);\n\narr[1] = 6000;\n\n// Prints: &lt;Buffer 88 a0&gt;\nconsole.log(buf1);\n\n// Prints: &lt;Buffer 88 13 70 17&gt;\nconsole.log(buf2);\n</pre> <p>Note that when creating a <code>Buffer</code> using a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a>'s <code>.buffer</code>, it is possible to use only a portion of the underlying <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> by passing in <code>byteOffset</code> and <code>length</code> parameters.</p> <p>Example:</p> <pre data-language=\"js\">const arr = new Uint16Array(20);\nconst buf = Buffer.from(arr.buffer, 0, 16);\n\n// Prints: 16\nconsole.log(buf.length);\n</pre> <p>The <code>Buffer.from()</code> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from\"><code>TypedArray.from()</code></a> have different signatures and implementations. Specifically, the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> variants accept a second argument that is a mapping function that is invoked on every element of the typed array:</p> <ul> <li><code>TypedArray.from(source[, mapFn[, thisArg]])</code></li> </ul> <p>The <code>Buffer.from()</code> method, however, does not support the use of a mapping function:</p> <ul> <li><a href=\"#buffer_class_method_buffer_from_array\"><code>Buffer.from(array)</code></a></li> <li><a href=\"#buffer_class_method_buffer_from_buffer\"><code>Buffer.from(buffer)</code></a></li> <li><a href=\"#buffer_class_method_buffer_from_arraybuffer_byteoffset_length\"><code>Buffer.from(arrayBuffer[, byteOffset [, length]])</code></a></li> <li><a href=\"#buffer_class_method_buffer_from_string_encoding\"><code>Buffer.from(string[, encoding])</code></a></li> </ul> <h2 id=\"buffer_buffers_and_es6_iteration\">Buffers and ES6 iteration</h2> <p><code>Buffer</code> instances can be iterated over using the ECMAScript 2015 (ES6) <code>for..of</code> syntax.</p> <p>Example:</p> <pre data-language=\"js\">const buf = Buffer.from([1, 2, 3]);\n\n// Prints:\n//   1\n//   2\n//   3\nfor (const b of buf) {\n  console.log(b);\n}\n</pre> <p>Additionally, the <a href=\"#buffer_buf_values\"><code>buf.values()</code></a>, <a href=\"#buffer_buf_keys\"><code>buf.keys()</code></a>, and <a href=\"#buffer_buf_entries\"><code>buf.entries()</code></a> methods can be used to create iterators.</p> <h2 id=\"buffer_class_buffer\">Class: Buffer</h2> <p>The <code>Buffer</code> class is a global type for dealing with binary data directly. It can be constructed in a variety of ways.</p> <h3 id=\"buffer_new_buffer_array\">new Buffer(array)</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.2.1</td> <td>\n<p>Calling this constructor no longer emits a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>Calling this constructor emits a deprecation warning now.</p> </td>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p><span>Deprecated since: v6.0.0</span></p> </td>\n</tr> </table> </details> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated: Use <a href=\"#buffer_class_method_buffer_from_array\"><code>Buffer.from(array)</code></a> instead.</div>\n<ul> <li>\n<code>array</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> An array of bytes to copy from</li> </ul> <p>Allocates a new <code>Buffer</code> using an <code>array</code> of octets.</p> <p>Example:</p> <pre data-language=\"js\">// Creates a new Buffer containing the UTF-8 bytes of the string 'buffer'\nconst buf = new Buffer([0x62, 0x75, 0x66, 0x66, 0x65, 0x72]);\n</pre> <h3 id=\"buffer_new_buffer_arraybuffer_byteoffset_length\">new Buffer(arrayBuffer[, byteOffset [, length]])</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.2.1</td> <td>\n<p>Calling this constructor no longer emits a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>Calling this constructor emits a deprecation warning now.</p> </td>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>The <code>byteOffset</code> and <code>length</code> parameters are supported now.</p> </td>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p><span>Deprecated since: v6.0.0</span></p> </td>\n</tr> <tr>\n<td>v3.0.0</td> <td>\n<p><span>Added in: v3.0.0</span></p> </td>\n</tr> </table> </details> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated: Use <a href=\"#buffer_class_method_buffer_from_arraybuffer_byteoffset_length\"><code>Buffer.from(arrayBuffer[, byteOffset [, length]])</code></a> instead.</div>\n<ul> <li>\n<code>arrayBuffer</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\" class=\"type\">&lt;ArrayBuffer&gt;</a> An <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or the <code>.buffer</code> property of a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a>.</li> <li>\n<code>byteOffset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Index of first byte to expose. <strong>Default:</strong> <code>0</code>\n</li> <li>\n<code>length</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Number of bytes to expose. <strong>Default:</strong> <code>arrayBuffer.length - byteOffset</code>\n</li> </ul> <p>This creates a view of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> without copying the underlying memory. For example, when passed a reference to the <code>.buffer</code> property of a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instance, the newly created <code>Buffer</code> will share the same allocated memory as the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a>.</p> <p>The optional <code>byteOffset</code> and <code>length</code> arguments specify a memory range within the <code>arrayBuffer</code> that will be shared by the <code>Buffer</code>.</p> <p>Example:</p> <pre data-language=\"js\">const arr = new Uint16Array(2);\n\narr[0] = 5000;\narr[1] = 4000;\n\n// Shares memory with `arr`\nconst buf = new Buffer(arr.buffer);\n\n// Prints: &lt;Buffer 88 13 a0 0f&gt;\nconsole.log(buf);\n\n// Changing the original Uint16Array changes the Buffer also\narr[1] = 6000;\n\n// Prints: &lt;Buffer 88 13 70 17&gt;\nconsole.log(buf);\n</pre> <h3 id=\"buffer_new_buffer_buffer\">new Buffer(buffer)</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.2.1</td> <td>\n<p>Calling this constructor no longer emits a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>Calling this constructor emits a deprecation warning now.</p> </td>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p><span>Deprecated since: v6.0.0</span></p> </td>\n</tr> </table> </details> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated: Use <a href=\"#buffer_class_method_buffer_from_buffer\"><code>Buffer.from(buffer)</code></a> instead.</div>\n<ul> <li>\n<code>buffer</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> An existing <code>Buffer</code> to copy data from</li> </ul> <p>Copies the passed <code>buffer</code> data onto a new <code>Buffer</code> instance.</p> <p>Example:</p> <pre data-language=\"js\">const buf1 = new Buffer('buffer');\nconst buf2 = new Buffer(buf1);\n\nbuf1[0] = 0x61;\n\n// Prints: auffer\nconsole.log(buf1.toString());\n\n// Prints: buffer\nconsole.log(buf2.toString());\n</pre> <h3 id=\"buffer_new_buffer_size\">new Buffer(size)</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.2.1</td> <td>\n<p>Calling this constructor no longer emits a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>Calling this constructor emits a deprecation warning now.</p> </td>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p><span>Deprecated since: v6.0.0</span></p> </td>\n</tr> </table> </details> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated: Use <a href=\"#buffer_class_method_buffer_alloc_size_fill_encoding\"><code>Buffer.alloc()</code></a> instead (also see <a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe()</code></a>).</div>\n<ul> <li>\n<code>size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The desired length of the new <code>Buffer</code>\n</li> </ul> <p>Allocates a new <code>Buffer</code> of <code>size</code> bytes. If the <code>size</code> is larger than <a href=\"#buffer_buffer_kmaxlength\"><code>buffer.kMaxLength</code></a> or smaller than 0, a <a href=\"errors#errors_class_rangeerror\"><code>RangeError</code></a> will be thrown. A zero-length <code>Buffer</code> will be created if <code>size</code> is 0.</p> <p>Unlike <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffers</code></a>, the underlying memory for <code>Buffer</code> instances created in this way is <em>not initialized</em>. The contents of a newly created <code>Buffer</code> are unknown and <em>could contain sensitive data</em>. Use <a href=\"#buffer_class_method_buffer_alloc_size_fill_encoding\"><code>Buffer.alloc(size)</code></a> instead to initialize a <code>Buffer</code> to zeroes.</p> <p>Example:</p> <pre data-language=\"js\">const buf = new Buffer(10);\n\n// Prints: (contents may vary): &lt;Buffer 48 21 4b 00 00 00 00 00 30 dd&gt;\nconsole.log(buf);\n\nbuf.fill(0);\n\n// Prints: &lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;\nconsole.log(buf);\n</pre> <h3 id=\"buffer_new_buffer_string_encoding\">new Buffer(string[, encoding])</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.2.1</td> <td>\n<p>Calling this constructor no longer emits a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>Calling this constructor emits a deprecation warning now.</p> </td>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p><span>Deprecated since: v6.0.0</span></p> </td>\n</tr> </table> </details> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated: Use <a href=\"#buffer_class_method_buffer_from_string_encoding\"><code>Buffer.from(string[, encoding])</code></a> instead.</div>\n<ul> <li>\n<code>string</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> String to encode</li> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The encoding of <code>string</code>. <strong>Default:</strong> <code>'utf8'</code>\n</li> </ul> <p>Creates a new <code>Buffer</code> containing the given JavaScript string <code>string</code>. If provided, the <code>encoding</code> parameter identifies the character encoding of <code>string</code>.</p> <p>Examples:</p> <pre data-language=\"js\">const buf1 = new Buffer('this is a tést');\n\n// Prints: this is a tést\nconsole.log(buf1.toString());\n\n// Prints: this is a tC)st\nconsole.log(buf1.toString('ascii'));\n\n\nconst buf2 = new Buffer('7468697320697320612074c3a97374', 'hex');\n\n// Prints: this is a tést\nconsole.log(buf2.toString());\n</pre> <h3 id=\"buffer_class_method_buffer_alloc_size_fill_encoding\">Class Method: Buffer.alloc(size[, fill[, encoding]])</h3> <div class=\"api_metadata\"> <span>Added in: v5.10.0</span> </div>\n<ul> <li>\n<code>size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The desired length of the new <code>Buffer</code>\n</li> <li>\n<code>fill</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> A value to pre-fill the new <code>Buffer</code> with. <strong>Default:</strong> <code>0</code>\n</li> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> If <code>fill</code> is a string, this is its encoding. <strong>Default:</strong> <code>'utf8'</code>\n</li> </ul> <p>Allocates a new <code>Buffer</code> of <code>size</code> bytes. If <code>fill</code> is <code>undefined</code>, the <code>Buffer</code> will be <em>zero-filled</em>.</p> <p>Example:</p> <pre data-language=\"js\">const buf = Buffer.alloc(5);\n\n// Prints: &lt;Buffer 00 00 00 00 00&gt;\nconsole.log(buf);\n</pre> <p>Allocates a new <code>Buffer</code> of <code>size</code> bytes. If the <code>size</code> is larger than <a href=\"#buffer_buffer_kmaxlength\"><code>buffer.kMaxLength</code></a> or smaller than 0, a <a href=\"errors#errors_class_rangeerror\"><code>RangeError</code></a> will be thrown. A zero-length <code>Buffer</code> will be created if <code>size</code> is 0.</p> <p>If <code>fill</code> is specified, the allocated <code>Buffer</code> will be initialized by calling <a href=\"#buffer_buf_fill_value_offset_end_encoding\"><code>buf.fill(fill)</code></a>.</p> <p>Example:</p> <pre data-language=\"js\">const buf = Buffer.alloc(5, 'a');\n\n// Prints: &lt;Buffer 61 61 61 61 61&gt;\nconsole.log(buf);\n</pre> <p>If both <code>fill</code> and <code>encoding</code> are specified, the allocated <code>Buffer</code> will be initialized by calling <a href=\"#buffer_buf_fill_value_offset_end_encoding\"><code>buf.fill(fill, encoding)</code></a>.</p> <p>Example:</p> <pre data-language=\"js\">const buf = Buffer.alloc(11, 'aGVsbG8gd29ybGQ=', 'base64');\n\n// Prints: &lt;Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64&gt;\nconsole.log(buf);\n</pre> <p>Calling <a href=\"#buffer_class_method_buffer_alloc_size_fill_encoding\"><code>Buffer.alloc()</code></a> can be significantly slower than the alternative <a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe()</code></a> but ensures that the newly created <code>Buffer</code> instance contents will <em>never contain sensitive data</em>.</p> <p>A <code>TypeError</code> will be thrown if <code>size</code> is not a number.</p> <h3 id=\"buffer_class_method_buffer_allocunsafe_size\">Class Method: Buffer.allocUnsafe(size)</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>Passing a negative <code>size</code> will now throw an error.</p> </td>\n</tr> <tr>\n<td>v5.10.0</td> <td>\n<p><span>Added in: v5.10.0</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The desired length of the new <code>Buffer</code>\n</li> </ul> <p>Allocates a new <code>Buffer</code> of <code>size</code> bytes. If the <code>size</code> is larger than <a href=\"#buffer_buffer_kmaxlength\"><code>buffer.kMaxLength</code></a> or smaller than 0, a <a href=\"errors#errors_class_rangeerror\"><code>RangeError</code></a> will be thrown. A zero-length <code>Buffer</code> will be created if <code>size</code> is 0.</p> <p>The underlying memory for <code>Buffer</code> instances created in this way is <em>not initialized</em>. The contents of the newly created <code>Buffer</code> are unknown and <em>may contain sensitive data</em>. Use <a href=\"#buffer_class_method_buffer_alloc_size_fill_encoding\"><code>Buffer.alloc()</code></a> instead to initialize <code>Buffer</code> instances to zeroes.</p> <p>Example:</p> <pre data-language=\"js\">const buf = Buffer.allocUnsafe(10);\n\n// Prints: (contents may vary): &lt;Buffer a0 8b 28 3f 01 00 00 00 50 32&gt;\nconsole.log(buf);\n\nbuf.fill(0);\n\n// Prints: &lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;\nconsole.log(buf);\n</pre> <p>A <code>TypeError</code> will be thrown if <code>size</code> is not a number.</p> <p>Note that the <code>Buffer</code> module pre-allocates an internal <code>Buffer</code> instance of size <a href=\"#buffer_class_property_buffer_poolsize\"><code>Buffer.poolSize</code></a> that is used as a pool for the fast allocation of new <code>Buffer</code> instances created using <a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe()</code></a> and the deprecated <code>new Buffer(size)</code> constructor only when <code>size</code> is less than or equal to <code>Buffer.poolSize &gt;&gt; 1</code> (floor of <a href=\"#buffer_class_property_buffer_poolsize\"><code>Buffer.poolSize</code></a> divided by two).</p> <p>Use of this pre-allocated internal memory pool is a key difference between calling <code>Buffer.alloc(size, fill)</code> vs. <code>Buffer.allocUnsafe(size).fill(fill)</code>. Specifically, <code>Buffer.alloc(size, fill)</code> will <em>never</em> use the internal <code>Buffer</code> pool, while <code>Buffer.allocUnsafe(size).fill(fill)</code> <em>will</em> use the internal <code>Buffer</code> pool if <code>size</code> is less than or equal to half <a href=\"#buffer_class_property_buffer_poolsize\"><code>Buffer.poolSize</code></a>. The difference is subtle but can be important when an application requires the additional performance that <a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe()</code></a> provides.</p> <h3 id=\"buffer_class_method_buffer_allocunsafeslow_size\">Class Method: Buffer.allocUnsafeSlow(size)</h3> <div class=\"api_metadata\"> <span>Added in: v5.10.0</span> </div>\n<ul> <li>\n<code>size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The desired length of the new <code>Buffer</code>\n</li> </ul> <p>Allocates a new <code>Buffer</code> of <code>size</code> bytes. If the <code>size</code> is larger than <a href=\"#buffer_buffer_kmaxlength\"><code>buffer.kMaxLength</code></a> or smaller than 0, a <a href=\"errors#errors_class_rangeerror\"><code>RangeError</code></a> will be thrown. A zero-length <code>Buffer</code> will be created if <code>size</code> is 0.</p> <p>The underlying memory for <code>Buffer</code> instances created in this way is <em>not initialized</em>. The contents of the newly created <code>Buffer</code> are unknown and <em>may contain sensitive data</em>. Use <a href=\"#buffer_buf_fill_value_offset_end_encoding\"><code>buf.fill(0)</code></a> to initialize such <code>Buffer</code> instances to zeroes.</p> <p>When using <a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe()</code></a> to allocate new <code>Buffer</code> instances, allocations under 4KB are, by default, sliced from a single pre-allocated <code>Buffer</code>. This allows applications to avoid the garbage collection overhead of creating many individually allocated <code>Buffer</code> instances. This approach improves both performance and memory usage by eliminating the need to track and cleanup as many <code>Persistent</code> objects.</p> <p>However, in the case where a developer may need to retain a small chunk of memory from a pool for an indeterminate amount of time, it may be appropriate to create an un-pooled <code>Buffer</code> instance using <code>Buffer.allocUnsafeSlow()</code> then copy out the relevant bits.</p> <p>Example:</p> <pre data-language=\"js\">// Need to keep around a few small chunks of memory\nconst store = [];\n\nsocket.on('readable', () =&gt; {\n  const data = socket.read();\n\n  // Allocate for retained data\n  const sb = Buffer.allocUnsafeSlow(10);\n\n  // Copy the data into the new allocation\n  data.copy(sb, 0, 0, 10);\n\n  store.push(sb);\n});\n</pre> <p>Use of <code>Buffer.allocUnsafeSlow()</code> should be used only as a last resort <em>after</em> a developer has observed undue memory retention in their applications.</p> <p>A <code>TypeError</code> will be thrown if <code>size</code> is not a number.</p> <h3 id=\"buffer_class_method_buffer_bytelength_string_encoding\">Class Method: Buffer.byteLength(string[, encoding])</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>Passing invalid input will now throw an error.</p> </td>\n</tr> <tr>\n<td>v5.10.0</td> <td>\n<p>The <code>string</code> parameter can now be any <code>TypedArray</code>, <code>DataView</code> or <code>ArrayBuffer</code>.</p> </td>\n</tr> <tr>\n<td>v0.1.90</td> <td>\n<p><span>Added in: v0.1.90</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>string</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\" class=\"type\">&lt;TypedArray&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\" class=\"type\">&lt;DataView&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\" class=\"type\">&lt;ArrayBuffer&gt;</a> A value to calculate the length of</li> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> If <code>string</code> is a string, this is its encoding. <strong>Default:</strong> <code>'utf8'</code>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The number of bytes contained within <code>string</code>\n</li> </ul> <p>Returns the actual byte length of a string. This is not the same as <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length\"><code>String.prototype.length</code></a> since that returns the number of <em>characters</em> in a string.</p> <p><em>Note</em> that for <code>'base64'</code> and <code>'hex'</code>, this function assumes valid input. For strings that contain non-Base64/Hex-encoded data (e.g. whitespace), the return value might be greater than the length of a <code>Buffer</code> created from the string.</p> <p>Example:</p> <pre data-language=\"js\">const str = '\\u00bd + \\u00bc = \\u00be';\n\n// Prints: ½ + ¼ = ¾: 9 characters, 12 bytes\nconsole.log(`${str}: ${str.length} characters, ` +\n            `${Buffer.byteLength(str, 'utf8')} bytes`);\n</pre> <p>When <code>string</code> is a <code>Buffer</code>/<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>/<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a>/<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>, the actual byte length is returned.</p> <h3 id=\"buffer_class_method_buffer_compare_buf1_buf2\">Class Method: Buffer.compare(buf1, buf2)</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.13</span> </div>\n<ul> <li>\n<code>buf1</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>buf2</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>Compares <code>buf1</code> to <code>buf2</code> typically for the purpose of sorting arrays of <code>Buffer</code> instances. This is equivalent to calling <a href=\"#buffer_buf_compare_target_targetstart_targetend_sourcestart_sourceend\"><code>buf1.compare(buf2)</code></a>.</p> <p>Example:</p> <pre data-language=\"js\">const buf1 = Buffer.from('1234');\nconst buf2 = Buffer.from('0123');\nconst arr = [buf1, buf2];\n\n// Prints: [ &lt;Buffer 30 31 32 33&gt;, &lt;Buffer 31 32 33 34&gt; ]\n// (This result is equal to: [buf2, buf1])\nconsole.log(arr.sort(Buffer.compare));\n</pre> <h3 id=\"buffer_class_method_buffer_concat_list_totallength\">Class Method: Buffer.concat(list[, totalLength])</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.11</span> </div>\n<ul> <li>\n<code>list</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> List of <code>Buffer</code> instances to concat</li> <li>\n<code>totalLength</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Total length of the <code>Buffer</code> instances in <code>list</code> when concatenated</li> <li>Returns: <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> </ul> <p>Returns a new <code>Buffer</code> which is the result of concatenating all the <code>Buffer</code> instances in the <code>list</code> together.</p> <p>If the list has no items, or if the <code>totalLength</code> is 0, then a new zero-length <code>Buffer</code> is returned.</p> <p>If <code>totalLength</code> is not provided, it is calculated from the <code>Buffer</code> instances in <code>list</code>. This however causes an additional loop to be executed in order to calculate the <code>totalLength</code>, so it is faster to provide the length explicitly if it is already known.</p> <p>If <code>totalLength</code> is provided, it is coerced to an unsigned integer. If the combined length of the <code>Buffer</code>s in <code>list</code> exceeds <code>totalLength</code>, the result is truncated to <code>totalLength</code>.</p> <p>Example: Create a single <code>Buffer</code> from a list of three <code>Buffer</code> instances</p> <pre data-language=\"js\">const buf1 = Buffer.alloc(10);\nconst buf2 = Buffer.alloc(14);\nconst buf3 = Buffer.alloc(18);\nconst totalLength = buf1.length + buf2.length + buf3.length;\n\n// Prints: 42\nconsole.log(totalLength);\n\nconst bufA = Buffer.concat([buf1, buf2, buf3], totalLength);\n\n// Prints: &lt;Buffer 00 00 00 00 ...&gt;\nconsole.log(bufA);\n\n// Prints: 42\nconsole.log(bufA.length);\n</pre> <h3 id=\"buffer_class_method_buffer_from_array\">Class Method: Buffer.from(array)</h3> <div class=\"api_metadata\"> <span>Added in: v5.10.0</span> </div>\n<ul> <li>\n<code>array</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a>\n</li> </ul> <p>Allocates a new <code>Buffer</code> using an <code>array</code> of octets.</p> <p>Example:</p> <pre data-language=\"js\">// Creates a new Buffer containing UTF-8 bytes of the string 'buffer'\nconst buf = Buffer.from([0x62, 0x75, 0x66, 0x66, 0x65, 0x72]);\n</pre> <p>A <code>TypeError</code> will be thrown if <code>array</code> is not an <code>Array</code>.</p> <h3 id=\"buffer_class_method_buffer_from_arraybuffer_byteoffset_length\">Class Method: Buffer.from(arrayBuffer[, byteOffset[, length]])</h3> <div class=\"api_metadata\"> <span>Added in: v5.10.0</span> </div>\n<ul> <li>\n<code>arrayBuffer</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\" class=\"type\">&lt;ArrayBuffer&gt;</a> An <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or the <code>.buffer</code> property of a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a>.</li> <li>\n<code>byteOffset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Index of first byte to expose. <strong>Default:</strong> <code>0</code>\n</li> <li>\n<code>length</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Number of bytes to expose. <strong>Default:</strong> <code>arrayBuffer.length - byteOffset</code>\n</li> </ul> <p>This creates a view of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> without copying the underlying memory. For example, when passed a reference to the <code>.buffer</code> property of a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instance, the newly created <code>Buffer</code> will share the same allocated memory as the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a>.</p> <p>Example:</p> <pre data-language=\"js\">const arr = new Uint16Array(2);\n\narr[0] = 5000;\narr[1] = 4000;\n\n// Shares memory with `arr`\nconst buf = Buffer.from(arr.buffer);\n\n// Prints: &lt;Buffer 88 13 a0 0f&gt;\nconsole.log(buf);\n\n// Changing the original Uint16Array changes the Buffer also\narr[1] = 6000;\n\n// Prints: &lt;Buffer 88 13 70 17&gt;\nconsole.log(buf);\n</pre> <p>The optional <code>byteOffset</code> and <code>length</code> arguments specify a memory range within the <code>arrayBuffer</code> that will be shared by the <code>Buffer</code>.</p> <p>Example:</p> <pre data-language=\"js\">const ab = new ArrayBuffer(10);\nconst buf = Buffer.from(ab, 0, 2);\n\n// Prints: 2\nconsole.log(buf.length);\n</pre> <p>A <code>TypeError</code> will be thrown if <code>arrayBuffer</code> is not an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>.</p> <h3 id=\"buffer_class_method_buffer_from_buffer\">Class Method: Buffer.from(buffer)</h3> <div class=\"api_metadata\"> <span>Added in: v5.10.0</span> </div>\n<ul> <li>\n<code>buffer</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> An existing <code>Buffer</code> to copy data from</li> </ul> <p>Copies the passed <code>buffer</code> data onto a new <code>Buffer</code> instance.</p> <p>Example:</p> <pre data-language=\"js\">const buf1 = Buffer.from('buffer');\nconst buf2 = Buffer.from(buf1);\n\nbuf1[0] = 0x61;\n\n// Prints: auffer\nconsole.log(buf1.toString());\n\n// Prints: buffer\nconsole.log(buf2.toString());\n</pre> <p>A <code>TypeError</code> will be thrown if <code>buffer</code> is not a <code>Buffer</code>.</p> <h3 id=\"buffer_class_method_buffer_from_string_encoding\">Class Method: Buffer.from(string[, encoding])</h3> <div class=\"api_metadata\"> <span>Added in: v5.10.0</span> </div>\n<ul> <li>\n<code>string</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> A string to encode.</li> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The encoding of <code>string</code>. <strong>Default:</strong> <code>'utf8'</code>\n</li> </ul> <p>Creates a new <code>Buffer</code> containing the given JavaScript string <code>string</code>. If provided, the <code>encoding</code> parameter identifies the character encoding of <code>string</code>.</p> <p>Examples:</p> <pre data-language=\"js\">const buf1 = Buffer.from('this is a tést');\n\n// Prints: this is a tést\nconsole.log(buf1.toString());\n\n// Prints: this is a tC)st\nconsole.log(buf1.toString('ascii'));\n\n\nconst buf2 = Buffer.from('7468697320697320612074c3a97374', 'hex');\n\n// Prints: this is a tést\nconsole.log(buf2.toString());\n</pre> <p>A <code>TypeError</code> will be thrown if <code>str</code> is not a string.</p> <h3 id=\"buffer_class_method_buffer_isbuffer_obj\">Class Method: Buffer.isBuffer(obj)</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.101</span> </div>\n<ul> <li>\n<code>obj</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a>\n</li> </ul> <p>Returns <code>true</code> if <code>obj</code> is a <code>Buffer</code>, <code>false</code> otherwise.</p> <h3 id=\"buffer_class_method_buffer_isencoding_encoding\">Class Method: Buffer.isEncoding(encoding)</h3> <div class=\"api_metadata\"> <span>Added in: v0.9.1</span> </div>\n<ul> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> A character encoding name to check</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a>\n</li> </ul> <p>Returns <code>true</code> if <code>encoding</code> contains a supported character encoding, or <code>false</code> otherwise.</p> <h3 id=\"buffer_class_property_buffer_poolsize\">Class Property: Buffer.poolSize</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.3</span> </div>\n<ul> <li>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> <strong>Default:</strong> <code>8192</code>\n</li> </ul> <p>This is the number of bytes used to determine the size of pre-allocated, internal <code>Buffer</code> instances used for pooling. This value may be modified.</p> <h3 id=\"buffer_buf_index\">buf[index]</h3> \n<p>The index operator <code>[index]</code> can be used to get and set the octet at position <code>index</code> in <code>buf</code>. The values refer to individual bytes, so the legal value range is between <code>0x00</code> and <code>0xFF</code> (hex) or <code>0</code> and <code>255</code> (decimal).</p> <p>This operator is inherited from <code>Uint8Array</code>, so its behavior on out-of-bounds access is the same as <code>UInt8Array</code> - that is, getting returns <code>undefined</code> and setting does nothing.</p> <p>Example: Copy an ASCII string into a <code>Buffer</code>, one byte at a time</p> <pre data-language=\"js\">const str = 'Node.js';\nconst buf = Buffer.allocUnsafe(str.length);\n\nfor (let i = 0; i &lt; str.length ; i++) {\n  buf[i] = str.charCodeAt(i);\n}\n\n// Prints: Node.js\nconsole.log(buf.toString('ascii'));\n</pre> <h3 id=\"buffer_buf_compare_target_targetstart_targetend_sourcestart_sourceend\">buf.compare(target[, targetStart[, targetEnd[, sourceStart[, sourceEnd]]]])</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v5.11.0</td> <td>\n<p>Additional parameters for specifying offsets are supported now.</p> </td>\n</tr> <tr>\n<td>v0.11.13</td> <td>\n<p><span>Added in: v0.11.13</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>target</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> A <code>Buffer</code> to compare to</li> <li>\n<code>targetStart</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The offset within <code>target</code> at which to begin comparison. <strong>Default:</strong> <code>0</code>\n</li> <li>\n<code>targetEnd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The offset with <code>target</code> at which to end comparison (not inclusive). Ignored when <code>targetStart</code> is <code>undefined</code>. <strong>Default:</strong> <code>target.length</code>\n</li> <li>\n<code>sourceStart</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The offset within <code>buf</code> at which to begin comparison. Ignored when <code>targetStart</code> is <code>undefined</code>. <strong>Default:</strong> <code>0</code>\n</li> <li>\n<code>sourceEnd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The offset within <code>buf</code> at which to end comparison (not inclusive). Ignored when <code>targetStart</code> is <code>undefined</code>. <strong>Default:</strong> <a href=\"#buffer_buf_length\"><code>buf.length</code></a>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>Compares <code>buf</code> with <code>target</code> and returns a number indicating whether <code>buf</code> comes before, after, or is the same as <code>target</code> in sort order. Comparison is based on the actual sequence of bytes in each <code>Buffer</code>.</p> <ul> <li>\n<code>0</code> is returned if <code>target</code> is the same as <code>buf</code>\n</li> <li>\n<code>1</code> is returned if <code>target</code> should come <em>before</em> <code>buf</code> when sorted.</li> <li>\n<code>-1</code> is returned if <code>target</code> should come <em>after</em> <code>buf</code> when sorted.</li> </ul> <p>Examples:</p> <pre data-language=\"js\">const buf1 = Buffer.from('ABC');\nconst buf2 = Buffer.from('BCD');\nconst buf3 = Buffer.from('ABCD');\n\n// Prints: 0\nconsole.log(buf1.compare(buf1));\n\n// Prints: -1\nconsole.log(buf1.compare(buf2));\n\n// Prints: -1\nconsole.log(buf1.compare(buf3));\n\n// Prints: 1\nconsole.log(buf2.compare(buf1));\n\n// Prints: 1\nconsole.log(buf2.compare(buf3));\n\n// Prints: [ &lt;Buffer 41 42 43&gt;, &lt;Buffer 41 42 43 44&gt;, &lt;Buffer 42 43 44&gt; ]\n// (This result is equal to: [buf1, buf3, buf2])\nconsole.log([buf1, buf2, buf3].sort(Buffer.compare));\n</pre> <p>The optional <code>targetStart</code>, <code>targetEnd</code>, <code>sourceStart</code>, and <code>sourceEnd</code> arguments can be used to limit the comparison to specific ranges within <code>target</code> and <code>buf</code> respectively.</p> <p>Examples:</p> <pre data-language=\"js\">const buf1 = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8, 9]);\nconst buf2 = Buffer.from([5, 6, 7, 8, 9, 1, 2, 3, 4]);\n\n// Prints: 0\nconsole.log(buf1.compare(buf2, 5, 9, 0, 4));\n\n// Prints: -1\nconsole.log(buf1.compare(buf2, 0, 6, 4));\n\n// Prints: 1\nconsole.log(buf1.compare(buf2, 5, 6, 5));\n</pre> <p>A <code>RangeError</code> will be thrown if: <code>targetStart &lt; 0</code>, <code>sourceStart &lt; 0</code>, <code>targetEnd &gt; target.byteLength</code> or <code>sourceEnd &gt; source.byteLength</code>.</p> <h3 id=\"buffer_buf_copy_target_targetstart_sourcestart_sourceend\">buf.copy(target[, targetStart[, sourceStart[, sourceEnd]]])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<ul> <li>\n<code>target</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\" class=\"type\">&lt;Uint8Array&gt;</a> A <code>Buffer</code> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a> to copy into.</li> <li>\n<code>targetStart</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The offset within <code>target</code> at which to begin copying to. <strong>Default:</strong> <code>0</code>\n</li> <li>\n<code>sourceStart</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The offset within <code>buf</code> at which to begin copying from. Ignored when <code>targetStart</code> is <code>undefined</code>. <strong>Default:</strong> <code>0</code>\n</li> <li>\n<code>sourceEnd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The offset within <code>buf</code> at which to stop copying (not inclusive). Ignored when <code>sourceStart</code> is <code>undefined</code>. <strong>Default:</strong> <a href=\"#buffer_buf_length\"><code>buf.length</code></a>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The number of bytes copied.</li> </ul> <p>Copies data from a region of <code>buf</code> to a region in <code>target</code> even if the <code>target</code> memory region overlaps with <code>buf</code>.</p> <p>Example: Create two <code>Buffer</code> instances, <code>buf1</code> and <code>buf2</code>, and copy <code>buf1</code> from byte 16 through byte 19 into <code>buf2</code>, starting at the 8th byte in <code>buf2</code></p> <pre data-language=\"js\">const buf1 = Buffer.allocUnsafe(26);\nconst buf2 = Buffer.allocUnsafe(26).fill('!');\n\nfor (let i = 0 ; i &lt; 26 ; i++) {\n  // 97 is the decimal ASCII value for 'a'\n  buf1[i] = i + 97;\n}\n\nbuf1.copy(buf2, 8, 16, 20);\n\n// Prints: !!!!!!!!qrst!!!!!!!!!!!!!\nconsole.log(buf2.toString('ascii', 0, 25));\n</pre> <p>Example: Create a single <code>Buffer</code> and copy data from one region to an overlapping region within the same <code>Buffer</code></p> <pre data-language=\"js\">const buf = Buffer.allocUnsafe(26);\n\nfor (let i = 0 ; i &lt; 26 ; i++) {\n  // 97 is the decimal ASCII value for 'a'\n  buf[i] = i + 97;\n}\n\nbuf.copy(buf, 0, 4, 10);\n\n// Prints: efghijghijklmnopqrstuvwxyz\nconsole.log(buf.toString());\n</pre> <h3 id=\"buffer_buf_entries\">buf.entries()</h3> <div class=\"api_metadata\"> <span>Added in: v1.1.0</span> </div>\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol\" class=\"type\">&lt;Iterator&gt;</a>\n</li> </ul> <p>Creates and returns an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">iterator</a> of <code>[index, byte]</code> pairs from the contents of <code>buf</code>.</p> <p>Example: Log the entire contents of a <code>Buffer</code></p> <pre data-language=\"js\">const buf = Buffer.from('buffer');\n\n// Prints:\n//   [0, 98]\n//   [1, 117]\n//   [2, 102]\n//   [3, 102]\n//   [4, 101]\n//   [5, 114]\nfor (const pair of buf.entries()) {\n  console.log(pair);\n}\n</pre> <h3 id=\"buffer_buf_equals_otherbuffer\">buf.equals(otherBuffer)</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.13</span> </div>\n<ul> <li>\n<code>otherBuffer</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> A <code>Buffer</code> to compare to</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a>\n</li> </ul> <p>Returns <code>true</code> if both <code>buf</code> and <code>otherBuffer</code> have exactly the same bytes, <code>false</code> otherwise.</p> <p>Examples:</p> <pre data-language=\"js\">const buf1 = Buffer.from('ABC');\nconst buf2 = Buffer.from('414243', 'hex');\nconst buf3 = Buffer.from('ABCD');\n\n// Prints: true\nconsole.log(buf1.equals(buf2));\n\n// Prints: false\nconsole.log(buf1.equals(buf3));\n</pre> <h3 id=\"buffer_buf_fill_value_offset_end_encoding\">buf.fill(value[, offset[, end]][, encoding])</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v5.7.0</td> <td>\n<p>The <code>encoding</code> parameter is supported now.</p> </td>\n</tr> <tr>\n<td>v0.5.0</td> <td>\n<p><span>Added in: v0.5.0</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The value to fill <code>buf</code> with</li> <li>\n<code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Where to start filling <code>buf</code>. <strong>Default:</strong> <code>0</code>\n</li> <li>\n<code>end</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Where to stop filling <code>buf</code> (not inclusive). <strong>Default:</strong> <a href=\"#buffer_buf_length\"><code>buf.length</code></a>\n</li> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> If <code>value</code> is a string, this is its encoding. <strong>Default:</strong> <code>'utf8'</code>\n</li> <li>Returns: <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> A reference to <code>buf</code>\n</li> </ul> <p>Fills <code>buf</code> with the specified <code>value</code>. If the <code>offset</code> and <code>end</code> are not given, the entire <code>buf</code> will be filled. This is meant to be a small simplification to allow the creation and filling of a <code>Buffer</code> to be done on a single line.</p> <p>Example: Fill a <code>Buffer</code> with the ASCII character <code>'h'</code></p> <pre data-language=\"js\">const b = Buffer.allocUnsafe(50).fill('h');\n\n// Prints: hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh\nconsole.log(b.toString());\n</pre> <p><code>value</code> is coerced to a <code>uint32</code> value if it is not a String or Integer.</p> <p>If the final write of a <code>fill()</code> operation falls on a multi-byte character, then only the first bytes of that character that fit into <code>buf</code> are written.</p> <p>Example: Fill a <code>Buffer</code> with a two-byte character</p> <pre data-language=\"js\">// Prints: &lt;Buffer c8 a2 c8&gt;\nconsole.log(Buffer.allocUnsafe(3).fill('\\u0222'));\n</pre> <h3 id=\"buffer_buf_includes_value_byteoffset_encoding\">buf.includes(value[, byteOffset][, encoding])</h3> <div class=\"api_metadata\"> <span>Added in: v5.3.0</span> </div>\n<ul> <li>\n<code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> What to search for</li> <li>\n<code>byteOffset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Where to begin searching in <code>buf</code>. <strong>Default:</strong> <code>0</code>\n</li> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> If <code>value</code> is a string, this is its encoding. <strong>Default:</strong> <code>'utf8'</code>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <code>true</code> if <code>value</code> was found in <code>buf</code>, <code>false</code> otherwise</li> </ul> <p>Equivalent to <a href=\"#buffer_buf_indexof_value_byteoffset_encoding\"><code>buf.indexOf() !== -1</code></a>.</p> <p>Examples:</p> <pre data-language=\"js\">const buf = Buffer.from('this is a buffer');\n\n// Prints: true\nconsole.log(buf.includes('this'));\n\n// Prints: true\nconsole.log(buf.includes('is'));\n\n// Prints: true\nconsole.log(buf.includes(Buffer.from('a buffer')));\n\n// Prints: true\n// (97 is the decimal ASCII value for 'a')\nconsole.log(buf.includes(97));\n\n// Prints: false\nconsole.log(buf.includes(Buffer.from('a buffer example')));\n\n// Prints: true\nconsole.log(buf.includes(Buffer.from('a buffer example').slice(0, 8)));\n\n// Prints: false\nconsole.log(buf.includes('this', 4));\n</pre> <h3 id=\"buffer_buf_indexof_value_byteoffset_encoding\">buf.indexOf(value[, byteOffset][, encoding])</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v5.7.0, v4.4.0</td> <td>\n<p>When <code>encoding</code> is being passed, the <code>byteOffset</code> parameter is no longer required.</p> </td>\n</tr> <tr>\n<td>v1.5.0</td> <td>\n<p><span>Added in: v1.5.0</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> What to search for</li> <li>\n<code>byteOffset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Where to begin searching in <code>buf</code>. <strong>Default:</strong> <code>0</code>\n</li> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> If <code>value</code> is a string, this is its encoding. <strong>Default:</strong> <code>'utf8'</code>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The index of the first occurrence of <code>value</code> in <code>buf</code> or <code>-1</code> if <code>buf</code> does not contain <code>value</code>\n</li> </ul> <p>If <code>value</code> is:</p> <ul> <li>a string, <code>value</code> is interpreted according to the character encoding in <code>encoding</code>.</li> <li>a <code>Buffer</code>, <code>value</code> will be used in its entirety. To compare a partial <code>Buffer</code> use <a href=\"#buffer_buf_slice_start_end\"><code>buf.slice()</code></a>.</li> <li>a number, <code>value</code> will be interpreted as an unsigned 8-bit integer value between <code>0</code> and <code>255</code>.</li> </ul> <p>Examples:</p> <pre data-language=\"js\">const buf = Buffer.from('this is a buffer');\n\n// Prints: 0\nconsole.log(buf.indexOf('this'));\n\n// Prints: 2\nconsole.log(buf.indexOf('is'));\n\n// Prints: 8\nconsole.log(buf.indexOf(Buffer.from('a buffer')));\n\n// Prints: 8\n// (97 is the decimal ASCII value for 'a')\nconsole.log(buf.indexOf(97));\n\n// Prints: -1\nconsole.log(buf.indexOf(Buffer.from('a buffer example')));\n\n// Prints: 8\nconsole.log(buf.indexOf(Buffer.from('a buffer example').slice(0, 8)));\n\n\nconst utf16Buffer = Buffer.from('\\u039a\\u0391\\u03a3\\u03a3\\u0395', 'ucs2');\n\n// Prints: 4\nconsole.log(utf16Buffer.indexOf('\\u03a3', 0, 'ucs2'));\n\n// Prints: 6\nconsole.log(utf16Buffer.indexOf('\\u03a3', -4, 'ucs2'));\n</pre> <p>If <code>value</code> is not a string, number, or <code>Buffer</code>, this method will throw a <code>TypeError</code>. If <code>value</code> is a number, it will be coerced to a valid byte value, an integer between 0 and 255.</p> <p>If <code>byteOffset</code> is not a number, it will be coerced to a number. Any arguments that coerce to <code>NaN</code> or 0, like <code>{}</code>, <code>[]</code>, <code>null</code> or <code>undefined</code>, will search the whole buffer. This behavior matches <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\"><code>String#indexOf()</code></a>.</p> <pre data-language=\"js\">const b = Buffer.from('abcdef');\n\n// Passing a value that's a number, but not a valid byte\n// Prints: 2, equivalent to searching for 99 or 'c'\nconsole.log(b.indexOf(99.9));\nconsole.log(b.indexOf(256 + 99));\n\n// Passing a byteOffset that coerces to NaN or 0\n// Prints: 1, searching the whole buffer\nconsole.log(b.indexOf('b', undefined));\nconsole.log(b.indexOf('b', {}));\nconsole.log(b.indexOf('b', null));\nconsole.log(b.indexOf('b', []));\n</pre> <h3 id=\"buffer_buf_keys\">buf.keys()</h3> <div class=\"api_metadata\"> <span>Added in: v1.1.0</span> </div>\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol\" class=\"type\">&lt;Iterator&gt;</a>\n</li> </ul> <p>Creates and returns an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">iterator</a> of <code>buf</code> keys (indices).</p> <p>Example:</p> <pre data-language=\"js\">const buf = Buffer.from('buffer');\n\n// Prints:\n//   0\n//   1\n//   2\n//   3\n//   4\n//   5\nfor (const key of buf.keys()) {\n  console.log(key);\n}\n</pre> <h3 id=\"buffer_buf_lastindexof_value_byteoffset_encoding\">buf.lastIndexOf(value[, byteOffset][, encoding])</h3> <div class=\"api_metadata\"> <span>Added in: v6.0.0</span> </div>\n<ul> <li>\n<code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> What to search for</li> <li>\n<code>byteOffset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Where to begin searching in <code>buf</code>. <strong>Default:</strong> <a href=\"#buffer_buf_length\"><code>buf.length</code></a><code>- 1</code>\n</li> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> If <code>value</code> is a string, this is its encoding. <strong>Default:</strong> <code>'utf8'</code>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The index of the last occurrence of <code>value</code> in <code>buf</code> or <code>-1</code> if <code>buf</code> does not contain <code>value</code>\n</li> </ul> <p>Identical to <a href=\"#buffer_buf_indexof_value_byteoffset_encoding\"><code>buf.indexOf()</code></a>, except <code>buf</code> is searched from back to front instead of front to back.</p> <p>Examples:</p> <pre data-language=\"js\">const buf = Buffer.from('this buffer is a buffer');\n\n// Prints: 0\nconsole.log(buf.lastIndexOf('this'));\n\n// Prints: 17\nconsole.log(buf.lastIndexOf('buffer'));\n\n// Prints: 17\nconsole.log(buf.lastIndexOf(Buffer.from('buffer')));\n\n// Prints: 15\n// (97 is the decimal ASCII value for 'a')\nconsole.log(buf.lastIndexOf(97));\n\n// Prints: -1\nconsole.log(buf.lastIndexOf(Buffer.from('yolo')));\n\n// Prints: 5\nconsole.log(buf.lastIndexOf('buffer', 5));\n\n// Prints: -1\nconsole.log(buf.lastIndexOf('buffer', 4));\n\n\nconst utf16Buffer = Buffer.from('\\u039a\\u0391\\u03a3\\u03a3\\u0395', 'ucs2');\n\n// Prints: 6\nconsole.log(utf16Buffer.lastIndexOf('\\u03a3', undefined, 'ucs2'));\n\n// Prints: 4\nconsole.log(utf16Buffer.lastIndexOf('\\u03a3', -5, 'ucs2'));\n</pre> <p>If <code>value</code> is not a string, number, or <code>Buffer</code>, this method will throw a <code>TypeError</code>. If <code>value</code> is a number, it will be coerced to a valid byte value, an integer between 0 and 255.</p> <p>If <code>byteOffset</code> is not a number, it will be coerced to a number. Any arguments that coerce to <code>NaN</code>, like <code>{}</code> or <code>undefined</code>, will search the whole buffer. This behavior matches <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf\"><code>String#lastIndexOf()</code></a>.</p> <pre data-language=\"js\">const b = Buffer.from('abcdef');\n\n// Passing a value that's a number, but not a valid byte\n// Prints: 2, equivalent to searching for 99 or 'c'\nconsole.log(b.lastIndexOf(99.9));\nconsole.log(b.lastIndexOf(256 + 99));\n\n// Passing a byteOffset that coerces to NaN\n// Prints: 1, searching the whole buffer\nconsole.log(b.lastIndexOf('b', undefined));\nconsole.log(b.lastIndexOf('b', {}));\n\n// Passing a byteOffset that coerces to 0\n// Prints: -1, equivalent to passing 0\nconsole.log(b.lastIndexOf('b', null));\nconsole.log(b.lastIndexOf('b', []));\n</pre> <h3 id=\"buffer_buf_length\">buf.length</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a></li> </ul> <p>Returns the amount of memory allocated for <code>buf</code> in bytes. Note that this does not necessarily reflect the amount of \"usable\" data within <code>buf</code>.</p> <p>Example: Create a <code>Buffer</code> and write a shorter ASCII string to it</p> <pre data-language=\"js\">const buf = Buffer.alloc(1234);\n\n// Prints: 1234\nconsole.log(buf.length);\n\nbuf.write('some string', 0, 'ascii');\n\n// Prints: 1234\nconsole.log(buf.length);\n</pre> <p>While the <code>length</code> property is not immutable, changing the value of <code>length</code> can result in undefined and inconsistent behavior. Applications that wish to modify the length of a <code>Buffer</code> should therefore treat <code>length</code> as read-only and use <a href=\"#buffer_buf_slice_start_end\"><code>buf.slice()</code></a> to create a new <code>Buffer</code>.</p> <p>Examples:</p> <pre data-language=\"js\">let buf = Buffer.allocUnsafe(10);\n\nbuf.write('abcdefghj', 0, 'ascii');\n\n// Prints: 10\nconsole.log(buf.length);\n\nbuf = buf.slice(0, 5);\n\n// Prints: 5\nconsole.log(buf.length);\n</pre> <h3 id=\"buffer_buf_readdoublebe_offset_noassert\">buf.readDoubleBE(offset[, noAssert])</h3> <h3 id=\"buffer_buf_readdoublele_offset_noassert\">buf.readDoubleLE(offset[, noAssert])</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.15</span> </div>\n<ul> <li>\n<code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Where to start reading. Must satisfy: <code>0 &lt;= offset &lt;= buf.length - 8</code>\n</li> <li>\n<code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Skip <code>offset</code> validation? <strong>Default:</strong> <code>false</code>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> </ul> <p>Reads a 64-bit double from <code>buf</code> at the specified <code>offset</code> with specified endian format (<code>readDoubleBE()</code> returns big endian, <code>readDoubleLE()</code> returns little endian).</p> <p>Setting <code>noAssert</code> to <code>true</code> allows <code>offset</code> to be beyond the end of <code>buf</code>, but the result should be considered undefined behavior.</p> <p>Examples:</p> <pre data-language=\"js\">const buf = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8]);\n\n// Prints: 8.20788039913184e-304\nconsole.log(buf.readDoubleBE());\n\n// Prints: 5.447603722011605e-270\nconsole.log(buf.readDoubleLE());\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readDoubleLE(1));\n\n// Warning: reads passed end of buffer!\n// This will result in a segmentation fault! Don't do this!\nconsole.log(buf.readDoubleLE(1, true));\n</pre> <h3 id=\"buffer_buf_readfloatbe_offset_noassert\">buf.readFloatBE(offset[, noAssert])</h3> <h3 id=\"buffer_buf_readfloatle_offset_noassert\">buf.readFloatLE(offset[, noAssert])</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.15</span> </div>\n<ul> <li>\n<code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Where to start reading. Must satisfy: <code>0 &lt;= offset &lt;= buf.length - 4</code>\n</li> <li>\n<code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Skip <code>offset</code> validation? <strong>Default:</strong> <code>false</code>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> </ul> <p>Reads a 32-bit float from <code>buf</code> at the specified <code>offset</code> with specified endian format (<code>readFloatBE()</code> returns big endian, <code>readFloatLE()</code> returns little endian).</p> <p>Setting <code>noAssert</code> to <code>true</code> allows <code>offset</code> to be beyond the end of <code>buf</code>, but the result should be considered undefined behavior.</p> <p>Examples:</p> <pre data-language=\"js\">const buf = Buffer.from([1, 2, 3, 4]);\n\n// Prints: 2.387939260590663e-38\nconsole.log(buf.readFloatBE());\n\n// Prints: 1.539989614439558e-36\nconsole.log(buf.readFloatLE());\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readFloatLE(1));\n\n// Warning: reads passed end of buffer!\n// This will result in a segmentation fault! Don't do this!\nconsole.log(buf.readFloatLE(1, true));\n</pre> <h3 id=\"buffer_buf_readint8_offset_noassert\">buf.readInt8(offset[, noAssert])</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.0</span> </div>\n<ul> <li>\n<code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Where to start reading. Must satisfy: <code>0 &lt;= offset &lt;= buf.length - 1</code>\n</li> <li>\n<code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Skip <code>offset</code> validation? <strong>Default:</strong> <code>false</code>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>Reads a signed 8-bit integer from <code>buf</code> at the specified <code>offset</code>.</p> <p>Setting <code>noAssert</code> to <code>true</code> allows <code>offset</code> to be beyond the end of <code>buf</code>, but the result should be considered undefined behavior.</p> <p>Integers read from a <code>Buffer</code> are interpreted as two's complement signed values.</p> <p>Examples:</p> <pre data-language=\"js\">const buf = Buffer.from([-1, 5]);\n\n// Prints: -1\nconsole.log(buf.readInt8(0));\n\n// Prints: 5\nconsole.log(buf.readInt8(1));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readInt8(2));\n</pre> <h3 id=\"buffer_buf_readint16be_offset_noassert\">buf.readInt16BE(offset[, noAssert])</h3> <h3 id=\"buffer_buf_readint16le_offset_noassert\">buf.readInt16LE(offset[, noAssert])</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.5</span> </div>\n<ul> <li>\n<code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Where to start reading. Must satisfy: <code>0 &lt;= offset &lt;= buf.length - 2</code>\n</li> <li>\n<code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Skip <code>offset</code> validation? <strong>Default:</strong> <code>false</code>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>Reads a signed 16-bit integer from <code>buf</code> at the specified <code>offset</code> with the specified endian format (<code>readInt16BE()</code> returns big endian, <code>readInt16LE()</code> returns little endian).</p> <p>Setting <code>noAssert</code> to <code>true</code> allows <code>offset</code> to be beyond the end of <code>buf</code>, but the result should be considered undefined behavior.</p> <p>Integers read from a <code>Buffer</code> are interpreted as two's complement signed values.</p> <p>Examples:</p> <pre data-language=\"js\">const buf = Buffer.from([0, 5]);\n\n// Prints: 5\nconsole.log(buf.readInt16BE());\n\n// Prints: 1280\nconsole.log(buf.readInt16LE());\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readInt16LE(1));\n</pre> <h3 id=\"buffer_buf_readint32be_offset_noassert\">buf.readInt32BE(offset[, noAssert])</h3> <h3 id=\"buffer_buf_readint32le_offset_noassert\">buf.readInt32LE(offset[, noAssert])</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.5</span> </div>\n<ul> <li>\n<code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Where to start reading. Must satisfy: <code>0 &lt;= offset &lt;= buf.length - 4</code>\n</li> <li>\n<code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Skip <code>offset</code> validation? <strong>Default:</strong> <code>false</code>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>Reads a signed 32-bit integer from <code>buf</code> at the specified <code>offset</code> with the specified endian format (<code>readInt32BE()</code> returns big endian, <code>readInt32LE()</code> returns little endian).</p> <p>Setting <code>noAssert</code> to <code>true</code> allows <code>offset</code> to be beyond the end of <code>buf</code>, but the result should be considered undefined behavior.</p> <p>Integers read from a <code>Buffer</code> are interpreted as two's complement signed values.</p> <p>Examples:</p> <pre data-language=\"js\">const buf = Buffer.from([0, 0, 0, 5]);\n\n// Prints: 5\nconsole.log(buf.readInt32BE());\n\n// Prints: 83886080\nconsole.log(buf.readInt32LE());\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readInt32LE(1));\n</pre> <h3 id=\"buffer_buf_readintbe_offset_bytelength_noassert\">buf.readIntBE(offset, byteLength[, noAssert])</h3> <h3 id=\"buffer_buf_readintle_offset_bytelength_noassert\">buf.readIntLE(offset, byteLength[, noAssert])</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.15</span> </div>\n<ul> <li>\n<code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Where to start reading. Must satisfy: <code>0 &lt;= offset &lt;= buf.length - byteLength</code>\n</li> <li>\n<code>byteLength</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> How many bytes to read. Must satisfy: <code>0 &lt; byteLength &lt;= 6</code>\n</li> <li>\n<code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Skip <code>offset</code> and <code>byteLength</code> validation? <strong>Default:</strong> <code>false</code>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>Reads <code>byteLength</code> number of bytes from <code>buf</code> at the specified <code>offset</code> and interprets the result as a two's complement signed value. Supports up to 48 bits of accuracy.</p> <p>Setting <code>noAssert</code> to <code>true</code> allows <code>offset</code> to be beyond the end of <code>buf</code>, but the result should be considered undefined behavior.</p> <p>Examples:</p> <pre data-language=\"js\">const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n\n// Prints: -546f87a9cbee\nconsole.log(buf.readIntLE(0, 6).toString(16));\n\n// Prints: 1234567890ab\nconsole.log(buf.readIntBE(0, 6).toString(16));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readIntBE(1, 6).toString(16));\n</pre> <h3 id=\"buffer_buf_readuint8_offset_noassert\">buf.readUInt8(offset[, noAssert])</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.0</span> </div>\n<ul> <li>\n<code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Where to start reading. Must satisfy: <code>0 &lt;= offset &lt;= buf.length - 1</code>\n</li> <li>\n<code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Skip <code>offset</code> validation? <strong>Default:</strong> <code>false</code>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>Reads an unsigned 8-bit integer from <code>buf</code> at the specified <code>offset</code>.</p> <p>Setting <code>noAssert</code> to <code>true</code> allows <code>offset</code> to be beyond the end of <code>buf</code>, but the result should be considered undefined behavior.</p> <p>Examples:</p> <pre data-language=\"js\">const buf = Buffer.from([1, -2]);\n\n// Prints: 1\nconsole.log(buf.readUInt8(0));\n\n// Prints: 254\nconsole.log(buf.readUInt8(1));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readUInt8(2));\n</pre> <h3 id=\"buffer_buf_readuint16be_offset_noassert\">buf.readUInt16BE(offset[, noAssert])</h3> <h3 id=\"buffer_buf_readuint16le_offset_noassert\">buf.readUInt16LE(offset[, noAssert])</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.5</span> </div>\n<ul> <li>\n<code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Where to start reading. Must satisfy: <code>0 &lt;= offset &lt;= buf.length - 2</code>\n</li> <li>\n<code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Skip <code>offset</code> validation? <strong>Default:</strong> <code>false</code>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>Reads an unsigned 16-bit integer from <code>buf</code> at the specified <code>offset</code> with specified endian format (<code>readUInt16BE()</code> returns big endian, <code>readUInt16LE()</code> returns little endian).</p> <p>Setting <code>noAssert</code> to <code>true</code> allows <code>offset</code> to be beyond the end of <code>buf</code>, but the result should be considered undefined behavior.</p> <p>Examples:</p> <pre data-language=\"js\">const buf = Buffer.from([0x12, 0x34, 0x56]);\n\n// Prints: 1234\nconsole.log(buf.readUInt16BE(0).toString(16));\n\n// Prints: 3412\nconsole.log(buf.readUInt16LE(0).toString(16));\n\n// Prints: 3456\nconsole.log(buf.readUInt16BE(1).toString(16));\n\n// Prints: 5634\nconsole.log(buf.readUInt16LE(1).toString(16));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readUInt16LE(2).toString(16));\n</pre> <h3 id=\"buffer_buf_readuint32be_offset_noassert\">buf.readUInt32BE(offset[, noAssert])</h3> <h3 id=\"buffer_buf_readuint32le_offset_noassert\">buf.readUInt32LE(offset[, noAssert])</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.5</span> </div>\n<ul> <li>\n<code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Where to start reading. Must satisfy: <code>0 &lt;= offset &lt;= buf.length - 4</code>\n</li> <li>\n<code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Skip <code>offset</code> validation? <strong>Default:</strong> <code>false</code>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>Reads an unsigned 32-bit integer from <code>buf</code> at the specified <code>offset</code> with specified endian format (<code>readUInt32BE()</code> returns big endian, <code>readUInt32LE()</code> returns little endian).</p> <p>Setting <code>noAssert</code> to <code>true</code> allows <code>offset</code> to be beyond the end of <code>buf</code>, but the result should be considered undefined behavior.</p> <p>Examples:</p> <pre data-language=\"js\">const buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);\n\n// Prints: 12345678\nconsole.log(buf.readUInt32BE(0).toString(16));\n\n// Prints: 78563412\nconsole.log(buf.readUInt32LE(0).toString(16));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readUInt32LE(1).toString(16));\n</pre> <h3 id=\"buffer_buf_readuintbe_offset_bytelength_noassert\">buf.readUIntBE(offset, byteLength[, noAssert])</h3> <h3 id=\"buffer_buf_readuintle_offset_bytelength_noassert\">buf.readUIntLE(offset, byteLength[, noAssert])</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.15</span> </div>\n<ul> <li>\n<code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Where to start reading. Must satisfy: <code>0 &lt;= offset &lt;= buf.length - byteLength</code>\n</li> <li>\n<code>byteLength</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> How many bytes to read. Must satisfy: <code>0 &lt; byteLength &lt;= 6</code>\n</li> <li>\n<code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Skip <code>offset</code> and <code>byteLength</code> validation? <strong>Default:</strong> <code>false</code>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>Reads <code>byteLength</code> number of bytes from <code>buf</code> at the specified <code>offset</code> and interprets the result as an unsigned integer. Supports up to 48 bits of accuracy.</p> <p>Setting <code>noAssert</code> to <code>true</code> allows <code>offset</code> to be beyond the end of <code>buf</code>, but the result should be considered undefined behavior.</p> <p>Examples:</p> <pre data-language=\"js\">const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n\n// Prints: 1234567890ab\nconsole.log(buf.readUIntBE(0, 6).toString(16));\n\n// Prints: ab9078563412\nconsole.log(buf.readUIntLE(0, 6).toString(16));\n\n// Throws an exception: RangeError: Index out of range\nconsole.log(buf.readUIntBE(1, 6).toString(16));\n</pre> <h3 id=\"buffer_buf_slice_start_end\">buf.slice([start[, end]])</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.1.0, v6.9.2</td> <td>\n<p>Coercing the offsets to integers now handles values outside the 32-bit integer range properly.</p> </td>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>All offsets are now coerced to integers before doing any calculations with them.</p> </td>\n</tr> <tr>\n<td>v0.3.0</td> <td>\n<p><span>Added in: v0.3.0</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>start</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Where the new <code>Buffer</code> will start. <strong>Default:</strong> <code>0</code>\n</li> <li>\n<code>end</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Where the new <code>Buffer</code> will end (not inclusive). <strong>Default:</strong> <a href=\"#buffer_buf_length\"><code>buf.length</code></a>\n</li> <li>Returns: <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> </ul> <p>Returns a new <code>Buffer</code> that references the same memory as the original, but offset and cropped by the <code>start</code> and <code>end</code> indices.</p> <p><strong>Note that modifying the new <code>Buffer</code> slice will modify the memory in the original <code>Buffer</code> because the allocated memory of the two objects overlap.</strong></p> <p>Example: Create a <code>Buffer</code> with the ASCII alphabet, take a slice, and then modify one byte from the original <code>Buffer</code></p> <pre data-language=\"js\">const buf1 = Buffer.allocUnsafe(26);\n\nfor (let i = 0 ; i &lt; 26 ; i++) {\n  // 97 is the decimal ASCII value for 'a'\n  buf1[i] = i + 97;\n}\n\nconst buf2 = buf1.slice(0, 3);\n\n// Prints: abc\nconsole.log(buf2.toString('ascii', 0, buf2.length));\n\nbuf1[0] = 33;\n\n// Prints: !bc\nconsole.log(buf2.toString('ascii', 0, buf2.length));\n</pre> <p>Specifying negative indexes causes the slice to be generated relative to the end of <code>buf</code> rather than the beginning.</p> <p>Examples:</p> <pre data-language=\"js\">const buf = Buffer.from('buffer');\n\n// Prints: buffe\n// (Equivalent to buf.slice(0, 5))\nconsole.log(buf.slice(-6, -1).toString());\n\n// Prints: buff\n// (Equivalent to buf.slice(0, 4))\nconsole.log(buf.slice(-6, -2).toString());\n\n// Prints: uff\n// (Equivalent to buf.slice(1, 4))\nconsole.log(buf.slice(-5, -2).toString());\n</pre> <h3 id=\"buffer_buf_swap16\">buf.swap16()</h3> <div class=\"api_metadata\"> <span>Added in: v5.10.0</span> </div>\n<ul> <li>Returns: <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> A reference to <code>buf</code>\n</li> </ul> <p>Interprets <code>buf</code> as an array of unsigned 16-bit integers and swaps the byte-order <em>in-place</em>. Throws a <code>RangeError</code> if <a href=\"#buffer_buf_length\"><code>buf.length</code></a> is not a multiple of 2.</p> <p>Examples:</p> <pre data-language=\"js\">const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\n\n// Prints: &lt;Buffer 01 02 03 04 05 06 07 08&gt;\nconsole.log(buf1);\n\nbuf1.swap16();\n\n// Prints: &lt;Buffer 02 01 04 03 06 05 08 07&gt;\nconsole.log(buf1);\n\n\nconst buf2 = Buffer.from([0x1, 0x2, 0x3]);\n\n// Throws an exception: RangeError: Buffer size must be a multiple of 16-bits\nbuf2.swap16();\n</pre> <h3 id=\"buffer_buf_swap32\">buf.swap32()</h3> <div class=\"api_metadata\"> <span>Added in: v5.10.0</span> </div>\n<ul> <li>Returns: <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> A reference to <code>buf</code>\n</li> </ul> <p>Interprets <code>buf</code> as an array of unsigned 32-bit integers and swaps the byte-order <em>in-place</em>. Throws a <code>RangeError</code> if <a href=\"#buffer_buf_length\"><code>buf.length</code></a> is not a multiple of 4.</p> <p>Examples:</p> <pre data-language=\"js\">const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\n\n// Prints: &lt;Buffer 01 02 03 04 05 06 07 08&gt;\nconsole.log(buf1);\n\nbuf1.swap32();\n\n// Prints: &lt;Buffer 04 03 02 01 08 07 06 05&gt;\nconsole.log(buf1);\n\n\nconst buf2 = Buffer.from([0x1, 0x2, 0x3]);\n\n// Throws an exception: RangeError: Buffer size must be a multiple of 32-bits\nbuf2.swap32();\n</pre> <h3 id=\"buffer_buf_swap64\">buf.swap64()</h3> <div class=\"api_metadata\"> <span>Added in: v6.3.0</span> </div>\n<ul> <li>Returns: <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> A reference to <code>buf</code>\n</li> </ul> <p>Interprets <code>buf</code> as an array of 64-bit numbers and swaps the byte-order <em>in-place</em>. Throws a <code>RangeError</code> if <a href=\"#buffer_buf_length\"><code>buf.length</code></a> is not a multiple of 8.</p> <p>Examples:</p> <pre data-language=\"js\">const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\n\n// Prints: &lt;Buffer 01 02 03 04 05 06 07 08&gt;\nconsole.log(buf1);\n\nbuf1.swap64();\n\n// Prints: &lt;Buffer 08 07 06 05 04 03 02 01&gt;\nconsole.log(buf1);\n\n\nconst buf2 = Buffer.from([0x1, 0x2, 0x3]);\n\n// Throws an exception: RangeError: Buffer size must be a multiple of 64-bits\nbuf2.swap64();\n</pre> <p>Note that JavaScript cannot encode 64-bit integers. This method is intended for working with 64-bit floats.</p> <h3 id=\"buffer_buf_tojson\">buf.toJSON()</h3> <div class=\"api_metadata\"> <span>Added in: v0.9.2</span> </div>\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> </ul> <p>Returns a JSON representation of <code>buf</code>. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a> implicitly calls this function when stringifying a <code>Buffer</code> instance.</p> <p>Example:</p> <pre data-language=\"js\">const buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5]);\nconst json = JSON.stringify(buf);\n\n// Prints: {\"type\":\"Buffer\",\"data\":[1,2,3,4,5]}\nconsole.log(json);\n\nconst copy = JSON.parse(json, (key, value) =&gt; {\n  return value &amp;&amp; value.type === 'Buffer'\n    ? Buffer.from(value.data)\n    : value;\n});\n\n// Prints: &lt;Buffer 01 02 03 04 05&gt;\nconsole.log(copy);\n</pre> <h3 id=\"buffer_buf_tostring_encoding_start_end\">buf.toString([encoding[, start[, end]]])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<ul> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The character encoding to decode to. <strong>Default:</strong> <code>'utf8'</code>\n</li> <li>\n<code>start</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The byte offset to start decoding at. <strong>Default:</strong> <code>0</code>\n</li> <li>\n<code>end</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The byte offset to stop decoding at (not inclusive). <strong>Default:</strong> <a href=\"#buffer_buf_length\"><code>buf.length</code></a>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>Decodes <code>buf</code> to a string according to the specified character encoding in <code>encoding</code>. <code>start</code> and <code>end</code> may be passed to decode only a subset of <code>buf</code>.</p> <p>Examples:</p> <pre data-language=\"js\">const buf1 = Buffer.allocUnsafe(26);\n\nfor (let i = 0 ; i &lt; 26 ; i++) {\n  // 97 is the decimal ASCII value for 'a'\n  buf1[i] = i + 97;\n}\n\n// Prints: abcdefghijklmnopqrstuvwxyz\nconsole.log(buf1.toString('ascii'));\n\n// Prints: abcde\nconsole.log(buf1.toString('ascii', 0, 5));\n\n\nconst buf2 = Buffer.from('tést');\n\n// Prints: 74c3a97374\nconsole.log(buf2.toString('hex'));\n\n// Prints: té\nconsole.log(buf2.toString('utf8', 0, 3));\n\n// Prints: té\nconsole.log(buf2.toString(undefined, 0, 3));\n</pre> <h3 id=\"buffer_buf_values\">buf.values()</h3> <div class=\"api_metadata\"> <span>Added in: v1.1.0</span> </div>\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol\" class=\"type\">&lt;Iterator&gt;</a>\n</li> </ul> <p>Creates and returns an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">iterator</a> for <code>buf</code> values (bytes). This function is called automatically when a <code>Buffer</code> is used in a <code>for..of</code> statement.</p> <p>Examples:</p> <pre data-language=\"js\">const buf = Buffer.from('buffer');\n\n// Prints:\n//   98\n//   117\n//   102\n//   102\n//   101\n//   114\nfor (const value of buf.values()) {\n  console.log(value);\n}\n\n// Prints:\n//   98\n//   117\n//   102\n//   102\n//   101\n//   114\nfor (const value of buf) {\n  console.log(value);\n}\n</pre> <h3 id=\"buffer_buf_write_string_offset_length_encoding\">buf.write(string[, offset[, length]][, encoding])</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.90</span> </div>\n<ul> <li>\n<code>string</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> String to be written to <code>buf</code>\n</li> <li>\n<code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Where to start writing <code>string</code>. <strong>Default:</strong> <code>0</code>\n</li> <li>\n<code>length</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> How many bytes to write. <strong>Default:</strong> <code>buf.length - offset</code>\n</li> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The character encoding of <code>string</code>. <strong>Default:</strong> <code>'utf8'</code>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Number of bytes written</li> </ul> <p>Writes <code>string</code> to <code>buf</code> at <code>offset</code> according to the character encoding in <code>encoding</code>. The <code>length</code> parameter is the number of bytes to write. If <code>buf</code> did not contain enough space to fit the entire string, only a partial amount of <code>string</code> will be written. However, partially encoded characters will not be written.</p> <p>Example:</p> <pre data-language=\"js\">const buf = Buffer.allocUnsafe(256);\n\nconst len = buf.write('\\u00bd + \\u00bc = \\u00be', 0);\n\n// Prints: 12 bytes: ½ + ¼ = ¾\nconsole.log(`${len} bytes: ${buf.toString('utf8', 0, len)}`);\n</pre> <h3 id=\"buffer_buf_writedoublebe_value_offset_noassert\">buf.writeDoubleBE(value, offset[, noAssert])</h3> <h3 id=\"buffer_buf_writedoublele_value_offset_noassert\">buf.writeDoubleLE(value, offset[, noAssert])</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.15</span> </div>\n<ul> <li>\n<code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Number to be written to <code>buf</code>\n</li> <li>\n<code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Where to start writing. Must satisfy: <code>0 &lt;= offset &lt;= buf.length - 8</code>\n</li> <li>\n<code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Skip <code>value</code> and <code>offset</code> validation? <strong>Default:</strong> <code>false</code>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> <code>offset</code> plus the number of bytes written</li> </ul> <p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian format (<code>writeDoubleBE()</code> writes big endian, <code>writeDoubleLE()</code> writes little endian). <code>value</code> <em>should</em> be a valid 64-bit double. Behavior is undefined when <code>value</code> is anything other than a 64-bit double.</p> <p>Setting <code>noAssert</code> to <code>true</code> allows the encoded form of <code>value</code> to extend beyond the end of <code>buf</code>, but the result should be considered undefined behavior.</p> <p>Examples:</p> <pre data-language=\"js\">const buf = Buffer.allocUnsafe(8);\n\nbuf.writeDoubleBE(0xdeadbeefcafebabe, 0);\n\n// Prints: &lt;Buffer 43 eb d5 b7 dd f9 5f d7&gt;\nconsole.log(buf);\n\nbuf.writeDoubleLE(0xdeadbeefcafebabe, 0);\n\n// Prints: &lt;Buffer d7 5f f9 dd b7 d5 eb 43&gt;\nconsole.log(buf);\n</pre> <h3 id=\"buffer_buf_writefloatbe_value_offset_noassert\">buf.writeFloatBE(value, offset[, noAssert])</h3> <h3 id=\"buffer_buf_writefloatle_value_offset_noassert\">buf.writeFloatLE(value, offset[, noAssert])</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.15</span> </div>\n<ul> <li>\n<code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Number to be written to <code>buf</code>\n</li> <li>\n<code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Where to start writing. Must satisfy: <code>0 &lt;= offset &lt;= buf.length - 4</code>\n</li> <li>\n<code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Skip <code>value</code> and <code>offset</code> validation? <strong>Default:</strong> <code>false</code>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> <code>offset</code> plus the number of bytes written</li> </ul> <p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian format (<code>writeFloatBE()</code> writes big endian, <code>writeFloatLE()</code> writes little endian). <code>value</code> <em>should</em> be a valid 32-bit float. Behavior is undefined when <code>value</code> is anything other than a 32-bit float.</p> <p>Setting <code>noAssert</code> to <code>true</code> allows the encoded form of <code>value</code> to extend beyond the end of <code>buf</code>, but the result should be considered undefined behavior.</p> <p>Examples:</p> <pre data-language=\"js\">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeFloatBE(0xcafebabe, 0);\n\n// Prints: &lt;Buffer 4f 4a fe bb&gt;\nconsole.log(buf);\n\nbuf.writeFloatLE(0xcafebabe, 0);\n\n// Prints: &lt;Buffer bb fe 4a 4f&gt;\nconsole.log(buf);\n</pre> <h3 id=\"buffer_buf_writeint8_value_offset_noassert\">buf.writeInt8(value, offset[, noAssert])</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.0</span> </div>\n<ul> <li>\n<code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Number to be written to <code>buf</code>\n</li> <li>\n<code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Where to start writing. Must satisfy: <code>0 &lt;= offset &lt;= buf.length - 1</code>\n</li> <li>\n<code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Skip <code>value</code> and <code>offset</code> validation? <strong>Default:</strong> <code>false</code>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> <code>offset</code> plus the number of bytes written</li> </ul> <p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code>. <code>value</code> <em>should</em> be a valid signed 8-bit integer. Behavior is undefined when <code>value</code> is anything other than a signed 8-bit integer.</p> <p>Setting <code>noAssert</code> to <code>true</code> allows the encoded form of <code>value</code> to extend beyond the end of <code>buf</code>, but the result should be considered undefined behavior.</p> <p><code>value</code> is interpreted and written as a two's complement signed integer.</p> <p>Examples:</p> <pre data-language=\"js\">const buf = Buffer.allocUnsafe(2);\n\nbuf.writeInt8(2, 0);\nbuf.writeInt8(-2, 1);\n\n// Prints: &lt;Buffer 02 fe&gt;\nconsole.log(buf);\n</pre> <h3 id=\"buffer_buf_writeint16be_value_offset_noassert\">buf.writeInt16BE(value, offset[, noAssert])</h3> <h3 id=\"buffer_buf_writeint16le_value_offset_noassert\">buf.writeInt16LE(value, offset[, noAssert])</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.5</span> </div>\n<ul> <li>\n<code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Number to be written to <code>buf</code>\n</li> <li>\n<code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Where to start writing. Must satisfy: <code>0 &lt;= offset &lt;= buf.length - 2</code>\n</li> <li>\n<code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Skip <code>value</code> and <code>offset</code> validation? <strong>Default:</strong> <code>false</code>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> <code>offset</code> plus the number of bytes written</li> </ul> <p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian format (<code>writeInt16BE()</code> writes big endian, <code>writeInt16LE()</code> writes little endian). <code>value</code> <em>should</em> be a valid signed 16-bit integer. Behavior is undefined when <code>value</code> is anything other than a signed 16-bit integer.</p> <p>Setting <code>noAssert</code> to <code>true</code> allows the encoded form of <code>value</code> to extend beyond the end of <code>buf</code>, but the result should be considered undefined behavior.</p> <p><code>value</code> is interpreted and written as a two's complement signed integer.</p> <p>Examples:</p> <pre data-language=\"js\">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeInt16BE(0x0102, 0);\nbuf.writeInt16LE(0x0304, 2);\n\n// Prints: &lt;Buffer 01 02 04 03&gt;\nconsole.log(buf);\n</pre> <h3 id=\"buffer_buf_writeint32be_value_offset_noassert\">buf.writeInt32BE(value, offset[, noAssert])</h3> <h3 id=\"buffer_buf_writeint32le_value_offset_noassert\">buf.writeInt32LE(value, offset[, noAssert])</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.5</span> </div>\n<ul> <li>\n<code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Number to be written to <code>buf</code>\n</li> <li>\n<code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Where to start writing. Must satisfy: <code>0 &lt;= offset &lt;= buf.length - 4</code>\n</li> <li>\n<code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Skip <code>value</code> and <code>offset</code> validation? <strong>Default:</strong> <code>false</code>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> <code>offset</code> plus the number of bytes written</li> </ul> <p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian format (<code>writeInt32BE()</code> writes big endian, <code>writeInt32LE()</code> writes little endian). <code>value</code> <em>should</em> be a valid signed 32-bit integer. Behavior is undefined when <code>value</code> is anything other than a signed 32-bit integer.</p> <p>Setting <code>noAssert</code> to <code>true</code> allows the encoded form of <code>value</code> to extend beyond the end of <code>buf</code>, but the result should be considered undefined behavior.</p> <p><code>value</code> is interpreted and written as a two's complement signed integer.</p> <p>Examples:</p> <pre data-language=\"js\">const buf = Buffer.allocUnsafe(8);\n\nbuf.writeInt32BE(0x01020304, 0);\nbuf.writeInt32LE(0x05060708, 4);\n\n// Prints: &lt;Buffer 01 02 03 04 08 07 06 05&gt;\nconsole.log(buf);\n</pre> <h3 id=\"buffer_buf_writeintbe_value_offset_bytelength_noassert\">buf.writeIntBE(value, offset, byteLength[, noAssert])</h3> <h3 id=\"buffer_buf_writeintle_value_offset_bytelength_noassert\">buf.writeIntLE(value, offset, byteLength[, noAssert])</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.15</span> </div>\n<ul> <li>\n<code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Number to be written to <code>buf</code>\n</li> <li>\n<code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Where to start writing. Must satisfy: <code>0 &lt;= offset &lt;= buf.length - byteLength</code>\n</li> <li>\n<code>byteLength</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> How many bytes to write. Must satisfy: <code>0 &lt; byteLength &lt;= 6</code>\n</li> <li>\n<code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Skip <code>value</code>, <code>offset</code>, and <code>byteLength</code> validation? <strong>Default:</strong> <code>false</code>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> <code>offset</code> plus the number of bytes written</li> </ul> <p>Writes <code>byteLength</code> bytes of <code>value</code> to <code>buf</code> at the specified <code>offset</code>. Supports up to 48 bits of accuracy. Behavior is undefined when <code>value</code> is anything other than a signed integer.</p> <p>Setting <code>noAssert</code> to <code>true</code> allows the encoded form of <code>value</code> to extend beyond the end of <code>buf</code>, but the result should be considered undefined behavior.</p> <p>Examples:</p> <pre data-language=\"js\">const buf = Buffer.allocUnsafe(6);\n\nbuf.writeUIntBE(0x1234567890ab, 0, 6);\n\n// Prints: &lt;Buffer 12 34 56 78 90 ab&gt;\nconsole.log(buf);\n\nbuf.writeUIntLE(0x1234567890ab, 0, 6);\n\n// Prints: &lt;Buffer ab 90 78 56 34 12&gt;\nconsole.log(buf);\n</pre> <h3 id=\"buffer_buf_writeuint8_value_offset_noassert\">buf.writeUInt8(value, offset[, noAssert])</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.0</span> </div>\n<ul> <li>\n<code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Number to be written to <code>buf</code>\n</li> <li>\n<code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Where to start writing. Must satisfy: <code>0 &lt;= offset &lt;= buf.length - 1</code>\n</li> <li>\n<code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Skip <code>value</code> and <code>offset</code> validation? <strong>Default:</strong> <code>false</code>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> <code>offset</code> plus the number of bytes written</li> </ul> <p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code>. <code>value</code> <em>should</em> be a valid unsigned 8-bit integer. Behavior is undefined when <code>value</code> is anything other than an unsigned 8-bit integer.</p> <p>Setting <code>noAssert</code> to <code>true</code> allows the encoded form of <code>value</code> to extend beyond the end of <code>buf</code>, but the result should be considered undefined behavior.</p> <p>Examples:</p> <pre data-language=\"js\">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt8(0x3, 0);\nbuf.writeUInt8(0x4, 1);\nbuf.writeUInt8(0x23, 2);\nbuf.writeUInt8(0x42, 3);\n\n// Prints: &lt;Buffer 03 04 23 42&gt;\nconsole.log(buf);\n</pre> <h3 id=\"buffer_buf_writeuint16be_value_offset_noassert\">buf.writeUInt16BE(value, offset[, noAssert])</h3> <h3 id=\"buffer_buf_writeuint16le_value_offset_noassert\">buf.writeUInt16LE(value, offset[, noAssert])</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.5</span> </div>\n<ul> <li>\n<code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Number to be written to <code>buf</code>\n</li> <li>\n<code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Where to start writing. Must satisfy: <code>0 &lt;= offset &lt;= buf.length - 2</code>\n</li> <li>\n<code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Skip <code>value</code> and <code>offset</code> validation? <strong>Default:</strong> <code>false</code>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> <code>offset</code> plus the number of bytes written</li> </ul> <p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian format (<code>writeUInt16BE()</code> writes big endian, <code>writeUInt16LE()</code> writes little endian). <code>value</code> should be a valid unsigned 16-bit integer. Behavior is undefined when <code>value</code> is anything other than an unsigned 16-bit integer.</p> <p>Setting <code>noAssert</code> to <code>true</code> allows the encoded form of <code>value</code> to extend beyond the end of <code>buf</code>, but the result should be considered undefined behavior.</p> <p>Examples:</p> <pre data-language=\"js\">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt16BE(0xdead, 0);\nbuf.writeUInt16BE(0xbeef, 2);\n\n// Prints: &lt;Buffer de ad be ef&gt;\nconsole.log(buf);\n\nbuf.writeUInt16LE(0xdead, 0);\nbuf.writeUInt16LE(0xbeef, 2);\n\n// Prints: &lt;Buffer ad de ef be&gt;\nconsole.log(buf);\n</pre> <h3 id=\"buffer_buf_writeuint32be_value_offset_noassert\">buf.writeUInt32BE(value, offset[, noAssert])</h3> <h3 id=\"buffer_buf_writeuint32le_value_offset_noassert\">buf.writeUInt32LE(value, offset[, noAssert])</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.5</span> </div>\n<ul> <li>\n<code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Number to be written to <code>buf</code>\n</li> <li>\n<code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Where to start writing. Must satisfy: <code>0 &lt;= offset &lt;= buf.length - 4</code>\n</li> <li>\n<code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Skip <code>value</code> and <code>offset</code> validation? <strong>Default:</strong> <code>false</code>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> <code>offset</code> plus the number of bytes written</li> </ul> <p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian format (<code>writeUInt32BE()</code> writes big endian, <code>writeUInt32LE()</code> writes little endian). <code>value</code> should be a valid unsigned 32-bit integer. Behavior is undefined when <code>value</code> is anything other than an unsigned 32-bit integer.</p> <p>Setting <code>noAssert</code> to <code>true</code> allows the encoded form of <code>value</code> to extend beyond the end of <code>buf</code>, but the result should be considered undefined behavior.</p> <p>Examples:</p> <pre data-language=\"js\">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt32BE(0xfeedface, 0);\n\n// Prints: &lt;Buffer fe ed fa ce&gt;\nconsole.log(buf);\n\nbuf.writeUInt32LE(0xfeedface, 0);\n\n// Prints: &lt;Buffer ce fa ed fe&gt;\nconsole.log(buf);\n</pre> <h3 id=\"buffer_buf_writeuintbe_value_offset_bytelength_noassert\">buf.writeUIntBE(value, offset, byteLength[, noAssert])</h3> <h3 id=\"buffer_buf_writeuintle_value_offset_bytelength_noassert\">buf.writeUIntLE(value, offset, byteLength[, noAssert])</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.5</span> </div>\n<ul> <li>\n<code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Number to be written to <code>buf</code>\n</li> <li>\n<code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Where to start writing. Must satisfy: <code>0 &lt;= offset &lt;= buf.length - byteLength</code>\n</li> <li>\n<code>byteLength</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> How many bytes to write. Must satisfy: <code>0 &lt; byteLength &lt;= 6</code>\n</li> <li>\n<code>noAssert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Skip <code>value</code>, <code>offset</code>, and <code>byteLength</code> validation? <strong>Default:</strong> <code>false</code>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> <code>offset</code> plus the number of bytes written</li> </ul> <p>Writes <code>byteLength</code> bytes of <code>value</code> to <code>buf</code> at the specified <code>offset</code>. Supports up to 48 bits of accuracy. Behavior is undefined when <code>value</code> is anything other than an unsigned integer.</p> <p>Setting <code>noAssert</code> to <code>true</code> allows the encoded form of <code>value</code> to extend beyond the end of <code>buf</code>, but the result should be considered undefined behavior.</p> <p>Examples:</p> <pre data-language=\"js\">const buf = Buffer.allocUnsafe(6);\n\nbuf.writeUIntBE(0x1234567890ab, 0, 6);\n\n// Prints: &lt;Buffer 12 34 56 78 90 ab&gt;\nconsole.log(buf);\n\nbuf.writeUIntLE(0x1234567890ab, 0, 6);\n\n// Prints: &lt;Buffer ab 90 78 56 34 12&gt;\nconsole.log(buf);\n</pre> <h2 id=\"buffer_buffer_inspect_max_bytes\">buffer.INSPECT_MAX_BYTES</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.4</span> </div>\n<ul> <li>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> <strong>Default:</strong> <code>50</code>\n</li> </ul> <p>Returns the maximum number of bytes that will be returned when <code>buf.inspect()</code> is called. This can be overridden by user modules. See <a href=\"util#util_util_inspect_object_options\"><code>util.inspect()</code></a> for more details on <code>buf.inspect()</code> behavior.</p> <p>Note that this is a property on the <code>buffer</code> module returned by <code>require('buffer')</code>, not on the <code>Buffer</code> global or a <code>Buffer</code> instance.</p> <h2 id=\"buffer_buffer_kmaxlength\">buffer.kMaxLength</h2> <div class=\"api_metadata\"> <span>Added in: v3.0.0</span> </div>\n<ul> <li>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The largest size allowed for a single <code>Buffer</code> instance</li> </ul> <p>On 32-bit architectures, this value is <code>(2^30)-1</code> (~1GB). On 64-bit architectures, this value is <code>(2^31)-1</code> (~2GB).</p> <p>Note that this is a property on the <code>buffer</code> module returned by <code>require('buffer')</code>, not on the <code>Buffer</code> global or a <code>Buffer</code> instance.</p> <h2 id=\"buffer_buffer_transcode_source_fromenc_toenc\">buffer.transcode(source, fromEnc, toEnc)</h2> <div class=\"api_metadata\"> <span>Added in: v7.1.0</span> </div>\n<ul> <li>\n<code>source</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> A <code>Buffer</code> instance</li> <li>\n<code>fromEnc</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The current encoding</li> <li>\n<code>toEnc</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> To target encoding</li> </ul> <p>Re-encodes the given <code>Buffer</code> instance from one character encoding to another. Returns a new <code>Buffer</code> instance.</p> <p>Throws if the <code>fromEnc</code> or <code>toEnc</code> specify invalid character encodings or if conversion from <code>fromEnc</code> to <code>toEnc</code> is not permitted.</p> <p>The transcoding process will use substitution characters if a given byte sequence cannot be adequately represented in the target encoding. For instance:</p> <pre data-language=\"js\">const buffer = require('buffer');\n\nconst newBuf = buffer.transcode(Buffer.from('€'), 'utf8', 'ascii');\nconsole.log(newBuf.toString('ascii'));\n// Prints: '?'\n</pre> <p>Because the Euro (<code>€</code>) sign is not representable in US-ASCII, it is replaced with <code>?</code> in the transcoded <code>Buffer</code>.</p> <p>Note that this is a property on the <code>buffer</code> module returned by <code>require('buffer')</code>, not on the <code>Buffer</code> global or a <code>Buffer</code> instance.</p> <h2 id=\"buffer_class_slowbuffer\">Class: SlowBuffer</h2> <div class=\"api_metadata\"> <span>Deprecated since: v6.0.0</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated: Use <a href=\"#buffer_class_method_buffer_allocunsafeslow_size\"><code>Buffer.allocUnsafeSlow()</code></a> instead.</div>\n<p>Returns an un-pooled <code>Buffer</code>.</p> <p>In order to avoid the garbage collection overhead of creating many individually allocated <code>Buffer</code> instances, by default allocations under 4KB are sliced from a single larger allocated object. This approach improves both performance and memory usage since v8 does not need to track and cleanup as many <code>Persistent</code> objects.</p> <p>In the case where a developer may need to retain a small chunk of memory from a pool for an indeterminate amount of time, it may be appropriate to create an un-pooled <code>Buffer</code> instance using <code>SlowBuffer</code> then copy out the relevant bits.</p> <p>Example:</p> <pre data-language=\"js\">// Need to keep around a few small chunks of memory\nconst store = [];\n\nsocket.on('readable', () =&gt; {\n  const data = socket.read();\n\n  // Allocate for retained data\n  const sb = SlowBuffer(10);\n\n  // Copy the data into the new allocation\n  data.copy(sb, 0, 0, 10);\n\n  store.push(sb);\n});\n</pre> <p>Use of <code>SlowBuffer</code> should be used only as a last resort <em>after</em> a developer has observed undue memory retention in their applications.</p> <h3 id=\"buffer_new_slowbuffer_size\">new SlowBuffer(size)</h3> <div class=\"api_metadata\"> <span>Deprecated since: v6.0.0</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated: Use <a href=\"#buffer_class_method_buffer_allocunsafeslow_size\"><code>Buffer.allocUnsafeSlow()</code></a> instead.</div>\n<ul> <li>\n<code>size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The desired length of the new <code>SlowBuffer</code>\n</li> </ul> <p>Allocates a new <code>Buffer</code> of <code>size</code> bytes. If the <code>size</code> is larger than <a href=\"#buffer_buffer_kmaxlength\"><code>buffer.kMaxLength</code></a> or smaller than 0, a <a href=\"errors#errors_class_rangeerror\"><code>RangeError</code></a> will be thrown. A zero-length <code>Buffer</code> will be created if <code>size</code> is 0.</p> <p>The underlying memory for <code>SlowBuffer</code> instances is <em>not initialized</em>. The contents of a newly created <code>SlowBuffer</code> are unknown and could contain sensitive data. Use <a href=\"#buffer_buf_fill_value_offset_end_encoding\"><code>buf.fill(0)</code></a> to initialize a <code>SlowBuffer</code> to zeroes.</p> <p>Example:</p> <pre data-language=\"js\">const SlowBuffer = require('buffer').SlowBuffer;\n\nconst buf = new SlowBuffer(5);\n\n// Prints: (contents may vary): &lt;Buffer 78 e0 82 02 01&gt;\nconsole.log(buf);\n\nbuf.fill(0);\n\n// Prints: &lt;Buffer 00 00 00 00 00&gt;\nconsole.log(buf);\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/buffer.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/buffer.html</a>\n  </p>\n</div>\n","vm":"<h1 id=\"vm_vm_executing_javascript\">VM (Executing JavaScript)</h1> <div class=\"api_stability api_stability_2\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</div> <p>The <code>vm</code> module provides APIs for compiling and running code within V8 Virtual Machine contexts. It can be accessed using:</p> <pre data-language=\"js\">const vm = require('vm');\n</pre> <p>JavaScript code can be compiled and run immediately or compiled, saved, and run later.</p> <p><em>Note</em>: The vm module is not a security mechanism. <strong>Do not use it to run untrusted code</strong>.</p> <h2 id=\"vm_class_vm_script\">Class: vm.Script</h2> <div class=\"api_metadata\"> <span>Added in: v0.3.1</span> </div>\n<p>Instances of the <code>vm.Script</code> class contain precompiled scripts that can be executed in specific sandboxes (or \"contexts\").</p> <h3 id=\"vm_new_vm_script_code_options\">new vm.Script(code, options)</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v5.7.0</td> <td>\n<p>The <code>cachedData</code> and <code>produceCachedData</code> options are supported now.</p> </td>\n</tr> <tr>\n<td>v0.3.1</td> <td>\n<p><span>Added in: v0.3.1</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>code</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The JavaScript code to compile.</li> <li>\n<code>options</code><ul> <li>\n<code>filename</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Specifies the filename used in stack traces produced by this script.</li> <li>\n<code>lineOffset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the line number offset that is displayed in stack traces produced by this script.</li> <li>\n<code>columnOffset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the column number offset that is displayed in stack traces produced by this script.</li> <li>\n<code>displayErrors</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> When <code>true</code>, if an <a href=\"errors#errors_class_error\"><code>Error</code></a> error occurs while compiling the <code>code</code>, the line of code causing the error is attached to the stack trace.</li> <li>\n<code>timeout</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the number of milliseconds to execute <code>code</code> before terminating execution. If execution is terminated, an <a href=\"errors#errors_class_error\"><code>Error</code></a> will be thrown.</li> <li>\n<code>cachedData</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> Provides an optional <code>Buffer</code> with V8's code cache data for the supplied source. When supplied, the <code>cachedDataRejected</code> value will be set to either <code>true</code> or <code>false</code> depending on acceptance of the data by V8.</li> <li>\n<code>produceCachedData</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> When <code>true</code> and no <code>cachedData</code> is present, V8 will attempt to produce code cache data for <code>code</code>. Upon success, a <code>Buffer</code> with V8's code cache data will be produced and stored in the <code>cachedData</code> property of the returned <code>vm.Script</code> instance. The <code>cachedDataProduced</code> value will be set to either <code>true</code> or <code>false</code> depending on whether code cache data is produced successfully.</li> </ul> </li> </ul> <p>Creating a new <code>vm.Script</code> object compiles <code>code</code> but does not run it. The compiled <code>vm.Script</code> can be run later multiple times. It is important to note that the <code>code</code> is not bound to any global object; rather, it is bound before each run, just for that run.</p> <h3 id=\"vm_script_runincontext_contextifiedsandbox_options\">script.runInContext(contextifiedSandbox[, options])</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.3.0</td> <td>\n<p>The <code>breakOnSigint</code> option is supported now.</p> </td>\n</tr> <tr>\n<td>v0.3.1</td> <td>\n<p><span>Added in: v0.3.1</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>contextifiedSandbox</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> A <a href=\"#vm_what_does_it_mean_to_contextify_an_object\">contextified</a> object as returned by the <code>vm.createContext()</code> method.</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>filename</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Specifies the filename used in stack traces produced by this script.</li> <li>\n<code>lineOffset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the line number offset that is displayed in stack traces produced by this script.</li> <li>\n<code>columnOffset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the column number offset that is displayed in stack traces produced by this script.</li> <li>\n<code>displayErrors</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> When <code>true</code>, if an <a href=\"errors#errors_class_error\"><code>Error</code></a> error occurs while compiling the <code>code</code>, the line of code causing the error is attached to the stack trace.</li> <li>\n<code>timeout</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the number of milliseconds to execute <code>code</code> before terminating execution. If execution is terminated, an <a href=\"errors#errors_class_error\"><code>Error</code></a> will be thrown.</li> <li>\n<code>breakOnSigint</code>: if <code>true</code>, the execution will be terminated when <code>SIGINT</code> (Ctrl+C) is received. Existing handlers for the event that have been attached via <code>process.on(\"SIGINT\")</code> will be disabled during script execution, but will continue to work after that. If execution is terminated, an <a href=\"errors#errors_class_error\"><code>Error</code></a> will be thrown.</li> </ul> </li> </ul> <p>Runs the compiled code contained by the <code>vm.Script</code> object within the given <code>contextifiedSandbox</code> and returns the result. Running code does not have access to local scope.</p> <p>The following example compiles code that increments a global variable, sets the value of another global variable, then execute the code multiple times. The globals are contained in the <code>sandbox</code> object.</p> <pre data-language=\"js\">const util = require('util');\nconst vm = require('vm');\n\nconst sandbox = {\n  animal: 'cat',\n  count: 2\n};\n\nconst script = new vm.Script('count += 1; name = \"kitty\";');\n\nconst context = new vm.createContext(sandbox);\nfor (var i = 0; i &lt; 10; ++i) {\n  script.runInContext(context);\n}\n\nconsole.log(util.inspect(sandbox));\n\n// { animal: 'cat', count: 12, name: 'kitty' }\n</pre> <h3 id=\"vm_script_runinnewcontext_sandbox_options\">script.runInNewContext([sandbox][, options])</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.1</span> </div>\n<ul> <li>\n<code>sandbox</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> An object that will be <a href=\"#vm_what_does_it_mean_to_contextify_an_object\">contextified</a>. If <code>undefined</code>, a new object will be created.</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>filename</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Specifies the filename used in stack traces produced by this script.</li> <li>\n<code>lineOffset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the line number offset that is displayed in stack traces produced by this script.</li> <li>\n<code>columnOffset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the column number offset that is displayed in stack traces produced by this script.</li> <li>\n<code>displayErrors</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> When <code>true</code>, if an <a href=\"errors#errors_class_error\"><code>Error</code></a> error occurs while compiling the <code>code</code>, the line of code causing the error is attached to the stack trace.</li> <li>\n<code>timeout</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the number of milliseconds to execute <code>code</code> before terminating execution. If execution is terminated, an <a href=\"errors#errors_class_error\"><code>Error</code></a> will be thrown.</li> </ul> </li> </ul> <p>First contextifies the given <code>sandbox</code>, runs the compiled code contained by the <code>vm.Script</code> object within the created sandbox, and returns the result. Running code does not have access to local scope.</p> <p>The following example compiles code that sets a global variable, then executes the code multiple times in different contexts. The globals are set on and contained within each individual <code>sandbox</code>.</p> <pre data-language=\"js\">const util = require('util');\nconst vm = require('vm');\n\nconst script = new vm.Script('globalVar = \"set\"');\n\nconst sandboxes = [{}, {}, {}];\nsandboxes.forEach((sandbox) =&gt; {\n  script.runInNewContext(sandbox);\n});\n\nconsole.log(util.inspect(sandboxes));\n\n// [{ globalVar: 'set' }, { globalVar: 'set' }, { globalVar: 'set' }]\n</pre> <h3 id=\"vm_script_runinthiscontext_options\">script.runInThisContext([options])</h3> <div class=\"api_metadata\"> <span>Added in: v0.3.1</span> </div>\n<ul> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>filename</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Specifies the filename used in stack traces produced by this script.</li> <li>\n<code>lineOffset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the line number offset that is displayed in stack traces produced by this script.</li> <li>\n<code>columnOffset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the column number offset that is displayed in stack traces produced by this script.</li> <li>\n<code>displayErrors</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> When <code>true</code>, if an <a href=\"errors#errors_class_error\"><code>Error</code></a> error occurs while compiling the <code>code</code>, the line of code causing the error is attached to the stack trace.</li> <li>\n<code>timeout</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the number of milliseconds to execute <code>code</code> before terminating execution. If execution is terminated, an <a href=\"errors#errors_class_error\"><code>Error</code></a> will be thrown.</li> </ul> </li> </ul> <p>Runs the compiled code contained by the <code>vm.Script</code> within the context of the current <code>global</code> object. Running code does not have access to local scope, but <em>does</em> have access to the current <code>global</code> object.</p> <p>The following example compiles code that increments a <code>global</code> variable then executes that code multiple times:</p> <pre data-language=\"js\">const vm = require('vm');\n\nglobal.globalVar = 0;\n\nconst script = new vm.Script('globalVar += 1', { filename: 'myfile.vm' });\n\nfor (var i = 0; i &lt; 1000; ++i) {\n  script.runInThisContext();\n}\n\nconsole.log(globalVar);\n\n// 1000\n</pre> <h2 id=\"vm_vm_createcontext_sandbox\">vm.createContext([sandbox])</h2> <div class=\"api_metadata\"> <span>Added in: v0.3.1</span> </div>\n<ul> <li>\n<code>sandbox</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> </ul> <p>If given a <code>sandbox</code> object, the <code>vm.createContext()</code> method will <a href=\"#vm_what_does_it_mean_to_contextify_an_object\">prepare that sandbox</a> so that it can be used in calls to <a href=\"#vm_vm_runincontext_code_contextifiedsandbox_options\"><code>vm.runInContext()</code></a> or <a href=\"#vm_script_runincontext_contextifiedsandbox_options\"><code>script.runInContext()</code></a>. Inside such scripts, the <code>sandbox</code> object will be the global object, retaining all of its existing properties but also having the built-in objects and functions any standard <a href=\"https://es5.github.io/#x15.1\">global object</a> has. Outside of scripts run by the vm module, global variables will remain unchanged.</p> <pre data-language=\"js\">const util = require('util');\nconst vm = require('vm');\n\nvar globalVar = 3;\n\nconst sandbox = { globalVar: 1 };\nvm.createContext(sandbox);\n\nvm.runInContext('globalVar *= 2;', sandbox);\n\nconsole.log(util.inspect(sandbox)); // 2\n\nconsole.log(util.inspect(globalVar)); // 3\n</pre> <p>If <code>sandbox</code> is omitted (or passed explicitly as <code>undefined</code>), a new, empty <a href=\"#vm_what_does_it_mean_to_contextify_an_object\">contextified</a> sandbox object will be returned.</p> <p>The <code>vm.createContext()</code> method is primarily useful for creating a single sandbox that can be used to run multiple scripts. For instance, if emulating a web browser, the method can be used to create a single sandbox representing a window's global object, then run all <code>&lt;script&gt;</code> tags together within the context of that sandbox.</p> <h2 id=\"vm_vm_iscontext_sandbox\">vm.isContext(sandbox)</h2> <div class=\"api_metadata\"> <span>Added in: v0.11.7</span> </div>\n<ul> <li>\n<code>sandbox</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> </ul> <p>Returns <code>true</code> if the given <code>sandbox</code> object has been <a href=\"#vm_what_does_it_mean_to_contextify_an_object\">contextified</a> using <a href=\"#vm_vm_createcontext_sandbox\"><code>vm.createContext()</code></a>.</p> <h2 id=\"vm_vm_runincontext_code_contextifiedsandbox_options\">vm.runInContext(code, contextifiedSandbox[, options])</h2> <div class=\"signature\">\n<ul> <li>\n<code>code</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The JavaScript code to compile and run.</li> <li>\n<code>contextifiedSandbox</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> The <a href=\"#vm_what_does_it_mean_to_contextify_an_object\">contextified</a> object that will be used as the <code>global</code> when the <code>code</code> is compiled and run.</li> <li>\n<code>options</code><ul> <li>\n<code>filename</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Specifies the filename used in stack traces produced by this script.</li> <li>\n<code>lineOffset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the line number offset that is displayed in stack traces produced by this script.</li> <li>\n<code>columnOffset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the column number offset that is displayed in stack traces produced by this script.</li> <li>\n<code>displayErrors</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> When <code>true</code>, if an <a href=\"errors#errors_class_error\"><code>Error</code></a> error occurs while compiling the <code>code</code>, the line of code causing the error is attached to the stack trace.</li> <li>\n<code>timeout</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the number of milliseconds to execute <code>code</code> before terminating execution. If execution is terminated, an <a href=\"errors#errors_class_error\"><code>Error</code></a> will be thrown.</li> </ul> </li> </ul> </div>\n<p>The <code>vm.runInContext()</code> method compiles <code>code</code>, runs it within the context of the <code>contextifiedSandbox</code>, then returns the result. Running code does not have access to the local scope. The <code>contextifiedSandbox</code> object <em>must</em> have been previously <a href=\"#vm_what_does_it_mean_to_contextify_an_object\">contextified</a> using the <a href=\"#vm_vm_createcontext_sandbox\"><code>vm.createContext()</code></a> method.</p> <p>The following example compiles and executes different scripts using a single <a href=\"#vm_what_does_it_mean_to_contextify_an_object\">contextified</a> object:</p> <pre data-language=\"js\">const util = require('util');\nconst vm = require('vm');\n\nconst sandbox = { globalVar: 1 };\nvm.createContext(sandbox);\n\nfor (var i = 0; i &lt; 10; ++i) {\n  vm.runInContext('globalVar *= 2;', sandbox);\n}\nconsole.log(util.inspect(sandbox));\n\n// { globalVar: 1024 }\n</pre> <h2 id=\"vm_vm_runindebugcontext_code\">vm.runInDebugContext(code)</h2> <div class=\"api_metadata\"> <span>Added in: v0.11.14</span> </div>\n<ul> <li>\n<code>code</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The JavaScript code to compile and run.</li> </ul> <p>The <code>vm.runInDebugContext()</code> method compiles and executes <code>code</code> inside the V8 debug context. The primary use case is to gain access to the V8 <code>Debug</code> object:</p> <pre data-language=\"js\">const vm = require('vm');\nconst Debug = vm.runInDebugContext('Debug');\nconsole.log(Debug.findScript(process.emit).name);  // 'events.js'\nconsole.log(Debug.findScript(process.exit).name);  // 'internal/process.js'\n</pre> <p><em>Note</em>: The debug context and object are intrinsically tied to V8's debugger implementation and may change (or even be removed) without prior warning.</p> <p>The <code>Debug</code> object can also be made available using the V8-specific <code>--expose_debug_as=</code> <a href=\"cli\">command line option</a>.</p> <h2 id=\"vm_vm_runinnewcontext_code_sandbox_options\">vm.runInNewContext(code[, sandbox][, options])</h2> <div class=\"api_metadata\"> <span>Added in: v0.3.1</span> </div>\n<ul> <li>\n<code>code</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The JavaScript code to compile and run.</li> <li>\n<code>sandbox</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> An object that will be <a href=\"#vm_what_does_it_mean_to_contextify_an_object\">contextified</a>. If <code>undefined</code>, a new object will be created.</li> <li>\n<code>options</code><ul> <li>\n<code>filename</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Specifies the filename used in stack traces produced by this script.</li> <li>\n<code>lineOffset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the line number offset that is displayed in stack traces produced by this script.</li> <li>\n<code>columnOffset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the column number offset that is displayed in stack traces produced by this script.</li> <li>\n<code>displayErrors</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> When <code>true</code>, if an <a href=\"errors#errors_class_error\"><code>Error</code></a> error occurs while compiling the <code>code</code>, the line of code causing the error is attached to the stack trace.</li> <li>\n<code>timeout</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the number of milliseconds to execute <code>code</code> before terminating execution. If execution is terminated, an <a href=\"errors#errors_class_error\"><code>Error</code></a> will be thrown.</li> </ul> </li> </ul> <p>The <code>vm.runInNewContext()</code> first contextifies the given <code>sandbox</code> object (or creates a new <code>sandbox</code> if passed as <code>undefined</code>), compiles the <code>code</code>, runs it within the context of the created context, then returns the result. Running code does not have access to the local scope.</p> <p>The following example compiles and executes code that increments a global variable and sets a new one. These globals are contained in the <code>sandbox</code>.</p> <pre data-language=\"js\">const util = require('util');\nconst vm = require('vm');\n\nconst sandbox = {\n  animal: 'cat',\n  count: 2\n};\n\nvm.runInNewContext('count += 1; name = \"kitty\"', sandbox);\nconsole.log(util.inspect(sandbox));\n\n// { animal: 'cat', count: 3, name: 'kitty' }\n</pre> <h2 id=\"vm_vm_runinthiscontext_code_options\">vm.runInThisContext(code[, options])</h2> <div class=\"api_metadata\"> <span>Added in: v0.3.1</span> </div>\n<ul> <li>\n<code>code</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The JavaScript code to compile and run.</li> <li>\n<code>options</code><ul> <li>\n<code>filename</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Specifies the filename used in stack traces produced by this script.</li> <li>\n<code>lineOffset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the line number offset that is displayed in stack traces produced by this script.</li> <li>\n<code>columnOffset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the column number offset that is displayed in stack traces produced by this script.</li> <li>\n<code>displayErrors</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> When <code>true</code>, if an <a href=\"errors#errors_class_error\"><code>Error</code></a> error occurs while compiling the <code>code</code>, the line of code causing the error is attached to the stack trace.</li> <li>\n<code>timeout</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the number of milliseconds to execute <code>code</code> before terminating execution. If execution is terminated, an <a href=\"errors#errors_class_error\"><code>Error</code></a> will be thrown.</li> </ul> </li> </ul> <p><code>vm.runInThisContext()</code> compiles <code>code</code>, runs it within the context of the current <code>global</code> and returns the result. Running code does not have access to local scope, but does have access to the current <code>global</code> object.</p> <p>The following example illustrates using both <code>vm.runInThisContext()</code> and the JavaScript <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a> function to run the same code:</p> <pre data-language=\"js\">const vm = require('vm');\nvar localVar = 'initial value';\n\nconst vmResult = vm.runInThisContext('localVar = \"vm\";');\nconsole.log('vmResult:', vmResult);\nconsole.log('localVar:', localVar);\n\nconst evalResult = eval('localVar = \"eval\";');\nconsole.log('evalResult:', evalResult);\nconsole.log('localVar:', localVar);\n\n// vmResult: 'vm', localVar: 'initial value'\n// evalResult: 'eval', localVar: 'eval'\n</pre> <p>Because <code>vm.runInThisContext()</code> does not have access to the local scope, <code>localVar</code> is unchanged. In contrast, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a> <em>does</em> have access to the local scope, so the value <code>localVar</code> is changed. In this way <code>vm.runInThisContext()</code> is much like an <a href=\"https://es5.github.io/#x10.4.2\">indirect <code>eval()</code> call</a>, e.g. <code>(0,eval)('code')</code>.</p> <h2 id=\"vm_example_running_an_http_server_within_a_vm\">Example: Running an HTTP Server within a VM</h2> <p>When using either <a href=\"#vm_script_runinthiscontext_options\"><code>script.runInThisContext()</code></a> or <a href=\"#vm_vm_runinthiscontext_code_options\"><code>vm.runInThisContext()</code></a>, the code is executed within the current V8 global context. The code passed to this VM context will have its own isolated scope.</p> <p>In order to run a simple web server using the <code>http</code> module the code passed to the context must either call <code>require('http')</code> on its own, or have a reference to the <code>http</code> module passed to it. For instance:</p> <pre data-language=\"js\">'use strict';\nconst vm = require('vm');\n\nlet code =\n`(function(require) {\n\n   const http = require('http');\n\n   http.createServer( (request, response) =&gt; {\n     response.writeHead(200, {'Content-Type': 'text/plain'});\n     response.end('Hello World\\\\n');\n   }).listen(8124);\n\n   console.log('Server running at http://127.0.0.1:8124/');\n })`;\n\n vm.runInThisContext(code)(require);\n</pre> <p><em>Note</em>: The <code>require()</code> in the above case shares the state with the context it is passed from. This may introduce risks when untrusted code is executed, e.g. altering objects in the context in unwanted ways.</p> <h2 id=\"vm_what_does_it_mean_to_contextify_an_object\">What does it mean to \"contextify\" an object?</h2> <p>All JavaScript executed within Node.js runs within the scope of a \"context\". According to the <a href=\"https://github.com/v8/v8/wiki/Embedder's%20Guide#contexts\">V8 Embedder's Guide</a>:</p> <blockquote> <p>In V8, a context is an execution environment that allows separate, unrelated, JavaScript applications to run in a single instance of V8. You must explicitly specify the context in which you want any JavaScript code to be run.</p> </blockquote> <p>When the method <code>vm.createContext()</code> is called, the <code>sandbox</code> object that is passed in (or a newly created object if <code>sandbox</code> is <code>undefined</code>) is associated internally with a new instance of a V8 Context. This V8 Context provides the <code>code</code> run using the <code>vm</code> modules methods with an isolated global environment within which it can operate. The process of creating the V8 Context and associating it with the <code>sandbox</code> object is what this document refers to as \"contextifying\" the <code>sandbox</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/vm.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/vm.html</a>\n  </p>\n</div>\n","stream":"<h1 id=\"stream_stream\">Stream</h1> <div class=\"api_stability api_stability_2\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</div>\n<p>A stream is an abstract interface for working with streaming data in Node.js. The <code>stream</code> module provides a base API that makes it easy to build objects that implement the stream interface.</p> <p>There are many stream objects provided by Node.js. For instance, a <a href=\"http#http_class_http_incomingmessage\">request to an HTTP server</a> and <a href=\"process#process_process_stdout\"><code>process.stdout</code></a> are both stream instances.</p> <p>Streams can be readable, writable, or both. All streams are instances of <a href=\"events#events_class_eventemitter\"><code>EventEmitter</code></a>.</p> <p>The <code>stream</code> module can be accessed using:</p> <pre data-language=\"js\">const stream = require('stream');\n</pre> <p>While it is important for all Node.js users to understand how streams work, the <code>stream</code> module itself is most useful for developers that are creating new types of stream instances. Developers who are primarily <em>consuming</em> stream objects will rarely (if ever) have need to use the <code>stream</code> module directly.</p> <h2 id=\"stream_organization_of_this_document\">Organization of this Document</h2> <p>This document is divided into two primary sections with a third section for additional notes. The first section explains the elements of the stream API that are required to <em>use</em> streams within an application. The second section explains the elements of the API that are required to <em>implement</em> new types of streams.</p> <h2 id=\"stream_types_of_streams\">Types of Streams</h2> <p>There are four fundamental stream types within Node.js:</p> <ul> <li>\n<a href=\"#stream_class_stream_readable\">Readable</a> - streams from which data can be read (for example <a href=\"fs#fs_fs_createreadstream_path_options\"><code>fs.createReadStream()</code></a>).</li> <li>\n<a href=\"#stream_class_stream_writable\">Writable</a> - streams to which data can be written (for example <a href=\"fs#fs_fs_createwritestream_path_options\"><code>fs.createWriteStream()</code></a>).</li> <li>\n<a href=\"#stream_class_stream_duplex\">Duplex</a> - streams that are both Readable and Writable (for example <a href=\"net#net_class_net_socket\"><code>net.Socket</code></a>).</li> <li>\n<a href=\"#stream_class_stream_transform\">Transform</a> - Duplex streams that can modify or transform the data as it is written and read (for example <a href=\"zlib#zlib_zlib_createdeflate_options\"><code>zlib.createDeflate()</code></a>).</li> </ul> <h3 id=\"stream_object_mode\">Object Mode</h3> <p>All streams created by Node.js APIs operate exclusively on strings and <code>Buffer</code> objects. It is possible, however, for stream implementations to work with other types of JavaScript values (with the exception of <code>null</code>, which serves a special purpose within streams). Such streams are considered to operate in \"object mode\".</p> <p>Stream instances are switched into object mode using the <code>objectMode</code> option when the stream is created. Attempting to switch an existing stream into object mode is not safe.</p> <h3 id=\"stream_buffering\">Buffering</h3>  <p>Both <a href=\"#stream_class_stream_writable\">Writable</a> and <a href=\"#stream_class_stream_readable\">Readable</a> streams will store data in an internal buffer that can be retrieved using <code>writable._writableState.getBuffer()</code> or <code>readable._readableState.buffer</code>, respectively.</p> <p>The amount of data potentially buffered depends on the <code>highWaterMark</code> option passed into the streams constructor. For normal streams, the <code>highWaterMark</code> option specifies a total number of bytes. For streams operating in object mode, the <code>highWaterMark</code> specifies a total number of objects.</p> <p>Data is buffered in Readable streams when the implementation calls <a href=\"#stream_readable_push_chunk_encoding\"><code>stream.push(chunk)</code></a>. If the consumer of the Stream does not call <a href=\"#stream_readable_read_size\"><code>stream.read()</code></a>, the data will sit in the internal queue until it is consumed.</p> <p>Once the total size of the internal read buffer reaches the threshold specified by <code>highWaterMark</code>, the stream will temporarily stop reading data from the underlying resource until the data currently buffered can be consumed (that is, the stream will stop calling the internal <code>readable._read()</code> method that is used to fill the read buffer).</p> <p>Data is buffered in Writable streams when the <a href=\"#stream_writable_write_chunk_encoding_callback\"><code>writable.write(chunk)</code></a> method is called repeatedly. While the total size of the internal write buffer is below the threshold set by <code>highWaterMark</code>, calls to <code>writable.write()</code> will return <code>true</code>. Once the size of the internal buffer reaches or exceeds the <code>highWaterMark</code>, <code>false</code> will be returned.</p> <p>A key goal of the <code>stream</code> API, particularly the <a href=\"#stream_readable_pipe_destination_options\"><code>stream.pipe()</code></a> method, is to limit the buffering of data to acceptable levels such that sources and destinations of differing speeds will not overwhelm the available memory.</p> <p>Because <a href=\"#stream_class_stream_duplex\">Duplex</a> and <a href=\"#stream_class_stream_transform\">Transform</a> streams are both Readable and Writable, each maintain <em>two</em> separate internal buffers used for reading and writing, allowing each side to operate independently of the other while maintaining an appropriate and efficient flow of data. For example, <a href=\"net#net_class_net_socket\"><code>net.Socket</code></a> instances are <a href=\"#stream_class_stream_duplex\">Duplex</a> streams whose Readable side allows consumption of data received <em>from</em> the socket and whose Writable side allows writing data <em>to</em> the socket. Because data may be written to the socket at a faster or slower rate than data is received, it is important for each side to operate (and buffer) independently of the other.</p> <h2 id=\"stream_api_for_stream_consumers\">API for Stream Consumers</h2>  <p>Almost all Node.js applications, no matter how simple, use streams in some manner. The following is an example of using streams in a Node.js application that implements an HTTP server:</p> <pre data-language=\"js\">const http = require('http');\n\nconst server = http.createServer( (req, res) =&gt; {\n  // req is an http.IncomingMessage, which is a Readable Stream\n  // res is an http.ServerResponse, which is a Writable Stream\n\n  let body = '';\n  // Get the data as utf8 strings.\n  // If an encoding is not set, Buffer objects will be received.\n  req.setEncoding('utf8');\n\n  // Readable streams emit 'data' events once a listener is added\n  req.on('data', (chunk) =&gt; {\n    body += chunk;\n  });\n\n  // the end event indicates that the entire body has been received\n  req.on('end', () =&gt; {\n    try {\n      const data = JSON.parse(body);\n      // write back something interesting to the user:\n      res.write(typeof data);\n      res.end();\n    } catch (er) {\n      // uh oh!  bad json!\n      res.statusCode = 400;\n      return res.end(`error: ${er.message}`);\n    }\n  });\n});\n\nserver.listen(1337);\n\n// $ curl localhost:1337 -d '{}'\n// object\n// $ curl localhost:1337 -d '\"foo\"'\n// string\n// $ curl localhost:1337 -d 'not json'\n// error: Unexpected token o\n</pre> <p><a href=\"#stream_class_stream_writable\">Writable</a> streams (such as <code>res</code> in the example) expose methods such as <code>write()</code> and <code>end()</code> that are used to write data onto the stream.</p> <p><a href=\"#stream_class_stream_readable\">Readable</a> streams use the <a href=\"events#events_class_eventemitter\"><code>EventEmitter</code></a> API for notifying application code when data is available to be read off the stream. That available data can be read from the stream in multiple ways.</p> <p>Both <a href=\"#stream_class_stream_writable\">Writable</a> and <a href=\"#stream_class_stream_readable\">Readable</a> streams use the <a href=\"events#events_class_eventemitter\"><code>EventEmitter</code></a> API in various ways to communicate the current state of the stream.</p> <p><a href=\"#stream_class_stream_duplex\">Duplex</a> and <a href=\"#stream_class_stream_transform\">Transform</a> streams are both <a href=\"#stream_class_stream_writable\">Writable</a> and <a href=\"#stream_class_stream_readable\">Readable</a>.</p> <p>Applications that are either writing data to or consuming data from a stream are not required to implement the stream interfaces directly and will generally have no reason to call <code>require('stream')</code>.</p> <p>Developers wishing to implement new types of streams should refer to the section <a href=\"#stream_api_for_stream_implementers\">API for Stream Implementers</a>.</p> <h3 id=\"stream_writable_streams\">Writable Streams</h3> <p>Writable streams are an abstraction for a <em>destination</em> to which data is written.</p> <p>Examples of <a href=\"#stream_class_stream_writable\">Writable</a> streams include:</p> <ul> <li><a href=\"http#http_class_http_clientrequest\">HTTP requests, on the client</a></li> <li><a href=\"http#http_class_http_serverresponse\">HTTP responses, on the server</a></li> <li><a href=\"fs#fs_class_fs_writestream\">fs write streams</a></li> <li><a href=\"zlib\">zlib streams</a></li> <li><a href=\"crypto\">crypto streams</a></li> <li><a href=\"net#net_class_net_socket\">TCP sockets</a></li> <li><a href=\"child_process#child_process_child_stdin\">child process stdin</a></li> <li>\n<a href=\"process#process_process_stdout\"><code>process.stdout</code></a>, <a href=\"process#process_process_stderr\"><code>process.stderr</code></a>\n</li> </ul> <p><em>Note</em>: Some of these examples are actually <a href=\"#stream_class_stream_duplex\">Duplex</a> streams that implement the <a href=\"#stream_class_stream_writable\">Writable</a> interface.</p> <p>All <a href=\"#stream_class_stream_writable\">Writable</a> streams implement the interface defined by the <code>stream.Writable</code> class.</p> <p>While specific instances of <a href=\"#stream_class_stream_writable\">Writable</a> streams may differ in various ways, all Writable streams follow the same fundamental usage pattern as illustrated in the example below:</p> <pre data-language=\"js\">const myStream = getWritableStreamSomehow();\nmyStream.write('some data');\nmyStream.write('some more data');\nmyStream.end('done writing data');\n</pre> <h4 id=\"stream_class_stream_writable\">Class: stream.Writable</h4> <div class=\"api_metadata\"> <span>Added in: v0.9.4</span> </div> <h5 id=\"stream_event_close\">Event: 'close'</h5> <div class=\"api_metadata\"> <span>Added in: v0.9.4</span> </div>\n<p>The <code>'close'</code> event is emitted when the stream and any of its underlying resources (a file descriptor, for example) have been closed. The event indicates that no more events will be emitted, and no further computation will occur.</p> <p>Not all Writable streams will emit the <code>'close'</code> event.</p> <h5 id=\"stream_event_drain\">Event: 'drain'</h5> <div class=\"api_metadata\"> <span>Added in: v0.9.4</span> </div>\n<p>If a call to <a href=\"#stream_writable_write_chunk_encoding_callback\"><code>stream.write(chunk)</code></a> returns <code>false</code>, the <code>'drain'</code> event will be emitted when it is appropriate to resume writing data to the stream.</p> <pre data-language=\"js\">// Write the data to the supplied writable stream one million times.\n// Be attentive to back-pressure.\nfunction writeOneMillionTimes(writer, data, encoding, callback) {\n  let i = 1000000;\n  write();\n  function write() {\n    var ok = true;\n    do {\n      i--;\n      if (i === 0) {\n        // last time!\n        writer.write(data, encoding, callback);\n      } else {\n        // see if we should continue, or wait\n        // don't pass the callback, because we're not done yet.\n        ok = writer.write(data, encoding);\n      }\n    } while (i &gt; 0 &amp;&amp; ok);\n    if (i &gt; 0) {\n      // had to stop early!\n      // write some more once it drains\n      writer.once('drain', write);\n    }\n  }\n}\n</pre> <h5 id=\"stream_event_error\">Event: 'error'</h5> <div class=\"api_metadata\"> <span>Added in: v0.9.4</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a></li> </ul> <p>The <code>'error'</code> event is emitted if an error occurred while writing or piping data. The listener callback is passed a single <code>Error</code> argument when called.</p> <p><em>Note</em>: The stream is not closed when the <code>'error'</code> event is emitted.</p> <h5 id=\"stream_event_finish\">Event: 'finish'</h5> <div class=\"api_metadata\"> <span>Added in: v0.9.4</span> </div>\n<p>The <code>'finish'</code> event is emitted after the <a href=\"#stream_writable_end_chunk_encoding_callback\"><code>stream.end()</code></a> method has been called, and all data has been flushed to the underlying system.</p> <pre data-language=\"js\">const writer = getWritableStreamSomehow();\nfor (var i = 0; i &lt; 100; i ++) {\n  writer.write(`hello, #${i}!\\n`);\n}\nwriter.end('This is the end\\n');\nwriter.on('finish', () =&gt; {\n  console.error('All writes are now complete.');\n});\n</pre> <h5 id=\"stream_event_pipe\">Event: 'pipe'</h5> <div class=\"api_metadata\"> <span>Added in: v0.9.4</span> </div>\n<ul> <li>\n<code>src</code> <a href=\"stream#stream_class_stream_readable\" class=\"type\">&lt;stream.Readable&gt;</a> source stream that is piping to this writable</li> </ul> <p>The <code>'pipe'</code> event is emitted when the <a href=\"#stream_readable_pipe_destination_options\"><code>stream.pipe()</code></a> method is called on a readable stream, adding this writable to its set of destinations.</p> <pre data-language=\"js\">const writer = getWritableStreamSomehow();\nconst reader = getReadableStreamSomehow();\nwriter.on('pipe', (src) =&gt; {\n  console.error('something is piping into the writer');\n  assert.equal(src, reader);\n});\nreader.pipe(writer);\n</pre> <h5 id=\"stream_event_unpipe\">Event: 'unpipe'</h5> <div class=\"api_metadata\"> <span>Added in: v0.9.4</span> </div>\n<ul> <li>\n<code>src</code> <span class=\"type\">&lt;<a href=\"#stream_class_stream_readable\">Readable</a> Stream&gt;</span> The source stream that <a href=\"#stream_readable_unpipe_destination\">unpiped</a> this writable</li> </ul> <p>The <code>'unpipe'</code> event is emitted when the <a href=\"#stream_readable_unpipe_destination\"><code>stream.unpipe()</code></a> method is called on a <a href=\"#stream_class_stream_readable\">Readable</a> stream, removing this <a href=\"#stream_class_stream_writable\">Writable</a> from its set of destinations.</p> <pre data-language=\"js\">const writer = getWritableStreamSomehow();\nconst reader = getReadableStreamSomehow();\nwriter.on('unpipe', (src) =&gt; {\n  console.error('Something has stopped piping into the writer.');\n  assert.equal(src, reader);\n});\nreader.pipe(writer);\nreader.unpipe(writer);\n</pre> <h5 id=\"stream_writable_cork\">writable.cork()</h5> <div class=\"api_metadata\"> <span>Added in: v0.11.2</span> </div>\n<p>The <code>writable.cork()</code> method forces all written data to be buffered in memory. The buffered data will be flushed when either the <a href=\"#stream_writable_uncork\"><code>stream.uncork()</code></a> or <a href=\"#stream_writable_end_chunk_encoding_callback\"><code>stream.end()</code></a> methods are called.</p> <p>The primary intent of <code>writable.cork()</code> is to avoid a situation where writing many small chunks of data to a stream do not cause a backup in the internal buffer that would have an adverse impact on performance. In such situations, implementations that implement the <code>writable._writev()</code> method can perform buffered writes in a more optimized manner.</p> <p>See also: <a href=\"#stream_writable_uncork\"><code>writable.uncork()</code></a>.</p> <h5 id=\"stream_writable_end_chunk_encoding_callback\">writable.end([chunk][, encoding][, callback])</h5> <div class=\"api_metadata\"> <span>Added in: v0.9.4</span> </div>\n<ul> <li>\n<code>chunk</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <span class=\"type\">&lt;any&gt;</span> Optional data to write. For streams not operating in object mode, <code>chunk</code> must be a string or a <code>Buffer</code>. For object mode streams, <code>chunk</code> may be any JavaScript value other than <code>null</code>.</li> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The encoding, if <code>chunk</code> is a String</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Optional callback for when the stream is finished</li> </ul> <p>Calling the <code>writable.end()</code> method signals that no more data will be written to the <a href=\"#stream_class_stream_writable\">Writable</a>. The optional <code>chunk</code> and <code>encoding</code> arguments allow one final additional chunk of data to be written immediately before closing the stream. If provided, the optional <code>callback</code> function is attached as a listener for the <a href=\"#stream_event_finish\"><code>'finish'</code></a> event.</p> <p>Calling the <a href=\"#stream_writable_write_chunk_encoding_callback\"><code>stream.write()</code></a> method after calling <a href=\"#stream_writable_end_chunk_encoding_callback\"><code>stream.end()</code></a> will raise an error.</p> <pre data-language=\"js\">// write 'hello, ' and then end with 'world!'\nconst file = fs.createWriteStream('example.txt');\nfile.write('hello, ');\nfile.end('world!');\n// writing more now is not allowed!\n</pre> <h5 id=\"stream_writable_setdefaultencoding_encoding\">writable.setDefaultEncoding(encoding)</h5> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.1.0</td> <td>\n<p>This method now returns a reference to <code>writable</code>.</p> </td>\n</tr> <tr>\n<td>v0.11.15</td> <td>\n<p><span>Added in: v0.11.15</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The new default encoding</li> <li>Returns: <code>this</code>\n</li> </ul> <p>The <code>writable.setDefaultEncoding()</code> method sets the default <code>encoding</code> for a <a href=\"#stream_class_stream_writable\">Writable</a> stream.</p> <h5 id=\"stream_writable_uncork\">writable.uncork()</h5> <div class=\"api_metadata\"> <span>Added in: v0.11.2</span> </div>\n<p>The <code>writable.uncork()</code> method flushes all data buffered since <a href=\"#stream_writable_cork\"><code>stream.cork()</code></a> was called.</p> <p>When using <a href=\"#stream_writable_cork\"><code>writable.cork()</code></a> and <code>writable.uncork()</code> to manage the buffering of writes to a stream, it is recommended that calls to <code>writable.uncork()</code> be deferred using <code>process.nextTick()</code>. Doing so allows batching of all <code>writable.write()</code> calls that occur within a given Node.js event loop phase.</p> <pre data-language=\"js\">stream.cork();\nstream.write('some ');\nstream.write('data ');\nprocess.nextTick(() =&gt; stream.uncork());\n</pre> <p>If the <a href=\"#stream_writable_cork\"><code>writable.cork()</code></a> method is called multiple times on a stream, the same number of calls to <code>writable.uncork()</code> must be called to flush the buffered data.</p> <pre data-language=\"js\">stream.cork();\nstream.write('some ');\nstream.cork();\nstream.write('data ');\nprocess.nextTick(() =&gt; {\n  stream.uncork();\n  // The data will not be flushed until uncork() is called a second time.\n  stream.uncork();\n});\n</pre> <p>See also: <a href=\"#stream_writable_cork\"><code>writable.cork()</code></a>.</p> <h5 id=\"stream_writable_write_chunk_encoding_callback\">writable.write(chunk[, encoding][, callback])</h5> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>Passing <code>null</code> as the <code>chunk</code> parameter will always be considered invalid now, even in object mode.</p> </td>\n</tr> <tr>\n<td>v0.9.4</td> <td>\n<p><span>Added in: v0.9.4</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>chunk</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The data to write</li> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The encoding, if <code>chunk</code> is a String</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Callback for when this chunk of data is flushed</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <code>false</code> if the stream wishes for the calling code to wait for the <code>'drain'</code> event to be emitted before continuing to write additional data; otherwise <code>true</code>.</li> </ul> <p>The <code>writable.write()</code> method writes some data to the stream, and calls the supplied <code>callback</code> once the data has been fully handled. If an error occurs, the <code>callback</code> <em>may or may not</em> be called with the error as its first argument. To reliably detect write errors, add a listener for the <code>'error'</code> event.</p> <p>The return value is <code>true</code> if the internal buffer is less than the <code>highWaterMark</code> configured when the stream was created after admitting <code>chunk</code>. If <code>false</code> is returned, further attempts to write data to the stream should stop until the <a href=\"#stream_event_drain\"><code>'drain'</code></a> event is emitted.</p> <p>While a stream is not draining, calls to <code>write()</code> will buffer <code>chunk</code>, and return false. Once all currently buffered chunks are drained (accepted for delivery by the operating system), the <code>'drain'</code> event will be emitted. It is recommended that once write() returns false, no more chunks be written until the <code>'drain'</code> event is emitted. While calling <code>write()</code> on a stream that is not draining is allowed, Node.js will buffer all written chunks until maximum memory usage occurs, at which point it will abort unconditionally. Even before it aborts, high memory usage will cause poor garbage collector performance and high RSS (which is not typically released back to the system, even after the memory is no longer required). Since TCP sockets may never drain if the remote peer does not read the data, writing a socket that is not draining may lead to a remotely exploitable vulnerability.</p> <p>Writing data while the stream is not draining is particularly problematic for a <a href=\"#stream_class_stream_transform\">Transform</a>, because the <code>Transform</code> streams are paused by default until they are piped or an <code>'data'</code> or <code>'readable'</code> event handler is added.</p> <p>If the data to be written can be generated or fetched on demand, it is recommended to encapsulate the logic into a <a href=\"#stream_class_stream_readable\">Readable</a> and use <a href=\"#stream_readable_pipe_destination_options\"><code>stream.pipe()</code></a>. However, if calling <code>write()</code> is preferred, it is possible to respect backpressure and avoid memory issues using the <a href=\"#stream_event_drain\"><code>'drain'</code></a> event:</p> <pre data-language=\"js\">function write (data, cb) {\n  if (!stream.write(data)) {\n    stream.once('drain', cb)\n  } else {\n    process.nextTick(cb)\n  }\n}\n\n// Wait for cb to be called before doing any other write.\nwrite('hello', () =&gt; {\n  console.log('write completed, do more writes now')\n})\n</pre> <p>A Writable stream in object mode will always ignore the <code>encoding</code> argument.</p> <h3 id=\"stream_readable_streams\">Readable Streams</h3> <p>Readable streams are an abstraction for a <em>source</em> from which data is consumed.</p> <p>Examples of Readable streams include:</p> <ul> <li><a href=\"http#http_class_http_incomingmessage\">HTTP responses, on the client</a></li> <li><a href=\"http#http_class_http_incomingmessage\">HTTP requests, on the server</a></li> <li><a href=\"fs#fs_class_fs_readstream\">fs read streams</a></li> <li><a href=\"zlib\">zlib streams</a></li> <li><a href=\"crypto\">crypto streams</a></li> <li><a href=\"net#net_class_net_socket\">TCP sockets</a></li> <li><a href=\"child_process#child_process_child_stdout\">child process stdout and stderr</a></li> <li><a href=\"process#process_process_stdin\"><code>process.stdin</code></a></li> </ul> <p>All <a href=\"#stream_class_stream_readable\">Readable</a> streams implement the interface defined by the <code>stream.Readable</code> class.</p> <h4 id=\"stream_two_modes\">Two Modes</h4> <p>Readable streams effectively operate in one of two modes: flowing and paused.</p> <p>When in flowing mode, data is read from the underlying system automatically and provided to an application as quickly as possible using events via the <a href=\"events#events_class_eventemitter\"><code>EventEmitter</code></a> interface.</p> <p>In paused mode, the <a href=\"#stream_readable_read_size\"><code>stream.read()</code></a> method must be called explicitly to read chunks of data from the stream.</p> <p>All <a href=\"#stream_class_stream_readable\">Readable</a> streams begin in paused mode but can be switched to flowing mode in one of the following ways:</p> <ul> <li>Adding a <a href=\"#stream_event_data\"><code>'data'</code></a> event handler.</li> <li>Calling the <a href=\"#stream_readable_resume\"><code>stream.resume()</code></a> method.</li> <li>Calling the <a href=\"#stream_readable_pipe_destination_options\"><code>stream.pipe()</code></a> method to send the data to a <a href=\"#stream_class_stream_writable\">Writable</a>.</li> </ul> <p>The Readable can switch back to paused mode using one of the following:</p> <ul> <li>If there are no pipe destinations, by calling the <a href=\"#stream_readable_pause\"><code>stream.pause()</code></a> method.</li> <li>If there are pipe destinations, by removing any <a href=\"#stream_event_data\"><code>'data'</code></a> event handlers, and removing all pipe destinations by calling the <a href=\"#stream_readable_unpipe_destination\"><code>stream.unpipe()</code></a> method.</li> </ul> <p>The important concept to remember is that a Readable will not generate data until a mechanism for either consuming or ignoring that data is provided. If the consuming mechanism is disabled or taken away, the Readable will <em>attempt</em> to stop generating the data.</p> <p><em>Note</em>: For backwards compatibility reasons, removing <a href=\"#stream_event_data\"><code>'data'</code></a> event handlers will <strong>not</strong> automatically pause the stream. Also, if there are piped destinations, then calling <a href=\"#stream_readable_pause\"><code>stream.pause()</code></a> will not guarantee that the stream will <em>remain</em> paused once those destinations drain and ask for more data.</p> <p><em>Note</em>: If a <a href=\"#stream_class_stream_readable\">Readable</a> is switched into flowing mode and there are no consumers available to handle the data, that data will be lost. This can occur, for instance, when the <code>readable.resume()</code> method is called without a listener attached to the <code>'data'</code> event, or when a <code>'data'</code> event handler is removed from the stream.</p> <h4 id=\"stream_three_states\">Three States</h4> <p>The \"two modes\" of operation for a Readable stream are a simplified abstraction for the more complicated internal state management that is happening within the Readable stream implementation.</p> <p>Specifically, at any given point in time, every Readable is in one of three possible states:</p> <ul> <li><code>readable._readableState.flowing = null</code></li> <li><code>readable._readableState.flowing = false</code></li> <li><code>readable._readableState.flowing = true</code></li> </ul> <p>When <code>readable._readableState.flowing</code> is <code>null</code>, no mechanism for consuming the streams data is provided so the stream will not generate its data.</p> <p>Attaching a listener for the <code>'data'</code> event, calling the <code>readable.pipe()</code> method, or calling the <code>readable.resume()</code> method will switch <code>readable._readableState.flowing</code> to <code>true</code>, causing the Readable to begin actively emitting events as data is generated.</p> <p>Calling <code>readable.pause()</code>, <code>readable.unpipe()</code>, or receiving \"back pressure\" will cause the <code>readable._readableState.flowing</code> to be set as <code>false</code>, temporarily halting the flowing of events but <em>not</em> halting the generation of data.</p> <p>While <code>readable._readableState.flowing</code> is <code>false</code>, data may be accumulating within the streams internal buffer.</p> <h4 id=\"stream_choose_one\">Choose One</h4> <p>The Readable stream API evolved across multiple Node.js versions and provides multiple methods of consuming stream data. In general, developers should choose <em>one</em> of the methods of consuming data and <em>should never</em> use multiple methods to consume data from a single stream.</p> <p>Use of the <code>readable.pipe()</code> method is recommended for most users as it has been implemented to provide the easiest way of consuming stream data. Developers that require more fine-grained control over the transfer and generation of data can use the <a href=\"events#events_class_eventemitter\"><code>EventEmitter</code></a> and <code>readable.pause()</code>/<code>readable.resume()</code> APIs.</p> <h4 id=\"stream_class_stream_readable\">Class: stream.Readable</h4> <div class=\"api_metadata\"> <span>Added in: v0.9.4</span> </div> <h5 id=\"stream_event_close_1\">Event: 'close'</h5> <div class=\"api_metadata\"> <span>Added in: v0.9.4</span> </div>\n<p>The <code>'close'</code> event is emitted when the stream and any of its underlying resources (a file descriptor, for example) have been closed. The event indicates that no more events will be emitted, and no further computation will occur.</p> <p>Not all <a href=\"#stream_class_stream_readable\">Readable</a> streams will emit the <code>'close'</code> event.</p> <h5 id=\"stream_event_data\">Event: 'data'</h5> <div class=\"api_metadata\"> <span>Added in: v0.9.4</span> </div>\n<ul> <li>\n<code>chunk</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <span class=\"type\">&lt;any&gt;</span> The chunk of data. For streams that are not operating in object mode, the chunk will be either a string or <code>Buffer</code>. For streams that are in object mode, the chunk can be any JavaScript value other than <code>null</code>.</li> </ul> <p>The <code>'data'</code> event is emitted whenever the stream is relinquishing ownership of a chunk of data to a consumer. This may occur whenever the stream is switched in flowing mode by calling <code>readable.pipe()</code>, <code>readable.resume()</code>, or by attaching a listener callback to the <code>'data'</code> event. The <code>'data'</code> event will also be emitted whenever the <code>readable.read()</code> method is called and a chunk of data is available to be returned.</p> <p>Attaching a <code>'data'</code> event listener to a stream that has not been explicitly paused will switch the stream into flowing mode. Data will then be passed as soon as it is available.</p> <p>The listener callback will be passed the chunk of data as a string if a default encoding has been specified for the stream using the <code>readable.setEncoding()</code> method; otherwise the data will be passed as a <code>Buffer</code>.</p> <pre data-language=\"js\">const readable = getReadableStreamSomehow();\nreadable.on('data', (chunk) =&gt; {\n  console.log(`Received ${chunk.length} bytes of data.`);\n});\n</pre> <h5 id=\"stream_event_end\">Event: 'end'</h5> <div class=\"api_metadata\"> <span>Added in: v0.9.4</span> </div>\n<p>The <code>'end'</code> event is emitted when there is no more data to be consumed from the stream.</p> <p><em>Note</em>: The <code>'end'</code> event <strong>will not be emitted</strong> unless the data is completely consumed. This can be accomplished by switching the stream into flowing mode, or by calling <a href=\"#stream_readable_read_size\"><code>stream.read()</code></a> repeatedly until all data has been consumed.</p> <pre data-language=\"js\">const readable = getReadableStreamSomehow();\nreadable.on('data', (chunk) =&gt; {\n  console.log(`Received ${chunk.length} bytes of data.`);\n});\nreadable.on('end', () =&gt; {\n  console.log('There will be no more data.');\n});\n</pre> <h5 id=\"stream_event_error_1\">Event: 'error'</h5> <div class=\"api_metadata\"> <span>Added in: v0.9.4</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a></li> </ul> <p>The <code>'error'</code> event may be emitted by a Readable implementation at any time. Typically, this may occur if the underlying stream in unable to generate data due to an underlying internal failure, or when a stream implementation attempts to push an invalid chunk of data.</p> <p>The listener callback will be passed a single <code>Error</code> object.</p> <h5 id=\"stream_event_readable\">Event: 'readable'</h5> <div class=\"api_metadata\"> <span>Added in: v0.9.4</span> </div>\n<p>The <code>'readable'</code> event is emitted when there is data available to be read from the stream. In some cases, attaching a listener for the <code>'readable'</code> event will cause some amount of data to be read into an internal buffer.</p> <pre data-language=\"javascript\">const readable = getReadableStreamSomehow();\nreadable.on('readable', () =&gt; {\n  // there is some data to read now\n});\n</pre> <p>The <code>'readable'</code> event will also be emitted once the end of the stream data has been reached but before the <code>'end'</code> event is emitted.</p> <p>Effectively, the <code>'readable'</code> event indicates that the stream has new information: either new data is available or the end of the stream has been reached. In the former case, <a href=\"#stream_readable_read_size\"><code>stream.read()</code></a> will return the available data. In the latter case, <a href=\"#stream_readable_read_size\"><code>stream.read()</code></a> will return <code>null</code>. For instance, in the following example, <code>foo.txt</code> is an empty file:</p> <pre data-language=\"js\">const fs = require('fs');\nconst rr = fs.createReadStream('foo.txt');\nrr.on('readable', () =&gt; {\n  console.log('readable:', rr.read());\n});\nrr.on('end', () =&gt; {\n  console.log('end');\n});\n</pre> <p>The output of running this script is:</p> <pre data-language=\"txt\">$ node test.js\nreadable: null\nend\n</pre> <p><em>Note</em>: In general, the <code>readable.pipe()</code> and <code>'data'</code> event mechanisms are preferred over the use of the <code>'readable'</code> event.</p> <h5 id=\"stream_readable_ispaused\">readable.isPaused()</h5> <div class=\"api_metadata\"> <span>Added in: v0.11.14</span> </div>\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a>\n</li> </ul> <p>The <code>readable.isPaused()</code> method returns the current operating state of the Readable. This is used primarily by the mechanism that underlies the <code>readable.pipe()</code> method. In most typical cases, there will be no reason to use this method directly.</p> <pre data-language=\"js\">const readable = new stream.Readable\n\nreadable.isPaused() // === false\nreadable.pause()\nreadable.isPaused() // === true\nreadable.resume()\nreadable.isPaused() // === false\n</pre> <h5 id=\"stream_readable_pause\">readable.pause()</h5> <div class=\"api_metadata\"> <span>Added in: v0.9.4</span> </div>\n<ul> <li>Returns: <code>this</code>\n</li> </ul> <p>The <code>readable.pause()</code> method will cause a stream in flowing mode to stop emitting <a href=\"#stream_event_data\"><code>'data'</code></a> events, switching out of flowing mode. Any data that becomes available will remain in the internal buffer.</p> <pre data-language=\"js\">const readable = getReadableStreamSomehow();\nreadable.on('data', (chunk) =&gt; {\n  console.log(`Received ${chunk.length} bytes of data.`);\n  readable.pause();\n  console.log('There will be no additional data for 1 second.');\n  setTimeout(() =&gt; {\n    console.log('Now data will start flowing again.');\n    readable.resume();\n  }, 1000);\n});\n</pre> <h5 id=\"stream_readable_pipe_destination_options\">readable.pipe(destination[, options])</h5> <div class=\"api_metadata\"> <span>Added in: v0.9.4</span> </div>\n<ul> <li>\n<code>destination</code> <a href=\"stream#stream_class_stream_writable\" class=\"type\">&lt;stream.Writable&gt;</a> The destination for writing data</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Pipe options<ul> <li>\n<code>end</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> End the writer when the reader ends. Defaults to <code>true</code>.</li> </ul> </li> </ul> <p>The <code>readable.pipe()</code> method attaches a <a href=\"#stream_class_stream_writable\">Writable</a> stream to the <code>readable</code>, causing it to switch automatically into flowing mode and push all of its data to the attached <a href=\"#stream_class_stream_writable\">Writable</a>. The flow of data will be automatically managed so that the destination Writable stream is not overwhelmed by a faster Readable stream.</p> <p>The following example pipes all of the data from the <code>readable</code> into a file named <code>file.txt</code>:</p> <pre data-language=\"js\">const readable = getReadableStreamSomehow();\nconst writable = fs.createWriteStream('file.txt');\n// All the data from readable goes into 'file.txt'\nreadable.pipe(writable);\n</pre> <p>It is possible to attach multiple Writable streams to a single Readable stream.</p> <p>The <code>readable.pipe()</code> method returns a reference to the <em>destination</em> stream making it possible to set up chains of piped streams:</p> <pre data-language=\"js\">const r = fs.createReadStream('file.txt');\nconst z = zlib.createGzip();\nconst w = fs.createWriteStream('file.txt.gz');\nr.pipe(z).pipe(w);\n</pre> <p>By default, <a href=\"#stream_writable_end_chunk_encoding_callback\"><code>stream.end()</code></a> is called on the destination Writable stream when the source Readable stream emits <a href=\"#stream_event_end\"><code>'end'</code></a>, so that the destination is no longer writable. To disable this default behavior, the <code>end</code> option can be passed as <code>false</code>, causing the destination stream to remain open, as illustrated in the following example:</p> <pre data-language=\"js\">reader.pipe(writer, { end: false });\nreader.on('end', () =&gt; {\n  writer.end('Goodbye\\n');\n});\n</pre> <p>One important caveat is that if the Readable stream emits an error during processing, the Writable destination <em>is not closed</em> automatically. If an error occurs, it will be necessary to <em>manually</em> close each stream in order to prevent memory leaks.</p> <p><em>Note</em>: The <a href=\"process#process_process_stderr\"><code>process.stderr</code></a> and <a href=\"process#process_process_stdout\"><code>process.stdout</code></a> Writable streams are never closed until the Node.js process exits, regardless of the specified options.</p> <h5 id=\"stream_readable_read_size\">readable.read([size])</h5> <div class=\"api_metadata\"> <span>Added in: v0.9.4</span> </div>\n<ul> <li>\n<code>size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Optional argument to specify how much data to read.</li> <li>Return <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type\" class=\"type\">&lt;null&gt;</a>\n</li> </ul> <p>The <code>readable.read()</code> method pulls some data out of the internal buffer and returns it. If no data available to be read, <code>null</code> is returned. By default, the data will be returned as a <code>Buffer</code> object unless an encoding has been specified using the <code>readable.setEncoding()</code> method or the stream is operating in object mode.</p> <p>The optional <code>size</code> argument specifies a specific number of bytes to read. If <code>size</code> bytes are not available to be read, <code>null</code> will be returned <em>unless</em> the stream has ended, in which case all of the data remaining in the internal buffer will be returned (<em>even if it exceeds <code>size</code> bytes</em>).</p> <p>If the <code>size</code> argument is not specified, all of the data contained in the internal buffer will be returned.</p> <p>The <code>readable.read()</code> method should only be called on Readable streams operating in paused mode. In flowing mode, <code>readable.read()</code> is called automatically until the internal buffer is fully drained.</p> <pre data-language=\"js\">const readable = getReadableStreamSomehow();\nreadable.on('readable', () =&gt; {\n  var chunk;\n  while (null !== (chunk = readable.read())) {\n    console.log(`Received ${chunk.length} bytes of data.`);\n  }\n});\n</pre> <p>In general, it is recommended that developers avoid the use of the <code>'readable'</code> event and the <code>readable.read()</code> method in favor of using either <code>readable.pipe()</code> or the <code>'data'</code> event.</p> <p>A Readable stream in object mode will always return a single item from a call to <a href=\"#stream_readable_read_size\"><code>readable.read(size)</code></a>, regardless of the value of the <code>size</code> argument.</p> <p><em>Note:</em> If the <code>readable.read()</code> method returns a chunk of data, a <code>'data'</code> event will also be emitted.</p> <p><em>Note</em>: Calling <a href=\"#stream_readable_read_size\"><code>stream.read([size])</code></a> after the <a href=\"#stream_event_end\"><code>'end'</code></a> event has been emitted will return <code>null</code>. No runtime error will be raised.</p> <h5 id=\"stream_readable_resume\">readable.resume()</h5> <div class=\"api_metadata\"> <span>Added in: v0.9.4</span> </div>\n<ul> <li>Returns: <code>this</code>\n</li> </ul> <p>The <code>readable.resume()</code> method causes an explicitly paused Readable stream to resume emitting <a href=\"#stream_event_data\"><code>'data'</code></a> events, switching the stream into flowing mode.</p> <p>The <code>readable.resume()</code> method can be used to fully consume the data from a stream without actually processing any of that data as illustrated in the following example:</p> <pre data-language=\"js\">getReadableStreamSomehow()\n  .resume()\n  .on('end', () =&gt; {\n    console.log('Reached the end, but did not read anything.');\n  });\n</pre> <h5 id=\"stream_readable_setencoding_encoding\">readable.setEncoding(encoding)</h5> <div class=\"api_metadata\"> <span>Added in: v0.9.4</span> </div>\n<ul> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The encoding to use.</li> <li>Returns: <code>this</code>\n</li> </ul> <p>The <code>readable.setEncoding()</code> method sets the default character encoding for data read from the Readable stream.</p> <p>Setting an encoding causes the stream data to be returned as string of the specified encoding rather than as <code>Buffer</code> objects. For instance, calling <code>readable.setEncoding('utf8')</code> will cause the output data will be interpreted as UTF-8 data, and passed as strings. Calling <code>readable.setEncoding('hex')</code> will cause the data to be encoded in hexadecimal string format.</p> <p>The Readable stream will properly handle multi-byte characters delivered through the stream that would otherwise become improperly decoded if simply pulled from the stream as <code>Buffer</code> objects.</p> <p>Encoding can be disabled by calling <code>readable.setEncoding(null)</code>. This approach is useful when working with binary data or with large multi-byte strings spread out over multiple chunks.</p> <pre data-language=\"js\">const readable = getReadableStreamSomehow();\nreadable.setEncoding('utf8');\nreadable.on('data', (chunk) =&gt; {\n  assert.equal(typeof chunk, 'string');\n  console.log('got %d characters of string data', chunk.length);\n});\n</pre> <h5 id=\"stream_readable_unpipe_destination\">readable.unpipe([destination])</h5> <div class=\"api_metadata\"> <span>Added in: v0.9.4</span> </div>\n<ul> <li>\n<code>destination</code> <a href=\"stream#stream_class_stream_writable\" class=\"type\">&lt;stream.Writable&gt;</a> Optional specific stream to unpipe</li> </ul> <p>The <code>readable.unpipe()</code> method detaches a Writable stream previously attached using the <a href=\"#stream_readable_pipe_destination_options\"><code>stream.pipe()</code></a> method.</p> <p>If the <code>destination</code> is not specified, then <em>all</em> pipes are detached.</p> <p>If the <code>destination</code> is specified, but no pipe is set up for it, then the method does nothing.</p> <pre data-language=\"js\">const readable = getReadableStreamSomehow();\nconst writable = fs.createWriteStream('file.txt');\n// All the data from readable goes into 'file.txt',\n// but only for the first second\nreadable.pipe(writable);\nsetTimeout(() =&gt; {\n  console.log('Stop writing to file.txt');\n  readable.unpipe(writable);\n  console.log('Manually close the file stream');\n  writable.end();\n}, 1000);\n</pre> <h5 id=\"stream_readable_unshift_chunk\">readable.unshift(chunk)</h5> <div class=\"api_metadata\"> <span>Added in: v0.9.11</span> </div>\n<ul> <li>\n<code>chunk</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <span class=\"type\">&lt;any&gt;</span> Chunk of data to unshift onto the read queue</li> </ul> <p>The <code>readable.unshift()</code> method pushes a chunk of data back into the internal buffer. This is useful in certain situations where a stream is being consumed by code that needs to \"un-consume\" some amount of data that it has optimistically pulled out of the source, so that the data can be passed on to some other party.</p> <p><em>Note</em>: The <code>stream.unshift(chunk)</code> method cannot be called after the <a href=\"#stream_event_end\"><code>'end'</code></a> event has been emitted or a runtime error will be thrown.</p> <p>Developers using <code>stream.unshift()</code> often should consider switching to use of a <a href=\"#stream_class_stream_transform\">Transform</a> stream instead. See the <a href=\"#stream_api_for_stream_implementers\">API for Stream Implementers</a> section for more information.</p> <pre data-language=\"js\">// Pull off a header delimited by \\n\\n\n// use unshift() if we get too much\n// Call the callback with (error, header, stream)\nconst StringDecoder = require('string_decoder').StringDecoder;\nfunction parseHeader(stream, callback) {\n  stream.on('error', callback);\n  stream.on('readable', onReadable);\n  const decoder = new StringDecoder('utf8');\n  var header = '';\n  function onReadable() {\n    var chunk;\n    while (null !== (chunk = stream.read())) {\n      var str = decoder.write(chunk);\n      if (str.match(/\\n\\n/)) {\n        // found the header boundary\n        var split = str.split(/\\n\\n/);\n        header += split.shift();\n        const remaining = split.join('\\n\\n');\n        const buf = Buffer.from(remaining, 'utf8');\n        stream.removeListener('error', callback);\n        // remove the readable listener before unshifting\n        stream.removeListener('readable', onReadable);\n        if (buf.length)\n          stream.unshift(buf);\n        // now the body of the message can be read from the stream.\n        callback(null, header, stream);\n      } else {\n        // still reading the header.\n        header += str;\n      }\n    }\n  }\n}\n</pre> <p><em>Note</em>: Unlike <a href=\"#stream_readable_push_chunk_encoding\"><code>stream.push(chunk)</code></a>, <code>stream.unshift(chunk)</code> will not end the reading process by resetting the internal reading state of the stream. This can cause unexpected results if <code>readable.unshift()</code> is called during a read (i.e. from within a <a href=\"#stream_readable_read_size_1\"><code>stream._read()</code></a> implementation on a custom stream). Following the call to <code>readable.unshift()</code> with an immediate <a href=\"#stream_readable_push_chunk_encoding\"><code>stream.push('')</code></a> will reset the reading state appropriately, however it is best to simply avoid calling <code>readable.unshift()</code> while in the process of performing a read.</p> <h5 id=\"stream_readable_wrap_stream\">readable.wrap(stream)</h5> <div class=\"api_metadata\"> <span>Added in: v0.9.4</span> </div>\n<ul> <li>\n<code>stream</code> <a href=\"stream#stream_stream\" class=\"type\">&lt;Stream&gt;</a> An \"old style\" readable stream</li> </ul> <p>Versions of Node.js prior to v0.10 had streams that did not implement the entire <code>stream</code> module API as it is currently defined. (See <a href=\"#stream_compatibility_with_older_node_js_versions\">Compatibility</a> for more information.)</p> <p>When using an older Node.js library that emits <a href=\"#stream_event_data\"><code>'data'</code></a> events and has a <a href=\"#stream_readable_pause\"><code>stream.pause()</code></a> method that is advisory only, the <code>readable.wrap()</code> method can be used to create a <a href=\"#stream_class_stream_readable\">Readable</a> stream that uses the old stream as its data source.</p> <p>It will rarely be necessary to use <code>readable.wrap()</code> but the method has been provided as a convenience for interacting with older Node.js applications and libraries.</p> <p>For example:</p> <pre data-language=\"js\">const OldReader = require('./old-api-module.js').OldReader;\nconst Readable = require('stream').Readable;\nconst oreader = new OldReader;\nconst myReader = new Readable().wrap(oreader);\n\nmyReader.on('readable', () =&gt; {\n  myReader.read(); // etc.\n});\n</pre> <h3 id=\"stream_duplex_and_transform_streams\">Duplex and Transform Streams</h3> <h4 id=\"stream_class_stream_duplex\">Class: stream.Duplex</h4> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.8.0</td> <td>\n<p>Instances of <code>Duplex</code> now return <code>true</code> when checking <code>instanceof stream.Writable</code>.</p> </td>\n</tr> <tr>\n<td>v0.9.4</td> <td>\n<p><span>Added in: v0.9.4</span></p> </td>\n</tr> </table> </details> </div> <p>Duplex streams are streams that implement both the <a href=\"#stream_class_stream_readable\">Readable</a> and <a href=\"#stream_class_stream_writable\">Writable</a> interfaces.</p> <p>Examples of Duplex streams include:</p> <ul> <li><a href=\"net#net_class_net_socket\">TCP sockets</a></li> <li><a href=\"zlib\">zlib streams</a></li> <li><a href=\"crypto\">crypto streams</a></li> </ul> <h4 id=\"stream_class_stream_transform\">Class: stream.Transform</h4> <div class=\"api_metadata\"> <span>Added in: v0.9.4</span> </div> <p>Transform streams are <a href=\"#stream_class_stream_duplex\">Duplex</a> streams where the output is in some way related to the input. Like all <a href=\"#stream_class_stream_duplex\">Duplex</a> streams, Transform streams implement both the <a href=\"#stream_class_stream_readable\">Readable</a> and <a href=\"#stream_class_stream_writable\">Writable</a> interfaces.</p> <p>Examples of Transform streams include:</p> <ul> <li><a href=\"zlib\">zlib streams</a></li> <li><a href=\"crypto\">crypto streams</a></li> </ul> <h2 id=\"stream_api_for_stream_implementers\">API for Stream Implementers</h2>  <p>The <code>stream</code> module API has been designed to make it possible to easily implement streams using JavaScript's prototypal inheritance model.</p> <p>First, a stream developer would declare a new JavaScript class that extends one of the four basic stream classes (<code>stream.Writable</code>, <code>stream.Readable</code>, <code>stream.Duplex</code>, or <code>stream.Transform</code>), making sure they call the appropriate parent class constructor:</p> <pre data-language=\"js\">const Writable = require('stream').Writable;\n\nclass MyWritable extends Writable {\n  constructor(options) {\n    super(options);\n  }\n}\n</pre> <p>The new stream class must then implement one or more specific methods, depending on the type of stream being created, as detailed in the chart below:</p> <table> <thead> <tr> <th> <p>Use-case</p> </th> <th> <p>Class</p> </th> <th> <p>Method(s) to implement</p> </th> </tr> </thead> <tr> <td> <p>Reading only</p> </td> <td> <p><a href=\"#stream_class_stream_readable\">Readable</a></p> </td> <td> <p><code><a href=\"#stream_readable_read_size_1\">_read</a></code></p> </td> </tr> <tr> <td> <p>Writing only</p> </td> <td> <p><a href=\"#stream_class_stream_writable\">Writable</a></p> </td> <td> <p><code><a href=\"#stream_writable_write_chunk_encoding_callback_1\">_write</a></code>, <code><a href=\"#stream_writable_writev_chunks_callback\">_writev</a></code></p> </td> </tr> <tr> <td> <p>Reading and writing</p> </td> <td> <p><a href=\"#stream_class_stream_duplex\">Duplex</a></p> </td> <td> <p><code><a href=\"#stream_readable_read_size_1\">_read</a></code>, <code><a href=\"#stream_writable_write_chunk_encoding_callback_1\">_write</a></code>, <code><a href=\"#stream_writable_writev_chunks_callback\">_writev</a></code></p> </td> </tr> <tr> <td> <p>Operate on written data, then read the result</p> </td> <td> <p><a href=\"#stream_class_stream_transform\">Transform</a></p> </td> <td> <p><code><a href=\"#stream_transform_transform_chunk_encoding_callback\">_transform</a></code>, <code><a href=\"#stream_transform_flush_callback\">_flush</a></code></p> </td> </tr> </table> <p><em>Note</em>: The implementation code for a stream should <em>never</em> call the \"public\" methods of a stream that are intended for use by consumers (as described in the <a href=\"#stream_api_for_stream_consumers\">API for Stream Consumers</a> section). Doing so may lead to adverse side effects in application code consuming the stream.</p> <h3 id=\"stream_simplified_construction\">Simplified Construction</h3> <div class=\"api_metadata\"> <span>Added in: v1.2.0</span> </div>\n<p>For many simple cases, it is possible to construct a stream without relying on inheritance. This can be accomplished by directly creating instances of the <code>stream.Writable</code>, <code>stream.Readable</code>, <code>stream.Duplex</code> or <code>stream.Transform</code> objects and passing appropriate methods as constructor options.</p> <p>For example:</p> <pre data-language=\"js\">const Writable = require('stream').Writable;\n\nconst myWritable = new Writable({\n  write(chunk, encoding, callback) {\n    // ...\n  }\n});\n</pre> <h3 id=\"stream_implementing_a_writable_stream\">Implementing a Writable Stream</h3> <p>The <code>stream.Writable</code> class is extended to implement a <a href=\"#stream_class_stream_writable\">Writable</a> stream.</p> <p>Custom Writable streams <em>must</em> call the <code>new stream.Writable([options])</code> constructor and implement the <code>writable._write()</code> method. The <code>writable._writev()</code> method <em>may</em> also be implemented.</p> <h4 id=\"stream_constructor_new_stream_writable_options\">Constructor: new stream.Writable([options])</h4> <div class=\"signature\">\n<ul> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>highWaterMark</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Buffer level when <a href=\"#stream_writable_write_chunk_encoding_callback\"><code>stream.write()</code></a> starts returning <code>false</code>. Defaults to <code>16384</code> (16kb), or <code>16</code> for <code>objectMode</code> streams.</li> <li>\n<code>decodeStrings</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Whether or not to decode strings into Buffers before passing them to <a href=\"#stream_writable_write_chunk_encoding_callback_1\"><code>stream._write()</code></a>. Defaults to <code>true</code>\n</li> <li>\n<code>objectMode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Whether or not the <a href=\"#stream_writable_write_chunk_encoding_callback\"><code>stream.write(anyObj)</code></a> is a valid operation. When set, it becomes possible to write JavaScript values other than string or <code>Buffer</code> if supported by the stream implementation. Defaults to <code>false</code>\n</li> <li>\n<code>write</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Implementation for the <a href=\"#stream_writable_write_chunk_encoding_callback_1\"><code>stream._write()</code></a> method.</li> <li>\n<code>writev</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Implementation for the <a href=\"#stream_writable_writev_chunks_callback\"><code>stream._writev()</code></a> method.</li> </ul> </li> </ul> </div>\n<p>For example:</p> <pre data-language=\"js\">const Writable = require('stream').Writable;\n\nclass MyWritable extends Writable {\n  constructor(options) {\n    // Calls the stream.Writable() constructor\n    super(options);\n  }\n}\n</pre> <p>Or, when using pre-ES6 style constructors:</p> <pre data-language=\"js\">const Writable = require('stream').Writable;\nconst util = require('util');\n\nfunction MyWritable(options) {\n  if (!(this instanceof MyWritable))\n    return new MyWritable(options);\n  Writable.call(this, options);\n}\nutil.inherits(MyWritable, Writable);\n</pre> <p>Or, using the Simplified Constructor approach:</p> <pre data-language=\"js\">const Writable = require('stream').Writable;\n\nconst myWritable = new Writable({\n  write(chunk, encoding, callback) {\n    // ...\n  },\n  writev(chunks, callback) {\n    // ...\n  }\n});\n</pre> <h4 id=\"stream_writable_write_chunk_encoding_callback_1\">writable._write(chunk, encoding, callback)</h4> <div class=\"signature\">\n<ul> <li>\n<code>chunk</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <span class=\"type\">&lt;any&gt;</span> The chunk to be written. Will <strong>always</strong> be a buffer unless the <code>decodeStrings</code> option was set to <code>false</code> or the stream is operating in object mode.</li> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> If the chunk is a string, then <code>encoding</code> is the character encoding of that string. If chunk is a <code>Buffer</code>, or if the stream is operating in object mode, <code>encoding</code> may be ignored.</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Call this function (optionally with an error argument) when processing is complete for the supplied chunk.</li> </ul> </div>\n<p>All Writable stream implementations must provide a <a href=\"#stream_writable_write_chunk_encoding_callback_1\"><code>writable._write()</code></a> method to send data to the underlying resource.</p> <p><em>Note</em>: <a href=\"#stream_class_stream_transform\">Transform</a> streams provide their own implementation of the <a href=\"#stream_writable_write_chunk_encoding_callback_1\"><code>writable._write()</code></a>.</p> <p><em>Note</em>: <strong>This function MUST NOT be called by application code directly.</strong> It should be implemented by child classes, and called only by the internal Writable class methods only.</p> <p>The <code>callback</code> method must be called to signal either that the write completed successfully or failed with an error. The first argument passed to the <code>callback</code> must be the <code>Error</code> object if the call failed or <code>null</code> if the write succeeded.</p> <p>It is important to note that all calls to <code>writable.write()</code> that occur between the time <code>writable._write()</code> is called and the <code>callback</code> is called will cause the written data to be buffered. Once the <code>callback</code> is invoked, the stream will emit a <a href=\"#stream_event_drain\"><code>'drain'</code></a> event. If a stream implementation is capable of processing multiple chunks of data at once, the <code>writable._writev()</code> method should be implemented.</p> <p>If the <code>decodeStrings</code> property is set in the constructor options, then <code>chunk</code> may be a string rather than a Buffer, and <code>encoding</code> will indicate the character encoding of the string. This is to support implementations that have an optimized handling for certain string data encodings. If the <code>decodeStrings</code> property is explicitly set to <code>false</code>, the <code>encoding</code> argument can be safely ignored, and <code>chunk</code> will remain the same object that is passed to <code>.write()</code>.</p> <p>The <code>writable._write()</code> method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs.</p> <h4 id=\"stream_writable_writev_chunks_callback\">writable._writev(chunks, callback)</h4> <div class=\"signature\">\n<ul> <li>\n<code>chunks</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> The chunks to be written. Each chunk has following format: <code>{ chunk: ..., encoding: ... }</code>.</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A callback function (optionally with an error argument) to be invoked when processing is complete for the supplied chunks.</li> </ul> </div>\n<p><em>Note</em>: <strong>This function MUST NOT be called by application code directly.</strong> It should be implemented by child classes, and called only by the internal Writable class methods only.</p> <p>The <code>writable._writev()</code> method may be implemented in addition to <code>writable._write()</code> in stream implementations that are capable of processing multiple chunks of data at once. If implemented, the method will be called with all chunks of data currently buffered in the write queue.</p> <p>The <code>writable._writev()</code> method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs.</p> <h4 id=\"stream_errors_while_writing\">Errors While Writing</h4> <p>It is recommended that errors occurring during the processing of the <code>writable._write()</code> and <code>writable._writev()</code> methods are reported by invoking the callback and passing the error as the first argument. This will cause an <code>'error'</code> event to be emitted by the Writable. Throwing an Error from within <code>writable._write()</code> can result in unexpected and inconsistent behavior depending on how the stream is being used. Using the callback ensures consistent and predictable handling of errors.</p> <pre data-language=\"js\">const Writable = require('stream').Writable;\n\nconst myWritable = new Writable({\n  write(chunk, encoding, callback) {\n    if (chunk.toString().indexOf('a') &gt;= 0) {\n      callback(new Error('chunk is invalid'));\n    } else {\n      callback();\n    }\n  }\n});\n</pre> <h4 id=\"stream_an_example_writable_stream\">An Example Writable Stream</h4> <p>The following illustrates a rather simplistic (and somewhat pointless) custom Writable stream implementation. While this specific Writable stream instance is not of any real particular usefulness, the example illustrates each of the required elements of a custom <a href=\"#stream_class_stream_writable\">Writable</a> stream instance:</p> <pre data-language=\"js\">const Writable = require('stream').Writable;\n\nclass MyWritable extends Writable {\n  constructor(options) {\n    super(options);\n  }\n\n  _write(chunk, encoding, callback) {\n    if (chunk.toString().indexOf('a') &gt;= 0) {\n      callback(new Error('chunk is invalid'));\n    } else {\n      callback();\n    }\n  }\n}\n</pre> <h3 id=\"stream_implementing_a_readable_stream\">Implementing a Readable Stream</h3> <p>The <code>stream.Readable</code> class is extended to implement a <a href=\"#stream_class_stream_readable\">Readable</a> stream.</p> <p>Custom Readable streams <em>must</em> call the <code>new stream.Readable([options])</code> constructor and implement the <code>readable._read()</code> method.</p> <h4 id=\"stream_new_stream_readable_options\">new stream.Readable([options])</h4> <div class=\"signature\">\n<ul> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>highWaterMark</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The maximum number of bytes to store in the internal buffer before ceasing to read from the underlying resource. Defaults to <code>16384</code> (16kb), or <code>16</code> for <code>objectMode</code> streams</li> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> If specified, then buffers will be decoded to strings using the specified encoding. Defaults to <code>null</code>\n</li> <li>\n<code>objectMode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Whether this stream should behave as a stream of objects. Meaning that <a href=\"#stream_readable_read_size\"><code>stream.read(n)</code></a> returns a single value instead of a Buffer of size n. Defaults to <code>false</code>\n</li> <li>\n<code>read</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Implementation for the <a href=\"#stream_readable_read_size_1\"><code>stream._read()</code></a> method.</li> </ul> </li> </ul> </div>\n<p>For example:</p> <pre data-language=\"js\">const Readable = require('stream').Readable;\n\nclass MyReadable extends Readable {\n  constructor(options) {\n    // Calls the stream.Readable(options) constructor\n    super(options);\n  }\n}\n</pre> <p>Or, when using pre-ES6 style constructors:</p> <pre data-language=\"js\">const Readable = require('stream').Readable;\nconst util = require('util');\n\nfunction MyReadable(options) {\n  if (!(this instanceof MyReadable))\n    return new MyReadable(options);\n  Readable.call(this, options);\n}\nutil.inherits(MyReadable, Readable);\n</pre> <p>Or, using the Simplified Constructor approach:</p> <pre data-language=\"js\">const Readable = require('stream').Readable;\n\nconst myReadable = new Readable({\n  read(size) {\n    // ...\n  }\n});\n</pre> <h4 id=\"stream_readable_read_size_1\">readable._read(size)</h4> <div class=\"signature\">\n<ul> <li>\n<code>size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Number of bytes to read asynchronously</li> </ul> </div>\n<p><em>Note</em>: <strong>This function MUST NOT be called by application code directly.</strong> It should be implemented by child classes, and called only by the internal Readable class methods only.</p> <p>All Readable stream implementations must provide an implementation of the <code>readable._read()</code> method to fetch data from the underlying resource.</p> <p>When <code>readable._read()</code> is called, if data is available from the resource, the implementation should begin pushing that data into the read queue using the <a href=\"#stream_readable_push_chunk_encoding\"><code>this.push(dataChunk)</code></a> method. <code>_read()</code> should continue reading from the resource and pushing data until <code>readable.push()</code> returns <code>false</code>. Only when <code>_read()</code> is called again after it has stopped should it resume pushing additional data onto the queue.</p> <p><em>Note</em>: Once the <code>readable._read()</code> method has been called, it will not be called again until the <a href=\"#stream_readable_push_chunk_encoding\"><code>readable.push()</code></a> method is called.</p> <p>The <code>size</code> argument is advisory. For implementations where a \"read\" is a single operation that returns data can use the <code>size</code> argument to determine how much data to fetch. Other implementations may ignore this argument and simply provide data whenever it becomes available. There is no need to \"wait\" until <code>size</code> bytes are available before calling <a href=\"#stream_readable_push_chunk_encoding\"><code>stream.push(chunk)</code></a>.</p> <p>The <code>readable._read()</code> method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs.</p> <h4 id=\"stream_readable_push_chunk_encoding\">readable.push(chunk[, encoding])</h4> <div class=\"signature\">\n<ul> <li>\n<code>chunk</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type\" class=\"type\">&lt;null&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <span class=\"type\">&lt;any&gt;</span> Chunk of data to push into the read queue</li> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Encoding of String chunks. Must be a valid Buffer encoding, such as <code>'utf8'</code> or <code>'ascii'</code>\n</li> <li>Returns <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <code>true</code> if additional chunks of data may continued to be pushed; <code>false</code> otherwise.</li> </ul> </div>\n<p>When <code>chunk</code> is not <code>null</code>, the <code>chunk</code> of data will be added to the internal queue for users of the stream to consume. Passing <code>chunk</code> as <code>null</code> signals the end of the stream (EOF), after which no more data can be written.</p> <p>When the Readable is operating in paused mode, the data added with <code>readable.push()</code> can be read out by calling the <a href=\"#stream_readable_read_size\"><code>readable.read()</code></a> method when the <a href=\"#stream_event_readable\"><code>'readable'</code></a> event is emitted.</p> <p>When the Readable is operating in flowing mode, the data added with <code>readable.push()</code> will be delivered by emitting a <code>'data'</code> event.</p> <p>The <code>readable.push()</code> method is designed to be as flexible as possible. For example, when wrapping a lower-level source that provides some form of pause/resume mechanism, and a data callback, the low-level source can be wrapped by the custom Readable instance as illustrated in the following example:</p> <pre data-language=\"js\">// source is an object with readStop() and readStart() methods,\n// and an `ondata` member that gets called when it has data, and\n// an `onend` member that gets called when the data is over.\n\nclass SourceWrapper extends Readable {\n  constructor(options) {\n    super(options);\n\n    this._source = getLowlevelSourceObject();\n\n    // Every time there's data, push it into the internal buffer.\n    this._source.ondata = (chunk) =&gt; {\n      // if push() returns false, then stop reading from source\n      if (!this.push(chunk))\n        this._source.readStop();\n    };\n\n    // When the source ends, push the EOF-signaling `null` chunk\n    this._source.onend = () =&gt; {\n      this.push(null);\n    };\n  }\n  // _read will be called when the stream wants to pull more data in\n  // the advisory size argument is ignored in this case.\n  _read(size) {\n    this._source.readStart();\n  }\n}\n</pre> <p><em>Note</em>: The <code>readable.push()</code> method is intended be called only by Readable Implementers, and only from within the <code>readable._read()</code> method.</p> <h4 id=\"stream_errors_while_reading\">Errors While Reading</h4> <p>It is recommended that errors occurring during the processing of the <code>readable._read()</code> method are emitted using the <code>'error'</code> event rather than being thrown. Throwing an Error from within <code>readable._read()</code> can result in unexpected and inconsistent behavior depending on whether the stream is operating in flowing or paused mode. Using the <code>'error'</code> event ensures consistent and predictable handling of errors.</p>  <pre data-language=\"js\">const Readable = require('stream').Readable;\n\nconst myReadable = new Readable({\n  read(size) {\n    if (checkSomeErrorCondition()) {\n      process.nextTick(() =&gt; this.emit('error', err));\n      return;\n    }\n    // do some work\n  }\n});\n</pre> <h4 id=\"stream_an_example_counting_stream\">An Example Counting Stream</h4>  <p>The following is a basic example of a Readable stream that emits the numerals from 1 to 1,000,000 in ascending order, and then ends.</p> <pre data-language=\"js\">const Readable = require('stream').Readable;\n\nclass Counter extends Readable {\n  constructor(opt) {\n    super(opt);\n    this._max = 1000000;\n    this._index = 1;\n  }\n\n  _read() {\n    var i = this._index++;\n    if (i &gt; this._max)\n      this.push(null);\n    else {\n      var str = '' + i;\n      var buf = Buffer.from(str, 'ascii');\n      this.push(buf);\n    }\n  }\n}\n</pre> <h3 id=\"stream_implementing_a_duplex_stream\">Implementing a Duplex Stream</h3> <p>A <a href=\"#stream_class_stream_duplex\">Duplex</a> stream is one that implements both <a href=\"#stream_class_stream_readable\">Readable</a> and <a href=\"#stream_class_stream_writable\">Writable</a>, such as a TCP socket connection.</p> <p>Because JavaScript does not have support for multiple inheritance, the <code>stream.Duplex</code> class is extended to implement a <a href=\"#stream_class_stream_duplex\">Duplex</a> stream (as opposed to extending the <code>stream.Readable</code> <em>and</em> <code>stream.Writable</code> classes).</p> <p><em>Note</em>: The <code>stream.Duplex</code> class prototypically inherits from <code>stream.Readable</code> and parasitically from <code>stream.Writable</code>, but <code>instanceof</code> will work properly for both base classes due to overriding <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance\"><code>Symbol.hasInstance</code></a> on <code>stream.Writable</code>.</p> <p>Custom Duplex streams <em>must</em> call the <code>new stream.Duplex([options])</code> constructor and implement <em>both</em> the <code>readable._read()</code> and <code>writable._write()</code> methods.</p> <h4 id=\"stream_new_stream_duplex_options\">new stream.Duplex(options)</h4> <div class=\"signature\">\n<ul> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Passed to both Writable and Readable constructors. Also has the following fields:<ul> <li>\n<code>allowHalfOpen</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Defaults to <code>true</code>. If set to <code>false</code>, then the stream will automatically end the readable side when the writable side ends and vice versa.</li> <li>\n<code>readableObjectMode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Defaults to <code>false</code>. Sets <code>objectMode</code> for readable side of the stream. Has no effect if <code>objectMode</code> is <code>true</code>.</li> <li>\n<code>writableObjectMode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Defaults to <code>false</code>. Sets <code>objectMode</code> for writable side of the stream. Has no effect if <code>objectMode</code> is <code>true</code>.</li> </ul> </li> </ul> </div>\n<p>For example:</p> <pre data-language=\"js\">const Duplex = require('stream').Duplex;\n\nclass MyDuplex extends Duplex {\n  constructor(options) {\n    super(options);\n  }\n}\n</pre> <p>Or, when using pre-ES6 style constructors:</p> <pre data-language=\"js\">const Duplex = require('stream').Duplex;\nconst util = require('util');\n\nfunction MyDuplex(options) {\n  if (!(this instanceof MyDuplex))\n    return new MyDuplex(options);\n  Duplex.call(this, options);\n}\nutil.inherits(MyDuplex, Duplex);\n</pre> <p>Or, using the Simplified Constructor approach:</p> <pre data-language=\"js\">const Duplex = require('stream').Duplex;\n\nconst myDuplex = new Duplex({\n  read(size) {\n    // ...\n  },\n  write(chunk, encoding, callback) {\n    // ...\n  }\n});\n</pre> <h4 id=\"stream_an_example_duplex_stream\">An Example Duplex Stream</h4> <p>The following illustrates a simple example of a Duplex stream that wraps a hypothetical lower-level source object to which data can be written, and from which data can be read, albeit using an API that is not compatible with Node.js streams. The following illustrates a simple example of a Duplex stream that buffers incoming written data via the <a href=\"#stream_class_stream_writable\">Writable</a> interface that is read back out via the <a href=\"#stream_class_stream_readable\">Readable</a> interface.</p> <pre data-language=\"js\">const Duplex = require('stream').Duplex;\nconst kSource = Symbol('source');\n\nclass MyDuplex extends Duplex {\n  constructor(source, options) {\n    super(options);\n    this[kSource] = source;\n  }\n\n  _write(chunk, encoding, callback) {\n    // The underlying source only deals with strings\n    if (Buffer.isBuffer(chunk))\n      chunk = chunk.toString();\n    this[kSource].writeSomeData(chunk);\n    callback();\n  }\n\n  _read(size) {\n    this[kSource].fetchSomeData(size, (data, encoding) =&gt; {\n      this.push(Buffer.from(data, encoding));\n    });\n  }\n}\n</pre> <p>The most important aspect of a Duplex stream is that the Readable and Writable sides operate independently of one another despite co-existing within a single object instance.</p> <h4 id=\"stream_object_mode_duplex_streams\">Object Mode Duplex Streams</h4> <p>For Duplex streams, <code>objectMode</code> can be set exclusively for either the Readable or Writable side using the <code>readableObjectMode</code> and <code>writableObjectMode</code> options respectively.</p> <p>In the following example, for instance, a new Transform stream (which is a type of <a href=\"#stream_class_stream_duplex\">Duplex</a> stream) is created that has an object mode Writable side that accepts JavaScript numbers that are converted to hexadecimal strings on the Readable side.</p> <pre data-language=\"js\">const Transform = require('stream').Transform;\n\n// All Transform streams are also Duplex Streams\nconst myTransform = new Transform({\n  writableObjectMode: true,\n\n  transform(chunk, encoding, callback) {\n    // Coerce the chunk to a number if necessary\n    chunk |= 0;\n\n    // Transform the chunk into something else.\n    const data = chunk.toString(16);\n\n    // Push the data onto the readable queue.\n    callback(null, '0'.repeat(data.length % 2) + data);\n  }\n});\n\nmyTransform.setEncoding('ascii');\nmyTransform.on('data', (chunk) =&gt; console.log(chunk));\n\nmyTransform.write(1);\n// Prints: 01\nmyTransform.write(10);\n// Prints: 0a\nmyTransform.write(100);\n// Prints: 64\n</pre> <h3 id=\"stream_implementing_a_transform_stream\">Implementing a Transform Stream</h3> <p>A <a href=\"#stream_class_stream_transform\">Transform</a> stream is a <a href=\"#stream_class_stream_duplex\">Duplex</a> stream where the output is computed in some way from the input. Examples include <a href=\"zlib\">zlib</a> streams or <a href=\"crypto\">crypto</a> streams that compress, encrypt, or decrypt data.</p> <p><em>Note</em>: There is no requirement that the output be the same size as the input, the same number of chunks, or arrive at the same time. For example, a Hash stream will only ever have a single chunk of output which is provided when the input is ended. A <code>zlib</code> stream will produce output that is either much smaller or much larger than its input.</p> <p>The <code>stream.Transform</code> class is extended to implement a <a href=\"#stream_class_stream_transform\">Transform</a> stream.</p> <p>The <code>stream.Transform</code> class prototypically inherits from <code>stream.Duplex</code> and implements its own versions of the <code>writable._write()</code> and <code>readable._read()</code> methods. Custom Transform implementations <em>must</em> implement the <a href=\"#stream_transform_transform_chunk_encoding_callback\"><code>transform._transform()</code></a> method and <em>may</em> also implement the <a href=\"#stream_transform_flush_callback\"><code>transform._flush()</code></a> method.</p> <p><em>Note</em>: Care must be taken when using Transform streams in that data written to the stream can cause the Writable side of the stream to become paused if the output on the Readable side is not consumed.</p> <h4 id=\"stream_new_stream_transform_options\">new stream.Transform([options])</h4> <div class=\"signature\">\n<ul> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Passed to both Writable and Readable constructors. Also has the following fields:<ul> <li>\n<code>transform</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Implementation for the <a href=\"#stream_transform_transform_chunk_encoding_callback\"><code>stream._transform()</code></a> method.</li> <li>\n<code>flush</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Implementation for the <a href=\"#stream_transform_flush_callback\"><code>stream._flush()</code></a> method.</li> </ul> </li> </ul> </div>\n<p>For example:</p> <pre data-language=\"js\">const Transform = require('stream').Transform;\n\nclass MyTransform extends Transform {\n  constructor(options) {\n    super(options);\n  }\n}\n</pre> <p>Or, when using pre-ES6 style constructors:</p> <pre data-language=\"js\">const Transform = require('stream').Transform;\nconst util = require('util');\n\nfunction MyTransform(options) {\n  if (!(this instanceof MyTransform))\n    return new MyTransform(options);\n  Transform.call(this, options);\n}\nutil.inherits(MyTransform, Transform);\n</pre> <p>Or, using the Simplified Constructor approach:</p> <pre data-language=\"js\">const Transform = require('stream').Transform;\n\nconst myTransform = new Transform({\n  transform(chunk, encoding, callback) {\n    // ...\n  }\n});\n</pre> <h4 id=\"stream_events_finish_and_end\">Events: 'finish' and 'end'</h4> <p>The <a href=\"#stream_event_finish\"><code>'finish'</code></a> and <a href=\"#stream_event_end\"><code>'end'</code></a> events are from the <code>stream.Writable</code> and <code>stream.Readable</code> classes, respectively. The <code>'finish'</code> event is emitted after <a href=\"#stream_writable_end_chunk_encoding_callback\"><code>stream.end()</code></a> is called and all chunks have been processed by <a href=\"#stream_transform_transform_chunk_encoding_callback\"><code>stream._transform()</code></a>. The <code>'end'</code> event is emitted after all data has been output, which occurs after the callback in <a href=\"#stream_transform_flush_callback\"><code>transform._flush()</code></a> has been called.</p> <h4 id=\"stream_transform_flush_callback\">transform._flush(callback)</h4> <div class=\"signature\">\n<ul> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A callback function (optionally with an error argument and data) to be called when remaining data has been flushed.</li> </ul> </div>\n<p><em>Note</em>: <strong>This function MUST NOT be called by application code directly.</strong> It should be implemented by child classes, and called only by the internal Readable class methods only.</p> <p>In some cases, a transform operation may need to emit an additional bit of data at the end of the stream. For example, a <code>zlib</code> compression stream will store an amount of internal state used to optimally compress the output. When the stream ends, however, that additional data needs to be flushed so that the compressed data will be complete.</p> <p>Custom <a href=\"#stream_class_stream_transform\">Transform</a> implementations <em>may</em> implement the <code>transform._flush()</code> method. This will be called when there is no more written data to be consumed, but before the <a href=\"#stream_event_end\"><code>'end'</code></a> event is emitted signaling the end of the <a href=\"#stream_class_stream_readable\">Readable</a> stream.</p> <p>Within the <code>transform._flush()</code> implementation, the <code>readable.push()</code> method may be called zero or more times, as appropriate. The <code>callback</code> function must be called when the flush operation is complete.</p> <p>The <code>transform._flush()</code> method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs.</p> <h4 id=\"stream_transform_transform_chunk_encoding_callback\">transform._transform(chunk, encoding, callback)</h4> <div class=\"signature\">\n<ul> <li>\n<code>chunk</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <span class=\"type\">&lt;any&gt;</span> The chunk to be transformed. Will <strong>always</strong> be a buffer unless the <code>decodeStrings</code> option was set to <code>false</code> or the stream is operating in object mode.</li> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> If the chunk is a string, then this is the encoding type. If chunk is a buffer, then this is the special value - 'buffer', ignore it in this case.</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A callback function (optionally with an error argument and data) to be called after the supplied <code>chunk</code> has been processed.</li> </ul> </div>\n<p><em>Note</em>: <strong>This function MUST NOT be called by application code directly.</strong> It should be implemented by child classes, and called only by the internal Readable class methods only.</p> <p>All Transform stream implementations must provide a <code>_transform()</code> method to accept input and produce output. The <code>transform._transform()</code> implementation handles the bytes being written, computes an output, then passes that output off to the readable portion using the <code>readable.push()</code> method.</p> <p>The <code>transform.push()</code> method may be called zero or more times to generate output from a single input chunk, depending on how much is to be output as a result of the chunk.</p> <p>It is possible that no output is generated from any given chunk of input data.</p> <p>The <code>callback</code> function must be called only when the current chunk is completely consumed. The first argument passed to the <code>callback</code> must be an <code>Error</code> object if an error occurred while processing the input or <code>null</code> otherwise. If a second argument is passed to the <code>callback</code>, it will be forwarded on to the <code>readable.push()</code> method. In other words the following are equivalent:</p> <pre data-language=\"js\">transform.prototype._transform = function (data, encoding, callback) {\n  this.push(data);\n  callback();\n};\n\ntransform.prototype._transform = function (data, encoding, callback) {\n  callback(null, data);\n};\n</pre> <p>The <code>transform._transform()</code> method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs.</p> <h4 id=\"stream_class_stream_passthrough\">Class: stream.PassThrough</h4> <p>The <code>stream.PassThrough</code> class is a trivial implementation of a <a href=\"#stream_class_stream_transform\">Transform</a> stream that simply passes the input bytes across to the output. Its purpose is primarily for examples and testing, but there are some use cases where <code>stream.PassThrough</code> is useful as a building block for novel sorts of streams.</p> <h2 id=\"stream_additional_notes\">Additional Notes</h2>  <h3 id=\"stream_compatibility_with_older_node_js_versions\">Compatibility with Older Node.js Versions</h3>  <p>In versions of Node.js prior to v0.10, the Readable stream interface was simpler, but also less powerful and less useful.</p> <ul> <li>Rather than waiting for calls the <a href=\"#stream_readable_read_size\"><code>stream.read()</code></a> method, <a href=\"#stream_event_data\"><code>'data'</code></a> events would begin emitting immediately. Applications that would need to perform some amount of work to decide how to handle data were required to store read data into buffers so the data would not be lost.</li> <li>The <a href=\"#stream_readable_pause\"><code>stream.pause()</code></a> method was advisory, rather than guaranteed. This meant that it was still necessary to be prepared to receive <a href=\"#stream_event_data\"><code>'data'</code></a> events <em>even when the stream was in a paused state</em>.</li> </ul> <p>In Node.js v0.10, the <a href=\"#stream_class_stream_readable\">Readable</a> class was added. For backwards compatibility with older Node.js programs, Readable streams switch into \"flowing mode\" when a <a href=\"#stream_event_data\"><code>'data'</code></a> event handler is added, or when the <a href=\"#stream_readable_resume\"><code>stream.resume()</code></a> method is called. The effect is that, even when not using the new <a href=\"#stream_readable_read_size\"><code>stream.read()</code></a> method and <a href=\"#stream_event_readable\"><code>'readable'</code></a> event, it is no longer necessary to worry about losing <a href=\"#stream_event_data\"><code>'data'</code></a> chunks.</p> <p>While most applications will continue to function normally, this introduces an edge case in the following conditions:</p> <ul> <li>No <a href=\"#stream_event_data\"><code>'data'</code></a> event listener is added.</li> <li>The <a href=\"#stream_readable_resume\"><code>stream.resume()</code></a> method is never called.</li> <li>The stream is not piped to any writable destination.</li> </ul> <p>For example, consider the following code:</p> <pre data-language=\"js\">// WARNING!  BROKEN!\nnet.createServer((socket) =&gt; {\n\n  // we add an 'end' method, but never consume the data\n  socket.on('end', () =&gt; {\n    // It will never get here.\n    socket.end('The message was received but was not processed.\\n');\n  });\n\n}).listen(1337);\n</pre> <p>In versions of Node.js prior to v0.10, the incoming message data would be simply discarded. However, in Node.js v0.10 and beyond, the socket remains paused forever.</p> <p>The workaround in this situation is to call the <a href=\"#stream_readable_resume\"><code>stream.resume()</code></a> method to begin the flow of data:</p> <pre data-language=\"js\">// Workaround\nnet.createServer((socket) =&gt; {\n\n  socket.on('end', () =&gt; {\n    socket.end('The message was received but was not processed.\\n');\n  });\n\n  // start the flow of data, discarding it.\n  socket.resume();\n\n}).listen(1337);\n</pre> <p>In addition to new Readable streams switching into flowing mode, pre-v0.10 style streams can be wrapped in a Readable class using the <a href=\"#stream_readable_wrap_stream\"><code>readable.wrap()</code></a> method.</p> <h3 id=\"stream_readable_read_0\"><code>readable.read(0)</code></h3> <p>There are some cases where it is necessary to trigger a refresh of the underlying readable stream mechanisms, without actually consuming any data. In such cases, it is possible to call <code>readable.read(0)</code>, which will always return <code>null</code>.</p> <p>If the internal read buffer is below the <code>highWaterMark</code>, and the stream is not currently reading, then calling <code>stream.read(0)</code> will trigger a low-level <a href=\"#stream_readable_read_size_1\"><code>stream._read()</code></a> call.</p> <p>While most applications will almost never need to do this, there are situations within Node.js where this is done, particularly in the Readable stream class internals.</p> <h3 id=\"stream_readable_push\"><code>readable.push('')</code></h3> <p>Use of <code>readable.push('')</code> is not recommended.</p> <p>Pushing a zero-byte string or <code>Buffer</code> to a stream that is not in object mode has an interesting side effect. Because it <em>is</em> a call to <a href=\"#stream_readable_push_chunk_encoding\"><code>readable.push()</code></a>, the call will end the reading process. However, because the argument is an empty string, no data is added to the readable buffer so there is nothing for a user to consume.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/stream.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/stream.html</a>\n  </p>\n</div>\n","zlib":"<h1 id=\"zlib_zlib\">Zlib</h1> <div class=\"api_stability api_stability_2\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</div>\n<p>The <code>zlib</code> module provides compression functionality implemented using Gzip and Deflate/Inflate. It can be accessed using:</p> <pre data-language=\"js\">const zlib = require('zlib');\n</pre> <p>Compressing or decompressing a stream (such as a file) can be accomplished by piping the source stream data through a <code>zlib</code> stream into a destination stream:</p> <pre data-language=\"js\">const gzip = zlib.createGzip();\nconst fs = require('fs');\nconst inp = fs.createReadStream('input.txt');\nconst out = fs.createWriteStream('input.txt.gz');\n\ninp.pipe(gzip).pipe(out);\n</pre> <p>It is also possible to compress or decompress data in a single step:</p> <pre data-language=\"js\">const input = '.................................';\nzlib.deflate(input, (err, buffer) =&gt; {\n  if (!err) {\n    console.log(buffer.toString('base64'));\n  } else {\n    // handle error\n  }\n});\n\nconst buffer = Buffer.from('eJzT0yMAAGTvBe8=', 'base64');\nzlib.unzip(buffer, (err, buffer) =&gt; {\n  if (!err) {\n    console.log(buffer.toString());\n  } else {\n    // handle error\n  }\n});\n</pre> <h2 id=\"zlib_compressing_http_requests_and_responses\">Compressing HTTP requests and responses</h2> <p>The <code>zlib</code> module can be used to implement support for the <code>gzip</code> and <code>deflate</code> content-encoding mechanisms defined by <a href=\"https://tools.ietf.org/html/rfc7230#section-4.2\">HTTP</a>.</p> <p>The HTTP <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3\"><code>Accept-Encoding</code></a> header is used within an http request to identify the compression encodings accepted by the client. The <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11\"><code>Content-Encoding</code></a> header is used to identify the compression encodings actually applied to a message.</p> <p><strong>Note: the examples given below are drastically simplified to show the basic concept.</strong> Using <code>zlib</code> encoding can be expensive, and the results ought to be cached. See <a href=\"#zlib_memory_usage_tuning\">Memory Usage Tuning</a> for more information on the speed/memory/compression tradeoffs involved in <code>zlib</code> usage.</p> <pre data-language=\"js\">// client request example\nconst zlib = require('zlib');\nconst http = require('http');\nconst fs = require('fs');\nconst request = http.get({ host: 'example.com',\n                         path: '/',\n                         port: 80,\n                         headers: { 'Accept-Encoding': 'gzip,deflate' } });\nrequest.on('response', (response) =&gt; {\n  var output = fs.createWriteStream('example.com_index.html');\n\n  switch (response.headers['content-encoding']) {\n    // or, just use zlib.createUnzip() to handle both cases\n    case 'gzip':\n      response.pipe(zlib.createGunzip()).pipe(output);\n      break;\n    case 'deflate':\n      response.pipe(zlib.createInflate()).pipe(output);\n      break;\n    default:\n      response.pipe(output);\n      break;\n  }\n});\n</pre> <pre data-language=\"js\">// server example\n// Running a gzip operation on every request is quite expensive.\n// It would be much more efficient to cache the compressed buffer.\nconst zlib = require('zlib');\nconst http = require('http');\nconst fs = require('fs');\nhttp.createServer((request, response) =&gt; {\n  var raw = fs.createReadStream('index.html');\n  var acceptEncoding = request.headers['accept-encoding'];\n  if (!acceptEncoding) {\n    acceptEncoding = '';\n  }\n\n  // Note: this is not a conformant accept-encoding parser.\n  // See http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3\n  if (acceptEncoding.match(/\\bdeflate\\b/)) {\n    response.writeHead(200, { 'Content-Encoding': 'deflate' });\n    raw.pipe(zlib.createDeflate()).pipe(response);\n  } else if (acceptEncoding.match(/\\bgzip\\b/)) {\n    response.writeHead(200, { 'Content-Encoding': 'gzip' });\n    raw.pipe(zlib.createGzip()).pipe(response);\n  } else {\n    response.writeHead(200, {});\n    raw.pipe(response);\n  }\n}).listen(1337);\n</pre> <p>By default, the <code>zlib</code> methods will throw an error when decompressing truncated data. However, if it is known that the data is incomplete, or the desire is to inspect only the beginning of a compressed file, it is possible to suppress the default error handling by changing the flushing method that is used to compressed the last chunk of input data:</p> <pre data-language=\"js\">// This is a truncated version of the buffer from the above examples\nconst buffer = Buffer.from('eJzT0yMA', 'base64');\n\nzlib.unzip(buffer,\n           {finishFlush: zlib.constants.Z_SYNC_FLUSH},\n           (err, buffer) =&gt; {\n  if (!err) {\n    console.log(buffer.toString());\n  } else {\n    // handle error\n  }\n});\n</pre> <p>This will not change the behavior in other error-throwing situations, e.g. when the input data has an invalid format. Using this method, it will not be possible to determine whether the input ended prematurely or lacks the integrity checks, making it necessary to manually check that the decompressed result is valid.</p> <h2 id=\"zlib_memory_usage_tuning\">Memory Usage Tuning</h2>  <p>From <code>zlib/zconf.h</code>, modified to node.js's usage:</p> <p>The memory requirements for deflate are (in bytes):</p> <pre data-language=\"js\">(1 &lt;&lt; (windowBits+2)) +  (1 &lt;&lt; (memLevel+9))\n</pre> <p>That is: 128K for windowBits=15 + 128K for memLevel = 8 (default values) plus a few kilobytes for small objects.</p> <p>For example, to reduce the default memory requirements from 256K to 128K, the options should be set to:</p> <pre data-language=\"js\">const options = { windowBits: 14, memLevel: 7 };\n</pre> <p>This will, however, generally degrade compression.</p> <p>The memory requirements for inflate are (in bytes)</p> <pre data-language=\"js\">1 &lt;&lt; windowBits\n</pre> <p>That is, 32K for windowBits=15 (default value) plus a few kilobytes for small objects.</p> <p>This is in addition to a single internal output slab buffer of size <code>chunkSize</code>, which defaults to 16K.</p> <p>The speed of <code>zlib</code> compression is affected most dramatically by the <code>level</code> setting. A higher level will result in better compression, but will take longer to complete. A lower level will result in less compression, but will be much faster.</p> <p>In general, greater memory usage options will mean that Node.js has to make fewer calls to <code>zlib</code> because it will be able to process more data on each <code>write</code> operation. So, this is another factor that affects the speed, at the cost of memory usage.</p> <h2 id=\"zlib_flushing\">Flushing</h2> <p>Calling <a href=\"#zlib_zlib_flush_kind_callback\"><code>.flush()</code></a> on a compression stream will make <code>zlib</code> return as much output as currently possible. This may come at the cost of degraded compression quality, but can be useful when data needs to be available as soon as possible.</p> <p>In the following example, <code>flush()</code> is used to write a compressed partial HTTP response to the client:</p> <pre data-language=\"js\">const zlib = require('zlib');\nconst http = require('http');\n\nhttp.createServer((request, response) =&gt; {\n  // For the sake of simplicity, the Accept-Encoding checks are omitted.\n  response.writeHead(200, { 'content-encoding': 'gzip' });\n  const output = zlib.createGzip();\n  output.pipe(response);\n\n  setInterval(() =&gt; {\n    output.write(`The current time is ${Date()}\\n`, () =&gt; {\n      // The data has been passed to zlib, but the compression algorithm may\n      // have decided to buffer the data for more efficient compression.\n      // Calling .flush() will make the data available as soon as the client\n      // is ready to receive it.\n      output.flush();\n    });\n  }, 1000);\n}).listen(1337);\n</pre> <h2 id=\"zlib_constants\">Constants</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.8</span> </div> <p>All of the constants defined in <code>zlib.h</code> are also defined on <code>require('zlib').constants</code>. In the normal course of operations, it will not be necessary to use these constants. They are documented so that their presence is not surprising. This section is taken almost directly from the <a href=\"http://zlib.net/manual.html#Constants\">zlib documentation</a>. See <a href=\"http://zlib.net/manual.html#Constants\">http://zlib.net/manual.html#Constants</a> for more details.</p> <p><em>Note</em>: Previously, the constants were available directly from <code>require('zlib')</code>, for instance <code>zlib.Z_NO_FLUSH</code>. Accessing the constants directly from the module is currently still possible but should be considered deprecated.</p> <p>Allowed flush values.</p> <ul> <li><code>zlib.constants.Z_NO_FLUSH</code></li> <li><code>zlib.constants.Z_PARTIAL_FLUSH</code></li> <li><code>zlib.constants.Z_SYNC_FLUSH</code></li> <li><code>zlib.constants.Z_FULL_FLUSH</code></li> <li><code>zlib.constants.Z_FINISH</code></li> <li><code>zlib.constants.Z_BLOCK</code></li> <li><code>zlib.constants.Z_TREES</code></li> </ul> <p>Return codes for the compression/decompression functions. Negative values are errors, positive values are used for special but normal events.</p> <ul> <li><code>zlib.constants.Z_OK</code></li> <li><code>zlib.constants.Z_STREAM_END</code></li> <li><code>zlib.constants.Z_NEED_DICT</code></li> <li><code>zlib.constants.Z_ERRNO</code></li> <li><code>zlib.constants.Z_STREAM_ERROR</code></li> <li><code>zlib.constants.Z_DATA_ERROR</code></li> <li><code>zlib.constants.Z_MEM_ERROR</code></li> <li><code>zlib.constants.Z_BUF_ERROR</code></li> <li><code>zlib.constants.Z_VERSION_ERROR</code></li> </ul> <p>Compression levels.</p> <ul> <li><code>zlib.constants.Z_NO_COMPRESSION</code></li> <li><code>zlib.constants.Z_BEST_SPEED</code></li> <li><code>zlib.constants.Z_BEST_COMPRESSION</code></li> <li><code>zlib.constants.Z_DEFAULT_COMPRESSION</code></li> </ul> <p>Compression strategy.</p> <ul> <li><code>zlib.constants.Z_FILTERED</code></li> <li><code>zlib.constants.Z_HUFFMAN_ONLY</code></li> <li><code>zlib.constants.Z_RLE</code></li> <li><code>zlib.constants.Z_FIXED</code></li> <li><code>zlib.constants.Z_DEFAULT_STRATEGY</code></li> </ul> <h2 id=\"zlib_class_options\">Class Options</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v5.11.0</td> <td>\n<p>The <code>finishFlush</code> option is supported now.</p> </td>\n</tr> <tr>\n<td>v0.11.1</td> <td>\n<p><span>Added in: v0.11.1</span></p> </td>\n</tr> </table> </details> </div> <p>Each class takes an <code>options</code> object. All options are optional.</p> <p>Note that some options are only relevant when compressing, and are ignored by the decompression classes.</p> <ul> <li>\n<code>flush</code> (default: <code>zlib.constants.Z_NO_FLUSH</code>)</li> <li>\n<code>finishFlush</code> (default: <code>zlib.constants.Z_FINISH</code>)</li> <li>\n<code>chunkSize</code> (default: 16*1024)</li> <li><code>windowBits</code></li> <li>\n<code>level</code> (compression only)</li> <li>\n<code>memLevel</code> (compression only)</li> <li>\n<code>strategy</code> (compression only)</li> <li>\n<code>dictionary</code> (deflate/inflate only, empty dictionary by default)</li> </ul> <p>See the description of <code>deflateInit2</code> and <code>inflateInit2</code> at <a href=\"http://zlib.net/manual.html#Advanced\">http://zlib.net/manual.html#Advanced</a> for more information on these.</p> <h2 id=\"zlib_class_zlib_deflate\">Class: zlib.Deflate</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.8</span> </div>\n<p>Compress data using deflate.</p> <h2 id=\"zlib_class_zlib_deflateraw\">Class: zlib.DeflateRaw</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.8</span> </div>\n<p>Compress data using deflate, and do not append a <code>zlib</code> header.</p> <h2 id=\"zlib_class_zlib_gunzip\">Class: zlib.Gunzip</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>Trailing garbage at the end of the input stream will now result in an <code>error</code> event.</p> </td>\n</tr> <tr>\n<td>v5.9.0</td> <td>\n<p>Multiple concatenated gzip file members are supported now.</p> </td>\n</tr> <tr>\n<td>v5.0.0</td> <td>\n<p>A truncated input stream will now result in an <code>error</code> event.</p> </td>\n</tr> <tr>\n<td>v0.5.8</td> <td>\n<p><span>Added in: v0.5.8</span></p> </td>\n</tr> </table> </details> </div>\n<p>Decompress a gzip stream.</p> <h2 id=\"zlib_class_zlib_gzip\">Class: zlib.Gzip</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.8</span> </div>\n<p>Compress data using gzip.</p> <h2 id=\"zlib_class_zlib_inflate\">Class: zlib.Inflate</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v5.0.0</td> <td>\n<p>A truncated input stream will now result in an <code>error</code> event.</p> </td>\n</tr> <tr>\n<td>v0.5.8</td> <td>\n<p><span>Added in: v0.5.8</span></p> </td>\n</tr> </table> </details> </div>\n<p>Decompress a deflate stream.</p> <h2 id=\"zlib_class_zlib_inflateraw\">Class: zlib.InflateRaw</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.8.0</td> <td>\n<p>Custom dictionaries are now supported by <code>InflateRaw</code>.</p> </td>\n</tr> <tr>\n<td>v5.0.0</td> <td>\n<p>A truncated input stream will now result in an <code>error</code> event.</p> </td>\n</tr> <tr>\n<td>v0.5.8</td> <td>\n<p><span>Added in: v0.5.8</span></p> </td>\n</tr> </table> </details> </div>\n<p>Decompress a raw deflate stream.</p> <h2 id=\"zlib_class_zlib_unzip\">Class: zlib.Unzip</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.8</span> </div>\n<p>Decompress either a Gzip- or Deflate-compressed stream by auto-detecting the header.</p> <h2 id=\"zlib_class_zlib_zlib\">Class: zlib.Zlib</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.8</span> </div>\n<p>Not exported by the <code>zlib</code> module. It is documented here because it is the base class of the compressor/decompressor classes.</p> <h3 id=\"zlib_zlib_flush_kind_callback\">zlib.flush([kind], callback)</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.8</span> </div>\n<p><code>kind</code> defaults to <code>zlib.constants.Z_FULL_FLUSH</code>.</p> <p>Flush pending data. Don't call this frivolously, premature flushes negatively impact the effectiveness of the compression algorithm.</p> <p>Calling this only flushes data from the internal <code>zlib</code> state, and does not perform flushing of any kind on the streams level. Rather, it behaves like a normal call to <code>.write()</code>, i.e. it will be queued up behind other pending writes and will only produce output when data is being read from the stream.</p> <h3 id=\"zlib_zlib_params_level_strategy_callback\">zlib.params(level, strategy, callback)</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.4</span> </div>\n<p>Dynamically update the compression level and compression strategy. Only applicable to deflate algorithm.</p> <h3 id=\"zlib_zlib_reset\">zlib.reset()</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.0</span> </div>\n<p>Reset the compressor/decompressor to factory defaults. Only applicable to the inflate and deflate algorithms.</p> <h2 id=\"zlib_zlib_constants\">zlib.constants</h2> <div class=\"api_metadata\"> <span>Added in: v7.0.0</span> </div>\n<p>Provides an object enumerating Zlib-related constants.</p> <h2 id=\"zlib_zlib_createdeflate_options\">zlib.createDeflate(<a href=\"#zlib_class_options\">options</a>)</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.8</span> </div>\n<p>Returns a new <a href=\"#zlib_class_zlib_deflate\">Deflate</a> object with an <a href=\"#zlib_class_options\">options</a>.</p> <h2 id=\"zlib_zlib_createdeflateraw_options\">zlib.createDeflateRaw(<a href=\"#zlib_class_options\">options</a>)</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.8</span> </div>\n<p>Returns a new <a href=\"#zlib_class_zlib_deflateraw\">DeflateRaw</a> object with an <a href=\"#zlib_class_options\">options</a>.</p> <h2 id=\"zlib_zlib_creategunzip_options\">zlib.createGunzip(<a href=\"#zlib_class_options\">options</a>)</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.8</span> </div>\n<p>Returns a new <a href=\"#zlib_class_zlib_gunzip\">Gunzip</a> object with an <a href=\"#zlib_class_options\">options</a>.</p> <h2 id=\"zlib_zlib_creategzip_options\">zlib.createGzip(<a href=\"#zlib_class_options\">options</a>)</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.8</span> </div>\n<p>Returns a new <a href=\"#zlib_class_zlib_gzip\">Gzip</a> object with an <a href=\"#zlib_class_options\">options</a>.</p> <h2 id=\"zlib_zlib_createinflate_options\">zlib.createInflate(<a href=\"#zlib_class_options\">options</a>)</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.8</span> </div>\n<p>Returns a new <a href=\"#zlib_class_zlib_inflate\">Inflate</a> object with an <a href=\"#zlib_class_options\">options</a>.</p> <h2 id=\"zlib_zlib_createinflateraw_options\">zlib.createInflateRaw(<a href=\"#zlib_class_options\">options</a>)</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.8</span> </div>\n<p>Returns a new <a href=\"#zlib_class_zlib_inflateraw\">InflateRaw</a> object with an <a href=\"#zlib_class_options\">options</a>.</p> <h2 id=\"zlib_zlib_createunzip_options\">zlib.createUnzip(<a href=\"#zlib_class_options\">options</a>)</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.8</span> </div>\n<p>Returns a new <a href=\"#zlib_class_zlib_unzip\">Unzip</a> object with an <a href=\"#zlib_class_options\">options</a>.</p> <h2 id=\"zlib_convenience_methods\">Convenience Methods</h2>  <p>All of these take a <a href=\"buffer\">Buffer</a> or string as the first argument, an optional second argument to supply options to the <code>zlib</code> classes and will call the supplied callback with <code>callback(error, result)</code>.</p> <p>Every method has a <code>*Sync</code> counterpart, which accept the same arguments, but without a callback.</p> <h3 id=\"zlib_zlib_deflate_buf_options_callback\">zlib.deflate(buf[, options], callback)</h3> <div class=\"api_metadata\"> <span>Added in: v0.6.0</span> </div>\n<h3 id=\"zlib_zlib_deflatesync_buf_options\">zlib.deflateSync(buf[, options])</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.12</span> </div>\n<p>Compress a <a href=\"buffer\">Buffer</a> or string with <a href=\"#zlib_class_zlib_deflate\">Deflate</a>.</p> <h3 id=\"zlib_zlib_deflateraw_buf_options_callback\">zlib.deflateRaw(buf[, options], callback)</h3> <div class=\"api_metadata\"> <span>Added in: v0.6.0</span> </div>\n<h3 id=\"zlib_zlib_deflaterawsync_buf_options\">zlib.deflateRawSync(buf[, options])</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.12</span> </div>\n<p>Compress a <a href=\"buffer\">Buffer</a> or string with <a href=\"#zlib_class_zlib_deflateraw\">DeflateRaw</a>.</p> <h3 id=\"zlib_zlib_gunzip_buf_options_callback\">zlib.gunzip(buf[, options], callback)</h3> <div class=\"api_metadata\"> <span>Added in: v0.6.0</span> </div>\n<h3 id=\"zlib_zlib_gunzipsync_buf_options\">zlib.gunzipSync(buf[, options])</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.12</span> </div>\n<p>Decompress a <a href=\"buffer\">Buffer</a> or string with <a href=\"#zlib_class_zlib_gunzip\">Gunzip</a>.</p> <h3 id=\"zlib_zlib_gzip_buf_options_callback\">zlib.gzip(buf[, options], callback)</h3> <div class=\"api_metadata\"> <span>Added in: v0.6.0</span> </div>\n<h3 id=\"zlib_zlib_gzipsync_buf_options\">zlib.gzipSync(buf[, options])</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.12</span> </div>\n<p>Compress a <a href=\"buffer\">Buffer</a> or string with <a href=\"#zlib_class_zlib_gzip\">Gzip</a>.</p> <h3 id=\"zlib_zlib_inflate_buf_options_callback\">zlib.inflate(buf[, options], callback)</h3> <div class=\"api_metadata\"> <span>Added in: v0.6.0</span> </div>\n<h3 id=\"zlib_zlib_inflatesync_buf_options\">zlib.inflateSync(buf[, options])</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.12</span> </div>\n<p>Decompress a <a href=\"buffer\">Buffer</a> or string with <a href=\"#zlib_class_zlib_inflate\">Inflate</a>.</p> <h3 id=\"zlib_zlib_inflateraw_buf_options_callback\">zlib.inflateRaw(buf[, options], callback)</h3> <div class=\"api_metadata\"> <span>Added in: v0.6.0</span> </div>\n<h3 id=\"zlib_zlib_inflaterawsync_buf_options\">zlib.inflateRawSync(buf[, options])</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.12</span> </div>\n<p>Decompress a <a href=\"buffer\">Buffer</a> or string with <a href=\"#zlib_class_zlib_inflateraw\">InflateRaw</a>.</p> <h3 id=\"zlib_zlib_unzip_buf_options_callback\">zlib.unzip(buf[, options], callback)</h3> <div class=\"api_metadata\"> <span>Added in: v0.6.0</span> </div>\n<h3 id=\"zlib_zlib_unzipsync_buf_options\">zlib.unzipSync(buf[, options])</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.12</span> </div>\n<p>Decompress a <a href=\"buffer\">Buffer</a> or string with <a href=\"#zlib_class_zlib_unzip\">Unzip</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/zlib.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/zlib.html</a>\n  </p>\n</div>\n","process":"<h1 id=\"process_process\">Process</h1>  <p>The <code>process</code> object is a <code>global</code> that provides information about, and control over, the current Node.js process. As a global, it is always available to Node.js applications without using <code>require()</code>.</p> <h2 id=\"process_process_events\">Process Events</h2> <p>The <code>process</code> object is an instance of <a href=\"events#events_class_eventemitter\"><code>EventEmitter</code></a>.</p> <h3 id=\"process_event_beforeexit\">Event: 'beforeExit'</h3> <div class=\"api_metadata\"> <span>Added in: v0.11.12</span> </div>\n<p>The <code>'beforeExit'</code> event is emitted when Node.js empties its event loop and has no additional work to schedule. Normally, the Node.js process will exit when there is no work scheduled, but a listener registered on the <code>'beforeExit'</code> event can make asynchronous calls, and thereby cause the Node.js process to continue.</p> <p>The listener callback function is invoked with the value of <a href=\"#process_process_exitcode\"><code>process.exitCode</code></a> passed as the only argument.</p> <p>The <code>'beforeExit'</code> event is <em>not</em> emitted for conditions causing explicit termination, such as calling <a href=\"#process_process_exit_code\"><code>process.exit()</code></a> or uncaught exceptions.</p> <p>The <code>'beforeExit'</code> should <em>not</em> be used as an alternative to the <code>'exit'</code> event unless the intention is to schedule additional work.</p> <h3 id=\"process_event_disconnect\">Event: 'disconnect'</h3> <div class=\"api_metadata\"> <span>Added in: v0.7.7</span> </div>\n<p>If the Node.js process is spawned with an IPC channel (see the <a href=\"child_process\">Child Process</a> and <a href=\"cluster\">Cluster</a> documentation), the <code>'disconnect'</code> event will be emitted when the IPC channel is closed.</p> <h3 id=\"process_event_exit\">Event: 'exit'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.7</span> </div>\n<p>The <code>'exit'</code> event is emitted when the Node.js process is about to exit as a result of either:</p> <ul> <li>The <code>process.exit()</code> method being called explicitly;</li> <li>The Node.js event loop no longer having any additional work to perform.</li> </ul> <p>There is no way to prevent the exiting of the event loop at this point, and once all <code>'exit'</code> listeners have finished running the Node.js process will terminate.</p> <p>The listener callback function is invoked with the exit code specified either by the <a href=\"#process_process_exitcode\"><code>process.exitCode</code></a> property, or the <code>exitCode</code> argument passed to the <a href=\"#process_process_exit_code\"><code>process.exit()</code></a> method, as the only argument.</p> <p>For example:</p> <pre data-language=\"js\">process.on('exit', (code) =&gt; {\n  console.log(`About to exit with code: ${code}`);\n});\n</pre> <p>Listener functions <strong>must</strong> only perform <strong>synchronous</strong> operations. The Node.js process will exit immediately after calling the <code>'exit'</code> event listeners causing any additional work still queued in the event loop to be abandoned. In the following example, for instance, the timeout will never occur:</p> <pre data-language=\"js\">process.on('exit', (code) =&gt; {\n  setTimeout(() =&gt; {\n    console.log('This will not run');\n  }, 0);\n});\n</pre> <h3 id=\"process_event_message\">Event: 'message'</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.10</span> </div>\n<p>If the Node.js process is spawned with an IPC channel (see the <a href=\"child_process\">Child Process</a> and <a href=\"cluster\">Cluster</a> documentation), the <code>'message'</code> event is emitted whenever a message sent by a parent process using <a href=\"child_process#child_process_child_send_message_sendhandle_options_callback\"><code>childprocess.send()</code></a> is received by the child process.</p> <p>The listener callback is invoked with the following arguments:</p> <ul> <li>\n<code>message</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> a parsed JSON object or primitive value</li> <li>\n<code>sendHandle</code> <span class=\"type\">&lt;Handle object&gt;</span> a <a href=\"net#net_class_net_socket\"><code>net.Socket</code></a> or <a href=\"net#net_class_net_server\"><code>net.Server</code></a> object, or undefined.</li> </ul> <h3 id=\"process_event_rejectionhandled\">Event: 'rejectionHandled'</h3> <div class=\"api_metadata\"> <span>Added in: v1.4.1</span> </div>\n<p>The <code>'rejectionHandled'</code> event is emitted whenever a <code>Promise</code> has been rejected and an error handler was attached to it (using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\"><code>promise.catch()</code></a>, for example) later than one turn of the Node.js event loop.</p> <p>The listener callback is invoked with a reference to the rejected <code>Promise</code> as the only argument.</p> <p>The <code>Promise</code> object would have previously been emitted in an <code>'unhandledRejection'</code> event, but during the course of processing gained a rejection handler.</p> <p>There is no notion of a top level for a <code>Promise</code> chain at which rejections can always be handled. Being inherently asynchronous in nature, a <code>Promise</code> rejection can be handled at a future point in time — possibly much later than the event loop turn it takes for the <code>'unhandledRejection'</code> event to be emitted.</p> <p>Another way of stating this is that, unlike in synchronous code where there is an ever-growing list of unhandled exceptions, with Promises there can be a growing-and-shrinking list of unhandled rejections.</p> <p>In synchronous code, the <code>'uncaughtException'</code> event is emitted when the list of unhandled exceptions grows.</p> <p>In asynchronous code, the <code>'unhandledRejection'</code> event is emitted when the list of unhandled rejections grows, and the <code>'rejectionHandled'</code> event is emitted when the list of unhandled rejections shrinks.</p> <p>For example:</p> <pre data-language=\"js\">const unhandledRejections = new Map();\nprocess.on('unhandledRejection', (reason, p) =&gt; {\n  unhandledRejections.set(p, reason);\n});\nprocess.on('rejectionHandled', (p) =&gt; {\n  unhandledRejections.delete(p);\n});\n</pre> <p>In this example, the <code>unhandledRejections</code> <code>Map</code> will grow and shrink over time, reflecting rejections that start unhandled and then become handled. It is possible to record such errors in an error log, either periodically (which is likely best for long-running application) or upon process exit (which is likely most convenient for scripts).</p> <h3 id=\"process_event_uncaughtexception\">Event: 'uncaughtException'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.18</span> </div>\n<p>The <code>'uncaughtException'</code> event is emitted when an uncaught JavaScript exception bubbles all the way back to the event loop. By default, Node.js handles such exceptions by printing the stack trace to <code>stderr</code> and exiting. Adding a handler for the <code>'uncaughtException'</code> event overrides this default behavior.</p> <p>The listener function is called with the <code>Error</code> object passed as the only argument.</p> <p>For example:</p> <pre data-language=\"js\">process.on('uncaughtException', (err) =&gt; {\n  fs.writeSync(1, `Caught exception: ${err}`);\n});\n\nsetTimeout(() =&gt; {\n  console.log('This will still run.');\n}, 500);\n\n// Intentionally cause an exception, but don't catch it.\nnonexistentFunc();\nconsole.log('This will not run.');\n</pre> <h4 id=\"process_warning_using_uncaughtexception_correctly\">Warning: Using <code>'uncaughtException'</code> correctly</h4> <p>Note that <code>'uncaughtException'</code> is a crude mechanism for exception handling intended to be used only as a last resort. The event <em>should not</em> be used as an equivalent to <code>On Error Resume Next</code>. Unhandled exceptions inherently mean that an application is in an undefined state. Attempting to resume application code without properly recovering from the exception can cause additional unforeseen and unpredictable issues.</p> <p>Exceptions thrown from within the event handler will not be caught. Instead the process will exit with a non-zero exit code and the stack trace will be printed. This is to avoid infinite recursion.</p> <p>Attempting to resume normally after an uncaught exception can be similar to pulling out of the power cord when upgrading a computer -- nine out of ten times nothing happens - but the 10th time, the system becomes corrupted.</p> <p>The correct use of <code>'uncaughtException'</code> is to perform synchronous cleanup of allocated resources (e.g. file descriptors, handles, etc) before shutting down the process. <strong>It is not safe to resume normal operation after <code>'uncaughtException'</code>.</strong></p> <p>To restart a crashed application in a more reliable way, whether <code>uncaughtException</code> is emitted or not, an external monitor should be employed in a separate process to detect application failures and recover or restart as needed.</p> <h3 id=\"process_event_unhandledrejection\">Event: 'unhandledRejection'</h3> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>Not handling Promise rejections has been deprecated.</p> </td>\n</tr> <tr>\n<td>v6.6.0</td> <td>\n<p>Unhandled Promise rejections have been will now emit a process warning.</p> </td>\n</tr> <tr>\n<td>v1.4.1</td> <td>\n<p><span>Added in: v1.4.1</span></p> </td>\n</tr> </table> </details> </div>\n<p>The <code>'unhandledRejection</code>' event is emitted whenever a <code>Promise</code> is rejected and no error handler is attached to the promise within a turn of the event loop. When programming with Promises, exceptions are encapsulated as \"rejected promises\". Rejections can be caught and handled using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\"><code>promise.catch()</code></a> and are propagated through a <code>Promise</code> chain. The <code>'unhandledRejection'</code> event is useful for detecting and keeping track of promises that were rejected whose rejections have not yet been handled.</p> <p>The listener function is called with the following arguments:</p> <ul> <li>\n<code>reason</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a> | <span class=\"type\">&lt;any&gt;</span> The object with which the promise was rejected (typically an <a href=\"errors#errors_class_error\"><code>Error</code></a> object).</li> <li>\n<code>p</code> the <code>Promise</code> that was rejected.</li> </ul> <p>For example:</p> <pre data-language=\"js\">process.on('unhandledRejection', (reason, p) =&gt; {\n  console.log('Unhandled Rejection at: Promise', p, 'reason:', reason);\n  // application specific logging, throwing an error, or other logic here\n});\n\nsomePromise.then((res) =&gt; {\n  return reportToUser(JSON.pasre(res)); // note the typo (`pasre`)\n}); // no `.catch` or `.then`\n</pre> <p>The following will also trigger the <code>'unhandledRejection'</code> event to be emitted:</p> <pre data-language=\"js\">function SomeResource() {\n  // Initially set the loaded status to a rejected promise\n  this.loaded = Promise.reject(new Error('Resource not yet loaded!'));\n}\n\nvar resource = new SomeResource();\n// no .catch or .then on resource.loaded for at least a turn\n</pre> <p>In this example case, it is possible to track the rejection as a developer error as would typically be the case for other <code>'unhandledRejection'</code> events. To address such failures, a non-operational <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\"><code>.catch(() =&gt; { })</code></a> handler may be attached to <code>resource.loaded</code>, which would prevent the <code>'unhandledRejection'</code> event from being emitted. Alternatively, the <a href=\"#process_event_rejectionhandled\"><code>'rejectionHandled'</code></a> event may be used.</p> <h3 id=\"process_event_warning\">Event: 'warning'</h3> <div class=\"api_metadata\"> <span>Added in: v6.0.0</span> </div>\n<p>The <code>'warning'</code> event is emitted whenever Node.js emits a process warning.</p> <p>A process warning is similar to an error in that it describes exceptional conditions that are being brought to the user's attention. However, warnings are not part of the normal Node.js and JavaScript error handling flow. Node.js can emit warnings whenever it detects bad coding practices that could lead to sub-optimal application performance, bugs or security vulnerabilities.</p> <p>The listener function is called with a single <code>warning</code> argument whose value is an <code>Error</code> object. There are three key properties that describe the warning:</p> <ul> <li>\n<code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The name of the warning (currently <code>Warning</code> by default).</li> <li>\n<code>message</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> A system-provided description of the warning.</li> <li>\n<code>stack</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> A stack trace to the location in the code where the warning was issued.</li> </ul> <pre data-language=\"js\">process.on('warning', (warning) =&gt; {\n  console.warn(warning.name);    // Print the warning name\n  console.warn(warning.message); // Print the warning message\n  console.warn(warning.stack);   // Print the stack trace\n});\n</pre> <p>By default, Node.js will print process warnings to <code>stderr</code>. The <code>--no-warnings</code> command-line option can be used to suppress the default console output but the <code>'warning'</code> event will still be emitted by the <code>process</code> object.</p> <p>The following example illustrates the warning that is printed to <code>stderr</code> when too many listeners have been added to an event</p> <pre data-language=\"txt\">$ node\n&gt; events.defaultMaxListeners = 1;\n&gt; process.on('foo', () =&gt; {});\n&gt; process.on('foo', () =&gt; {});\n&gt; (node:38638) Warning: Possible EventEmitter memory leak detected. 2 foo\n... listeners added. Use emitter.setMaxListeners() to increase limit\n</pre> <p>In contrast, the following example turns off the default warning output and adds a custom handler to the <code>'warning'</code> event:</p> <pre data-language=\"txt\">$ node --no-warnings\n&gt; var p = process.on('warning', (warning) =&gt; console.warn('Do not do that!'));\n&gt; events.defaultMaxListeners = 1;\n&gt; process.on('foo', () =&gt; {});\n&gt; process.on('foo', () =&gt; {});\n&gt; Do not do that!\n</pre> <p>The <code>--trace-warnings</code> command-line option can be used to have the default console output for warnings include the full stack trace of the warning.</p> <p>Launching Node.js using the <code>--throw-deprecation</code> command line flag will cause custom deprecation warnings to be thrown as exceptions.</p> <p>Using the <code>--trace-deprecation</code> command line flag will cause the custom deprecation to be printed to <code>stderr</code> along with the stack trace.</p> <p>Using the <code>--no-deprecation</code> command line flag will suppress all reporting of the custom deprecation.</p> <p>The <code>*-deprecation</code> command line flags only affect warnings that use the name <code>DeprecationWarning</code>.</p> <h4 id=\"process_emitting_custom_warnings\">Emitting custom warnings</h4> <p>See the <a href=\"#process_process_emitwarning_warning_name_ctor\"><code>process.emitWarning()</code></a> method for issuing custom or application-specific warnings.</p> <h3 id=\"process_signal_events\">Signal Events</h3>   <p>Signal events will be emitted when the Node.js process receives a signal. Please refer to <a href=\"http://man7.org/linux/man-pages/man7/signal.7.html\">signal(7)</a> for a listing of standard POSIX signal names such as <code>SIGINT</code>, <code>SIGHUP</code>, etc.</p> <p>The name of each event will be the uppercase common name for the signal (e.g. <code>'SIGINT'</code> for <code>SIGINT</code> signals).</p> <p>For example:</p> <pre data-language=\"js\">// Begin reading from stdin so the process does not exit.\nprocess.stdin.resume();\n\nprocess.on('SIGINT', () =&gt; {\n  console.log('Received SIGINT.  Press Control-D to exit.');\n});\n</pre> <p><em>Note</em>: An easy way to send the <code>SIGINT</code> signal is with <code>&lt;Ctrl&gt;-C</code> in most terminal programs.</p> <p>It is important to take note of the following:</p> <ul> <li>\n<code>SIGUSR1</code> is reserved by Node.js to start the debugger. It's possible to install a listener but doing so will <em>not</em> stop the debugger from starting.</li> <li>\n<code>SIGTERM</code> and <code>SIGINT</code> have default handlers on non-Windows platforms that resets the terminal mode before exiting with code <code>128 + signal number</code>. If one of these signals has a listener installed, its default behavior will be removed (Node.js will no longer exit).</li> <li>\n<code>SIGPIPE</code> is ignored by default. It can have a listener installed.</li> <li>\n<code>SIGHUP</code> is generated on Windows when the console window is closed, and on other platforms under various similar conditions, see <a href=\"http://man7.org/linux/man-pages/man7/signal.7.html\">signal(7)</a>. It can have a listener installed, however Node.js will be unconditionally terminated by Windows about 10 seconds later. On non-Windows platforms, the default behavior of <code>SIGHUP</code> is to terminate Node.js, but once a listener has been installed its default behavior will be removed.</li> <li>\n<code>SIGTERM</code> is not supported on Windows, it can be listened on.</li> <li>\n<code>SIGINT</code> from the terminal is supported on all platforms, and can usually be generated with <code>CTRL+C</code> (though this may be configurable). It is not generated when terminal raw mode is enabled.</li> <li>\n<code>SIGBREAK</code> is delivered on Windows when <code>&lt;Ctrl&gt;+&lt;Break&gt;</code> is pressed, on non-Windows platforms it can be listened on, but there is no way to send or generate it.</li> <li>\n<code>SIGWINCH</code> is delivered when the console has been resized. On Windows, this will only happen on write to the console when the cursor is being moved, or when a readable tty is used in raw mode.</li> <li>\n<code>SIGKILL</code> cannot have a listener installed, it will unconditionally terminate Node.js on all platforms.</li> <li>\n<code>SIGSTOP</code> cannot have a listener installed.</li> <li>\n<code>SIGBUS</code>, <code>SIGFPE</code>, <code>SIGSEGV</code> and <code>SIGILL</code>, when not raised artificially using <a href=\"http://man7.org/linux/man-pages/man2/kill.2.html\">kill(2)</a>, inherently leave the process in a state from which it is not safe to attempt to call JS listeners. Doing so might lead to the process hanging in an endless loop, since listeners attached using <code>process.on()</code> are called asynchronously and therefore unable to correct the underlying problem.</li> </ul> <p><em>Note</em>: Windows does not support sending signals, but Node.js offers some emulation with <a href=\"#process_process_kill_pid_signal\"><code>process.kill()</code></a>, and <a href=\"child_process#child_process_child_kill_signal\"><code>ChildProcess.kill()</code></a>. Sending signal <code>0</code> can be used to test for the existence of a process. Sending <code>SIGINT</code>, <code>SIGTERM</code>, and <code>SIGKILL</code> cause the unconditional termination of the target process.</p> <h2 id=\"process_process_abort\">process.abort()</h2> <div class=\"api_metadata\"> <span>Added in: v0.7.0</span> </div>\n<p>The <code>process.abort()</code> method causes the Node.js process to exit immediately and generate a core file.</p> <h2 id=\"process_process_arch\">process.arch</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.0</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> <p>The <code>process.arch</code> property returns a String identifying the processor architecture that the Node.js process is currently running on. For instance <code>'arm'</code>, <code>'ia32'</code>, or <code>'x64'</code>.</p> <pre data-language=\"js\">console.log(`This processor architecture is ${process.arch}`);\n</pre> <h2 id=\"process_process_argv\">process.argv</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.27</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a></li> </ul> <p>The <code>process.argv</code> property returns an array containing the command line arguments passed when the Node.js process was launched. The first element will be <a href=\"#process_process_execpath\"><code>process.execPath</code></a>. See <code>process.argv0</code> if access to the original value of <code>argv[0]</code> is needed. The second element will be the path to the JavaScript file being executed. The remaining elements will be any additional command line arguments.</p> <p>For example, assuming the following script for <code>process-args.js</code>:</p> <pre data-language=\"js\">// print process.argv\nprocess.argv.forEach((val, index) =&gt; {\n  console.log(`${index}: ${val}`);\n});\n</pre> <p>Launching the Node.js process as:</p> <pre data-language=\"console\">$ node process-2.js one two=three four\n</pre> <p>Would generate the output:</p> <pre data-language=\"text\">0: /usr/local/bin/node\n1: /Users/mjr/work/node/process-2.js\n2: one\n3: two=three\n4: four\n</pre> <h2 id=\"process_process_argv0\">process.argv0</h2> <div class=\"api_metadata\"> <span>Added in: 6.4.0</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> <p>The <code>process.argv0</code> property stores a read-only copy of the original value of <code>argv[0]</code> passed when Node.js starts.</p> <pre data-language=\"console\">$ bash -c 'exec -a customArgv0 ./node'\n&gt; process.argv[0]\n'/Volumes/code/external/node/out/Release/node'\n&gt; process.argv0\n'customArgv0'\n</pre> <h2 id=\"process_process_channel\">process.channel</h2> <div class=\"api_metadata\"> <span>Added in: v7.1.0</span> </div>\n<p>If the Node.js process was spawned with an IPC channel (see the <a href=\"child_process\">Child Process</a> documentation), the <code>process.channel</code> property is a reference to the IPC channel. If no IPC channel exists, this property is <code>undefined</code>.</p> <h2 id=\"process_process_chdir_directory\">process.chdir(directory)</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.17</span> </div>\n<ul> <li>\n<code>directory</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>The <code>process.chdir()</code> method changes the current working directory of the Node.js process or throws an exception if doing so fails (for instance, if the specified <code>directory</code> does not exist).</p> <pre data-language=\"js\">console.log(`Starting directory: ${process.cwd()}`);\ntry {\n  process.chdir('/tmp');\n  console.log(`New directory: ${process.cwd()}`);\n}\ncatch (err) {\n  console.log(`chdir: ${err}`);\n}\n</pre> <h2 id=\"process_process_config\">process.config</h2> <div class=\"api_metadata\"> <span>Added in: v0.7.7</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li> </ul> <p>The <code>process.config</code> property returns an Object containing the JavaScript representation of the configure options used to compile the current Node.js executable. This is the same as the <code>config.gypi</code> file that was produced when running the <code>./configure</code> script.</p> <p>An example of the possible output looks like:</p> <pre data-language=\"txt\">{\n  target_defaults:\n   { cflags: [],\n     default_configuration: 'Release',\n     defines: [],\n     include_dirs: [],\n     libraries: [] },\n  variables:\n   {\n     host_arch: 'x64',\n     node_install_npm: 'true',\n     node_prefix: '',\n     node_shared_cares: 'false',\n     node_shared_http_parser: 'false',\n     node_shared_libuv: 'false',\n     node_shared_zlib: 'false',\n     node_use_dtrace: 'false',\n     node_use_openssl: 'true',\n     node_shared_openssl: 'false',\n     strict_aliasing: 'true',\n     target_arch: 'x64',\n     v8_use_snapshot: 'true'\n   }\n}\n</pre> <p><em>Note</em>: The <code>process.config</code> property is <strong>not</strong> read-only and there are existing modules in the ecosystem that are known to extend, modify, or entirely replace the value of <code>process.config</code>.</p> <h2 id=\"process_process_connected\">process.connected</h2> <div class=\"api_metadata\"> <span>Added in: v0.7.2</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li> </ul> <p>If the Node.js process is spawned with an IPC channel (see the <a href=\"child_process\">Child Process</a> and <a href=\"cluster\">Cluster</a> documentation), the <code>process.connected</code> property will return <code>true</code> so long as the IPC channel is connected and will return <code>false</code> after <code>process.disconnect()</code> is called.</p> <p>Once <code>process.connected</code> is <code>false</code>, it is no longer possible to send messages over the IPC channel using <code>process.send()</code>.</p> <h2 id=\"process_process_cpuusage_previousvalue\">process.cpuUsage([previousValue])</h2> <div class=\"api_metadata\"> <span>Added in: v6.1.0</span> </div>\n<ul> <li>\n<code>previousValue</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> A previous return value from calling <code>process.cpuUsage()</code>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>user</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>system</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> </li> </ul> <p>The <code>process.cpuUsage()</code> method returns the user and system CPU time usage of the current process, in an object with properties <code>user</code> and <code>system</code>, whose values are microsecond values (millionth of a second). These values measure time spent in user and system code respectively, and may end up being greater than actual elapsed time if multiple CPU cores are performing work for this process.</p> <p>The result of a previous call to <code>process.cpuUsage()</code> can be passed as the argument to the function, to get a diff reading.</p> <pre data-language=\"js\">const startUsage = process.cpuUsage();\n// { user: 38579, system: 6986 }\n\n// spin the CPU for 500 milliseconds\nconst now = Date.now();\nwhile (Date.now() - now &lt; 500);\n\nconsole.log(process.cpuUsage(startUsage));\n// { user: 514883, system: 11226 }\n</pre> <h2 id=\"process_process_cwd\">process.cwd()</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.8</span> </div>\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>The <code>process.cwd()</code> method returns the current working directory of the Node.js process.</p> <pre data-language=\"js\">console.log(`Current directory: ${process.cwd()}`);\n</pre> <h2 id=\"process_process_disconnect\">process.disconnect()</h2> <div class=\"api_metadata\"> <span>Added in: v0.7.2</span> </div>\n<p>If the Node.js process is spawned with an IPC channel (see the <a href=\"child_process\">Child Process</a> and <a href=\"cluster\">Cluster</a> documentation), the <code>process.disconnect()</code> method will close the IPC channel to the parent process, allowing the child process to exit gracefully once there are no other connections keeping it alive.</p> <p>The effect of calling <code>process.disconnect()</code> is that same as calling the parent process's <a href=\"child_process#child_process_child_disconnect\"><code>ChildProcess.disconnect()</code></a>.</p> <p>If the Node.js process was not spawned with an IPC channel, <code>process.disconnect()</code> will be <code>undefined</code>.</p> <h2 id=\"process_process_emitwarning_warning_name_ctor\">process.emitWarning(warning[, name][, ctor])</h2> <div class=\"api_metadata\"> <span>Added in: v6.0.0</span> </div>\n<ul> <li>\n<code>warning</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a> The warning to emit.</li> <li>\n<code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> When <code>warning</code> is a String, <code>name</code> is the name to use for the warning. Default: <code>Warning</code>.</li> <li>\n<code>ctor</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> When <code>warning</code> is a String, <code>ctor</code> is an optional function used to limit the generated stack trace. Default <code>process.emitWarning</code>\n</li> </ul> <p>The <code>process.emitWarning()</code> method can be used to emit custom or application specific process warnings. These can be listened for by adding a handler to the <a href=\"#process_event_warning\"><code>process.on('warning')</code></a> event.</p> <pre data-language=\"js\">// Emit a warning using a string...\nprocess.emitWarning('Something happened!');\n// Emits: (node: 56338) Warning: Something happened!\n</pre> <pre data-language=\"js\">// Emit a warning using a string and a name...\nprocess.emitWarning('Something Happened!', 'CustomWarning');\n// Emits: (node:56338) CustomWarning: Something Happened!\n</pre> <p>In each of the previous examples, an <code>Error</code> object is generated internally by <code>process.emitWarning()</code> and passed through to the <a href=\"#process_event_warning\"><code>process.on('warning')</code></a> event.</p> <pre data-language=\"js\">process.on('warning', (warning) =&gt; {\n  console.warn(warning.name);\n  console.warn(warning.message);\n  console.warn(warning.stack);\n});\n</pre> <p>If <code>warning</code> is passed as an <code>Error</code> object, it will be passed through to the <code>process.on('warning')</code> event handler unmodified (and the optional <code>name</code> and <code>ctor</code> arguments will be ignored):</p> <pre data-language=\"js\">// Emit a warning using an Error object...\nconst myWarning = new Error('Warning! Something happened!');\nmyWarning.name = 'CustomWarning';\n\nprocess.emitWarning(myWarning);\n// Emits: (node:56338) CustomWarning: Warning! Something Happened!\n</pre> <p>A <code>TypeError</code> is thrown if <code>warning</code> is anything other than a string or <code>Error</code> object.</p> <p>Note that while process warnings use <code>Error</code> objects, the process warning mechanism is <strong>not</strong> a replacement for normal error handling mechanisms.</p> <p>The following additional handling is implemented if the warning <code>name</code> is <code>DeprecationWarning</code>:</p> <ul> <li>If the <code>--throw-deprecation</code> command-line flag is used, the deprecation warning is thrown as an exception rather than being emitted as an event.</li> <li>If the <code>--no-deprecation</code> command-line flag is used, the deprecation warning is suppressed.</li> <li>If the <code>--trace-deprecation</code> command-line flag is used, the deprecation warning is printed to <code>stderr</code> along with the full stack trace.</li> </ul> <h3 id=\"process_avoiding_duplicate_warnings\">Avoiding duplicate warnings</h3> <p>As a best practice, warnings should be emitted only once per process. To do so, it is recommended to place the <code>emitWarning()</code> behind a simple boolean flag as illustrated in the example below:</p> <pre data-language=\"js\">function emitMyWarning() {\n  if (!emitMyWarning.warned) {\n    emitMyWarning.warned = true;\n    process.emitWarning('Only warn once!');\n  }\n}\nemitMyWarning();\n// Emits: (node: 56339) Warning: Only warn once!\nemitMyWarning();\n// Emits nothing\n</pre> <h2 id=\"process_process_env\">process.env</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.27</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li> </ul> <p>The <code>process.env</code> property returns an object containing the user environment. See <a href=\"http://man7.org/linux/man-pages/man7/environ.7.html\">environ(7)</a>.</p> <p>An example of this object looks like:</p> <pre data-language=\"js\">{\n  TERM: 'xterm-256color',\n  SHELL: '/usr/local/bin/bash',\n  USER: 'maciej',\n  PATH: '~/.bin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin',\n  PWD: '/Users/maciej',\n  EDITOR: 'vim',\n  SHLVL: '1',\n  HOME: '/Users/maciej',\n  LOGNAME: 'maciej',\n  _: '/usr/local/bin/node'\n}\n</pre> <p>It is possible to modify this object, but such modifications will not be reflected outside the Node.js process. In other words, the following example would not work:</p> <pre data-language=\"console\">$ node -e 'process.env.foo = \"bar\"' &amp;&amp; echo $foo\n</pre> <p>While the following will:</p> <pre data-language=\"js\">process.env.foo = 'bar';\nconsole.log(process.env.foo);\n</pre> <p>Assigning a property on <code>process.env</code> will implicitly convert the value to a string.</p> <p>Example:</p> <pre data-language=\"js\">process.env.test = null;\nconsole.log(process.env.test);\n// =&gt; 'null'\nprocess.env.test = undefined;\nconsole.log(process.env.test);\n// =&gt; 'undefined'\n</pre> <p>Use <code>delete</code> to delete a property from <code>process.env</code>.</p> <p>Example:</p> <pre data-language=\"js\">process.env.TEST = 1;\ndelete process.env.TEST;\nconsole.log(process.env.TEST);\n// =&gt; undefined\n</pre> <p>On Windows operating systems, environment variables are case-insensitive.</p> <p>Example:</p> <pre data-language=\"js\">process.env.TEST = 1;\nconsole.log(process.env.test);\n// =&gt; 1\n</pre> <h2 id=\"process_process_execargv\">process.execArgv</h2> <div class=\"api_metadata\"> <span>Added in: v0.7.7</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li> </ul> <p>The <code>process.execArgv</code> property returns the set of Node.js-specific command-line options passed when the Node.js process was launched. These options do not appear in the array returned by the <a href=\"#process_process_argv\"><code>process.argv</code></a> property, and do not include the Node.js executable, the name of the script, or any options following the script name. These options are useful in order to spawn child processes with the same execution environment as the parent.</p> <p>For example:</p> <pre data-language=\"console\">$ node --harmony script.js --version\n</pre> <p>Results in <code>process.execArgv</code>:</p> <pre data-language=\"js\">['--harmony']\n</pre> <p>And <code>process.argv</code>:</p> <pre data-language=\"js\">['/usr/local/bin/node', 'script.js', '--version']\n</pre> <h2 id=\"process_process_execpath\">process.execPath</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.100</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> <p>The <code>process.execPath</code> property returns the absolute pathname of the executable that started the Node.js process.</p> <p>For example:</p> <pre data-language=\"js\">'/usr/local/bin/node'\n</pre> <h2 id=\"process_process_exit_code\">process.exit([code])</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.13</span> </div>\n<ul> <li>\n<code>code</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The exit code. Defaults to <code>0</code>.</li> </ul> <p>The <code>process.exit()</code> method instructs Node.js to terminate the process synchronously with an exit status of <code>code</code>. If <code>code</code> is omitted, exit uses either the 'success' code <code>0</code> or the value of <code>process.exitCode</code> if it has been set. Node.js will not terminate until all the <a href=\"#process_event_exit\"><code>'exit'</code></a> event listeners are called.</p> <p>To exit with a 'failure' code:</p> <pre data-language=\"js\">process.exit(1);\n</pre> <p>The shell that executed Node.js should see the exit code as <code>1</code>.</p> <p>It is important to note that calling <code>process.exit()</code> will force the process to exit as quickly as possible <em>even if there are still asynchronous operations pending</em> that have not yet completed fully, <em>including</em> I/O operations to <code>process.stdout</code> and <code>process.stderr</code>.</p> <p>In most situations, it is not actually necessary to call <code>process.exit()</code> explicitly. The Node.js process will exit on its own <em>if there is no additional work pending</em> in the event loop. The <code>process.exitCode</code> property can be set to tell the process which exit code to use when the process exits gracefully.</p> <p>For instance, the following example illustrates a <em>misuse</em> of the <code>process.exit()</code> method that could lead to data printed to stdout being truncated and lost:</p> <pre data-language=\"js\">// This is an example of what *not* to do:\nif (someConditionNotMet()) {\n  printUsageToStdout();\n  process.exit(1);\n}\n</pre> <p>The reason this is problematic is because writes to <code>process.stdout</code> in Node.js are sometimes <em>asynchronous</em> and may occur over multiple ticks of the Node.js event loop. Calling <code>process.exit()</code>, however, forces the process to exit <em>before</em> those additional writes to <code>stdout</code> can be performed.</p> <p>Rather than calling <code>process.exit()</code> directly, the code <em>should</em> set the <code>process.exitCode</code> and allow the process to exit naturally by avoiding scheduling any additional work for the event loop:</p> <pre data-language=\"js\">// How to properly set the exit code while letting\n// the process exit gracefully.\nif (someConditionNotMet()) {\n  printUsageToStdout();\n  process.exitCode = 1;\n}\n</pre> <p>If it is necessary to terminate the Node.js process due to an error condition, throwing an <em>uncaught</em> error and allowing the process to terminate accordingly is safer than calling <code>process.exit()</code>.</p> <h2 id=\"process_process_exitcode\">process.exitCode</h2> <div class=\"api_metadata\"> <span>Added in: v0.11.8</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a></li> </ul> <p>A number which will be the process exit code, when the process either exits gracefully, or is exited via <a href=\"#process_process_exit_code\"><code>process.exit()</code></a> without specifying a code.</p> <p>Specifying a code to <a href=\"#process_process_exit_code\"><code>process.exit(code)</code></a> will override any previous setting of <code>process.exitCode</code>.</p> <h2 id=\"process_process_getegid\">process.getegid()</h2> <div class=\"api_metadata\"> <span>Added in: v2.0.0</span> </div>\n<p>The <code>process.getegid()</code> method returns the numerical effective group identity of the Node.js process. (See <a href=\"http://man7.org/linux/man-pages/man2/getegid.2.html\">getegid(2)</a>.)</p> <pre data-language=\"js\">if (process.getegid) {\n  console.log(`Current gid: ${process.getegid()}`);\n}\n</pre> <p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or Android)</p> <h2 id=\"process_process_geteuid\">process.geteuid()</h2> <div class=\"api_metadata\"> <span>Added in: v2.0.0</span> </div>\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> </ul> <p>The <code>process.geteuid()</code> method returns the numerical effective user identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/geteuid.2.html\">geteuid(2)</a>.)</p> <pre data-language=\"js\">if (process.geteuid) {\n  console.log(`Current uid: ${process.geteuid()}`);\n}\n</pre> <p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or Android)</p> <h2 id=\"process_process_getgid\">process.getgid()</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.31</span> </div>\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> </ul> <p>The <code>process.getgid()</code> method returns the numerical group identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/getgid.2.html\">getgid(2)</a>.)</p> <pre data-language=\"js\">if (process.getgid) {\n  console.log(`Current gid: ${process.getgid()}`);\n}\n</pre> <p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or Android)</p> <h2 id=\"process_process_getgroups\">process.getgroups()</h2> <div class=\"api_metadata\"> <span>Added in: v0.9.4</span> </div>\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a>\n</li> </ul> <p>The <code>process.getgroups()</code> method returns an array with the supplementary group IDs. POSIX leaves it unspecified if the effective group ID is included but Node.js ensures it always is.</p> <p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or Android)</p> <h2 id=\"process_process_getuid\">process.getuid()</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.28</span> </div>\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>The <code>process.getuid()</code> method returns the numeric user identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/getuid.2.html\">getuid(2)</a>.)</p> <pre data-language=\"js\">if (process.getuid) {\n  console.log(`Current uid: ${process.getuid()}`);\n}\n</pre> <p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or Android)</p> <h2 id=\"process_process_hrtime_time\">process.hrtime([time])</h2> <div class=\"api_metadata\"> <span>Added in: v0.7.6</span> </div>\n<p>The <code>process.hrtime()</code> method returns the current high-resolution real time in a <code>[seconds, nanoseconds]</code> tuple Array. <code>time</code> is an optional parameter that must be the result of a previous <code>process.hrtime()</code> call (and therefore, a real time in a <code>[seconds, nanoseconds]</code> tuple Array containing a previous time) to diff with the current time. These times are relative to an arbitrary time in the past, and not related to the time of day and therefore not subject to clock drift. The primary use is for measuring performance between intervals.</p> <p>Passing in the result of a previous call to <code>process.hrtime()</code> is useful for calculating an amount of time passed between calls:</p> <pre data-language=\"js\">var time = process.hrtime();\n// [ 1800216, 25 ]\n\nsetTimeout(() =&gt; {\n  var diff = process.hrtime(time);\n  // [ 1, 552 ]\n\n  console.log(`Benchmark took ${diff[0] * 1e9 + diff[1]} nanoseconds`);\n  // benchmark took 1000000527 nanoseconds\n}, 1000);\n</pre> <p>Constructing an array by some method other than calling <code>process.hrtime()</code> and passing the result to process.hrtime() will result in undefined behavior.</p> <h2 id=\"process_process_initgroups_user_extra_group\">process.initgroups(user, extra_group)</h2> <div class=\"api_metadata\"> <span>Added in: v0.9.4</span> </div>\n<ul> <li>\n<code>user</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The user name or numeric identifier.</li> <li>\n<code>extra_group</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> A group name or numeric identifier.</li> </ul> <p>The <code>process.initgroups()</code> method reads the <code>/etc/group</code> file and initializes the group access list, using all groups of which the user is a member. This is a privileged operation that requires that the Node.js process either have <code>root</code> access or the <code>CAP_SETGID</code> capability.</p> <p>Note that care must be taken when dropping privileges. Example:</p> <pre data-language=\"js\">console.log(process.getgroups());         // [ 0 ]\nprocess.initgroups('bnoordhuis', 1000);   // switch user\nconsole.log(process.getgroups());         // [ 27, 30, 46, 1000, 0 ]\nprocess.setgid(1000);                     // drop root gid\nconsole.log(process.getgroups());         // [ 27, 30, 46, 1000 ]\n</pre> <p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or Android)</p> <h2 id=\"process_process_kill_pid_signal\">process.kill(pid[, signal])</h2> <div class=\"api_metadata\"> <span>Added in: v0.0.6</span> </div>\n<ul> <li>\n<code>pid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> A process ID</li> <li>\n<code>signal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The signal to send, either as a string or number. Defaults to <code>'SIGTERM'</code>.</li> </ul> <p>The <code>process.kill()</code> method sends the <code>signal</code> to the process identified by <code>pid</code>.</p> <p>Signal names are strings such as <code>'SIGINT'</code> or <code>'SIGHUP'</code>. See <a href=\"#process_signal_events\">Signal Events</a> and <a href=\"http://man7.org/linux/man-pages/man2/kill.2.html\">kill(2)</a> for more information.</p> <p>This method will throw an error if the target <code>pid</code> does not exist. As a special case, a signal of <code>0</code> can be used to test for the existence of a process. Windows platforms will throw an error if the <code>pid</code> is used to kill a process group.</p> <p><em>Note</em>:Even though the name of this function is <code>process.kill()</code>, it is really just a signal sender, like the <code>kill</code> system call. The signal sent may do something other than kill the target process.</p> <p>For example:</p> <pre data-language=\"js\">process.on('SIGHUP', () =&gt; {\n  console.log('Got SIGHUP signal.');\n});\n\nsetTimeout(() =&gt; {\n  console.log('Exiting.');\n  process.exit(0);\n}, 100);\n\nprocess.kill(process.pid, 'SIGHUP');\n</pre> <p><em>Note</em>: When <code>SIGUSR1</code> is received by a Node.js process, Node.js will start the debugger, see <a href=\"#process_signal_events\">Signal Events</a>.</p> <h2 id=\"process_process_mainmodule\">process.mainModule</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.17</span> </div>\n<p>The <code>process.mainModule</code> property provides an alternative way of retrieving <a href=\"modules#modules_accessing_the_main_module\"><code>require.main</code></a>. The difference is that if the main module changes at runtime, <a href=\"modules#modules_accessing_the_main_module\"><code>require.main</code></a> may still refer to the original main module in modules that were required before the change occurred. Generally, it's safe to assume that the two refer to the same module.</p> <p>As with <a href=\"modules#modules_accessing_the_main_module\"><code>require.main</code></a>, <code>process.mainModule</code> will be <code>undefined</code> if there is no entry script.</p> <h2 id=\"process_process_memoryusage\">process.memoryUsage()</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.2.0</td> <td>\n<p>Added <code>external</code> to the returned object.</p> </td>\n</tr> <tr>\n<td>v0.1.16</td> <td>\n<p><span>Added in: v0.1.16</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>rss</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>heapTotal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>heapUsed</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>external</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> </li> </ul> <p>The <code>process.memoryUsage()</code> method returns an object describing the memory usage of the Node.js process measured in bytes.</p> <p>For example, the code:</p> <pre data-language=\"js\">console.log(process.memoryUsage());\n</pre> <p>Will generate:</p> <pre data-language=\"js\">{\n  rss: 4935680,\n  heapTotal: 1826816,\n  heapUsed: 650472,\n  external: 49879\n}\n</pre> <p><code>heapTotal</code> and <code>heapUsed</code> refer to V8's memory usage. <code>external</code> refers to the memory usage of C++ objects bound to JavaScript objects managed by V8.</p> <h2 id=\"process_process_nexttick_callback_args\">process.nextTick(callback[, ...args])</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v1.8.1</td> <td>\n<p>Additional arguments after <code>callback</code> are now supported.</p> </td>\n</tr> <tr>\n<td>v0.1.26</td> <td>\n<p><span>Added in: v0.1.26</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> <li>\n<code>...args</code> <span class=\"type\">&lt;any&gt;</span> Additional arguments to pass when invoking the <code>callback</code>\n</li> </ul> <p>The <code>process.nextTick()</code> method adds the <code>callback</code> to the \"next tick queue\". Once the current turn of the event loop turn runs to completion, all callbacks currently in the next tick queue will be called.</p> <p>This is <em>not</em> a simple alias to <a href=\"timers#timers_settimeout_callback_delay_args\"><code>setTimeout(fn, 0)</code></a>. It is much more efficient. It runs before any additional I/O events (including timers) fire in subsequent ticks of the event loop.</p> <pre data-language=\"js\">console.log('start');\nprocess.nextTick(() =&gt; {\n  console.log('nextTick callback');\n});\nconsole.log('scheduled');\n// Output:\n// start\n// scheduled\n// nextTick callback\n</pre> <p>This is important when developing APIs in order to give users the opportunity to assign event handlers <em>after</em> an object has been constructed but before any I/O has occurred:</p> <pre data-language=\"js\">function MyThing(options) {\n  this.setupOptions(options);\n\n  process.nextTick(() =&gt; {\n    this.startDoingStuff();\n  });\n}\n\nvar thing = new MyThing();\nthing.getReadyForStuff();\n\n// thing.startDoingStuff() gets called now, not before.\n</pre> <p>It is very important for APIs to be either 100% synchronous or 100% asynchronous. Consider this example:</p> <pre data-language=\"js\">// WARNING!  DO NOT USE!  BAD UNSAFE HAZARD!\nfunction maybeSync(arg, cb) {\n  if (arg) {\n    cb();\n    return;\n  }\n\n  fs.stat('file', cb);\n}\n</pre> <p>This API is hazardous because in the following case:</p> <pre data-language=\"js\">const maybeTrue = Math.random() &gt; 0.5;\n\nmaybeSync(maybeTrue, () =&gt; {\n  foo();\n});\n\nbar();\n</pre> <p>It is not clear whether <code>foo()</code> or <code>bar()</code> will be called first.</p> <p>The following approach is much better:</p> <pre data-language=\"js\">function definitelyAsync(arg, cb) {\n  if (arg) {\n    process.nextTick(cb);\n    return;\n  }\n\n  fs.stat('file', cb);\n}\n</pre> <p><em>Note</em>: the next tick queue is completely drained on each pass of the event loop <strong>before</strong> additional I/O is processed. As a result, recursively setting nextTick callbacks will block any I/O from happening, just like a <code>while(true);</code> loop.</p> <h2 id=\"process_process_pid\">process.pid</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.15</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a></li> </ul> <p>The <code>process.pid</code> property returns the PID of the process.</p> <pre data-language=\"js\">console.log(`This process is pid ${process.pid}`);\n</pre> <h2 id=\"process_process_platform\">process.platform</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.16</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> <p>The <code>process.platform</code> property returns a string identifying the operating system platform on which the Node.js process is running. For instance <code>'darwin'</code>, <code>'freebsd'</code>, <code>'linux'</code>, <code>'sunos'</code> or <code>'win32'</code></p> <pre data-language=\"js\">console.log(`This platform is ${process.platform}`);\n</pre> <h2 id=\"process_process_release\">process.release</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v4.2.0</td> <td>\n<p>The <code>lts</code> property is now supported.</p> </td>\n</tr> <tr>\n<td>v3.0.0</td> <td>\n<p><span>Added in: v3.0.0</span></p> </td>\n</tr> </table> </details> </div>\n<p>The <code>process.release</code> property returns an Object containing metadata related to the current release, including URLs for the source tarball and headers-only tarball.</p> <p><code>process.release</code> contains the following properties:</p> <ul> <li>\n<code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> A value that will always be <code>'node'</code> for Node.js. For legacy io.js releases, this will be <code>'io.js'</code>.</li> <li>\n<code>sourceUrl</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> an absolute URL pointing to a <em><code>.tar.gz</code></em> file containing the source code of the current release.</li> <li>\n<code>headersUrl</code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> an absolute URL pointing to a <em><code>.tar.gz</code></em> file containing only the source header files for the current release. This file is significantly smaller than the full source file and can be used for compiling Node.js native add-ons.</li> <li>\n<code>libUrl</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> an absolute URL pointing to a <em><code>node.lib</code></em> file matching the architecture and version of the current release. This file is used for compiling Node.js native add-ons. <em>This property is only present on Windows builds of Node.js and will be missing on all other platforms.</em>\n</li> <li>\n<code>lts</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> a string label identifying the <a href=\"https://github.com/nodejs/LTS/\">LTS</a> label for this release. If the Node.js release is not an LTS release, this will be <code>undefined</code>.</li> </ul> <p>For example:</p> <pre data-language=\"js\">{\n  name: 'node',\n  lts: 'Argon',\n  sourceUrl: 'https://nodejs.org/download/release/v4.4.5/node-v4.4.5.tar.gz',\n  headersUrl: 'https://nodejs.org/download/release/v4.4.5/node-v4.4.5-headers.tar.gz',\n  libUrl: 'https://nodejs.org/download/release/v4.4.5/win-x64/node.lib'\n}\n</pre> <p>In custom builds from non-release versions of the source tree, only the <code>name</code> property may be present. The additional properties should not be relied upon to exist.</p> <h2 id=\"process_process_send_message_sendhandle_options_callback\">process.send(message[, sendHandle[, options]][, callback])</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.9</span> </div>\n<ul> <li>\n<code>message</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> <li>\n<code>sendHandle</code> <span class=\"type\">&lt;Handle object&gt;</span>\n</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a>\n</li> </ul> <p>If Node.js is spawned with an IPC channel, the <code>process.send()</code> method can be used to send messages to the parent process. Messages will be received as a <a href=\"child_process#child_process_event_message\"><code>'message'</code></a> event on the parent's <a href=\"child_process#child_process_class_childprocess\"><code>ChildProcess</code></a> object.</p> <p>If Node.js was not spawned with an IPC channel, <code>process.send()</code> will be <code>undefined</code>.</p> <p><em>Note</em>: This function uses <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a> internally to serialize the <code>message</code>.*</p> <h2 id=\"process_process_setegid_id\">process.setegid(id)</h2> <div class=\"api_metadata\"> <span>Added in: v2.0.0</span> </div>\n<ul> <li>\n<code>id</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> A group name or ID</li> </ul> <p>The <code>process.setegid()</code> method sets the effective group identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/setegid.2.html\">setegid(2)</a>.) The <code>id</code> can be passed as either a numeric ID or a group name string. If a group name is specified, this method blocks while resolving the associated a numeric ID.</p> <pre data-language=\"js\">if (process.getegid &amp;&amp; process.setegid) {\n  console.log(`Current gid: ${process.getegid()}`);\n  try {\n    process.setegid(501);\n    console.log(`New gid: ${process.getegid()}`);\n  }\n  catch (err) {\n    console.log(`Failed to set gid: ${err}`);\n  }\n}\n</pre> <p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or Android)</p> <h2 id=\"process_process_seteuid_id\">process.seteuid(id)</h2> <div class=\"api_metadata\"> <span>Added in: v2.0.0</span> </div>\n<ul> <li>\n<code>id</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> A user name or ID</li> </ul> <p>The <code>process.seteuid()</code> method sets the effective user identity of the process. (See <a href=\"http://man7.org/linux/man-pages/man2/seteuid.2.html\">seteuid(2)</a>.) The <code>id</code> can be passed as either a numeric ID or a username string. If a username is specified, the method blocks while resolving the associated numeric ID.</p> <pre data-language=\"js\">if (process.geteuid &amp;&amp; process.seteuid) {\n  console.log(`Current uid: ${process.geteuid()}`);\n  try {\n    process.seteuid(501);\n    console.log(`New uid: ${process.geteuid()}`);\n  }\n  catch (err) {\n    console.log(`Failed to set uid: ${err}`);\n  }\n}\n</pre> <p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or Android)</p> <h2 id=\"process_process_setgid_id\">process.setgid(id)</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.31</span> </div>\n<ul> <li>\n<code>id</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The group name or ID</li> </ul> <p>The <code>process.setgid()</code> method sets the group identity of the process. (See setgid(2).) The <code>id</code> can be passed as either a numeric ID or a group name string. If a group name is specified, this method blocks while resolving the associated numeric ID.</p> <pre data-language=\"js\">if (process.getgid &amp;&amp; process.setgid) {\n  console.log(`Current gid: ${process.getgid()}`);\n  try {\n    process.setgid(501);\n    console.log(`New gid: ${process.getgid()}`);\n  }\n  catch (err) {\n    console.log(`Failed to set gid: ${err}`);\n  }\n}\n</pre> <p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or Android)</p> <h2 id=\"process_process_setgroups_groups\">process.setgroups(groups)</h2> <div class=\"api_metadata\"> <span>Added in: v0.9.4</span> </div>\n<ul> <li>\n<code>groups</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a>\n</li> </ul> <p>The <code>process.setgroups()</code> method sets the supplementary group IDs for the Node.js process. This is a privileged operation that requires the Node.js process to have <code>root</code> or the <code>CAP_SETGID</code> capability.</p> <p>The <code>groups</code> array can contain numeric group IDs, group names or both.</p> <p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or Android)</p> <h2 id=\"process_process_setuid_id\">process.setuid(id)</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.28</span> </div>\n<p>The <code>process.setuid(id)</code> method sets the user identity of the process. (See setuid(2).) The <code>id</code> can be passed as either a numeric ID or a username string. If a username is specified, the method blocks while resolving the associated numeric ID.</p> <pre data-language=\"js\">if (process.getuid &amp;&amp; process.setuid) {\n  console.log(`Current uid: ${process.getuid()}`);\n  try {\n    process.setuid(501);\n    console.log(`New uid: ${process.getuid()}`);\n  }\n  catch (err) {\n    console.log(`Failed to set uid: ${err}`);\n  }\n}\n</pre> <p><em>Note</em>: This function is only available on POSIX platforms (i.e. not Windows or Android)</p> <h2 id=\"process_process_stderr\">process.stderr</h2> <div class=\"signature\">\n<ul> <li><a href=\"stream#stream_stream\" class=\"type\">&lt;Stream&gt;</a></li> </ul> </div>\n<p>The <code>process.stderr</code> property returns a stream connected to <code>stderr</code> (fd <code>2</code>). It is a <a href=\"net#net_class_net_socket\"><code>net.Socket</code></a> (which is a <a href=\"stream#stream_duplex_and_transform_streams\">Duplex</a> stream) unless fd <code>2</code> refers to a file, in which case it is a <a href=\"stream#stream_writable_streams\">Writable</a> stream.</p> <p>Note: <code>process.stderr</code> differs from other Node.js streams in important ways, see <a href=\"process#process_a_note_on_process_i_o\">note on process I/O</a> for more information.</p> <h2 id=\"process_process_stdin\">process.stdin</h2> <div class=\"signature\">\n<ul> <li><a href=\"stream#stream_stream\" class=\"type\">&lt;Stream&gt;</a></li> </ul> </div>\n<p>The <code>process.stdin</code> property returns a stream connected to <code>stdin</code> (fd <code>0</code>). It is a <a href=\"net#net_class_net_socket\"><code>net.Socket</code></a> (which is a <a href=\"stream#stream_duplex_and_transform_streams\">Duplex</a> stream) unless fd <code>0</code> refers to a file, in which case it is a <a href=\"stream#stream_readable_streams\">Readable</a> stream.</p> <p>For example:</p> <pre data-language=\"js\">process.stdin.setEncoding('utf8');\n\nprocess.stdin.on('readable', () =&gt; {\n  var chunk = process.stdin.read();\n  if (chunk !== null) {\n    process.stdout.write(`data: ${chunk}`);\n  }\n});\n\nprocess.stdin.on('end', () =&gt; {\n  process.stdout.write('end');\n});\n</pre> <p>As a <a href=\"stream#stream_duplex_and_transform_streams\">Duplex</a> stream, <code>process.stdin</code> can also be used in \"old\" mode that is compatible with scripts written for Node.js prior to v0.10. For more information see <a href=\"stream#stream_compatibility_with_older_node_js_versions\">Stream compatibility</a>.</p> <p><em>Note</em>: In \"old\" streams mode the <code>stdin</code> stream is paused by default, so one must call <code>process.stdin.resume()</code> to read from it. Note also that calling <code>process.stdin.resume()</code> itself would switch stream to \"old\" mode.</p> <h2 id=\"process_process_stdout\">process.stdout</h2> <div class=\"signature\">\n<ul> <li><a href=\"stream#stream_stream\" class=\"type\">&lt;Stream&gt;</a></li> </ul> </div>\n<p>The <code>process.stdout</code> property returns a stream connected to <code>stdout</code> (fd <code>1</code>). It is a <a href=\"net#net_class_net_socket\"><code>net.Socket</code></a> (which is a <a href=\"stream#stream_duplex_and_transform_streams\">Duplex</a> stream) unless fd <code>1</code> refers to a file, in which case it is a <a href=\"stream#stream_writable_streams\">Writable</a> stream.</p> <p>For example, to copy process.stdin to process.stdout:</p> <pre data-language=\"js\">process.stdin.pipe(process.stdout);\n</pre> <p>Note: <code>process.stdout</code> differs from other Node.js streams in important ways, see <a href=\"process#process_a_note_on_process_i_o\">note on process I/O</a> for more information.</p> <h3 id=\"process_a_note_on_process_i_o\">A note on process I/O</h3> <p><code>process.stdout</code> and <code>process.stderr</code> differ from other Node.js streams in important ways:</p> <ol> <li>They are used internally by <a href=\"console#console_console_log_data_args\"><code>console.log()</code></a> and <a href=\"console#console_console_error_data_args\"><code>console.error()</code></a>, respectively.</li> <li>They cannot be closed (<a href=\"stream#stream_writable_end_chunk_encoding_callback\"><code>end()</code></a> will throw).</li> <li>They will never emit the <a href=\"stream#stream_event_finish\"><code>'finish'</code></a> event.</li> <li>Writes may be synchronous depending on the what the stream is connected to and whether the system is Windows or Unix:<ul> <li>Files: <em>synchronous</em> on Windows and Linux</li> <li>TTYs (Terminals): <em>asynchronous</em> on Windows, <em>synchronous</em> on Unix</li> <li>Pipes (and sockets): <em>synchronous</em> on Windows, <em>asynchronous</em> on Unix</li> </ul> </li> </ol> <p>These behaviours are partly for historical reasons, as changing them would create backwards incompatibility, but they are also expected by some users.</p> <p>Synchronous writes avoid problems such as output written with <code>console.log()</code> or <code>console.error()</code> being unexpectedly interleaved, or not written at all if <code>process.exit()</code> is called before an asynchronous write completes. See <a href=\"#process_process_exit_code\"><code>process.exit()</code></a> for more information.</p> <p><strong><em>Warning</em></strong>: Synchronous writes block the event loop until the write has completed. This can be near instantaneous in the case of output to a file, but under high system load, pipes that are not being read at the receiving end, or with slow terminals or file systems, its possible for the event loop to be blocked often enough and long enough to have severe negative performance impacts. This may not be a problem when writing to an interactive terminal session, but consider this particularly careful when doing production logging to the process output streams.</p> <p>To check if a stream is connected to a <a href=\"tty#tty_tty\">TTY</a> context, check the <code>isTTY</code> property.</p> <p>For instance:</p> <pre data-language=\"console\">$ node -p \"Boolean(process.stdin.isTTY)\"\ntrue\n$ echo \"foo\" | node -p \"Boolean(process.stdin.isTTY)\"\nfalse\n$ node -p \"Boolean(process.stdout.isTTY)\"\ntrue\n$ node -p \"Boolean(process.stdout.isTTY)\" | cat\nfalse\n</pre> <p>See the <a href=\"tty#tty_tty\">TTY</a> documentation for more information.</p> <h2 id=\"process_process_title\">process.title</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.104</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> <p>The <code>process.title</code> property returns the current process title (i.e. returns the current value of <code>ps</code>). Assigning a new value to <code>process.title</code> modifies the current value of <code>ps</code>.</p> <p><em>Note</em>: When a new value is assigned, different platforms will impose different maximum length restrictions on the title. Usually such restrictions are quite limited. For instance, on Linux and OS X, <code>process.title</code> is limited to the size of the binary name plus the length of the command line arguments because setting the <code>process.title</code> overwrites the <code>argv</code> memory of the process. Node.js v0.8 allowed for longer process title strings by also overwriting the <code>environ</code> memory but that was potentially insecure and confusing in some (rather obscure) cases.</p> <h2 id=\"process_process_umask_mask\">process.umask([mask])</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.19</span> </div>\n<ul> <li>\n<code>mask</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> </ul> <p>The <code>process.umask()</code> method sets or returns the Node.js process's file mode creation mask. Child processes inherit the mask from the parent process. The old mask is return if the <code>mask</code> argument is given, otherwise returns the current mask.</p> <pre data-language=\"js\">const newmask = 0o022;\nconst oldmask = process.umask(newmask);\nconsole.log(\n  `Changed umask from ${oldmask.toString(8)} to ${newmask.toString(8)}`\n);\n</pre> <h2 id=\"process_process_uptime\">process.uptime()</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.0</span> </div>\n<ul> <li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> </ul> <p>The <code>process.uptime()</code> method returns the number of seconds the current Node.js process has been running.</p> <p><em>Note</em>: the return value includes fractions of a second. Use <code>Math.floor()</code> to get whole seconds.</p> <h2 id=\"process_process_version\">process.version</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.3</span> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li> </ul> <p>The <code>process.version</code> property returns the Node.js version string.</p> <pre data-language=\"js\">console.log(`Version: ${process.version}`);\n</pre> <h2 id=\"process_process_versions\">process.versions</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v4.2.0</td> <td>\n<p>The <code>icu</code> property is now supported.</p> </td>\n</tr> <tr>\n<td>v0.2.0</td> <td>\n<p><span>Added in: v0.2.0</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li> </ul> <p>The <code>process.versions</code> property returns an object listing the version strings of Node.js and its dependencies. <code>process.versions.modules</code> indicates the current ABI version, which is increased whenever a C++ API changes. Node.js will refuse to load modules that were compiled against a different module ABI version.</p> <pre data-language=\"js\">console.log(process.versions);\n</pre> <p>Will generate an object similar to:</p> <pre data-language=\"js\">{\n  http_parser: '2.3.0',\n  node: '1.1.1',\n  v8: '4.1.0.14',\n  uv: '1.3.0',\n  zlib: '1.2.8',\n  ares: '1.10.0-DEV',\n  modules: '43',\n  icu: '55.1',\n  openssl: '1.0.1k',\n  unicode: '8.0',\n  cldr: '29.0',\n  tz: '2016b' }\n</pre> <h2 id=\"process_exit_codes\">Exit Codes</h2> <p>Node.js will normally exit with a <code>0</code> status code when no more async operations are pending. The following status codes are used in other cases:</p> <ul> <li>\n<code>1</code> <strong>Uncaught Fatal Exception</strong> - There was an uncaught exception, and it was not handled by a domain or an <a href=\"#process_event_uncaughtexception\"><code>'uncaughtException'</code></a> event handler.</li> <li>\n<code>2</code> - Unused (reserved by Bash for builtin misuse)</li> <li>\n<code>3</code> <strong>Internal JavaScript Parse Error</strong> - The JavaScript source code internal in Node.js's bootstrapping process caused a parse error. This is extremely rare, and generally can only happen during development of Node.js itself.</li> <li>\n<code>4</code> <strong>Internal JavaScript Evaluation Failure</strong> - The JavaScript source code internal in Node.js's bootstrapping process failed to return a function value when evaluated. This is extremely rare, and generally can only happen during development of Node.js itself.</li> <li>\n<code>5</code> <strong>Fatal Error</strong> - There was a fatal unrecoverable error in V8. Typically a message will be printed to stderr with the prefix <code>FATAL\nERROR</code>.</li> <li>\n<code>6</code> <strong>Non-function Internal Exception Handler</strong> - There was an uncaught exception, but the internal fatal exception handler function was somehow set to a non-function, and could not be called.</li> <li>\n<code>7</code> <strong>Internal Exception Handler Run-Time Failure</strong> - There was an uncaught exception, and the internal fatal exception handler function itself threw an error while attempting to handle it. This can happen, for example, if a <a href=\"#process_event_uncaughtexception\"><code>'uncaughtException'</code></a> or <code>domain.on('error')</code> handler throws an error.</li> <li>\n<code>8</code> - Unused. In previous versions of Node.js, exit code 8 sometimes indicated an uncaught exception.</li> <li>\n<code>9</code> - <strong>Invalid Argument</strong> - Either an unknown option was specified, or an option requiring a value was provided without a value.</li> <li>\n<code>10</code> <strong>Internal JavaScript Run-Time Failure</strong> - The JavaScript source code internal in Node.js's bootstrapping process threw an error when the bootstrapping function was called. This is extremely rare, and generally can only happen during development of Node.js itself.</li> <li>\n<code>12</code> <strong>Invalid Debug Argument</strong> - The <code>--debug</code>, <code>--inspect</code> and/or <code>--debug-brk</code> options were set, but the port number chosen was invalid or unavailable.</li> <li>\n<code>&gt;128</code> <strong>Signal Exits</strong> - If Node.js receives a fatal signal such as <code>SIGKILL</code> or <code>SIGHUP</code>, then its exit code will be <code>128</code> plus the value of the signal code. This is a standard Unix practice, since exit codes are defined to be 7-bit integers, and signal exits set the high-order bit, and then contain the value of the signal code.</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/process.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/process.html</a>\n  </p>\n</div>\n","fs":"<h1 id=\"fs_file_system\">File System</h1> <div class=\"api_stability api_stability_2\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</div> <p>File I/O is provided by simple wrappers around standard POSIX functions. To use this module do <code>require('fs')</code>. All the methods have asynchronous and synchronous forms.</p> <p>The asynchronous form always takes a completion callback as its last argument. The arguments passed to the completion callback depend on the method, but the first argument is always reserved for an exception. If the operation was completed successfully, then the first argument will be <code>null</code> or <code>undefined</code>.</p> <p>When using the synchronous form any exceptions are immediately thrown. You can use try/catch to handle exceptions or allow them to bubble up.</p> <p>Here is an example of the asynchronous version:</p> <pre data-language=\"js\">const fs = require('fs');\n\nfs.unlink('/tmp/hello', (err) =&gt; {\n  if (err) throw err;\n  console.log('successfully deleted /tmp/hello');\n});\n</pre> <p>Here is the synchronous version:</p> <pre data-language=\"js\">const fs = require('fs');\n\nfs.unlinkSync('/tmp/hello');\nconsole.log('successfully deleted /tmp/hello');\n</pre> <p>With the asynchronous methods there is no guaranteed ordering. So the following is prone to error:</p> <pre data-language=\"js\">fs.rename('/tmp/hello', '/tmp/world', (err) =&gt; {\n  if (err) throw err;\n  console.log('renamed complete');\n});\nfs.stat('/tmp/world', (err, stats) =&gt; {\n  if (err) throw err;\n  console.log(`stats: ${JSON.stringify(stats)}`);\n});\n</pre> <p>It could be that <code>fs.stat</code> is executed before <code>fs.rename</code>. The correct way to do this is to chain the callbacks.</p> <pre data-language=\"js\">fs.rename('/tmp/hello', '/tmp/world', (err) =&gt; {\n  if (err) throw err;\n  fs.stat('/tmp/world', (err, stats) =&gt; {\n    if (err) throw err;\n    console.log(`stats: ${JSON.stringify(stats)}`);\n  });\n});\n</pre> <p>In busy processes, the programmer is <em>strongly encouraged</em> to use the asynchronous versions of these calls. The synchronous versions will block the entire process until they complete--halting all connections.</p> <p>The relative path to a filename can be used. Remember, however, that this path will be relative to <code>process.cwd()</code>.</p> <p>Most fs functions let you omit the callback argument. If you do, a default callback is used that rethrows errors. To get a trace to the original call site, set the <code>NODE_DEBUG</code> environment variable:</p> <pre data-language=\"txt\">$ cat script.js\nfunction bad() {\n  require('fs').readFile('/');\n}\nbad();\n\n$ env NODE_DEBUG=fs node script.js\nfs.js:88\n        throw backtrace;\n        ^\nError: EISDIR: illegal operation on a directory, read\n    &lt;stack trace.&gt;\n</pre> <h2 id=\"fs_buffer_api\">Buffer API</h2> <div class=\"api_metadata\"> <span>Added in: v6.0.0</span> </div>\n<p><code>fs</code> functions support passing and receiving paths as both strings and Buffers. The latter is intended to make it possible to work with filesystems that allow for non-UTF-8 filenames. For most typical uses, working with paths as Buffers will be unnecessary, as the string API converts to and from UTF-8 automatically.</p> <p><em>Note</em> that on certain file systems (such as NTFS and HFS+) filenames will always be encoded as UTF-8. On such file systems, passing non-UTF-8 encoded Buffers to <code>fs</code> functions will not work as expected.</p> <h2 id=\"fs_class_fs_fswatcher\">Class: fs.FSWatcher</h2> <div class=\"api_metadata\"> <span>Added in: v0.5.8</span> </div>\n<p>Objects returned from <a href=\"#fs_fs_watch_filename_options_listener\"><code>fs.watch()</code></a> are of this type.</p> <p>The <code>listener</code> callback provided to <code>fs.watch()</code> receives the returned FSWatcher's <code>change</code> events.</p> <p>The object itself emits these events:</p> <h3 id=\"fs_event_change\">Event: 'change'</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.8</span> </div>\n<ul> <li>\n<code>eventType</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The type of fs change</li> <li>\n<code>filename</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The filename that changed (if relevant/available)</li> </ul> <p>Emitted when something changes in a watched directory or file. See more details in <a href=\"#fs_fs_watch_filename_options_listener\"><code>fs.watch()</code></a>.</p> <p>The <code>filename</code> argument may not be provided depending on operating system support. If <code>filename</code> is provided, it will be provided as a <code>Buffer</code> if <code>fs.watch()</code> is called with its <code>encoding</code> option set to <code>'buffer'</code>, otherwise <code>filename</code> will be a string.</p> <pre data-language=\"js\">// Example when handled through fs.watch listener\nfs.watch('./tmp', {encoding: 'buffer'}, (eventType, filename) =&gt; {\n  if (filename)\n    console.log(filename);\n    // Prints: &lt;Buffer ...&gt;\n});\n</pre> <h3 id=\"fs_event_error\">Event: 'error'</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.8</span> </div>\n<ul> <li>\n<code>error</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a>\n</li> </ul> <p>Emitted when an error occurs.</p> <h3 id=\"fs_watcher_close\">watcher.close()</h3> <div class=\"api_metadata\"> <span>Added in: v0.5.8</span> </div>\n<p>Stop watching for changes on the given <code>fs.FSWatcher</code>.</p> <h2 id=\"fs_class_fs_readstream\">Class: fs.ReadStream</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.93</span> </div>\n<p><code>ReadStream</code> is a <a href=\"stream#stream_class_stream_readable\">Readable Stream</a>.</p> <h3 id=\"fs_event_close\">Event: 'close'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.93</span> </div>\n<p>Emitted when the <code>ReadStream</code>'s underlying file descriptor has been closed using the <code>fs.close()</code> method.</p> <h3 id=\"fs_event_open\">Event: 'open'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.93</span> </div>\n<ul> <li>\n<code>fd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Integer file descriptor used by the ReadStream.</li> </ul> <p>Emitted when the ReadStream's file is opened.</p> <h3 id=\"fs_readstream_bytesread\">readStream.bytesRead</h3> <div class=\"api_metadata\"> <span>Added in: 6.4.0</span> </div>\n<p>The number of bytes read so far.</p> <h3 id=\"fs_readstream_path\">readStream.path</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.93</span> </div>\n<p>The path to the file the stream is reading from as specified in the first argument to <code>fs.createReadStream()</code>. If <code>path</code> is passed as a string, then <code>readStream.path</code> will be a string. If <code>path</code> is passed as a <code>Buffer</code>, then <code>readStream.path</code> will be a <code>Buffer</code>.</p> <h2 id=\"fs_class_fs_stats\">Class: fs.Stats</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.21</span> </div>\n<p>Objects returned from <a href=\"#fs_fs_stat_path_callback\"><code>fs.stat()</code></a>, <a href=\"#fs_fs_lstat_path_callback\"><code>fs.lstat()</code></a> and <a href=\"#fs_fs_fstat_fd_callback\"><code>fs.fstat()</code></a> and their synchronous counterparts are of this type.</p> <ul> <li><code>stats.isFile()</code></li> <li><code>stats.isDirectory()</code></li> <li><code>stats.isBlockDevice()</code></li> <li><code>stats.isCharacterDevice()</code></li> <li>\n<code>stats.isSymbolicLink()</code> (only valid with <a href=\"#fs_fs_lstat_path_callback\"><code>fs.lstat()</code></a>)</li> <li><code>stats.isFIFO()</code></li> <li><code>stats.isSocket()</code></li> </ul> <p>For a regular file <a href=\"util#util_util_inspect_object_options\"><code>util.inspect(stats)</code></a> would return a string very similar to this:</p> <pre data-language=\"txt\">Stats {\n  dev: 2114,\n  ino: 48064969,\n  mode: 33188,\n  nlink: 1,\n  uid: 85,\n  gid: 100,\n  rdev: 0,\n  size: 527,\n  blksize: 4096,\n  blocks: 8,\n  atime: Mon, 10 Oct 2011 23:24:11 GMT,\n  mtime: Mon, 10 Oct 2011 23:24:11 GMT,\n  ctime: Mon, 10 Oct 2011 23:24:11 GMT,\n  birthtime: Mon, 10 Oct 2011 23:24:11 GMT }\n</pre> <p>Please note that <code>atime</code>, <code>mtime</code>, <code>birthtime</code>, and <code>ctime</code> are instances of <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object and to compare the values of these objects you should use appropriate methods. For most general uses <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date/getTime\"><code>getTime()</code></a> will return the number of milliseconds elapsed since <em>1 January 1970 00:00:00 UTC</em> and this integer should be sufficient for any comparison, however there are additional methods which can be used for displaying fuzzy information. More details can be found in the <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date\">MDN JavaScript Reference</a> page.</p> <h3 id=\"fs_stat_time_values\">Stat Time Values</h3> <p>The times in the stat object have the following semantics:</p> <ul> <li>\n<code>atime</code> \"Access Time\" - Time when file data last accessed. Changed by the <a href=\"http://man7.org/linux/man-pages/man2/mknod.2.html\">mknod(2)</a>, <a href=\"http://man7.org/linux/man-pages/man2/utimes.2.html\">utimes(2)</a>, and <a href=\"http://man7.org/linux/man-pages/man2/read.2.html\">read(2)</a> system calls.</li> <li>\n<code>mtime</code> \"Modified Time\" - Time when file data last modified. Changed by the <a href=\"http://man7.org/linux/man-pages/man2/mknod.2.html\">mknod(2)</a>, <a href=\"http://man7.org/linux/man-pages/man2/utimes.2.html\">utimes(2)</a>, and <a href=\"http://man7.org/linux/man-pages/man2/write.2.html\">write(2)</a> system calls.</li> <li>\n<code>ctime</code> \"Change Time\" - Time when file status was last changed (inode data modification). Changed by the <a href=\"http://man7.org/linux/man-pages/man2/chmod.2.html\">chmod(2)</a>, <a href=\"http://man7.org/linux/man-pages/man2/chown.2.html\">chown(2)</a>, link(2), <a href=\"http://man7.org/linux/man-pages/man2/mknod.2.html\">mknod(2)</a>, <a href=\"http://man7.org/linux/man-pages/man2/rename.2.html\">rename(2)</a>, <a href=\"http://man7.org/linux/man-pages/man2/unlink.2.html\">unlink(2)</a>, <a href=\"http://man7.org/linux/man-pages/man2/utimes.2.html\">utimes(2)</a>, read(2), and <a href=\"http://man7.org/linux/man-pages/man2/write.2.html\">write(2)</a> system calls.</li> <li>\n<code>birthtime</code> \"Birth Time\" - Time of file creation. Set once when the file is created. On filesystems where birthtime is not available, this field may instead hold either the <code>ctime</code> or <code>1970-01-01T00:00Z</code> (ie, unix epoch timestamp <code>0</code>). Note that this value may be greater than <code>atime</code> or <code>mtime</code> in this case. On Darwin and other FreeBSD variants, also set if the <code>atime</code> is explicitly set to an earlier value than the current <code>birthtime</code> using the utimes(2) system call.</li> </ul> <p>Prior to Node v0.12, the <code>ctime</code> held the <code>birthtime</code> on Windows systems. Note that as of v0.12, <code>ctime</code> is not \"creation time\", and on Unix systems, it never was.</p> <h2 id=\"fs_class_fs_writestream\">Class: fs.WriteStream</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.93</span> </div>\n<p><code>WriteStream</code> is a <a href=\"stream#stream_class_stream_writable\">Writable Stream</a>.</p> <h3 id=\"fs_event_close_1\">Event: 'close'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.93</span> </div>\n<p>Emitted when the <code>WriteStream</code>'s underlying file descriptor has been closed using the <code>fs.close()</code> method.</p> <h3 id=\"fs_event_open_1\">Event: 'open'</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.93</span> </div>\n<ul> <li>\n<code>fd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Integer file descriptor used by the WriteStream.</li> </ul> <p>Emitted when the WriteStream's file is opened.</p> <h3 id=\"fs_writestream_byteswritten\">writeStream.bytesWritten</h3> <div class=\"api_metadata\"> <span>Added in: v0.4.7</span> </div>\n<p>The number of bytes written so far. Does not include data that is still queued for writing.</p> <h3 id=\"fs_writestream_path\">writeStream.path</h3> <div class=\"api_metadata\"> <span>Added in: v0.1.93</span> </div>\n<p>The path to the file the stream is writing to as specified in the first argument to <code>fs.createWriteStream()</code>. If <code>path</code> is passed as a string, then <code>writeStream.path</code> will be a string. If <code>path</code> is passed as a <code>Buffer</code>, then <code>writeStream.path</code> will be a <code>Buffer</code>.</p> <h2 id=\"fs_fs_access_path_mode_callback\">fs.access(path[, mode], callback)</h2> <div class=\"api_metadata\"> <span>Added in: v0.11.15</span> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>mode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Tests a user's permissions for the file or directory specified by <code>path</code>. The <code>mode</code> argument is an optional integer that specifies the accessibility checks to be performed. The following constants define the possible values of <code>mode</code>. It is possible to create a mask consisting of the bitwise OR of two or more values.</p> <ul> <li>\n<code>fs.constants.F_OK</code> - <code>path</code> is visible to the calling process. This is useful for determining if a file exists, but says nothing about <code>rwx</code> permissions. Default if no <code>mode</code> is specified.</li> <li>\n<code>fs.constants.R_OK</code> - <code>path</code> can be read by the calling process.</li> <li>\n<code>fs.constants.W_OK</code> - <code>path</code> can be written by the calling process.</li> <li>\n<code>fs.constants.X_OK</code> - <code>path</code> can be executed by the calling process. This has no effect on Windows (will behave like <code>fs.constants.F_OK</code>).</li> </ul> <p>The final argument, <code>callback</code>, is a callback function that is invoked with a possible error argument. If any of the accessibility checks fail, the error argument will be populated. The following example checks if the file <code>/etc/passwd</code> can be read and written by the current process.</p> <pre data-language=\"js\">fs.access('/etc/passwd', fs.constants.R_OK | fs.constants.W_OK, (err) =&gt; {\n  console.log(err ? 'no access!' : 'can read/write');\n});\n</pre> <p>Using <code>fs.access()</code> to check for the accessibility of a file before calling <code>fs.open()</code>, <code>fs.readFile()</code> or <code>fs.writeFile()</code> is not recommended. Doing so introduces a race condition, since other processes may change the file's state between the two calls. Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible.</p> <p>For example:</p> <p><strong>write (NOT RECOMMENDED)</strong></p> <pre data-language=\"js\">fs.access('myfile', (err) =&gt; {\n  if (!err) {\n    console.error('myfile already exists');\n    return;\n  }\n\n  fs.open('myfile', 'wx', (err, fd) =&gt; {\n    if (err) throw err;\n    writeMyData(fd);\n  });\n});\n</pre> <p><strong>write (RECOMMENDED)</strong></p> <pre data-language=\"js\">fs.open('myfile', 'wx', (err, fd) =&gt; {\n  if (err) {\n    if (err.code === 'EEXIST') {\n      console.error('myfile already exists');\n      return;\n    }\n\n    throw err;\n  }\n\n  writeMyData(fd);\n});\n</pre> <p><strong>read (NOT RECOMMENDED)</strong></p> <pre data-language=\"js\">fs.access('myfile', (err) =&gt; {\n  if (err) {\n    if (err.code === 'ENOENT') {\n      console.error('myfile does not exist');\n      return;\n    }\n\n    throw err;\n  }\n\n  fs.open('myfile', 'r', (err, fd) =&gt; {\n    if (err) throw err;\n    readMyData(fd);\n  });\n});\n</pre> <p><strong>read (RECOMMENDED)</strong></p> <pre data-language=\"js\">fs.open('myfile', 'r', (err, fd) =&gt; {\n  if (err) {\n    if (err.code === 'ENOENT') {\n      console.error('myfile does not exist');\n      return;\n    }\n\n    throw err;\n  }\n\n  readMyData(fd);\n});\n</pre> <p>The \"not recommended\" examples above check for accessibility and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any.</p> <p>In general, check for the accessibility of a file only if the file won’t be used directly, for example when its accessibility is a signal from another process.</p> <h2 id=\"fs_fs_accesssync_path_mode\">fs.accessSync(path[, mode])</h2> <div class=\"api_metadata\"> <span>Added in: v0.11.15</span> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>mode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>Synchronous version of <a href=\"#fs_fs_access_path_mode_callback\"><code>fs.access()</code></a>. This throws if any accessibility checks fail, and does nothing otherwise.</p> <h2 id=\"fs_fs_appendfile_file_data_options_callback\">fs.appendFile(file, data[, options], callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The passed <code>options</code> object will never be modified.</p> </td>\n</tr> <tr>\n<td>v5.0.0</td> <td>\n<p>The <code>file</code> parameter can be a file descriptor now.</p> </td>\n</tr> <tr>\n<td>v0.6.7</td> <td>\n<p><span>Added in: v0.6.7</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>file</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> filename or file descriptor</li> <li>\n<code>data</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a><ul> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type\" class=\"type\">&lt;null&gt;</a> default = <code>'utf8'</code>\n</li> <li>\n<code>mode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> default = <code>0o666</code>\n</li> <li>\n<code>flag</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> default = <code>'a'</code>\n</li> </ul> </li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Asynchronously append data to a file, creating the file if it does not yet exist. <code>data</code> can be a string or a buffer.</p> <p>Example:</p> <pre data-language=\"js\">fs.appendFile('message.txt', 'data to append', (err) =&gt; {\n  if (err) throw err;\n  console.log('The \"data to append\" was appended to file!');\n});\n</pre> <p>If <code>options</code> is a string, then it specifies the encoding. Example:</p> <pre data-language=\"js\">fs.appendFile('message.txt', 'data to append', 'utf8', callback);\n</pre> <p>Any specified file descriptor has to have been opened for appending.</p> <p><em>Note: If a file descriptor is specified as the <code>file</code>, it will not be closed automatically.</em></p> <h2 id=\"fs_fs_appendfilesync_file_data_options\">fs.appendFileSync(file, data[, options])</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The passed <code>options</code> object will never be modified.</p> </td>\n</tr> <tr>\n<td>v5.0.0</td> <td>\n<p>The <code>file</code> parameter can be a file descriptor now.</p> </td>\n</tr> <tr>\n<td>v0.6.7</td> <td>\n<p><span>Added in: v0.6.7</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>file</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> filename or file descriptor</li> <li>\n<code>data</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a><ul> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type\" class=\"type\">&lt;null&gt;</a> default = <code>'utf8'</code>\n</li> <li>\n<code>mode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> default = <code>0o666</code>\n</li> <li>\n<code>flag</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> default = <code>'a'</code>\n</li> </ul> </li> </ul> <p>The synchronous version of <a href=\"fs#fs_fs_appendfile_file_data_options_callback\"><code>fs.appendFile()</code></a>. Returns <code>undefined</code>.</p> <h2 id=\"fs_fs_chmod_path_mode_callback\">fs.chmod(path, mode, callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v0.1.30</td> <td>\n<p><span>Added in: v0.1.30</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>mode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/chmod.2.html\">chmod(2)</a>. No arguments other than a possible exception are given to the completion callback.</p> <h2 id=\"fs_fs_chmodsync_path_mode\">fs.chmodSync(path, mode)</h2> <div class=\"api_metadata\"> <span>Added in: v0.6.7</span> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>mode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/chmod.2.html\">chmod(2)</a>. Returns <code>undefined</code>.</p> <h2 id=\"fs_fs_chown_path_uid_gid_callback\">fs.chown(path, uid, gid, callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v0.1.97</td> <td>\n<p><span>Added in: v0.1.97</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>uid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>gid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/chown.2.html\">chown(2)</a>. No arguments other than a possible exception are given to the completion callback.</p> <h2 id=\"fs_fs_chownsync_path_uid_gid\">fs.chownSync(path, uid, gid)</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.97</span> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>uid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>gid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/chown.2.html\">chown(2)</a>. Returns <code>undefined</code>.</p> <h2 id=\"fs_fs_close_fd_callback\">fs.close(fd, callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v0.0.2</td> <td>\n<p><span>Added in: v0.0.2</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>fd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/close.2.html\">close(2)</a>. No arguments other than a possible exception are given to the completion callback.</p> <h2 id=\"fs_fs_closesync_fd\">fs.closeSync(fd)</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.21</span> </div>\n<ul> <li>\n<code>fd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/close.2.html\">close(2)</a>. Returns <code>undefined</code>.</p> <h2 id=\"fs_fs_constants\">fs.constants</h2> <p>Returns an object containing commonly used constants for file system operations. The specific constants currently defined are described in <a href=\"#fs_fs_constants_1\">FS Constants</a>.</p> <h2 id=\"fs_fs_createreadstream_path_options\">fs.createReadStream(path[, options])</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The passed <code>options</code> object will never be modified.</p> </td>\n</tr> <tr>\n<td>v2.3.0</td> <td>\n<p>The passed <code>options</code> object can be a string now.</p> </td>\n</tr> <tr>\n<td>v0.1.31</td> <td>\n<p><span>Added in: v0.1.31</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>flags</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>fd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>mode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>autoClose</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a>\n</li> <li>\n<code>start</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>end</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> </li> </ul> <p>Returns a new <a href=\"#fs_class_fs_readstream\"><code>ReadStream</code></a> object. (See <a href=\"stream#stream_class_stream_readable\">Readable Stream</a>).</p> <p>Be aware that, unlike the default value set for <code>highWaterMark</code> on a readable stream (16 kb), the stream returned by this method has a default value of 64 kb for the same parameter.</p> <p><code>options</code> is an object or string with the following defaults:</p> <pre data-language=\"js\">const defaults = {\n  flags: 'r',\n  encoding: null,\n  fd: null,\n  mode: 0o666,\n  autoClose: true\n};\n</pre> <p><code>options</code> can include <code>start</code> and <code>end</code> values to read a range of bytes from the file instead of the entire file. Both <code>start</code> and <code>end</code> are inclusive and start counting at 0. If <code>fd</code> is specified and <code>start</code> is omitted or <code>undefined</code>, <code>fs.createReadStream()</code> reads sequentially from the current file position. The <code>encoding</code> can be any one of those accepted by <a href=\"buffer#buffer_buffer\"><code>Buffer</code></a>.</p> <p>If <code>fd</code> is specified, <code>ReadStream</code> will ignore the <code>path</code> argument and will use the specified file descriptor. This means that no <code>'open'</code> event will be emitted. Note that <code>fd</code> should be blocking; non-blocking <code>fd</code>s should be passed to <a href=\"net#net_class_net_socket\"><code>net.Socket</code></a>.</p> <p>If <code>autoClose</code> is false, then the file descriptor won't be closed, even if there's an error. It is your responsibility to close it and make sure there's no file descriptor leak. If <code>autoClose</code> is set to true (default behavior), on <code>error</code> or <code>end</code> the file descriptor will be closed automatically.</p> <p><code>mode</code> sets the file mode (permission and sticky bits), but only if the file was created.</p> <p>An example to read the last 10 bytes of a file which is 100 bytes long:</p> <pre data-language=\"js\">fs.createReadStream('sample.txt', {start: 90, end: 99});\n</pre> <p>If <code>options</code> is a string, then it specifies the encoding.</p> <h2 id=\"fs_fs_createwritestream_path_options\">fs.createWriteStream(path[, options])</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The passed <code>options</code> object will never be modified.</p> </td>\n</tr> <tr>\n<td>v5.5.0</td> <td>\n<p>The <code>autoClose</code> option is supported now.</p> </td>\n</tr> <tr>\n<td>v2.3.0</td> <td>\n<p>The passed <code>options</code> object can be a string now.</p> </td>\n</tr> <tr>\n<td>v0.1.31</td> <td>\n<p><span>Added in: v0.1.31</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>flags</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>defaultEncoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>fd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>mode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>autoClose</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a>\n</li> <li>\n<code>start</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> </li> </ul> <p>Returns a new <a href=\"#fs_class_fs_writestream\"><code>WriteStream</code></a> object. (See <a href=\"stream#stream_class_stream_writable\">Writable Stream</a>).</p> <p><code>options</code> is an object or string with the following defaults:</p> <pre data-language=\"js\">const defaults = {\n  flags: 'w',\n  defaultEncoding: 'utf8',\n  fd: null,\n  mode: 0o666,\n  autoClose: true\n};\n</pre> <p><code>options</code> may also include a <code>start</code> option to allow writing data at some position past the beginning of the file. Modifying a file rather than replacing it may require a <code>flags</code> mode of <code>r+</code> rather than the default mode <code>w</code>. The <code>defaultEncoding</code> can be any one of those accepted by <a href=\"buffer#buffer_buffer\"><code>Buffer</code></a>.</p> <p>If <code>autoClose</code> is set to true (default behavior) on <code>error</code> or <code>end</code> the file descriptor will be closed automatically. If <code>autoClose</code> is false, then the file descriptor won't be closed, even if there's an error. It is your responsibility to close it and make sure there's no file descriptor leak.</p> <p>Like <a href=\"#fs_class_fs_readstream\"><code>ReadStream</code></a>, if <code>fd</code> is specified, <code>WriteStream</code> will ignore the <code>path</code> argument and will use the specified file descriptor. This means that no <code>'open'</code> event will be emitted. Note that <code>fd</code> should be blocking; non-blocking <code>fd</code>s should be passed to <a href=\"net#net_class_net_socket\"><code>net.Socket</code></a>.</p> <p>If <code>options</code> is a string, then it specifies the encoding.</p> <h2 id=\"fs_fs_exists_path_callback\">fs.exists(path, callback)</h2> <div class=\"api_metadata\"> <span>Added in: v0.0.2</span><span>Deprecated since: v1.0.0</span> </div>\n<div class=\"api_stability api_stability_0\">\n<a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated: Use <a href=\"#fs_fs_stat_path_callback\"><code>fs.stat()</code></a> or <a href=\"#fs_fs_access_path_mode_callback\"><code>fs.access()</code></a> instead.</div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Test whether or not the given path exists by checking with the file system. Then call the <code>callback</code> argument with either true or false. Example:</p> <pre data-language=\"js\">fs.exists('/etc/passwd', (exists) =&gt; {\n  console.log(exists ? 'it\\'s there' : 'no passwd!');\n});\n</pre> <p><strong>Note that the parameter to this callback is not consistent with other Node.js callbacks.</strong> Normally, the first parameter to a Node.js callback is an <code>err</code> parameter, optionally followed by other parameters. The <code>fs.exists()</code> callback has only one boolean parameter. This is one reason <code>fs.access()</code> is recommended instead of <code>fs.exists()</code>.</p> <p>Using <code>fs.exists()</code> to check for the existence of a file before calling <code>fs.open()</code>, <code>fs.readFile()</code> or <code>fs.writeFile()</code> is not recommended. Doing so introduces a race condition, since other processes may change the file's state between the two calls. Instead, user code should open/read/write the file directly and handle the error raised if the file does not exist.</p> <p>For example:</p> <p><strong>write (NOT RECOMMENDED)</strong></p> <pre data-language=\"js\">fs.exists('myfile', (exists) =&gt; {\n  if (exists) {\n    console.error('myfile already exists');\n  } else {\n    fs.open('myfile', 'wx', (err, fd) =&gt; {\n      if (err) throw err;\n      writeMyData(fd);\n    });\n  }\n});\n</pre> <p><strong>write (RECOMMENDED)</strong></p> <pre data-language=\"js\">fs.open('myfile', 'wx', (err, fd) =&gt; {\n  if (err) {\n    if (err.code === 'EEXIST') {\n      console.error('myfile already exists');\n      return;\n    }\n\n    throw err;\n  }\n\n  writeMyData(fd);\n});\n</pre> <p><strong>read (NOT RECOMMENDED)</strong></p> <pre data-language=\"js\">fs.exists('myfile', (exists) =&gt; {\n  if (exists) {\n    fs.open('myfile', 'r', (err, fd) =&gt; {\n      readMyData(fd);\n    });\n  } else {\n    console.error('myfile does not exist');\n  }\n});\n</pre> <p><strong>read (RECOMMENDED)</strong></p> <pre data-language=\"js\">fs.open('myfile', 'r', (err, fd) =&gt; {\n  if (err) {\n    if (err.code === 'ENOENT') {\n      console.error('myfile does not exist');\n      return;\n    }\n\n    throw err;\n  }\n\n  readMyData(fd);\n});\n</pre> <p>The \"not recommended\" examples above check for existence and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any.</p> <p>In general, check for the existence of a file only if the file won’t be used directly, for example when its existence is a signal from another process.</p> <h2 id=\"fs_fs_existssync_path\">fs.existsSync(path)</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.21</span> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> </ul> <p>Synchronous version of <a href=\"fs#fs_fs_exists_path_callback\"><code>fs.exists()</code></a>. Returns <code>true</code> if the file exists, <code>false</code> otherwise.</p> <p>Note that <code>fs.exists()</code> is deprecated, but <code>fs.existsSync()</code> is not. (The <code>callback</code> parameter to <code>fs.exists()</code> accepts parameters that are inconsistent with other Node.js callbacks. <code>fs.existsSync()</code> does not use a callback.)</p> <h2 id=\"fs_fs_fchmod_fd_mode_callback\">fs.fchmod(fd, mode, callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v0.4.7</td> <td>\n<p><span>Added in: v0.4.7</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>fd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>mode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/fchmod.2.html\">fchmod(2)</a>. No arguments other than a possible exception are given to the completion callback.</p> <h2 id=\"fs_fs_fchmodsync_fd_mode\">fs.fchmodSync(fd, mode)</h2> <div class=\"api_metadata\"> <span>Added in: v0.4.7</span> </div>\n<ul> <li>\n<code>fd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>mode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/fchmod.2.html\">fchmod(2)</a>. Returns <code>undefined</code>.</p> <h2 id=\"fs_fs_fchown_fd_uid_gid_callback\">fs.fchown(fd, uid, gid, callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v0.4.7</td> <td>\n<p><span>Added in: v0.4.7</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>fd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>uid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>gid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/fchown.2.html\">fchown(2)</a>. No arguments other than a possible exception are given to the completion callback.</p> <h2 id=\"fs_fs_fchownsync_fd_uid_gid\">fs.fchownSync(fd, uid, gid)</h2> <div class=\"api_metadata\"> <span>Added in: v0.4.7</span> </div>\n<ul> <li>\n<code>fd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>uid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>gid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/fchown.2.html\">fchown(2)</a>. Returns <code>undefined</code>.</p> <h2 id=\"fs_fs_fdatasync_fd_callback\">fs.fdatasync(fd, callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v0.1.96</td> <td>\n<p><span>Added in: v0.1.96</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>fd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/fdatasync.2.html\">fdatasync(2)</a>. No arguments other than a possible exception are given to the completion callback.</p> <h2 id=\"fs_fs_fdatasyncsync_fd\">fs.fdatasyncSync(fd)</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.96</span> </div>\n<ul> <li>\n<code>fd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/fdatasync.2.html\">fdatasync(2)</a>. Returns <code>undefined</code>.</p> <h2 id=\"fs_fs_fstat_fd_callback\">fs.fstat(fd, callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v0.1.95</td> <td>\n<p><span>Added in: v0.1.95</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>fd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/fstat.2.html\">fstat(2)</a>. The callback gets two arguments <code>(err, stats)</code> where <code>stats</code> is an <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> object. <code>fstat()</code> is identical to <a href=\"fs#fs_fs_stat_path_callback\"><code>stat()</code></a>, except that the file to be stat-ed is specified by the file descriptor <code>fd</code>.</p> <h2 id=\"fs_fs_fstatsync_fd\">fs.fstatSync(fd)</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.95</span> </div>\n<ul> <li>\n<code>fd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/fstat.2.html\">fstat(2)</a>. Returns an instance of <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a>.</p> <h2 id=\"fs_fs_fsync_fd_callback\">fs.fsync(fd, callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v0.1.96</td> <td>\n<p><span>Added in: v0.1.96</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>fd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/fsync.2.html\">fsync(2)</a>. No arguments other than a possible exception are given to the completion callback.</p> <h2 id=\"fs_fs_fsyncsync_fd\">fs.fsyncSync(fd)</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.96</span> </div>\n<ul> <li>\n<code>fd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/fsync.2.html\">fsync(2)</a>. Returns <code>undefined</code>.</p> <h2 id=\"fs_fs_ftruncate_fd_len_callback\">fs.ftruncate(fd, len, callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v0.8.6</td> <td>\n<p><span>Added in: v0.8.6</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>fd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>len</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> default = <code>0</code>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/ftruncate.2.html\">ftruncate(2)</a>. No arguments other than a possible exception are given to the completion callback.</p> <p>If the file referred to by the file descriptor was larger than <code>len</code> bytes, only the first <code>len</code> bytes will be retained in the file.</p> <p>For example, the following program retains only the first four bytes of the file</p> <pre data-language=\"js\">console.log(fs.readFileSync('temp.txt', 'utf8'));\n// Prints: Node.js\n\n// get the file descriptor of the file to be truncated\nconst fd = fs.openSync('temp.txt', 'r+');\n\n// truncate the file to first four bytes\nfs.ftruncate(fd, 4, (err) =&gt; {\n  assert.ifError(err);\n  console.log(fs.readFileSync('temp.txt', 'utf8'));\n});\n// Prints: Node\n</pre> <p>If the file previously was shorter than <code>len</code> bytes, it is extended, and the extended part is filled with null bytes ('\\0'). For example,</p> <pre data-language=\"js\">console.log(fs.readFileSync('temp.txt', 'utf-8'));\n// Prints: Node.js\n\n// get the file descriptor of the file to be truncated\nconst fd = fs.openSync('temp.txt', 'r+');\n\n// truncate the file to 10 bytes, whereas the actual size is 7 bytes\nfs.ftruncate(fd, 10, (err) =&gt; {\n  assert.ifError(err);\n  console.log(fs.readFileSync('temp.txt'));\n});\n// Prints: &lt;Buffer 4e 6f 64 65 2e 6a 73 00 00 00&gt;\n// ('Node.js\\0\\0\\0' in UTF8)\n</pre> <p>The last three bytes are null bytes ('\\0'), to compensate the over-truncation.</p> <h2 id=\"fs_fs_ftruncatesync_fd_len\">fs.ftruncateSync(fd, len)</h2> <div class=\"api_metadata\"> <span>Added in: v0.8.6</span> </div>\n<ul> <li>\n<code>fd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>len</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> default = <code>0</code>\n</li> </ul> <p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/ftruncate.2.html\">ftruncate(2)</a>. Returns <code>undefined</code>.</p> <h2 id=\"fs_fs_futimes_fd_atime_mtime_callback\">fs.futimes(fd, atime, mtime, callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v4.1.0</td> <td>\n<p>Numeric strings, <code>NaN</code> and <code>Infinity</code> are now allowed time specifiers.</p> </td>\n</tr> <tr>\n<td>v0.4.2</td> <td>\n<p><span>Added in: v0.4.2</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>fd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>atime</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>mtime</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Change the file timestamps of a file referenced by the supplied file descriptor.</p> <h2 id=\"fs_fs_futimessync_fd_atime_mtime\">fs.futimesSync(fd, atime, mtime)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v4.1.0</td> <td>\n<p>Numeric strings, <code>NaN</code> and <code>Infinity</code> are now allowed time specifiers.</p> </td>\n</tr> <tr>\n<td>v0.4.2</td> <td>\n<p><span>Added in: v0.4.2</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>fd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>atime</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>mtime</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>Synchronous version of <a href=\"#fs_fs_futimes_fd_atime_mtime_callback\"><code>fs.futimes()</code></a>. Returns <code>undefined</code>.</p> <h2 id=\"fs_fs_lchmod_path_mode_callback\">fs.lchmod(path, mode, callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v0.4.7</td> <td>\n<p><span>Deprecated since: v0.4.7</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>mode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Asynchronous <a href=\"https://www.freebsd.org/cgi/man.cgi?query=lchmod&amp;sektion=2\">lchmod(2)</a>. No arguments other than a possible exception are given to the completion callback.</p> <p>Only available on Mac OS X.</p> <h2 id=\"fs_fs_lchmodsync_path_mode\">fs.lchmodSync(path, mode)</h2> <div class=\"api_metadata\"> <span>Deprecated since: v0.4.7</span> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>mode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>Synchronous <a href=\"https://www.freebsd.org/cgi/man.cgi?query=lchmod&amp;sektion=2\">lchmod(2)</a>. Returns <code>undefined</code>.</p> <h2 id=\"fs_fs_lchown_path_uid_gid_callback\">fs.lchown(path, uid, gid, callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v0.4.7</td> <td>\n<p><span>Deprecated since: v0.4.7</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>uid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>gid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/lchown.2.html\">lchown(2)</a>. No arguments other than a possible exception are given to the completion callback.</p> <h2 id=\"fs_fs_lchownsync_path_uid_gid\">fs.lchownSync(path, uid, gid)</h2> <div class=\"api_metadata\"> <span>Deprecated since: v0.4.7</span> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>uid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>gid</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/lchown.2.html\">lchown(2)</a>. Returns <code>undefined</code>.</p> <h2 id=\"fs_fs_link_existingpath_newpath_callback\">fs.link(existingPath, newPath, callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v0.1.31</td> <td>\n<p><span>Added in: v0.1.31</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>existingPath</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>newPath</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/link.2.html\">link(2)</a>. No arguments other than a possible exception are given to the completion callback.</p> <h2 id=\"fs_fs_linksync_existingpath_newpath\">fs.linkSync(existingPath, newPath)</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.31</span> </div>\n<ul> <li>\n<code>existingPath</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>newPath</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> </ul> <p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/link.2.html\">link(2)</a>. Returns <code>undefined</code>.</p> <h2 id=\"fs_fs_lstat_path_callback\">fs.lstat(path, callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v0.1.30</td> <td>\n<p><span>Added in: v0.1.30</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/lstat.2.html\">lstat(2)</a>. The callback gets two arguments <code>(err, stats)</code> where <code>stats</code> is a <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> object. <code>lstat()</code> is identical to <code>stat()</code>, except that if <code>path</code> is a symbolic link, then the link itself is stat-ed, not the file that it refers to.</p> <h2 id=\"fs_fs_lstatsync_path\">fs.lstatSync(path)</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.30</span> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> </ul> <p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/lstat.2.html\">lstat(2)</a>. Returns an instance of <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a>.</p> <h2 id=\"fs_fs_mkdir_path_mode_callback\">fs.mkdir(path[, mode], callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v0.1.8</td> <td>\n<p><span>Added in: v0.1.8</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>mode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/mkdir.2.html\">mkdir(2)</a>. No arguments other than a possible exception are given to the completion callback. <code>mode</code> defaults to <code>0o777</code>.</p> <h2 id=\"fs_fs_mkdirsync_path_mode\">fs.mkdirSync(path[, mode])</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.21</span> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>mode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/mkdir.2.html\">mkdir(2)</a>. Returns <code>undefined</code>.</p> <h2 id=\"fs_fs_mkdtemp_prefix_options_callback\">fs.mkdtemp(prefix[, options], callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v6.2.1</td> <td>\n<p>The <code>callback</code> parameter is optional now.</p> </td>\n</tr> <tr>\n<td>v5.10.0</td> <td>\n<p><span>Added in: v5.10.0</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>prefix</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> default = <code>'utf8'</code>\n</li> </ul> </li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Creates a unique temporary directory.</p> <p>Generates six random characters to be appended behind a required <code>prefix</code> to create a unique temporary directory.</p> <p>The created folder path is passed as a string to the callback's second parameter.</p> <p>The optional <code>options</code> argument can be a string specifying an encoding, or an object with an <code>encoding</code> property specifying the character encoding to use.</p> <p>Example:</p> <pre data-language=\"js\">fs.mkdtemp('/tmp/foo-', (err, folder) =&gt; {\n  if (err) throw err;\n  console.log(folder);\n  // Prints: /tmp/foo-itXde2\n});\n</pre> <p><em>Note</em>: The <code>fs.mkdtemp()</code> method will append the six randomly selected characters directly to the <code>prefix</code> string. For instance, given a directory <code>/tmp</code>, if the intention is to create a temporary directory <em>within</em> <code>/tmp</code>, the <code>prefix</code> <em>must</em> end with a trailing platform-specific path separator (<code>require('path').sep</code>).</p> <pre data-language=\"js\">// The parent directory for the new temporary directory\nconst tmpDir = '/tmp';\n\n// This method is *INCORRECT*:\nfs.mkdtemp(tmpDir, (err, folder) =&gt; {\n  if (err) throw err;\n  console.log(folder);\n  // Will print something similar to `/tmpabc123`.\n  // Note that a new temporary directory is created\n  // at the file system root rather than *within*\n  // the /tmp directory.\n});\n\n// This method is *CORRECT*:\nconst { sep } = require('path');\nfs.mkdtemp(`${tmpDir}${sep}`, (err, folder) =&gt; {\n  if (err) throw err;\n  console.log(folder);\n  // Will print something similar to `/tmp/abc123`.\n  // A new temporary directory is created within\n  // the /tmp directory.\n});\n</pre> <h2 id=\"fs_fs_mkdtempsync_prefix_options\">fs.mkdtempSync(prefix[, options])</h2> <div class=\"api_metadata\"> <span>Added in: v5.10.0</span> </div>\n<ul> <li>\n<code>prefix</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> default = <code>'utf8'</code>\n</li> </ul> </li> </ul> <p>The synchronous version of <a href=\"#fs_fs_mkdtemp_prefix_options_callback\"><code>fs.mkdtemp()</code></a>. Returns the created folder path.</p> <p>The optional <code>options</code> argument can be a string specifying an encoding, or an object with an <code>encoding</code> property specifying the character encoding to use.</p> <h2 id=\"fs_fs_open_path_flags_mode_callback\">fs.open(path, flags[, mode], callback)</h2> <div class=\"api_metadata\"> <span>Added in: v0.0.2</span> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>flags</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> <li>\n<code>mode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Asynchronous file open. See <a href=\"http://man7.org/linux/man-pages/man2/open.2.html\">open(2)</a>. <code>flags</code> can be:</p> <ul> <li>\n<p><code>'r'</code> - Open file for reading. An exception occurs if the file does not exist.</p> </li> <li>\n<p><code>'r+'</code> - Open file for reading and writing. An exception occurs if the file does not exist.</p> </li> <li>\n<p><code>'rs+'</code> - Open file for reading and writing in synchronous mode. Instructs the operating system to bypass the local file system cache.</p> <p>This is primarily useful for opening files on NFS mounts as it allows you to skip the potentially stale local cache. It has a very real impact on I/O performance so don't use this flag unless you need it.</p> <p>Note that this doesn't turn <code>fs.open()</code> into a synchronous blocking call. If that's what you want then you should be using <code>fs.openSync()</code></p> </li> <li>\n<p><code>'w'</code> - Open file for writing. The file is created (if it does not exist) or truncated (if it exists).</p> </li> <li>\n<p><code>'wx'</code> - Like <code>'w'</code> but fails if <code>path</code> exists.</p> </li> <li>\n<p><code>'w+'</code> - Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).</p> </li> <li>\n<p><code>'wx+'</code> - Like <code>'w+'</code> but fails if <code>path</code> exists.</p> </li> <li>\n<p><code>'a'</code> - Open file for appending. The file is created if it does not exist.</p> </li> <li>\n<p><code>'ax'</code> - Like <code>'a'</code> but fails if <code>path</code> exists.</p> </li> <li>\n<p><code>'a+'</code> - Open file for reading and appending. The file is created if it does not exist.</p> </li> <li>\n<p><code>'ax+'</code> - Like <code>'a+'</code> but fails if <code>path</code> exists.</p> </li> </ul> <p><code>mode</code> sets the file mode (permission and sticky bits), but only if the file was created. It defaults to <code>0666</code>, readable and writable.</p> <p>The callback gets two arguments <code>(err, fd)</code>.</p> <p>The exclusive flag <code>'x'</code> (<code>O_EXCL</code> flag in <a href=\"http://man7.org/linux/man-pages/man2/open.2.html\">open(2)</a>) ensures that <code>path</code> is newly created. On POSIX systems, <code>path</code> is considered to exist even if it is a symlink to a non-existent file. The exclusive flag may or may not work with network file systems.</p> <p><code>flags</code> can also be a number as documented by <a href=\"http://man7.org/linux/man-pages/man2/open.2.html\">open(2)</a>; commonly used constants are available from <code>fs.constants</code>. On Windows, flags are translated to their equivalent ones where applicable, e.g. <code>O_WRONLY</code> to <code>FILE_GENERIC_WRITE</code>, or <code>O_EXCL|O_CREAT</code> to <code>CREATE_NEW</code>, as accepted by CreateFileW.</p> <p>On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.</p> <p><em>Note: The behavior of <code>fs.open()</code> is platform specific for some flags. As such, opening a directory on OS X and Linux with the <code>'a+'</code> flag - see example below - will return an error. In contrast, on Windows and FreeBSD, a file descriptor will be returned.</em></p> <pre data-language=\"js\">// OS X and Linux\nfs.open('&lt;directory&gt;', 'a+', (err, fd) =&gt; {\n  // =&gt; [Error: EISDIR: illegal operation on a directory, open &lt;directory&gt;]\n});\n\n// Windows and FreeBSD\nfs.open('&lt;directory&gt;', 'a+', (err, fd) =&gt; {\n  // =&gt; null, &lt;fd&gt;\n});\n</pre> <h2 id=\"fs_fs_opensync_path_flags_mode\">fs.openSync(path, flags[, mode])</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.21</span> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>flags</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a>\n</li> <li>\n<code>mode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>Synchronous version of <a href=\"#fs_fs_open_path_flags_mode_callback\"><code>fs.open()</code></a>. Returns an integer representing the file descriptor.</p> <h2 id=\"fs_fs_read_fd_buffer_offset_length_position_callback\">fs.read(fd, buffer, offset, length, position, callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.4.0</td> <td>\n<p>The <code>buffer</code> parameter can now be a <code>Uint8Array</code>.</p> </td>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>The <code>length</code> parameter can now be <code>0</code>.</p> </td>\n</tr> <tr>\n<td>v0.0.2</td> <td>\n<p><span>Added in: v0.0.2</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>fd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>buffer</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\" class=\"type\">&lt;Uint8Array&gt;</a>\n</li> <li>\n<code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>length</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>position</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Read data from the file specified by <code>fd</code>.</p> <p><code>buffer</code> is the buffer that the data will be written to.</p> <p><code>offset</code> is the offset in the buffer to start writing at.</p> <p><code>length</code> is an integer specifying the number of bytes to read.</p> <p><code>position</code> is an integer specifying where to begin reading from in the file. If <code>position</code> is <code>null</code>, data will be read from the current file position.</p> <p>The callback is given the three arguments, <code>(err, bytesRead, buffer)</code>.</p> <h2 id=\"fs_fs_readdir_path_options_callback\">fs.readdir(path[, options], callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>The <code>options</code> parameter was added.</p> </td>\n</tr> <tr>\n<td>v0.1.8</td> <td>\n<p><span>Added in: v0.1.8</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> default = <code>'utf8'</code>\n</li> </ul> </li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man3/readdir.3.html\">readdir(3)</a>. Reads the contents of a directory. The callback gets two arguments <code>(err, files)</code> where <code>files</code> is an array of the names of the files in the directory excluding <code>'.'</code> and <code>'..'</code>.</p> <p>The optional <code>options</code> argument can be a string specifying an encoding, or an object with an <code>encoding</code> property specifying the character encoding to use for the filenames passed to the callback. If the <code>encoding</code> is set to <code>'buffer'</code>, the filenames returned will be passed as <code>Buffer</code> objects.</p> <h2 id=\"fs_fs_readdirsync_path_options\">fs.readdirSync(path[, options])</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.21</span> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> default = <code>'utf8'</code>\n</li> </ul> </li> </ul> <p>Synchronous <a href=\"http://man7.org/linux/man-pages/man3/readdir.3.html\">readdir(3)</a>. Returns an array of filenames excluding <code>'.'</code> and <code>'..'</code>.</p> <p>The optional <code>options</code> argument can be a string specifying an encoding, or an object with an <code>encoding</code> property specifying the character encoding to use for the filenames passed to the callback. If the <code>encoding</code> is set to <code>'buffer'</code>, the filenames returned will be passed as <code>Buffer</code> objects.</p> <h2 id=\"fs_fs_readfile_file_options_callback\">fs.readFile(file[, options], callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v5.1.0</td> <td>\n<p>The <code>callback</code> will always be called with <code>null</code> as the <code>error</code> parameter in case of success.</p> </td>\n</tr> <tr>\n<td>v5.0.0</td> <td>\n<p>The <code>file</code> parameter can be a file descriptor now.</p> </td>\n</tr> <tr>\n<td>v0.1.29</td> <td>\n<p><span>Added in: v0.1.29</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>file</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> filename or file descriptor</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a><ul> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type\" class=\"type\">&lt;null&gt;</a> default = <code>null</code>\n</li> <li>\n<code>flag</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> default = <code>'r'</code>\n</li> </ul> </li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Asynchronously reads the entire contents of a file. Example:</p> <pre data-language=\"js\">fs.readFile('/etc/passwd', (err, data) =&gt; {\n  if (err) throw err;\n  console.log(data);\n});\n</pre> <p>The callback is passed two arguments <code>(err, data)</code>, where <code>data</code> is the contents of the file.</p> <p>If no encoding is specified, then the raw buffer is returned.</p> <p>If <code>options</code> is a string, then it specifies the encoding. Example:</p> <pre data-language=\"js\">fs.readFile('/etc/passwd', 'utf8', callback);\n</pre> <p>Any specified file descriptor has to support reading.</p> <p><em>Note: If a file descriptor is specified as the <code>file</code>, it will not be closed automatically.</em></p> <h2 id=\"fs_fs_readfilesync_file_options\">fs.readFileSync(file[, options])</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v5.0.0</td> <td>\n<p>The <code>file</code> parameter can be a file descriptor now.</p> </td>\n</tr> <tr>\n<td>v0.1.8</td> <td>\n<p><span>Added in: v0.1.8</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>file</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> filename or file descriptor</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a><ul> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type\" class=\"type\">&lt;null&gt;</a> default = <code>null</code>\n</li> <li>\n<code>flag</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> default = <code>'r'</code>\n</li> </ul> </li> </ul> <p>Synchronous version of <a href=\"#fs_fs_readfile_file_options_callback\"><code>fs.readFile</code></a>. Returns the contents of the <code>file</code>.</p> <p>If the <code>encoding</code> option is specified then this function returns a string. Otherwise it returns a buffer.</p> <h2 id=\"fs_fs_readlink_path_options_callback\">fs.readlink(path[, options], callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v0.1.31</td> <td>\n<p><span>Added in: v0.1.31</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> default = <code>'utf8'</code>\n</li> </ul> </li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/readlink.2.html\">readlink(2)</a>. The callback gets two arguments <code>(err,\nlinkString)</code>.</p> <p>The optional <code>options</code> argument can be a string specifying an encoding, or an object with an <code>encoding</code> property specifying the character encoding to use for the link path passed to the callback. If the <code>encoding</code> is set to <code>'buffer'</code>, the link path returned will be passed as a <code>Buffer</code> object.</p> <h2 id=\"fs_fs_readlinksync_path_options\">fs.readlinkSync(path[, options])</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.31</span> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> default = <code>'utf8'</code>\n</li> </ul> </li> </ul> <p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/readlink.2.html\">readlink(2)</a>. Returns the symbolic link's string value.</p> <p>The optional <code>options</code> argument can be a string specifying an encoding, or an object with an <code>encoding</code> property specifying the character encoding to use for the link path passed to the callback. If the <code>encoding</code> is set to <code>'buffer'</code>, the link path returned will be passed as a <code>Buffer</code> object.</p> <h2 id=\"fs_fs_readsync_fd_buffer_offset_length_position\">fs.readSync(fd, buffer, offset, length, position)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>The <code>length</code> parameter can now be <code>0</code>.</p> </td>\n</tr> <tr>\n<td>v0.1.21</td> <td>\n<p><span>Added in: v0.1.21</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>fd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>buffer</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\" class=\"type\">&lt;Uint8Array&gt;</a>\n</li> <li>\n<code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>length</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>position</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>Synchronous version of <a href=\"#fs_fs_read_fd_buffer_offset_length_position_callback\"><code>fs.read()</code></a>. Returns the number of <code>bytesRead</code>.</p> <h2 id=\"fs_fs_realpath_path_options_callback\">fs.realpath(path[, options], callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v6.4.0</td> <td>\n<p>Calling <code>realpath</code> now works again for various edge cases on Windows.</p> </td>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>The <code>cache</code> parameter was removed.</p> </td>\n</tr> <tr>\n<td>v0.1.31</td> <td>\n<p><span>Added in: v0.1.31</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> default = <code>'utf8'</code>\n</li> </ul> </li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man3/realpath.3.html\">realpath(3)</a>. The <code>callback</code> gets two arguments <code>(err,\nresolvedPath)</code>. May use <code>process.cwd</code> to resolve relative paths.</p> <p>Only paths that can be converted to UTF8 strings are supported.</p> <p>The optional <code>options</code> argument can be a string specifying an encoding, or an object with an <code>encoding</code> property specifying the character encoding to use for the path passed to the callback. If the <code>encoding</code> is set to <code>'buffer'</code>, the path returned will be passed as a <code>Buffer</code> object.</p> <h2 id=\"fs_fs_realpathsync_path_options\">fs.realpathSync(path[, options])</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v6.4.0</td> <td>\n<p>Calling <code>realpathSync</code> now works again for various edge cases on Windows.</p> </td>\n</tr> <tr>\n<td>v6.0.0</td> <td>\n<p>The <code>cache</code> parameter was removed.</p> </td>\n</tr> <tr>\n<td>v0.1.31</td> <td>\n<p><span>Added in: v0.1.31</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>;</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> default = <code>'utf8'</code>\n</li> </ul> </li> </ul> <p>Synchronous <a href=\"http://man7.org/linux/man-pages/man3/realpath.3.html\">realpath(3)</a>. Returns the resolved path.</p> <p>Only paths that can be converted to UTF8 strings are supported.</p> <p>The optional <code>options</code> argument can be a string specifying an encoding, or an object with an <code>encoding</code> property specifying the character encoding to use for the returned value. If the <code>encoding</code> is set to <code>'buffer'</code>, the path returned will be passed as a <code>Buffer</code> object.</p> <h2 id=\"fs_fs_rename_oldpath_newpath_callback\">fs.rename(oldPath, newPath, callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v0.0.2</td> <td>\n<p><span>Added in: v0.0.2</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>oldPath</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>newPath</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/rename.2.html\">rename(2)</a>. No arguments other than a possible exception are given to the completion callback.</p> <h2 id=\"fs_fs_renamesync_oldpath_newpath\">fs.renameSync(oldPath, newPath)</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.21</span> </div>\n<ul> <li>\n<code>oldPath</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>newPath</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> </ul> <p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/rename.2.html\">rename(2)</a>. Returns <code>undefined</code>.</p> <h2 id=\"fs_fs_rmdir_path_callback\">fs.rmdir(path, callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v0.0.2</td> <td>\n<p><span>Added in: v0.0.2</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/rmdir.2.html\">rmdir(2)</a>. No arguments other than a possible exception are given to the completion callback.</p> <h2 id=\"fs_fs_rmdirsync_path\">fs.rmdirSync(path)</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.21</span> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> </ul> <p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/rmdir.2.html\">rmdir(2)</a>. Returns <code>undefined</code>.</p> <h2 id=\"fs_fs_stat_path_callback\">fs.stat(path, callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v0.0.2</td> <td>\n<p><span>Added in: v0.0.2</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/stat.2.html\">stat(2)</a>. The callback gets two arguments <code>(err, stats)</code> where <code>stats</code> is an <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> object.</p> <p>In case of an error, the <code>err.code</code> will be one of <a href=\"errors#errors_common_system_errors\">Common System Errors</a>.</p> <p>Using <code>fs.stat()</code> to check for the existence of a file before calling <code>fs.open()</code>, <code>fs.readFile()</code> or <code>fs.writeFile()</code> is not recommended. Instead, user code should open/read/write the file directly and handle the error raised if the file is not available.</p> <p>To check if a file exists without manipulating it afterwards, <a href=\"#fs_fs_access_path_mode_callback\"><code>fs.access()</code></a> is recommended.</p> <h2 id=\"fs_fs_statsync_path\">fs.statSync(path)</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.21</span> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> </ul> <p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/stat.2.html\">stat(2)</a>. Returns an instance of <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a>.</p> <h2 id=\"fs_fs_symlink_target_path_type_callback\">fs.symlink(target, path[, type], callback)</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.31</span> </div>\n<ul> <li>\n<code>target</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>type</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/symlink.2.html\">symlink(2)</a>. No arguments other than a possible exception are given to the completion callback. The <code>type</code> argument can be set to <code>'dir'</code>, <code>'file'</code>, or <code>'junction'</code> (default is <code>'file'</code>) and is only available on Windows (ignored on other platforms). Note that Windows junction points require the destination path to be absolute. When using <code>'junction'</code>, the <code>target</code> argument will automatically be normalized to absolute path.</p> <p>Here is an example below:</p> <pre data-language=\"js\">fs.symlink('./foo', './new-port', callback);\n</pre> <p>It creates a symbolic link named \"new-port\" that points to \"foo\".</p> <h2 id=\"fs_fs_symlinksync_target_path_type\">fs.symlinkSync(target, path[, type])</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.31</span> </div>\n<ul> <li>\n<code>target</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>type</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/symlink.2.html\">symlink(2)</a>. Returns <code>undefined</code>.</p> <h2 id=\"fs_fs_truncate_path_len_callback\">fs.truncate(path, len, callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v0.8.6</td> <td>\n<p><span>Added in: v0.8.6</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>len</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> default = <code>0</code>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/truncate.2.html\">truncate(2)</a>. No arguments other than a possible exception are given to the completion callback. A file descriptor can also be passed as the first argument. In this case, <code>fs.ftruncate()</code> is called.</p> <h2 id=\"fs_fs_truncatesync_path_len\">fs.truncateSync(path, len)</h2> <div class=\"api_metadata\"> <span>Added in: v0.8.6</span> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>len</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> default = <code>0</code>\n</li> </ul> <p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/truncate.2.html\">truncate(2)</a>. Returns <code>undefined</code>. A file descriptor can also be passed as the first argument. In this case, <code>fs.ftruncateSync()</code> is called.</p> <h2 id=\"fs_fs_unlink_path_callback\">fs.unlink(path, callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v0.0.2</td> <td>\n<p><span>Added in: v0.0.2</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Asynchronous <a href=\"http://man7.org/linux/man-pages/man2/unlink.2.html\">unlink(2)</a>. No arguments other than a possible exception are given to the completion callback.</p> <h2 id=\"fs_fs_unlinksync_path\">fs.unlinkSync(path)</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.21</span> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> </ul> <p>Synchronous <a href=\"http://man7.org/linux/man-pages/man2/unlink.2.html\">unlink(2)</a>. Returns <code>undefined</code>.</p> <h2 id=\"fs_fs_unwatchfile_filename_listener\">fs.unwatchFile(filename[, listener])</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.31</span> </div>\n<ul> <li>\n<code>filename</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>listener</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Stop watching for changes on <code>filename</code>. If <code>listener</code> is specified, only that particular listener is removed. Otherwise, <em>all</em> listeners are removed and you have effectively stopped watching <code>filename</code>.</p> <p>Calling <code>fs.unwatchFile()</code> with a filename that is not being watched is a no-op, not an error.</p> <p><em>Note: <a href=\"#fs_fs_watch_filename_options_listener\"><code>fs.watch()</code></a> is more efficient than <code>fs.watchFile()</code> and <code>fs.unwatchFile()</code>. <code>fs.watch()</code> should be used instead of <code>fs.watchFile()</code> and <code>fs.unwatchFile()</code> when possible.</em></p> <h2 id=\"fs_fs_utimes_path_atime_mtime_callback\">fs.utimes(path, atime, mtime, callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v4.1.0</td> <td>\n<p>Numeric strings, <code>NaN</code> and <code>Infinity</code> are now allowed time specifiers.</p> </td>\n</tr> <tr>\n<td>v0.4.2</td> <td>\n<p><span>Added in: v0.4.2</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>atime</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>mtime</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Change file timestamps of the file referenced by the supplied path.</p> <p>Note: the arguments <code>atime</code> and <code>mtime</code> of the following related functions follow these rules:</p> <ul> <li>The value should be a Unix timestamp in seconds. For example, <code>Date.now()</code> returns milliseconds, so it should be divided by 1000 before passing it in.</li> <li>If the value is a numeric string like <code>'123456789'</code>, the value will get converted to the corresponding number.</li> <li>If the value is <code>NaN</code> or <code>Infinity</code>, the value will get converted to <code>Date.now() / 1000</code>.</li> </ul> <h2 id=\"fs_fs_utimessync_path_atime_mtime\">fs.utimesSync(path, atime, mtime)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v4.1.0</td> <td>\n<p>Numeric strings, <code>NaN</code> and <code>Infinity</code> are now allowed time specifiers.</p> </td>\n</tr> <tr>\n<td>v0.4.2</td> <td>\n<p><span>Added in: v0.4.2</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>atime</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>mtime</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <p>Synchronous version of <a href=\"#fs_fs_futimes_fd_atime_mtime_callback\"><code>fs.utimes()</code></a>. Returns <code>undefined</code>.</p> <h2 id=\"fs_fs_watch_filename_options_listener\">fs.watch(filename[, options][, listener])</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The passed <code>options</code> object will never be modified.</p> </td>\n</tr> <tr>\n<td>v0.5.10</td> <td>\n<p><span>Added in: v0.5.10</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>filename</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>persistent</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Indicates whether the process should continue to run as long as files are being watched. default = <code>true</code>\n</li> <li>\n<code>recursive</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Indicates whether all subdirectories should be watched, or only the current directory. This applies when a directory is specified, and only on supported platforms (See <a href=\"#fs_caveats\">Caveats</a>). default = <code>false</code>\n</li> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Specifies the character encoding to be used for the filename passed to the listener. default = <code>'utf8'</code>\n</li> </ul> </li> <li>\n<code>listener</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Watch for changes on <code>filename</code>, where <code>filename</code> is either a file or a directory. The returned object is a <a href=\"#fs_class_fs_fswatcher\"><code>fs.FSWatcher</code></a>.</p> <p>The second argument is optional. If <code>options</code> is provided as a string, it specifies the <code>encoding</code>. Otherwise <code>options</code> should be passed as an object.</p> <p>The listener callback gets two arguments <code>(eventType, filename)</code>. <code>eventType</code> is either <code>'rename'</code> or <code>'change'</code>, and <code>filename</code> is the name of the file which triggered the event.</p> <p>Note that on most platforms, <code>'rename'</code> is emitted whenever a filename appears or disappears in the directory.</p> <p>Also note the listener callback is attached to the <code>'change'</code> event fired by <a href=\"#fs_class_fs_fswatcher\"><code>fs.FSWatcher</code></a>, but it is not the same thing as the <code>'change'</code> value of <code>eventType</code>.</p> <h3 id=\"fs_caveats\">Caveats</h3>  <p>The <code>fs.watch</code> API is not 100% consistent across platforms, and is unavailable in some situations.</p> <p>The recursive option is only supported on OS X and Windows.</p> <h4 id=\"fs_availability\">Availability</h4>  <p>This feature depends on the underlying operating system providing a way to be notified of filesystem changes.</p> <ul> <li>On Linux systems, this uses <a href=\"http://man7.org/linux/man-pages/man7/inotify.7.html\"><code>inotify</code></a>\n</li> <li>On BSD systems, this uses <a href=\"https://www.freebsd.org/cgi/man.cgi?kqueue\"><code>kqueue</code></a>\n</li> <li>On OS X, this uses <a href=\"https://www.freebsd.org/cgi/man.cgi?kqueue\"><code>kqueue</code></a> for files and <a href=\"https://developer.apple.com/library/mac/documentation/Darwin/Conceptual/FSEvents_ProgGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40005289-CH1-SW1\"><code>FSEvents</code></a> for directories.</li> <li>On SunOS systems (including Solaris and SmartOS), this uses <a href=\"http://illumos.org/man/port_create\"><code>event ports</code></a>.</li> <li>On Windows systems, this feature depends on <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa365465%28v=vs.85%29.aspx\"><code>ReadDirectoryChangesW</code></a>.</li> <li>On Aix systems, this feature depends on <a href=\"https://www.ibm.com/developerworks/aix/library/au-aix_event_infrastructure/\"><code>AHAFS</code></a>, which must be enabled.</li> </ul> <p>If the underlying functionality is not available for some reason, then <code>fs.watch</code> will not be able to function. For example, watching files or directories can be unreliable, and in some cases impossible, on network file systems (NFS, SMB, etc), or host file systems when using virtualization software such as Vagrant, Docker, etc.</p> <p>You can still use <code>fs.watchFile</code>, which uses stat polling, but it is slower and less reliable.</p> <h4 id=\"fs_inodes\">Inodes</h4>  <p>On Linux and OS X systems, <code>fs.watch()</code> resolves the path to an <a href=\"https://en.wikipedia.org/wiki/Inode\">inode</a> and watches the inode. If the watched path is deleted and recreated, it is assigned a new inode. The watch will emit an event for the delete but will continue watching the <em>original</em> inode. Events for the new inode will not be emitted. This is expected behavior.</p> <p>In AIX, save and close of a file being watched causes two notifications - one for adding new content, and one for truncation. Moreover, save and close operations on some platforms cause inode changes that force watch operations to become invalid and ineffective. AIX retains inode for the lifetime of a file, that way though this is different from Linux / OS X, this improves the usability of file watching. This is expected behavior.</p> <h4 id=\"fs_filename_argument\">Filename Argument</h4>  <p>Providing <code>filename</code> argument in the callback is only supported on Linux and Windows. Even on supported platforms, <code>filename</code> is not always guaranteed to be provided. Therefore, don't assume that <code>filename</code> argument is always provided in the callback, and have some fallback logic if it is null.</p> <pre data-language=\"js\">fs.watch('somedir', (eventType, filename) =&gt; {\n  console.log(`event type is: ${eventType}`);\n  if (filename) {\n    console.log(`filename provided: ${filename}`);\n  } else {\n    console.log('filename not provided');\n  }\n});\n</pre> <h2 id=\"fs_fs_watchfile_filename_options_listener\">fs.watchFile(filename[, options], listener)</h2> <div class=\"api_metadata\"> <span>Added in: v0.1.31</span> </div>\n<ul> <li>\n<code>filename</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a>\n</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a><ul> <li>\n<code>persistent</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a>\n</li> <li>\n<code>interval</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> </li> <li>\n<code>listener</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Watch for changes on <code>filename</code>. The callback <code>listener</code> will be called each time the file is accessed.</p> <p>The <code>options</code> argument may be omitted. If provided, it should be an object. The <code>options</code> object may contain a boolean named <code>persistent</code> that indicates whether the process should continue to run as long as files are being watched. The <code>options</code> object may specify an <code>interval</code> property indicating how often the target should be polled in milliseconds. The default is <code>{ persistent: true, interval: 5007 }</code>.</p> <p>The <code>listener</code> gets two arguments the current stat object and the previous stat object:</p> <pre data-language=\"js\">fs.watchFile('message.text', (curr, prev) =&gt; {\n  console.log(`the current mtime is: ${curr.mtime}`);\n  console.log(`the previous mtime was: ${prev.mtime}`);\n});\n</pre> <p>These stat objects are instances of <code>fs.Stat</code>.</p> <p>If you want to be notified when the file was modified, not just accessed, you need to compare <code>curr.mtime</code> and <code>prev.mtime</code>.</p> <p><em>Note: when an <code>fs.watchFile</code> operation results in an <code>ENOENT</code> error, it will invoke the listener once, with all the fields zeroed (or, for dates, the Unix Epoch). In Windows, <code>blksize</code> and <code>blocks</code> fields will be <code>undefined</code>, instead of zero. If the file is created later on, the listener will be called again, with the latest stat objects. This is a change in functionality since v0.10.</em></p> <p><em>Note: <a href=\"#fs_fs_watch_filename_options_listener\"><code>fs.watch()</code></a> is more efficient than <code>fs.watchFile</code> and <code>fs.unwatchFile</code>. <code>fs.watch</code> should be used instead of <code>fs.watchFile</code> and <code>fs.unwatchFile</code> when possible.</em></p> <h2 id=\"fs_fs_write_fd_buffer_offset_length_position_callback\">fs.write(fd, buffer[, offset[, length[, position]]], callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.4.0</td> <td>\n<p>The <code>buffer</code> parameter can now be a <code>Uint8Array</code>.</p> </td>\n</tr> <tr>\n<td>v7.2.0</td> <td>\n<p>The <code>offset</code> and <code>length</code> parameters are optional now.</p> </td>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v0.0.2</td> <td>\n<p><span>Added in: v0.0.2</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>fd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>buffer</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\" class=\"type\">&lt;Uint8Array&gt;</a>\n</li> <li>\n<code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>length</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>position</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Write <code>buffer</code> to the file specified by <code>fd</code>.</p> <p><code>offset</code> determines the part of the buffer to be written, and <code>length</code> is an integer specifying the number of bytes to write.</p> <p><code>position</code> refers to the offset from the beginning of the file where this data should be written. If <code>typeof position !== 'number'</code>, the data will be written at the current position. See <a href=\"http://man7.org/linux/man-pages/man2/pwrite.2.html\">pwrite(2)</a>.</p> <p>The callback will be given three arguments <code>(err, written, buffer)</code> where <code>written</code> specifies how many <em>bytes</em> were written from <code>buffer</code>.</p> <p>Note that it is unsafe to use <code>fs.write</code> multiple times on the same file without waiting for the callback. For this scenario, <code>fs.createWriteStream</code> is strongly recommended.</p> <p>On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.</p> <h2 id=\"fs_fs_write_fd_string_position_encoding_callback\">fs.write(fd, string[, position[, encoding]], callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.2.0</td> <td>\n<p>The <code>position</code> parameter is optional now.</p> </td>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v0.11.5</td> <td>\n<p><span>Added in: v0.11.5</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>fd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>string</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>position</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Write <code>string</code> to the file specified by <code>fd</code>. If <code>string</code> is not a string, then the value will be coerced to one.</p> <p><code>position</code> refers to the offset from the beginning of the file where this data should be written. If <code>typeof position !== 'number'</code> the data will be written at the current position. See <a href=\"http://man7.org/linux/man-pages/man2/pwrite.2.html\">pwrite(2)</a>.</p> <p><code>encoding</code> is the expected string encoding.</p> <p>The callback will receive the arguments <code>(err, written, string)</code> where <code>written</code> specifies how many <em>bytes</em> the passed string required to be written. Note that bytes written is not the same as string characters. See <a href=\"buffer#buffer_class_method_buffer_bytelength_string_encoding\"><code>Buffer.byteLength</code></a>.</p> <p>Unlike when writing <code>buffer</code>, the entire string must be written. No substring may be specified. This is because the byte offset of the resulting data may not be the same as the string offset.</p> <p>Note that it is unsafe to use <code>fs.write</code> multiple times on the same file without waiting for the callback. For this scenario, <code>fs.createWriteStream</code> is strongly recommended.</p> <p>On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.</p> <h2 id=\"fs_fs_writefile_file_data_options_callback\">fs.writeFile(file, data[, options], callback)</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.4.0</td> <td>\n<p>The <code>data</code> parameter can now be a <code>Uint8Array</code>.</p> </td>\n</tr> <tr>\n<td>v7.0.0</td> <td>\n<p>The <code>callback</code> parameter is no longer optional. Not passing it will emit a deprecation warning.</p> </td>\n</tr> <tr>\n<td>v5.0.0</td> <td>\n<p>The <code>file</code> parameter can be a file descriptor now.</p> </td>\n</tr> <tr>\n<td>v0.1.29</td> <td>\n<p><span>Added in: v0.1.29</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>file</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> filename or file descriptor</li> <li>\n<code>data</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\" class=\"type\">&lt;Uint8Array&gt;</a>\n</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a><ul> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type\" class=\"type\">&lt;null&gt;</a> default = <code>'utf8'</code>\n</li> <li>\n<code>mode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> default = <code>0o666</code>\n</li> <li>\n<code>flag</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> default = <code>'w'</code>\n</li> </ul> </li> <li>\n<code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a>\n</li> </ul> <p>Asynchronously writes data to a file, replacing the file if it already exists. <code>data</code> can be a string or a buffer.</p> <p>The <code>encoding</code> option is ignored if <code>data</code> is a buffer. It defaults to <code>'utf8'</code>.</p> <p>Example:</p> <pre data-language=\"js\">fs.writeFile('message.txt', 'Hello Node.js', (err) =&gt; {\n  if (err) throw err;\n  console.log('The file has been saved!');\n});\n</pre> <p>If <code>options</code> is a string, then it specifies the encoding. Example:</p> <pre data-language=\"js\">fs.writeFile('message.txt', 'Hello Node.js', 'utf8', callback);\n</pre> <p>Any specified file descriptor has to support writing.</p> <p>Note that it is unsafe to use <code>fs.writeFile</code> multiple times on the same file without waiting for the callback. For this scenario, <code>fs.createWriteStream</code> is strongly recommended.</p> <p><em>Note: If a file descriptor is specified as the <code>file</code>, it will not be closed automatically.</em></p> <h2 id=\"fs_fs_writefilesync_file_data_options\">fs.writeFileSync(file, data[, options])</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.4.0</td> <td>\n<p>The <code>data</code> parameter can now be a <code>Uint8Array</code>.</p> </td>\n</tr> <tr>\n<td>v5.0.0</td> <td>\n<p>The <code>file</code> parameter can be a file descriptor now.</p> </td>\n</tr> <tr>\n<td>v0.1.29</td> <td>\n<p><span>Added in: v0.1.29</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>file</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> filename or file descriptor</li> <li>\n<code>data</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\" class=\"type\">&lt;Uint8Array&gt;</a>\n</li> <li>\n<code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a><ul> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type\" class=\"type\">&lt;null&gt;</a> default = <code>'utf8'</code>\n</li> <li>\n<code>mode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> default = <code>0o666</code>\n</li> <li>\n<code>flag</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> default = <code>'w'</code>\n</li> </ul> </li> </ul> <p>The synchronous version of <a href=\"#fs_fs_writefile_file_data_options_callback\"><code>fs.writeFile()</code></a>. Returns <code>undefined</code>.</p> <h2 id=\"fs_fs_writesync_fd_buffer_offset_length_position\">fs.writeSync(fd, buffer[, offset[, length[, position]]])</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.4.0</td> <td>\n<p>The <code>buffer</code> parameter can now be a <code>Uint8Array</code>.</p> </td>\n</tr> <tr>\n<td>v7.2.0</td> <td>\n<p>The <code>offset</code> and <code>length</code> parameters are optional now.</p> </td>\n</tr> <tr>\n<td>v0.1.21</td> <td>\n<p><span>Added in: v0.1.21</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>fd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>buffer</code> <a href=\"buffer#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\" class=\"type\">&lt;Uint8Array&gt;</a>\n</li> <li>\n<code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>length</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>position</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> </ul> <h2 id=\"fs_fs_writesync_fd_string_position_encoding\">fs.writeSync(fd, string[, position[, encoding]])</h2> <div class=\"api_metadata\"> <details class=\"changelog\"><summary>History</summary> <table> <tr>\n<th>Version</th>\n<th>Changes</th>\n</tr> <tr>\n<td>v7.2.0</td> <td>\n<p>The <code>position</code> parameter is optional now.</p> </td>\n</tr> <tr>\n<td>v0.11.5</td> <td>\n<p><span>Added in: v0.11.5</span></p> </td>\n</tr> </table> </details> </div>\n<ul> <li>\n<code>fd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>string</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> <li>\n<code>position</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a>\n</li> <li>\n<code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a>\n</li> </ul> <p>Synchronous versions of <a href=\"#fs_fs_write_fd_buffer_offset_length_position_callback\"><code>fs.write()</code></a>. Returns the number of bytes written.</p> <h2 id=\"fs_fs_constants_1\">FS Constants</h2> <p>The following constants are exported by <code>fs.constants</code>. <strong>Note:</strong> Not every constant will be available on every operating system.</p> <h3 id=\"fs_file_access_constants\">File Access Constants</h3> <p>The following constants are meant for use with <a href=\"#fs_fs_access_path_mode_callback\"><code>fs.access()</code></a>.</p> <table> <tr> <th>Constant</th> <th>Description</th> </tr> <tr> <td><code>F_OK</code></td> <td>Flag indicating that the file is visible to the calling process.</td> </tr> <tr> <td><code>R_OK</code></td> <td>Flag indicating that the file can be read by the calling process.</td> </tr> <tr> <td><code>W_OK</code></td> <td>Flag indicating that the file can be written by the calling process.</td> </tr> <tr> <td><code>X_OK</code></td> <td>Flag indicating that the file can be executed by the calling process.</td> </tr> </table> <h3 id=\"fs_file_open_constants\">File Open Constants</h3> <p>The following constants are meant for use with <code>fs.open()</code>.</p> <table> <tr> <th>Constant</th> <th>Description</th> </tr> <tr> <td><code>O_RDONLY</code></td> <td>Flag indicating to open a file for read-only access.</td> </tr> <tr> <td><code>O_WRONLY</code></td> <td>Flag indicating to open a file for write-only access.</td> </tr> <tr> <td><code>O_RDWR</code></td> <td>Flag indicating to open a file for read-write access.</td> </tr> <tr> <td><code>O_CREAT</code></td> <td>Flag indicating to create the file if it does not already exist.</td> </tr> <tr> <td><code>O_EXCL</code></td> <td>Flag indicating that opening a file should fail if the <code>O_CREAT</code> flag is set and the file already exists.</td> </tr> <tr> <td><code>O_NOCTTY</code></td> <td>Flag indicating that if path identifies a terminal device, opening the path shall not cause that terminal to become the controlling terminal for the process (if the process does not already have one).</td> </tr> <tr> <td><code>O_TRUNC</code></td> <td>Flag indicating that if the file exists and is a regular file, and the file is opened successfully for write access, its length shall be truncated to zero.</td> </tr> <tr> <td><code>O_APPEND</code></td> <td>Flag indicating that data will be appended to the end of the file.</td> </tr> <tr> <td><code>O_DIRECTORY</code></td> <td>Flag indicating that the open should fail if the path is not a directory.</td> </tr> <tr> <td><code>O_NOATIME</code></td> <td>Flag indicating reading accesses to the file system will no longer result in an update to the <code>atime</code> information associated with the file. This flag is available on Linux operating systems only.</td> </tr> <tr> <td><code>O_NOFOLLOW</code></td> <td>Flag indicating that the open should fail if the path is a symbolic link.</td> </tr> <tr> <td><code>O_SYNC</code></td> <td>Flag indicating that the file is opened for synchronous I/O.</td> </tr> <tr> <td><code>O_SYMLINK</code></td> <td>Flag indicating to open the symbolic link itself rather than the resource it is pointing to.</td> </tr> <tr> <td><code>O_DIRECT</code></td> <td>When set, an attempt will be made to minimize caching effects of file I/O.</td> </tr> <tr> <td><code>O_NONBLOCK</code></td> <td>Flag indicating to open the file in nonblocking mode when possible.</td> </tr> </table> <h3 id=\"fs_file_type_constants\">File Type Constants</h3> <p>The following constants are meant for use with the <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> object's <code>mode</code> property for determining a file's type.</p> <table> <tr> <th>Constant</th> <th>Description</th> </tr> <tr> <td><code>S_IFMT</code></td> <td>Bit mask used to extract the file type code.</td> </tr> <tr> <td><code>S_IFREG</code></td> <td>File type constant for a regular file.</td> </tr> <tr> <td><code>S_IFDIR</code></td> <td>File type constant for a directory.</td> </tr> <tr> <td><code>S_IFCHR</code></td> <td>File type constant for a character-oriented device file.</td> </tr> <tr> <td><code>S_IFBLK</code></td> <td>File type constant for a block-oriented device file.</td> </tr> <tr> <td><code>S_IFIFO</code></td> <td>File type constant for a FIFO/pipe.</td> </tr> <tr> <td><code>S_IFLNK</code></td> <td>File type constant for a symbolic link.</td> </tr> <tr> <td><code>S_IFSOCK</code></td> <td>File type constant for a socket.</td> </tr> </table> <h3 id=\"fs_file_mode_constants\">File Mode Constants</h3> <p>The following constants are meant for use with the <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> object's <code>mode</code> property for determining the access permissions for a file.</p> <table> <tr> <th>Constant</th> <th>Description</th> </tr> <tr> <td><code>S_IRWXU</code></td> <td>File mode indicating readable, writable and executable by owner.</td> </tr> <tr> <td><code>S_IRUSR</code></td> <td>File mode indicating readable by owner.</td> </tr> <tr> <td><code>S_IWUSR</code></td> <td>File mode indicating writable by owner.</td> </tr> <tr> <td><code>S_IXUSR</code></td> <td>File mode indicating executable by owner.</td> </tr> <tr> <td><code>S_IRWXG</code></td> <td>File mode indicating readable, writable and executable by group.</td> </tr> <tr> <td><code>S_IRGRP</code></td> <td>File mode indicating readable by group.</td> </tr> <tr> <td><code>S_IWGRP</code></td> <td>File mode indicating writable by group.</td> </tr> <tr> <td><code>S_IXGRP</code></td> <td>File mode indicating executable by group.</td> </tr> <tr> <td><code>S_IRWXO</code></td> <td>File mode indicating readable, writable and executable by others.</td> </tr> <tr> <td><code>S_IROTH</code></td> <td>File mode indicating readable by others.</td> </tr> <tr> <td><code>S_IWOTH</code></td> <td>File mode indicating writable by others.</td> </tr> <tr> <td><code>S_IXOTH</code></td> <td>File mode indicating executable by others.</td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Joyent, Inc. and other Node contributors<br>Licensed under the MIT License.<br>Node.js is a trademark of Joyent, Inc. and is used with its permission.<br>We are not endorsed by or affiliated with Joyent.<br>\n    <a href=\"https://nodejs.org/dist/latest-v7.x/docs/api/fs.html\" class=\"_attribution-link\">https://nodejs.org/dist/latest-v7.x/docs/api/fs.html</a>\n  </p>\n</div>\n"}